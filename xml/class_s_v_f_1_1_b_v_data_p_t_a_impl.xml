<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_b_v_data_p_t_a_impl" kind="class" language="C++" prot="public">
    <compoundname>SVF::BVDataPTAImpl</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_pointer_analysis" prot="public" virt="non-virtual">SVF::PointerAnalysis</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_andersen_base" prot="public" virt="non-virtual">SVF::AndersenBase</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_flow_d_d_a" prot="public" virt="non-virtual">SVF::FlowDDA</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_flow_sensitive" prot="public" virt="non-virtual">SVF::FlowSensitive</derivedcompoundref>
    <includes refid="_pointer_analysis_impl_8h" local="no">PointerAnalysisImpl.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee07488c4d53551826439d79b28e2e6d" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTDataTy</ref> *</type>
        <definition>PTDataTy* SVF::BVDataPTAImpl::ptD</definition>
        <argsstring></argsstring>
        <name>ptD</name>
        <briefdescription>
<para>Points-to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="195" column="14" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const PointsTo &amp;</type>
        <definition>virtual const PointsTo&amp; SVF::BVDataPTAImpl::getPts</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec">getPts</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_steensgaard_1adbcb9af660ab9bb0202bd32342280486">getPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get points-to and reverse points-to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="78" column="35" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const NodeSet &amp;</type>
        <definition>virtual const NodeSet&amp; SVF::BVDataPTAImpl::getRevPts</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>getRevPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280">getRevPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given an object, get all the nodes having whose pointsto contains the object. Similar to getPts, this also needs to be implemented in child classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="82" column="34" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4909696c946cf6aba12542ec51766b64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::BVDataPTAImpl::clearPts</definition>
        <argsstring>(NodeID id, NodeID element)</argsstring>
        <name>clearPts</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Remove element from the points-to set of id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="89" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1afdb10c2cce4935156566ea1c2daf9ea9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::BVDataPTAImpl::clearFullPts</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>clearFullPts</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Clear points-to set of id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="95" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::BVDataPTAImpl::unionPts</definition>
        <argsstring>(NodeID id, const PointsTo &amp;target)</argsstring>
        <name>unionPts</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1ab7dadfd4d810be4863f03ed996b3b3c4">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_steensgaard_1a61524c5a3521939b1546c78c68730c20">unionPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Union/add points-to. Add the reverse points-to for node collapse purpose To be noted that adding reverse pts might incur 10% total overhead during solving </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="103" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad5e657b856681a534a8990df35ea08d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::BVDataPTAImpl::unionPts</definition>
        <argsstring>(NodeID id, NodeID ptd)</argsstring>
        <name>unionPts</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a8da98a9d33a6e9be329309f4af65e969">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_steensgaard_1afcb7f051f50b65a09ec2bc065bb70735">unionPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="107" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af68485a2208553579f9c2e4b2cb20cff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::BVDataPTAImpl::addPts</definition>
        <argsstring>(NodeID id, NodeID ptd)</argsstring>
        <name>addPts</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="111" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4426df37aeabeb94d301373b55a53c20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::BVDataPTAImpl::clearAllPts</definition>
        <argsstring>()</argsstring>
        <name>clearAllPts</name>
        <briefdescription>
<para>Clear all data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="118" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BVDataPTAImpl::expandFIObjs</definition>
        <argsstring>(const PointsTo &amp;pts, PointsTo &amp;expandedPts)</argsstring>
        <name>expandFIObjs</name>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3af0297eb75ac4009433be44bb286d30">expandFIObjs</reimplementedby>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>PointsTo &amp;</type>
          <declname>expandedPts</declname>
        </param>
        <briefdescription>
<para>Expand FI objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Expand all fields of an aggregate in all points-to sets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="124" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="56" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25c68f9d2b88437778e854ff0d741d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BVDataPTAImpl::writeToFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>writeToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Interface for analysis result storage on filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Store pointer analysis result into a file. It includes the points-to relations, and all <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> nodes including those created when solving <ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref>&apos;s constraints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="128" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="73" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a290501006cb700db0e07dc577429c928" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BVDataPTAImpl::readFromFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>readFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load pointer analysis result form a file. It populates <ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> with the points-to data, and updates <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> with the <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> offset nodes created during <ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref>&apos;s solving stage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="129" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="139" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AliasResult</type>
        <definition>AliasResult BVDataPTAImpl::alias</definition>
        <argsstring>(const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1">alias</reimplements>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocA</declname>
        </param>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocB</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Location infos. </para>
        </briefdescription>
        <detaileddescription>
<para>Return alias results based on our points-to/alias analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="199" column="25" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AliasResult</type>
        <definition>AliasResult BVDataPTAImpl::alias</definition>
        <argsstring>(const Value *V1, const Value *V2)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8">alias</reimplements>
        <param>
          <type>const Value *</type>
          <declname>V1</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>V2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Value infos. </para>
        </briefdescription>
        <detaileddescription>
<para>Return alias results based on our points-to/alias analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="203" column="25" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AliasResult</type>
        <definition>AliasResult BVDataPTAImpl::alias</definition>
        <argsstring>(NodeID node1, NodeID node2)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf">alias</reimplements>
        <param>
          <type>NodeID</type>
          <declname>node1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>node2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given PAGNodeID. </para>
        </briefdescription>
        <detaileddescription>
<para>Return alias results based on our points-to/alias analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="207" column="25" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25720f154731a8c745da10aa76ab8517" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AliasResult</type>
        <definition>AliasResult BVDataPTAImpl::alias</definition>
        <argsstring>(const PointsTo &amp;pts1, const PointsTo &amp;pts2)</argsstring>
        <name>alias</name>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts1</declname>
          <defname>p1</defname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts2</declname>
          <defname>p2</defname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given two pts. </para>
        </briefdescription>
        <detaileddescription>
<para>Return alias results based on our points-to/alias analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="210" column="25" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="316" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::BVDataPTAImpl::dumpCPts</definition>
        <argsstring>()</argsstring>
        <name>dumpCPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1ad409cbf61271743394b9e5868f3fd197">dumpCPts</reimplements>
        <briefdescription>
<para>dump and debug, print out conditional pts </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="214" column="18" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BVDataPTAImpl::dumpTopLevelPtsTo</definition>
        <argsstring>()</argsstring>
        <name>dumpTopLevelPtsTo</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a627bdc95485fd65e8846fcaa5e89559f">dumpTopLevelPtsTo</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a43858bd242c7f2c5f33c3c0f6445376a">dumpTopLevelPtsTo</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump points-to of each pag node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="219" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="212" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BVDataPTAImpl::dumpAllPts</definition>
        <argsstring>()</argsstring>
        <name>dumpAllPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a861554c2fdeaa406131c2c920b4c7908">dumpAllPts</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump all points-to including top-level (<ref refid="class_s_v_f_1_1_val_p_n" kindref="compound">ValPN</ref>) and address-taken (<ref refid="class_s_v_f_1_1_obj_p_n" kindref="compound">ObjPN</ref>) variables </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="221" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="245" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aa534e475fa34fa322c567bc376a3da70" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::BVDataPTAImpl::updateCallGraph</definition>
        <argsstring>(const CallSiteToFunPtrMap &amp;)</argsstring>
        <name>updateCallGraph</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a6c60b761ddf3d6bf08c8a9c3f6fd9f0b">updateCallGraph</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a512c636bdaafe6a3ac8f0cc29392c573">updateCallGraph</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_1a9d81537ec20196315a9a2541477ec5bf">updateCallGraph</reimplementedby>
        <param>
          <type>const CallSiteToFunPtrMap &amp;</type>
        </param>
        <briefdescription>
<para>Update callgraph. This should be implemented by its subclass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="135" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae94cea78b71fb75837ee2a17b5ed0e81" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTDataTy</ref> *</type>
        <definition>PTDataTy* SVF::BVDataPTAImpl::getPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getPTDataTy</name>
        <briefdescription>
<para>Get points-to data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="142" column="21" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ab9c0bb439f98ae11dd178148109697ab" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_diff_p_t_data" kindref="compound">DiffPTDataTy</ref> *</type>
        <definition>DiffPTDataTy* SVF::BVDataPTAImpl::getDiffPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getDiffPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="147" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a642613e98982259183d3f34a97f05502" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_f_p_t_data" kindref="compound">DFPTDataTy</ref> *</type>
        <definition>DFPTDataTy* SVF::BVDataPTAImpl::getDFPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getDFPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="154" column="23" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acbb979edee9427efa2a7c0dbd881c483" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mutable_d_f_p_t_data" kindref="compound">MutDFPTDataTy</ref> *</type>
        <definition>MutDFPTDataTy* SVF::BVDataPTAImpl::getMutDFPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getMutDFPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="161" column="26" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4859864a4c72d5e04c10305e4579e8ee" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_versioned_p_t_data" kindref="compound">VersionedPTDataTy</ref> *</type>
        <definition>VersionedPTDataTy* SVF::BVDataPTAImpl::getVersionedPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getVersionedPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="168" column="30" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ac81e18d470067445f48add54c890e081" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::BVDataPTAImpl::hasPtsMap</definition>
        <argsstring>(void) const</argsstring>
        <name>hasPtsMap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="175" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4ff54c9b3e5aee923a0a0f7d879b878c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MutPTDataTy::PtsMap &amp;</type>
        <definition>const MutPTDataTy::PtsMap&amp; SVF::BVDataPTAImpl::getPtsMap</definition>
        <argsstring>() const</argsstring>
        <name>getPtsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="180" column="47" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="180" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a9830d4676fd424b633f8e4d918734296" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BVDataPTAImpl::onTheFlyCallGraphSolve</definition>
        <argsstring>(const CallSiteToFunPtrMap &amp;callsites, CallEdgeMap &amp;newEdges)</argsstring>
        <name>onTheFlyCallGraphSolve</name>
        <param>
          <type>const CallSiteToFunPtrMap &amp;</type>
          <declname>callsites</declname>
        </param>
        <param>
          <type>CallEdgeMap &amp;</type>
          <declname>newEdges</declname>
        </param>
        <briefdescription>
<para>On the fly call graph construction. </para>
        </briefdescription>
        <detaileddescription>
<para>On the fly call graph construction callsites is candidate indirect callsites need to be analyzed based on points-to results newEdges is the new indirect call edges discovered </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="191" column="18" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="268" bodyend="284"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1addd6587f05704d15788d21fd09e1f33f" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef PTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::PTDataTy</definition>
        <argsstring></argsstring>
        <name>PTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="45" column="20" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aead9cb72160c66589183f846e42bc1f4" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_mutable_p_t_data" kindref="compound">MutablePTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef MutablePTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::MutPTDataTy</definition>
        <argsstring></argsstring>
        <name>MutPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="46" column="27" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abfe8dd0e3fceb96c3698cc13718108fe" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_diff_p_t_data" kindref="compound">DiffPTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef DiffPTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::DiffPTDataTy</definition>
        <argsstring></argsstring>
        <name>DiffPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="47" column="24" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abe0d9d198f140ef89590e1b403a85c5d" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_mutable_diff_p_t_data" kindref="compound">MutableDiffPTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef MutableDiffPTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::MutDiffPTDataTy</definition>
        <argsstring></argsstring>
        <name>MutDiffPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="48" column="31" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1d82036ee76b86647b7623a249cde7ac" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_d_f_p_t_data" kindref="compound">DFPTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef DFPTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::DFPTDataTy</definition>
        <argsstring></argsstring>
        <name>DFPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="49" column="22" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae5354cb6f5f9a78075f306c109a0de68" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_mutable_d_f_p_t_data" kindref="compound">MutableDFPTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef MutableDFPTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::MutDFPTDataTy</definition>
        <argsstring></argsstring>
        <name>MutDFPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="50" column="29" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a67b0ccd84eb61cb0e3a076c9a7eda72a" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data" kindref="compound">IncMutableDFPTData</ref>&lt; NodeID, NodeID, PointsTo &gt;</type>
        <definition>typedef IncMutableDFPTData&lt;NodeID, NodeID, PointsTo&gt; SVF::BVDataPTAImpl::IncMutDFPTDataTy</definition>
        <argsstring></argsstring>
        <name>IncMutDFPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="51" column="32" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1fd1285e201d6c98d3b2d00cf0163bd7" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_versioned_p_t_data" kindref="compound">VersionedPTData</ref>&lt; NodeID, NodeID, PointsTo, VersionedVar &gt;</type>
        <definition>typedef VersionedPTData&lt;NodeID, NodeID, PointsTo, VersionedVar&gt; SVF::BVDataPTAImpl::VersionedPTDataTy</definition>
        <argsstring></argsstring>
        <name>VersionedPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="52" column="29" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acec222de13d274a8a0aabd508049162e" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_mutable_versioned_p_t_data" kindref="compound">MutableVersionedPTData</ref>&lt; NodeID, NodeID, PointsTo, VersionedVar &gt;</type>
        <definition>typedef MutableVersionedPTData&lt;NodeID, NodeID, PointsTo, VersionedVar&gt; SVF::BVDataPTAImpl::MutVersionedPTDataTy</definition>
        <argsstring></argsstring>
        <name>MutVersionedPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="53" column="36" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aff20835f6fd320ccd2d2596db7945711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BVDataPTAImpl::BVDataPTAImpl</definition>
        <argsstring>(PAG *pag, PointerAnalysis::PTATY type, bool alias_check=true)</argsstring>
        <name>BVDataPTAImpl</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
          <declname>pag</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PointerAnalysis::PTATY</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alias_check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="56" column="5" bodyfile="lib/MemoryModel/PointerAnalysisImpl.cpp" bodystart="27" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a06f211184d3e75f0ca351a4b8092a478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::BVDataPTAImpl::~BVDataPTAImpl</definition>
        <argsstring>()</argsstring>
        <name>~BVDataPTAImpl</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="59" column="13" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af783769050ab663ad4bb93f901f01a6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::BVDataPTAImpl::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Release memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="70" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="70" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a6ba68138c10d1fbe5be6346c8dfeca74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::BVDataPTAImpl::classof</definition>
        <argsstring>(const PointerAnalysis *pta)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="64" column="24" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Pointer analysis implementation which uses bit vector based points-to data structure </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="14">
        <label>SVF::FlowDDA</label>
        <link refid="class_s_v_f_1_1_flow_d_d_a"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>SVF::VersionedFlowSensitive</label>
        <link refid="class_s_v_f_1_1_versioned_flow_sensitive"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>SVF::TypeAnalysis</label>
        <link refid="class_s_v_f_1_1_type_analysis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>SVF::AndersenSCD</label>
        <link refid="class_s_v_f_1_1_andersen_s_c_d"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::AndersenSFR</label>
        <link refid="class_s_v_f_1_1_andersen_s_f_r"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::AndersenBase</label>
        <link refid="class_s_v_f_1_1_andersen_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::AndersenHCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_c_d"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::AndersenLCD</label>
        <link refid="class_s_v_f_1_1_andersen_l_c_d"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::AndersenHLCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_l_c_d"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::AndersenWaveDiffWithType</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff_with_type"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>SVF::Steensgaard</label>
        <link refid="class_s_v_f_1_1_steensgaard"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SVF::AndersenWaveDiff</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::Andersen</label>
        <link refid="class_s_v_f_1_1_andersen"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>SVF::FlowSensitive</label>
        <link refid="class_s_v_f_1_1_flow_sensitive"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>SVF::FSMPTA</label>
        <link refid="class_s_v_f_1_1_f_s_m_p_t_a"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>SVF::FlowSensitiveTBHC</label>
        <link refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="8">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="10">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="13">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="9">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="5">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="4">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="12">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="1">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="3" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MemoryModel/PointerAnalysisImpl.h" line="41" column="1" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="42" bodyend="223"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ADAPTFSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ADAPTFSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af68485a2208553579f9c2e4b2cb20cff" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>addPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25720f154731a8c745da10aa76ab8517" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>alias_validation</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AliasAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestFailMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestFailMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestFailNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestFailNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestMustAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestMustAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestPartialAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>aliasTestPartialAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6" prot="public" virt="pure-virtual"><scope>SVF::BVDataPTAImpl</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>Andersen_BASE</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>Andersen_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenHCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenHLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenSCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenSFR_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenWaveDiff_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>AndersenWaveDiffWithType_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>BaseImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>BVDataImpl</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aff20835f6fd320ccd2d2596db7945711" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>BVDataPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>callGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>callGraphSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>chgraph</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a6ba68138c10d1fbe5be6346c8dfeca74" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4426df37aeabeb94d301373b55a53c20" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>clearAllPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1afdb10c2cce4935156566ea1c2daf9ea9" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>clearFullPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4909696c946cf6aba12542ec51766b64" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a" prot="public" virt="virtual" ambiguityscope="SVF::PointerAnalysis::"><scope>SVF::BVDataPTAImpl</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>computeDDAPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CondImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>connectVCallToVFns</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>containBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>containConstantNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CSCallString_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>CSSummary_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>Cxt_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>Default_PTA</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af783769050ab663ad4bb93f901f01a6d" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1d82036ee76b86647b7623a249cde7ac" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>DFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abfe8dd0e3fceb96c3698cc13718108fe" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>DiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>disablePrintStat</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpAllPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpAllTypes</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpCPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpStat</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>dumpTopLevelPtsTo</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>expandFIObjs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FieldS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>finalize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FlowS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FSDATAFLOW_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FSSPARSE_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FSTBHC_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getAllValidPtrs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getAnalysisTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getBaseObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getCallGraphSCCRepNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getCHGraph</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a642613e98982259183d3f34a97f05502" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ab9c0bb439f98ae11dd178148109697ab" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getDiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getFunPtr</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getIndCallMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acbb979edee9427efa2a7c0dbd881c483" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getMutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getNumOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getPTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae94cea78b71fb75837ee2a17b5ed0e81" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4ff54c9b3e5aee923a0a0f7d879b878c" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getPtsMap</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getTypeSystem</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4859864a4c72d5e04c10305e4579e8ee" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getVersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getVFnsFromCHA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>getVFnsFromPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>hasIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ac81e18d470067445f48add54c890e081" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>hasPtsMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>icfg</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a67b0ccd84eb61cb0e3a076c9a7eda72a" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>IncMutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>initialize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>inSameCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isArrayMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isHeapMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isInRecursion</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isLocalVarInRecursiveFun</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>isNonPointerObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>matchArgs</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae5354cb6f5f9a78075f306c109a0de68" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>MutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abe0d9d198f140ef89590e1b403a85c5d" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>MutDiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aead9cb72160c66589183f846e42bc1f4" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>MutPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acec222de13d274a8a0aabd508049162e" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>MutVersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a9830d4676fd424b633f8e4d918734296" prot="protected" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>onTheFlyCallGraphSolve</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>OnTheFlyIterBudgetForStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>PathS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>PointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>print_stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>printStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ptaCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>PTAImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ptaImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>PTAName</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ptaTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>PTATY</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee07488c4d53551826439d79b28e2e6d" prot="private" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>ptD</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1addd6587f05704d15788d21fd09e1f33f" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>PTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a290501006cb700db0e07dc577429c928" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>readFromFile</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>resetObjFieldSensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>resolveCPPIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>resolveIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>setObjFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>Steensgaard_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>svfMod</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>TypeCPP_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed" prot="protected" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>typeSystem</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad5e657b856681a534a8990df35ea08d0" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aa534e475fa34fa322c567bc376a3da70" prot="protected" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc" prot="protected" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>validateExpectedFailureTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8" prot="protected" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>validateSuccessTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df" prot="protected" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>validateTests</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1fd1285e201d6c98d3b2d00cf0163bd7" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>VersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>VFS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>VFunSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca" prot="public" virt="non-virtual"><scope>SVF::BVDataPTAImpl</scope><name>VTableSet</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25c68f9d2b88437778e854ff0d741d1b" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>writeToFile</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a06f211184d3e75f0ca351a4b8092a478" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>~BVDataPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c" prot="public" virt="virtual"><scope>SVF::BVDataPTAImpl</scope><name>~PointerAnalysis</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
