<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_s_v_f_basic_types_8h" kind="file" language="C++">
    <compoundname>SVFBasicTypes.h</compoundname>
    <includes local="no">llvm/ADT/SparseBitVector.h</includes>
    <includes local="no">llvm/Support/raw_ostream.h</includes>
    <includes local="no">llvm/Support/CommandLine.h</includes>
    <includes local="no">llvm/ADT/StringMap.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">list</includes>
    <includes local="no">set</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">stack</includes>
    <includes local="no">deque</includes>
    <includedby refid="_basic_types_8h" local="yes">include/Util/BasicTypes.h</includedby>
    <includedby refid="_node_i_d_allocator_8h" local="yes">include/Util/NodeIDAllocator.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>list</label>
      </node>
      <node id="4">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="3">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="9">
        <label>unordered_set</label>
      </node>
      <node id="2">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="12">
        <label>stack</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="5">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="13">
        <label>deque</label>
      </node>
      <node id="11">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>include/Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>set</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="78">
        <label>include/SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>include/MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="54">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>include/WPA/WPASolver.h</label>
        <link refid="_w_p_a_solver_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>include/MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>include/SVF-FE/DCHG.h</label>
        <link refid="_d_c_h_g_8h_source"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>include/Util/CFLSolver.h</label>
        <link refid="_c_f_l_solver_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>include/Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>include/SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>include/Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>include/Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>include/Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>include/Graphs/PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>include/MemoryModel/PTAStat.h</label>
        <link refid="_p_t_a_stat_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="96">
        <label>include/WPA/WPAFSSolver.h</label>
        <link refid="_w_p_a_f_s_solver_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/Graphs/ICFGStat.h</label>
        <link refid="_i_c_f_g_stat_8h_source"/>
      </node>
      <node id="2">
        <label>include/Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>include/SVF-FE/Graph2Json.h</label>
        <link refid="_graph2_json_8h_source"/>
      </node>
      <node id="56">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="43">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="91">
        <label>include/Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="59">
        <label>include/Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>include/SVF-FE/BreakConstantExpr.h</label>
        <link refid="_break_constant_expr_8h_source"/>
      </node>
      <node id="90">
        <label>include/Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/WPA/CSC.h</label>
        <link refid="_c_s_c_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="33">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="32">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="49">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>include/SABER/SaberAnnotator.h</label>
        <link refid="_saber_annotator_8h_source"/>
      </node>
      <node id="52">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>include/Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>include/MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>include/SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="72">
        <label>include/DDA/DDAStat.h</label>
        <link refid="_d_d_a_stat_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>include/Util/Annotator.h</label>
        <link refid="_annotator_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>include/Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>include/MemoryModel/PTAType.h</label>
        <link refid="_p_t_a_type_8h_source"/>
      </node>
      <node id="65">
        <label>include/Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>include/MTA/MTAStat.h</label>
        <link refid="_m_t_a_stat_8h_source"/>
      </node>
      <node id="20">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="35">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="42">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>include/Graphs/PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>include/MTA/MTA.h</label>
        <link refid="_m_t_a_8h_source"/>
      </node>
      <node id="26">
        <label>include/MemoryModel/PAGBuilderFromFile.h</label>
        <link refid="_p_a_g_builder_from_file_8h_source"/>
      </node>
      <node id="28">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="17">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="1">
        <label>include/Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>include/SVF-FE/CHG.h</label>
        <link refid="_c_h_g_8h_source"/>
      </node>
      <node id="51">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="64">
        <label>include/Graphs/ExternalPAG.h</label>
        <link refid="_external_p_a_g_8h_source"/>
      </node>
      <node id="21">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="46">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>include/Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="62">
        <label>include/SABER/SaberCheckerAPI.h</label>
        <link refid="_saber_checker_a_p_i_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="85">
        <label>include/SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>include/SVF-FE/PAGBuilder.h</label>
        <link refid="_p_a_g_builder_8h_source"/>
      </node>
      <node id="79">
        <label>include/SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>include/SVF-FE/ICFGBuilder.h</label>
        <link refid="_i_c_f_g_builder_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>include/Util/CxtStmt.h</label>
        <link refid="_cxt_stmt_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_s_v_f_value" prot="public">SVF::SVFValue</innerclass>
    <innerclass refid="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" prot="public">std::hash&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1hash_3_01_s_v_f_1_1_small_vector_3_01_t_00_01_n_01_4_01_4" prot="public">std::hash&lt; SVF::SmallVector&lt; T, N &gt; &gt;</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a173ce1b9b505fdadf5613b663749d3b0" prot="public" static="no">
        <name>DBOUT</name>
        <param><defname>TYPE</defname></param>
        <param><defname>X</defname></param>
        <initializer>DEBUG_WITH_TYPE(TYPE, X)</initializer>
        <briefdescription>
<para>LLVM debug macros, define type of your DEBUG model of each pass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="104" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a6c9e2209a2c38607a9e3b7fab242886a" prot="public" static="no">
        <name>DOSTAT</name>
        <param><defname>X</defname></param>
        <initializer>X</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="105" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1ab6f41e9db3675dc689c5492418885041" prot="public" static="no">
        <name>DOTIMESTAT</name>
        <param><defname>X</defname></param>
        <initializer>X</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="106" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a2c64190a065f342897573a3ef4973adb" prot="public" static="no">
        <name>DGENERAL</name>
        <initializer>&quot;general&quot;</initializer>
        <briefdescription>
<para>General debug flag is for each phase of a pass, it is often in a colorful output format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="109" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a7a295e02c56a93cf9206dd9d3b18dd17" prot="public" static="no">
        <name>DPAGBuild</name>
        <initializer>&quot;pag&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="111" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1ad46a0423f8709692e1bb0f0fa5b1ca2f" prot="public" static="no">
        <name>DMemModel</name>
        <initializer>&quot;mm&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="112" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1aaff570bb354b8519a4852ffda413af7c" prot="public" static="no">
        <name>DMemModelCE</name>
        <initializer>&quot;mmce&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="113" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1aa97040d501d68863c7f0c93ed7514857" prot="public" static="no">
        <name>DCOMModel</name>
        <initializer>&quot;comm&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="114" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a40845b3027a1237076aa8297ca39e730" prot="public" static="no">
        <name>DDDA</name>
        <initializer>&quot;dda&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="115" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a395c9d15b59b8c057f859855f0405d7b" prot="public" static="no">
        <name>DDumpPT</name>
        <initializer>&quot;dumppt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="116" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a12848bc67564a74a3f203cee9de2eb29" prot="public" static="no">
        <name>DRefinePT</name>
        <initializer>&quot;sbpt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="117" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a500788b9fb425915fa4330d72142aec9" prot="public" static="no">
        <name>DCache</name>
        <initializer>&quot;cache&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="118" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a45d9233db3cad59f4f72b7c573bae180" prot="public" static="no">
        <name>DWPA</name>
        <initializer>&quot;wpa&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="119" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a385e9d80a013723304b329454d32e8b1" prot="public" static="no">
        <name>DMSSA</name>
        <initializer>&quot;mssa&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="120" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1abf3a5def3f319733214fa5f595b39827" prot="public" static="no">
        <name>DInstrument</name>
        <initializer>&quot;ins&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="121" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1adbfc4364261f019dc6cf33234a5177d2" prot="public" static="no">
        <name>DAndersen</name>
        <initializer>&quot;ander&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="122" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a817abc424f7cfcdec5954c7807970f36" prot="public" static="no">
        <name>DSaber</name>
        <initializer>&quot;saber&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="123" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a217a1ccdaec1abb103cf6b0373631234" prot="public" static="no">
        <name>DMTA</name>
        <initializer>&quot;mta&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="124" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a263149d980e5c3165dfe8750bfac3223" prot="public" static="no">
        <name>DCHA</name>
        <initializer>&quot;cha&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="125" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1a1aeda3370621dc00e9a0fe8e7aabc736" prot="public" static="no">
        <name>TIMEINTERVAL</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="131" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_v_f_basic_types_8h_1af091e361d7961cb895ff2101eceed953" prot="public" static="no">
        <name>CLOCK_IN_MS</name>
        <param></param>
        <initializer>(clock() / (CLOCKS_PER_SEC / TIMEINTERVAL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="132" column="9" bodyfile="include/Util/SVFBasicTypes.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>SVFBasicTypes.h<sp/>--<sp/>Basic<sp/>types<sp/>used<sp/>in<sp/>SVF-------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>BasicTypes.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>1,<sp/>2014</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_UTIL_SVFBASICTYPES_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_UTIL_SVFBASICTYPES_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;llvm/ADT/SparseBitVector.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>points-to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;llvm/Support/raw_ostream.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;llvm/Support/CommandLine.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>command<sp/>line<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;llvm/ADT/StringMap.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>StringMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u32_t;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>u64_t;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>s32_t;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Size_t;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>u32_t<sp/>NodeID;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>u32_t<sp/>EdgeID;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>SymID;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CallSiteID;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ThreadID;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Version;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>llvm::SparseBitVector&lt;&gt;<sp/>NodeBS;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>NodeBS<sp/>PointsTo;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PointsTo<sp/>AliasSet;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>std::hash&lt;Key&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KeyEqual<sp/>=<sp/>std::equal_to&lt;Key&gt;,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;Key&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Set<sp/>=<sp/>std::unordered_set&lt;Key,<sp/>Hash,<sp/>KeyEqual,<sp/>Allocator&gt;;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>std::hash&lt;Key&gt;,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KeyEqual<sp/>=<sp/>std::equal_to&lt;Key&gt;,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;std::pair&lt;const<sp/>Key,<sp/>Value&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Map<sp/>=<sp/>std::unordered_map&lt;Key,<sp/>Value,<sp/>Hash,<sp/>KeyEqual,<sp/>Allocator&gt;;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>std::less&lt;Key&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;Key&gt;&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OrderedSet<sp/>=<sp/>std::set&lt;Key,<sp/>Compare,<sp/>Allocator&gt;;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>std::less&lt;Key&gt;,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;std::pair&lt;const<sp/>Key,<sp/>Value&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OrderedMap<sp/>=<sp/>std::map&lt;Key,<sp/>Value,<sp/>Compare,<sp/>Allocator&gt;;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SmallVector<sp/>=<sp/>llvm::SmallVector&lt;T,<sp/>N&gt;;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;NodeID,<sp/>NodeID&gt;<sp/>NodePair;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;NodeID,<sp/>Version&gt;<sp/>VersionedVar;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>OrderedSet&lt;NodeID&gt;<sp/>OrderedNodeSet;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;NodeID&gt;<sp/>NodeSet;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;NodePair&gt;<sp/>NodePairSet;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;NodePair,NodeID&gt;<sp/>NodePairMap;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;NodeID&gt;<sp/>NodeVector;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;EdgeID&gt;<sp/>EdgeVector;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::stack&lt;NodeID&gt;<sp/>NodeStack;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;NodeID&gt;<sp/>NodeList;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::deque&lt;NodeID&gt;<sp/>NodeDeque;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SmallVector&lt;u32_t,16&gt;<sp/>SmallVector16;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SmallVector&lt;u32_t,8&gt;<sp/>SmallVector8;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>NodeSet<sp/>EdgeSet;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SmallVector16<sp/>CallStrCxt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>llvm::StringMap&lt;u32_t&gt;<sp/>StringMap;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">#define<sp/>DBOUT(TYPE,<sp/>X)<sp/><sp/>DEBUG_WITH_TYPE(TYPE,<sp/>X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOSTAT(X)<sp/><sp/><sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOTIMESTAT(X)<sp/><sp/><sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor">#define<sp/>DGENERAL<sp/>&quot;general&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DPAGBuild<sp/>&quot;pag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMemModel<sp/>&quot;mm&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMemModelCE<sp/>&quot;mmce&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DCOMModel<sp/>&quot;comm&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDDA<sp/>&quot;dda&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDumpPT<sp/>&quot;dumppt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DRefinePT<sp/>&quot;sbpt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DCache<sp/>&quot;cache&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DWPA<sp/>&quot;wpa&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMSSA<sp/>&quot;mssa&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DInstrument<sp/>&quot;ins&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAndersen<sp/>&quot;ander&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DSaber<sp/>&quot;saber&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMTA<sp/>&quot;mta&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DCHA<sp/>&quot;cha&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>Number<sp/>of<sp/>clock<sp/>ticks<sp/>per<sp/>second.<sp/>A<sp/>clock<sp/>tick<sp/>is<sp/>the<sp/>unit<sp/>by<sp/>which</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>processor<sp/>time<sp/>is<sp/>measured<sp/>and<sp/>is<sp/>returned<sp/>by<sp/>&apos;clock&apos;.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMEINTERVAL<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLOCK_IN_MS()<sp/>(clock()<sp/>/<sp/>(CLOCKS_PER_SEC<sp/>/<sp/>TIMEINTERVAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="class_s_v_f_1_1_s_v_f_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref></highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>s32_t<sp/>GNodeK;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>SVFValKind</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFVal,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFFunc,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFGlob,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFBB,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFInst,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>value;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>GNodeK<sp/>kind;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154" refid="class_s_v_f_1_1_s_v_f_value_1ac42927fed1c213852daceb902478d9c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_s_v_f_value_1ac42927fed1c213852daceb902478d9c8" kindref="member">SVFValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>val,<sp/>SVFValKind<sp/>k):<sp/>value(val),<sp/>kind(k)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GNodeK<sp/><ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="160"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kind;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>and<sp/>duplicated<sp/>elements<sp/>in<sp/>the<sp/>set<sp/>are<sp/>not<sp/>inserted<sp/>(binary<sp/>tree<sp/>comparison)</highlight></codeline>
<codeline lineno="167" refid="class_s_v_f_1_1_s_v_f_value_1abaa61e04b128feff7216d3ecdf4feefa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_value_1abaa61e04b128feff7216d3ecdf4feefa" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref>*<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="168"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs-&gt;value<sp/>&lt;<sp/>rhs-&gt;value;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref>*<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="173"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>==<sp/>rhs-&gt;value;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="class_s_v_f_1_1_s_v_f_value_1ac42927fed1c213852daceb902478d9c8" kindref="member">SVFValue</ref>*<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="178"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>!=<sp/>rhs-&gt;value;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>llvm::StringRef<sp/>getName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="184"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>getValue()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="189"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"></codeline>
<codeline lineno="195" refid="class_s_v_f_1_1_s_v_f_value_1a149a1e1c616bb0b9a265c2279737a67a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>llvm::raw_ostream&amp;<sp/><ref refid="class_s_v_f_1_1_s_v_f_value_1a149a1e1c616bb0b9a265c2279737a67a" kindref="member">operator&lt;&lt; </ref>(llvm::raw_ostream<sp/>&amp;o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref><sp/>&amp;node)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/>node.getName();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>classof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref><sp/>*node)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()<sp/>==<sp/>SVFValue::SVFVal<sp/>||</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()<sp/>==<sp/>SVFValue::SVFFunc<sp/>||</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()<sp/>==<sp/>SVFValue::SVFGlob<sp/>||</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()<sp/>==<sp/>SVFValue::SVFBB<sp/>||</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" kindref="member">getKind</ref>()<sp/>==<sp/>SVFValue::SVFInst;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">std::hash&lt;std::pair&lt;T,<sp/>U&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pairing<sp/>function<sp/>from:<sp/>http://szudzik.com/ElegantPairing.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>szudzik(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>b<sp/>?<sp/>b<sp/>*<sp/>b<sp/>+<sp/>a<sp/>:<sp/>a<sp/>*<sp/>a<sp/>+<sp/>a<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,<sp/>U&gt;<sp/>&amp;p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::hash&lt;T&gt;<sp/>h1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::hash&lt;U&gt;<sp/>h2;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>szudzik(h1(p.first),<sp/>h2(p.second));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="233" refid="structstd_1_1hash_3_01_s_v_f_1_1_small_vector_3_01_t_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">std::hash&lt;<ref refid="namespace_s_v_f" kindref="compound">SVF</ref>::SmallVector&lt;T,<sp/>N&gt;&gt;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVF::SmallVector&lt;T,<sp/>N&gt;<sp/>&amp;sv)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sv.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sv.size()<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sv[0];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>and<sp/>accumulate<sp/>the<sp/>hash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::hash&lt;std::pair&lt;T,<sp/>size_t&gt;&gt;<sp/>hts;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::hash&lt;T&gt;<sp/>ht;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t<sp/>:<sp/>sv)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>hts(std::make_pair(ht(t),<sp/>hash));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_UTIL_SVFBASICTYPES_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/Util/SVFBasicTypes.h"/>
  </compounddef>
</doxygen>
