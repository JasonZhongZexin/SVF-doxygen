.TH "SVF::ICFG" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::ICFG
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSVF::GenericGraph< NodeTy, EdgeTy >\fP\&.
.PP
Inherited by \fBSVF::ICFGPrinter\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Map< NodeID, \fBICFGNode\fP * > \fBICFGNodeIDToNodeMapTy\fP"
.br
.ti -1c
.RI "typedef ICFGEdge::ICFGEdgeSetTy \fBICFGEdgeSetTy\fP"
.br
.ti -1c
.RI "typedef ICFGNodeIDToNodeMapTy::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef ICFGNodeIDToNodeMapTy::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, \fBFunEntryBlockNode\fP * > \fBFunToFunEntryNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, \fBFunExitBlockNode\fP * > \fBFunToFunExitNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const Instruction *, \fBCallBlockNode\fP * > \fBCSToCallNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const Instruction *, \fBRetBlockNode\fP * > \fBCSToRetNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const Instruction *, \fBIntraBlockNode\fP * > \fBInstToBlockNodeMapTy\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBICFG\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~ICFG\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBICFGNode\fP * \fBgetICFGNode\fP (NodeID id) const"
.br
.RI "Get a \fBICFG\fP node\&. "
.ti -1c
.RI "bool \fBhasICFGNode\fP (NodeID id) const"
.br
.RI "Whether has the \fBICFGNode\fP\&. "
.ti -1c
.RI "\fBICFGEdge\fP * \fBhasIntraICFGEdge\fP (\fBICFGNode\fP *src, \fBICFGNode\fP *dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
.br
.RI "Whether we has a \fBSVFG\fP edge\&. "
.ti -1c
.RI "\fBICFGEdge\fP * \fBhasInterICFGEdge\fP (\fBICFGNode\fP *src, \fBICFGNode\fP *dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
.br
.ti -1c
.RI "\fBICFGEdge\fP * \fBhasThreadICFGEdge\fP (\fBICFGNode\fP *src, \fBICFGNode\fP *dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
.br
.ti -1c
.RI "\fBICFGEdge\fP * \fBgetICFGEdge\fP (const \fBICFGNode\fP *src, const \fBICFGNode\fP *dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
.br
.RI "Get a \fBSVFG\fP edge according to src and dst\&. "
.ti -1c
.RI "void \fBdump\fP (const std::string &file, bool simple=false)"
.br
.RI "Dump graph into dot file\&. "
.ti -1c
.RI "void \fBupdateCallGraph\fP (\fBPTACallGraph\fP *callgraph)"
.br
.RI "update \fBICFG\fP for indirect calls "
.ti -1c
.RI "void \fBremoveICFGEdge\fP (\fBICFGEdge\fP *edge)"
.br
.RI "Remove a \fBSVFG\fP edge\&. "
.ti -1c
.RI "void \fBremoveICFGNode\fP (\fBICFGNode\fP *node)"
.br
.RI "Remove a \fBICFGNode\fP\&. "
.ti -1c
.RI "\fBICFGEdge\fP * \fBaddIntraEdge\fP (\fBICFGNode\fP *srcNode, \fBICFGNode\fP *dstNode)"
.br
.RI "Add control-flow edges for top level pointers\&. "
.ti -1c
.RI "\fBICFGEdge\fP * \fBaddConditionalIntraEdge\fP (\fBICFGNode\fP *srcNode, \fBICFGNode\fP *dstNode, const Value *condition, NodeID branchID)"
.br
.ti -1c
.RI "\fBICFGEdge\fP * \fBaddCallEdge\fP (\fBICFGNode\fP *srcNode, \fBICFGNode\fP *dstNode, const Instruction *cs)"
.br
.ti -1c
.RI "\fBICFGEdge\fP * \fBaddRetEdge\fP (\fBICFGNode\fP *srcNode, \fBICFGNode\fP *dstNode, const Instruction *cs)"
.br
.ti -1c
.RI "void \fBcheckIntraEdgeParents\fP (const \fBICFGNode\fP *srcNode, const \fBICFGNode\fP *dstNode)"
.br
.RI "sanitize Intra edges, verify that both nodes belong to the same function\&. "
.ti -1c
.RI "bool \fBaddICFGEdge\fP (\fBICFGEdge\fP *edge)"
.br
.RI "Add \fBICFG\fP edge\&. "
.ti -1c
.RI "virtual void \fBaddICFGNode\fP (\fBICFGNode\fP *node)"
.br
.RI "Add a \fBICFG\fP node\&. "
.ti -1c
.RI "\fBICFGNode\fP * \fBgetBlockICFGNode\fP (const Instruction *inst)"
.br
.RI "Get a basic block \fBICFGNode\fP\&. "
.ti -1c
.RI "\fBCallBlockNode\fP * \fBgetCallBlockNode\fP (const Instruction *inst)"
.br
.ti -1c
.RI "\fBRetBlockNode\fP * \fBgetRetBlockNode\fP (const Instruction *inst)"
.br
.ti -1c
.RI "\fBIntraBlockNode\fP * \fBgetIntraBlockNode\fP (const Instruction *inst)"
.br
.ti -1c
.RI "\fBFunEntryBlockNode\fP * \fBgetFunEntryBlockNode\fP (const \fBSVFFunction\fP *fun)"
.br
.RI "Add a function entry node\&. "
.ti -1c
.RI "\fBFunExitBlockNode\fP * \fBgetFunExitBlockNode\fP (const \fBSVFFunction\fP *fun)"
.br
.RI "Add a function exit node\&. "
.ti -1c
.RI "\fBGlobalBlockNode\fP * \fBgetGlobalBlockNode\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "NodeID \fBtotalICFGNode\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ICFG::ICFG ()"

.PP
Constructor\&. Constructor
.IP "\(bu" 2
Build \fBICFG\fP 1) build \fBICFG\fP nodes statements for top level pointers (PAGEdges) 2) connect \fBICFG\fP edges between two statements (PAGEdges) 
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBICFGEdge\fP * ICFG::addCallEdge (\fBICFGNode\fP * srcNode, \fBICFGNode\fP * dstNode, const Instruction * cs)"
Add interprocedural call edges between two nodes 
.SS "\fBICFGEdge\fP * ICFG::addConditionalIntraEdge (\fBICFGNode\fP * srcNode, \fBICFGNode\fP * dstNode, const Value * condition, NodeID branchID)"
Add conditional intraprocedural edges between two nodes 
.SS "\fBICFGEdge\fP * ICFG::addIntraEdge (\fBICFGNode\fP * srcNode, \fBICFGNode\fP * dstNode)"

.PP
Add control-flow edges for top level pointers\&. Add intraprocedural edges between two nodes 
.SS "\fBICFGEdge\fP * ICFG::addRetEdge (\fBICFGNode\fP * srcNode, \fBICFGNode\fP * dstNode, const Instruction * cs)"
Add interprocedural return edges between two nodes 
.SS "void ICFG::dump (const std::string & file, bool simple = \fCfalse\fP)"

.PP
Dump graph into dot file\&. Dump \fBICFG\fP 
.SS "\fBICFGNode\fP * ICFG::getBlockICFGNode (const Instruction * inst)"

.PP
Get a basic block \fBICFGNode\fP\&. Get a basic block \fBICFGNode\fP TODO:: need to fix the assertions 
.SS "\fBICFGEdge\fP * ICFG::getICFGEdge (const \fBICFGNode\fP * src, const \fBICFGNode\fP * dst, \fBICFGEdge::ICFGEdgeK\fP kind)"

.PP
Get a \fBSVFG\fP edge according to src and dst\&. Return the corresponding \fBICFGEdge\fP 
.SS "\fBICFGEdge\fP * ICFG::hasInterICFGEdge (\fBICFGNode\fP * src, \fBICFGNode\fP * dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
Whether we has an inter \fBICFG\fP edge 
.SS "\fBICFGEdge\fP * ICFG::hasIntraICFGEdge (\fBICFGNode\fP * src, \fBICFGNode\fP * dst, \fBICFGEdge::ICFGEdgeK\fP kind)"

.PP
Whether we has a \fBSVFG\fP edge\&. Whether we has an intra \fBICFG\fP edge 
.SS "\fBICFGEdge\fP * ICFG::hasThreadICFGEdge (\fBICFGNode\fP * src, \fBICFGNode\fP * dst, \fBICFGEdge::ICFGEdgeK\fP kind)"
Whether we has an thread \fBICFG\fP edge 
.SS "void ICFG::updateCallGraph (\fBPTACallGraph\fP * callgraph)"

.PP
update \fBICFG\fP for indirect calls Update \fBICFG\fP for indirect calls 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
