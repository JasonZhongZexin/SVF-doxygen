<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespace_s_v_f_1_1_s_v_f_util" kind="namespace" language="C++">
    <compoundname>SVF::SVFUtil</compoundname>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1simplify__type" prot="public">SVF::SVFUtil::simplify_type</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1simplify__type_3_01const_01_from_01_4" prot="public">SVF::SVFUtil::simplify_type&lt; const From &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl" prot="public">SVF::SVFUtil::isa_impl</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl_3_01_to_00_01_from_00_01typename_01std_1_1enable__if_3_102dd3131e5bd0494ea1ecbf8d46f5b8" prot="public">SVF::SVFUtil::isa_impl&lt; To, From, typename std::enable_if&lt; std::is_base_of&lt; To, From &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl" prot="public">SVF::SVFUtil::isa_impl_cl</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, const From &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01std_1_1unique__ptr_3_01_from_01_4_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, const std::unique_ptr&lt; From &gt; &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01_from_01_5_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, From * &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01_from_01_5const_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, From *const &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_5_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, const From * &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_5const_01_4" prot="public">SVF::SVFUtil::isa_impl_cl&lt; To, const From *const &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__wrap" prot="public">SVF::SVFUtil::isa_impl_wrap</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__wrap_3_01_to_00_01_from_ty_00_01_from_ty_01_4" prot="public">SVF::SVFUtil::isa_impl_wrap&lt; To, FromTy, FromTy &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" prot="public">SVF::SVFUtil::cast_retty</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl" prot="public">SVF::SVFUtil::cast_retty_impl</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_4" prot="public">SVF::SVFUtil::cast_retty_impl&lt; To, const From &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01_from_01_5_01_4" prot="public">SVF::SVFUtil::cast_retty_impl&lt; To, From * &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_5_01_4" prot="public">SVF::SVFUtil::cast_retty_impl&lt; To, const From * &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_5const_01_4" prot="public">SVF::SVFUtil::cast_retty_impl&lt; To, const From *const &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01std_1_1unique__ptr_3_01_from_01_4_01_4" prot="public">SVF::SVFUtil::cast_retty_impl&lt; To, std::unique_ptr&lt; From &gt; &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__wrap" prot="public">SVF::SVFUtil::cast_retty_wrap</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__wrap_3_01_to_00_01_from_ty_00_01_from_ty_01_4" prot="public">SVF::SVFUtil::cast_retty_wrap&lt; To, FromTy, FromTy &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__convert__val" prot="public">SVF::SVFUtil::cast_convert_val</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__convert__val_3_01_to_00_01_from_ty_00_01_from_ty_01_4" prot="public">SVF::SVFUtil::cast_convert_val&lt; To, FromTy, FromTy &gt;</innerclass>
    <innerclass refid="struct_s_v_f_1_1_s_v_f_util_1_1is__simple__type" prot="public">SVF::SVFUtil::is_simple_type</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a5c2abeb363081381c3dc939ab511e3f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadForkCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isThreadForkCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a thread creation call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="258" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a834afc0042c24ed5a1dd00cadc1f00c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadForkCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isThreadForkCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="262" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a28fbb7cc51eb7e25d88f43e3eb1f30fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHareParForCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isHareParForCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a hare_parallel_for call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="270" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a9b37c6fe1232ebc35ffa052bd392e2e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHareParForCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isHareParForCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="274" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a194a8cf292726bd6cd54307b555c068a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadJoinCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isThreadJoinCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a thread join call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="282" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a14793b41b05439a8a82fdce02e0587d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadJoinCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isThreadJoinCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="286" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a3af5073a1cdc000678f7e4bbc943f5d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadExitCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isThreadExitCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a thread exit call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="294" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aae025d6727ef34fbeaa7ad48a4dabdcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isThreadExitCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isThreadExitCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="298" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a5f3ecd0770991b6e84afe47a3934f0d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isLockAquireCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isLockAquireCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a lock acquire call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="306" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a343dae805a34d102b9c1b96f173468df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isLockAquireCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isLockAquireCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="310" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1241ef1c19df14f7db0bd62dd68f14f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isLockReleaseCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isLockReleaseCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a lock acquire call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="318" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a84ac49c70252036a957694f2cf05ae2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isLockReleaseCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isLockReleaseCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="322" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ad09ba410acbbaee2aac9dd406c3cf01a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isBarrierWaitCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isBarrierWaitCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return true if this is a barrier wait call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="330" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a0a7fc57e1f5cec705e310a4bb72cba94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isBarrierWaitCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isBarrierWaitCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="334" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ac840e43fa58a90099de99a1953f091ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getForkedFun</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getForkedFun</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return thread fork function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="342" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a4cc8c549625712e006079642c656ec83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getForkedFun</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getForkedFun</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="346" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aaeeb386d80b51d729322317065606454" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getActualParmAtForkSite</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getActualParmAtForkSite</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return sole argument of the thread routine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="354" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a01119ea4e3a10ebecdef4d390a1c4c88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getActualParmAtForkSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getActualParmAtForkSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="358" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ab048cbce6e4f5a3d6ff90da3565220ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getTaskFuncAtHareParForSite</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getTaskFuncAtHareParForSite</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return the task function of the parallel_for routine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="366" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a111fa1ecf72adbd2e0ff27e922f0d34a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getTaskFuncAtHareParForSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getTaskFuncAtHareParForSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="370" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ad3471260b66bdd7e6b790ad2a94fe7ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getTaskDataAtHareParForSite</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getTaskDataAtHareParForSite</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return the task data argument of the parallel_for rountine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="378" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a5f3dd36ee492b60039928a86519518a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SVFUtil::getTaskDataAtHareParForSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getTaskDataAtHareParForSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="382" column="20" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1acc9fd07cb66dbdeef696c3c745856094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isObject</definition>
        <argsstring>(const Value *ref)</argsstring>
        <name>isObject</name>
        <param>
          <type>const Value *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Return true if this value refers to a object. </para>
        </briefdescription>
        <detaileddescription>
<para>A value represents an object if it is 1) function, 2) global 3) stack 4) heap </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="389" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="42" bodyend="55" declfile="include/SVF-FE/LLVMUtil.h" declline="389" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a9e85d445e8b7b205134acd3874bba388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isConstantData</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isConstantData</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if the value refers to constant data, e.g., i32 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="392" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="392" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a6d268e8d588717601345be3a911a7625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isDeadFunction</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>isDeadFunction</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>whether this is a function without any possible caller? </para>
        </briefdescription>
        <detaileddescription>
<para>Method for dead function, which does not have any possible caller function address is not taken and never be used in call or invoke instruction</para>
<para>Return true if this is a function without any possible caller </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="404" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="126" bodyend="154" declfile="include/SVF-FE/LLVMUtil.h" declline="404" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a4543a9c0299c72deb68f2472e1ea05ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::ArgInDeadFunction</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>ArgInDeadFunction</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>whether this is an argument in dead function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="407" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a2c97c2b79b795465490512e267a9309b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isProgEntryFunction</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isProgEntryFunction</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Program entry function e.g. main. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a program entry function (e.g. main) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="417" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ab87fef7b10465d3e635643fcb93b95a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isProgEntryFunction</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>isProgEntryFunction</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="422" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aa8017e3e5100b3f63ee338b66118d266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::SVFUtil::getProgEntryFunction</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>getProgEntryFunction</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Get program entry function from module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="428" column="26" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="428" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a4d4191a1c81d80bf26aac120ed880135" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::ArgInProgEntryFunction</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>ArgInProgEntryFunction</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if this is an argument of a program entry function (e.g. main) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="440" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="440" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a4dcfe3e66a16813350ec8dffd47c5644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isPtrInDeadFunction</definition>
        <argsstring>(const Value *value)</argsstring>
        <name>isPtrInDeadFunction</name>
        <param>
          <type>const Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return true if this is value in a dead function (function without any caller) </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a value in a dead function (function without any caller) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="446" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="159" bodyend="172" declfile="include/SVF-FE/LLVMUtil.h" declline="446" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aec7ee60be22e8f9397db108131696d57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isProgExitFunction</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isProgExitFunction</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if this is a program exit function call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="451" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="451" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a6528edf9a1750df4a84d1a60d4d0bbe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isProgExitCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isProgExitCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="458" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a68b531ca4077e71dcc6d085e47a9730b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isProgExitCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isProgExitCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="463" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ae7007ebc6a543dc30ef076b4aed75b1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isNoCallerFunction</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>isNoCallerFunction</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Function does not have any possible caller in the call graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if the function does not have a caller (either it is a main function or a dead function) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="472" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1afd690c09e01989e57899875ca97f0166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::ArgInNoCallerFunction</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>ArgInNoCallerFunction</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if the argument in a function does not have a caller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="478" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a7a7e06e90a215086696effb5f5537baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::functionDoesNotRet</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>functionDoesNotRet</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the function has a return instruction reachable from function entry. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if the function has a return instruction reachable from function entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="486" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="89" bodyend="121" declfile="include/SVF-FE/LLVMUtil.h" declline="486" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a3fe00fe80196707bf5be3f647220aa90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::getFunReachableBBs</definition>
        <argsstring>(const Function *fun, DominatorTree *dt, std::vector&lt; const BasicBlock * &gt; &amp;bbs)</argsstring>
        <name>getFunReachableBBs</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>DominatorTree *</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>std::vector&lt; const BasicBlock * &gt; &amp;</type>
          <declname>bbs</declname>
          <defname>reachableBBs</defname>
        </param>
        <briefdescription>
<para>Get reachable basic block from function entry. </para>
        </briefdescription>
        <detaileddescription>
<para>Return reachable bbs from function entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="489" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="60" bodyend="84" declfile="include/SVF-FE/LLVMUtil.h" declline="489" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a3cb226930eeaf558575e09e5b65e0223" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const BasicBlock *</type>
        <definition>const BasicBlock* SVF::SVFUtil::getFunExitBB</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getFunExitBB</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get function exit basic block FIXME: this back() here is only valid when UnifyFunctionExitNodes pass is invoked </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="493" column="25" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="493" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a86763e6a3606598580cd0172aecb5bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value * SVF::SVFUtil::stripConstantCasts</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>stripConstantCasts</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Strip off the constant casts. </para>
        </briefdescription>
        <detaileddescription>
<para>Strip constant casts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="498" column="14" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="177" bodyend="187" declfile="include/SVF-FE/LLVMUtil.h" declline="498" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a862eaa4f3d172bc7ffa56406f2d5af92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Value *</type>
        <definition>Value * SVF::SVFUtil::stripAllCasts</definition>
        <argsstring>(Value *val)</argsstring>
        <name>stripAllCasts</name>
        <param>
          <type>Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Strip off the all casts. </para>
        </briefdescription>
        <detaileddescription>
<para>Strip all casts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="501" column="7" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="192" bodyend="211" declfile="include/SVF-FE/LLVMUtil.h" declline="501" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a973113323e30a01fd904b35ac18d40ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * SVF::SVFUtil::getTypeOfHeapAlloc</definition>
        <argsstring>(const llvm::Instruction *inst)</argsstring>
        <name>getTypeOfHeapAlloc</name>
        <param>
          <type>const llvm::Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get the type of the heap allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the type of the object from a heap allocation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="504" column="12" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="270" bodyend="295" declfile="include/SVF-FE/LLVMUtil.h" declline="504" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a384b0986a6c4e99dfc4e1629b3598c3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isGepConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isGepConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return corresponding constant expression, otherwise return NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="508" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="508" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a6bc4376ada53ddfbf8df2ca817153555" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isInt2PtrConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isInt2PtrConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="518" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="518" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a093b7ae4ad144fb5d028366b1814861a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isPtr2IntConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isPtr2IntConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="528" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="528" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a7e404bcc6613ba10a56c4fbdc842c5a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isCastConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isCastConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="538" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="538" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a07d991d5bfccce9ebdef0cbb6f4bf739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isSelectConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isSelectConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="548" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="548" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1373688c6faba4dcdb640106575ea433" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isTruncConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isTruncConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="558" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="558" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a4adb63c87a9489ab905d42230ac66299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isCmpConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isCmpConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="572" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="572" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a43c9072210a5f5baeafe36da03f2fde2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isBinaryConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isBinaryConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="582" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="582" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1af14757d5cf466bba20a125f118378560" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const ConstantExpr *</type>
        <definition>const ConstantExpr* SVF::SVFUtil::isUnaryConstantExpr</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isUnaryConstantExpr</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="592" column="27" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="592" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a60076ffbf33cb8aba3d7037a995af1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::getNextInsts</definition>
        <argsstring>(const Instruction *curInst, std::vector&lt; const Instruction * &gt; &amp;instList)</argsstring>
        <name>getNextInsts</name>
        <param>
          <type>const Instruction *</type>
          <declname>curInst</declname>
        </param>
        <param>
          <type>std::vector&lt; const Instruction * &gt; &amp;</type>
          <declname>instList</declname>
        </param>
        <briefdescription>
<para>Get the next instructions following control flow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="604" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="214" bodyend="237" declfile="include/SVF-FE/LLVMUtil.h" declline="604" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a14f51c1c4842088b49dfb8e4900b0fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::getPrevInsts</definition>
        <argsstring>(const Instruction *curInst, std::vector&lt; const Instruction * &gt; &amp;instList)</argsstring>
        <name>getPrevInsts</name>
        <param>
          <type>const Instruction *</type>
          <declname>curInst</declname>
        </param>
        <param>
          <type>std::vector&lt; const Instruction * &gt; &amp;</type>
          <declname>instList</declname>
        </param>
        <briefdescription>
<para>Get the previous instructions following control flow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="607" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="241" bodyend="264" declfile="include/SVF-FE/LLVMUtil.h" declline="607" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1631bbbed23fbfe2204779ecc0dc2769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SVFUtil::getBBSuccessorPos</definition>
        <argsstring>(const BasicBlock *BB, const BasicBlock *Succ)</argsstring>
        <name>getBBSuccessorPos</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>Succ</declname>
        </param>
        <briefdescription>
<para>Get basic block successor position. </para>
        </briefdescription>
        <detaileddescription>
<para>Get position of a successor basic block </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="610" column="7" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="300" bodyend="311" declfile="include/SVF-FE/LLVMUtil.h" declline="610" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a737684498679dc16a26f2411d88f36aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SVFUtil::getBBSuccessorNum</definition>
        <argsstring>(const BasicBlock *BB)</argsstring>
        <name>getBBSuccessorNum</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB</declname>
        </param>
        <briefdescription>
<para>Get num of BB&apos;s successors. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the num of BB&apos;s successors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="612" column="7" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="332" bodyend="335" declfile="include/SVF-FE/LLVMUtil.h" declline="612" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ae40e2e043b04ede541688ce61048fb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SVFUtil::getBBPredecessorPos</definition>
        <argsstring>(const BasicBlock *BB, const BasicBlock *Pred)</argsstring>
        <name>getBBPredecessorPos</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB</declname>
          <defname>bb</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>Pred</declname>
          <defname>succbb</defname>
        </param>
        <briefdescription>
<para>Get basic block predecessor positin. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a position index from current bb to it successor bb </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="614" column="7" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="317" bodyend="327" declfile="include/SVF-FE/LLVMUtil.h" declline="614" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a0e78b0b6593209d78fae1dd0a5469463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SVFUtil::getBBPredecessorNum</definition>
        <argsstring>(const BasicBlock *BB)</argsstring>
        <name>getBBPredecessorNum</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB</declname>
        </param>
        <briefdescription>
<para>Get num of BB&apos;s predecessors. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the num of BB&apos;s predecessors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="616" column="7" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="340" bodyend="346" declfile="include/SVF-FE/LLVMUtil.h" declline="616" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aa1657ceed1953f96329fe7226bf7da4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isIRFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>isIRFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check whether a file is an LLVM IR file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="621" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="353" bodyend="365" declfile="include/SVF-FE/LLVMUtil.h" declline="621" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a62ca9a79ce7b6960e3fc42d8b183bd50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::processArguments</definition>
        <argsstring>(int argc, char **argv, int &amp;arg_num, char **arg_value, std::vector&lt; std::string &gt; &amp;moduleNameVec)</argsstring>
        <name>processArguments</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>arg_num</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>arg_value</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>moduleNameVec</declname>
        </param>
        <briefdescription>
<para>Parse argument for multi-module analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the names of all modules into a vector And process arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="624" column="6" bodyfile="lib/SVF-FE/LLVMUtil.cpp" bodystart="370" bodyend="395" declfile="include/SVF-FE/LLVMUtil.h" declline="624" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ab302ca3fcbde9bd1a7d9d5d837a69c23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isAnAllocationWraper</definition>
        <argsstring>(const Instruction *)</argsstring>
        <name>isAnAllocationWraper</name>
        <param>
          <type>const Instruction *</type>
        </param>
        <briefdescription>
<para>This function servers a allocation wrapper detector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="48" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ad98299033577f1e7f4e9bc73dff3b253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Function *</type>
        <definition>const Function* SVF::SVFUtil::getLLVMFunction</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>getLLVMFunction</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return LLVM function if this value is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="54" column="23" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a22ef185e767ff76c098e75126c885400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isExtCall</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isExtCall</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the call is an external call (external library in function summary table) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="63" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aad27a96075234ad2182a84e0e9d31a45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="68" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1af3e5fd7ffce966575ebf7c7e653b0919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="73" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a19b96a872d9096037f20e25122e469ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtFunViaRet</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isHeapAllocExtFunViaRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the call is a heap allocator/reallocator. </para>
        </briefdescription>
        <detaileddescription>
<para>note that these two functions are not suppose to be used externally </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="82" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ab4a69173f50ebe48e69103befe516245" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtFunViaArg</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isHeapAllocExtFunViaArg</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="87" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ab2064cb70c76f399ce115f2621adea35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCallViaRet</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isHeapAllocExtCallViaRet</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>interfaces to be used externally </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="93" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a24514d87685f2258201f0de15d220bbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCallViaRet</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isHeapAllocExtCallViaRet</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="99" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aedfa6e9216c6c788c26aef1967689b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCallViaArg</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isHeapAllocExtCallViaArg</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="105" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a0bde3acf22383eac5bbf4e2c065a2226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCallViaArg</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isHeapAllocExtCallViaArg</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="110" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a93ac673b885633849fa484938405ca75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isHeapAllocExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="115" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1ebbf43e294c3f94a2a7d5c56759bbba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isHeapAllocExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="120" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a73215bac62f1340a58f6c7f2ba9b0e7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int SVF::SVFUtil::getHeapAllocHoldingArgPosition</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getHeapAllocHoldingArgPosition</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get the position of argument that holds an allocated heap object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="128" column="12" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a298b6366145ed871faf3d01420ae5d20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int SVF::SVFUtil::getHeapAllocHoldingArgPosition</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getHeapAllocHoldingArgPosition</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="133" column="12" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a5af986a7698e72272707cc2a466d5ae7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int SVF::SVFUtil::getHeapAllocHoldingArgPosition</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getHeapAllocHoldingArgPosition</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="138" column="12" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a97c74c642ad43d955ac8a3f3ad8907b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isReallocExtFun</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isReallocExtFun</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the call is a heap reallocator. </para>
        </briefdescription>
        <detaileddescription>
<para>note that this function is not suppose to be used externally </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="147" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a6740e7686ba111ae525c6c093cbbaf46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isReallocExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isReallocExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="152" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a42748153e4845f3eee0ca58a1e151f97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isReallocExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isReallocExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="158" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a3495236e22e4bc6404b6ac352060439c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isDeallocExtFun</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isDeallocExtFun</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the call is a heap dealloc or not. </para>
        </briefdescription>
        <detaileddescription>
<para>note that this function is not suppose to be used externally </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="168" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1f52a7f183f1eec7c4db7e4e54fa5e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isDeallocExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isDeallocExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="173" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a9973c1326717326b26ec1ea21ebd8da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isDeallocExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isDeallocExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="178" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a1bc9bb7bd6c9682debf3ffab7182abf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isStaticExtFun</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>isStaticExtFun</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if the call is a static global call. </para>
        </briefdescription>
        <detaileddescription>
<para>note that this function is not suppose to be used externally </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="188" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ae62938f722543d6d7fc201b685be1abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isStaticExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isStaticExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="193" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1aab8ac16a9a2961f98001ab94aeaedf64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isStaticExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isStaticExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="199" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a61ed4bb80d88b0f8dbc02535c224fdfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocOrStaticExtCall</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>isHeapAllocOrStaticExtCall</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return true if the call is a static global call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="208" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a0c8afe88cb58a2ac484c3bc4dd15ece9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isHeapAllocOrStaticExtCall</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isHeapAllocOrStaticExtCall</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="213" column="13" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1ac3e7507fb376b1625bc1573132ab9f06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ExtAPI::extf_t</type>
        <definition>ExtAPI::extf_t SVF::SVFUtil::extCallTy</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>extCallTy</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return external call type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="220" column="23" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a9232d260dc83d3a25cd98195ba76567a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const PointerType *</type>
        <definition>const PointerType* SVF::SVFUtil::getRefTypeOfHeapAllocOrStatic</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getRefTypeOfHeapAllocOrStatic</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get the reference type of heap/static object from an allocation site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="227" column="26" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="227" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_v_m_util_8h_1a642f8284fbb260dd81fb29d5fadf6822" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const PointerType *</type>
        <definition>const PointerType* SVF::SVFUtil::getRefTypeOfHeapAllocOrStatic</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getRefTypeOfHeapAllocOrStatic</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/LLVMUtil.h" line="249" column="26" bodyfile="include/SVF-FE/LLVMUtil.h" bodystart="249" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a5c8cbc986cccb9d84f87aae162df3737" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>LLVM_NODISCARD bool</type>
        <definition>LLVM_NODISCARD bool SVF::SVFUtil::isa</definition>
        <argsstring>(const Y &amp;Val)</argsstring>
        <name>isa</name>
        <param>
          <type>const Y &amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="184" column="42" bodyfile="include/Util/Casting.h" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a0d100868bf63b968d387eb50e9603f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="struct_s_v_f_1_1_s_v_f_util_1_1is__simple__type" kindref="compound">is_simple_type</ref>&lt; Y &gt;::value, typename <ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, const Y &gt;::ret_type &gt;::type</type>
        <definition>std::enable_if&lt;!is_simple_type&lt;Y&gt;::value, typename cast_retty&lt;X, const Y&gt;::ret_type&gt;::type SVF::SVFUtil::cast</definition>
        <argsstring>(const Y &amp;Val)</argsstring>
        <name>cast</name>
        <param>
          <type>const Y &amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="297" column="8" bodyfile="include/Util/Casting.h" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a406dd9baf2ce66235d482fd6c6121b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, Y &gt;::ret_type</type>
        <definition>cast_retty&lt;X, Y&gt;::ret_type SVF::SVFUtil::cast</definition>
        <argsstring>(Y &amp;Val)</argsstring>
        <name>cast</name>
        <param>
          <type>Y &amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="305" column="39" bodyfile="include/Util/Casting.h" bodystart="305" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1acc2419a55c0427571f11ad14db2fe481" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, Y * &gt;::ret_type</type>
        <definition>cast_retty&lt;X, Y *&gt;::ret_type SVF::SVFUtil::cast</definition>
        <argsstring>(Y *Val)</argsstring>
        <name>cast</name>
        <param>
          <type>Y *</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="313" column="39" bodyfile="include/Util/Casting.h" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1af3ca049b4ce83c874e231f5e13bf36a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, std::unique_ptr&lt; Y &gt; &gt;::ret_type</type>
        <definition>cast_retty&lt;X, std::unique_ptr&lt;Y&gt; &gt;::ret_type SVF::SVFUtil::cast</definition>
        <argsstring>(std::unique_ptr&lt; Y &gt; &amp;&amp;Val)</argsstring>
        <name>cast</name>
        <param>
          <type>std::unique_ptr&lt; Y &gt; &amp;&amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="322" column="9" bodyfile="include/Util/Casting.h" bodystart="322" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a8182be247907420db00837cef9bcfa70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>LLVM_NODISCARD std::enable_if&lt;!<ref refid="struct_s_v_f_1_1_s_v_f_util_1_1is__simple__type" kindref="compound">is_simple_type</ref>&lt; Y &gt;::value, typename <ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, const Y &gt;::ret_type &gt;::type</type>
        <definition>LLVM_NODISCARD std::enable_if&lt;!is_simple_type&lt;Y&gt;::value, typename cast_retty&lt;X, const Y&gt;::ret_type&gt;::type SVF::SVFUtil::dyn_cast</definition>
        <argsstring>(const Y &amp;Val)</argsstring>
        <name>dyn_cast</name>
        <param>
          <type>const Y &amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="343" column="10" bodyfile="include/Util/Casting.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a52d852ba8fa569e858565b3bba403656" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>LLVM_NODISCARD <ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, Y &gt;::ret_type</type>
        <definition>LLVM_NODISCARD cast_retty&lt;X, Y&gt;::ret_type SVF::SVFUtil::dyn_cast</definition>
        <argsstring>(Y &amp;Val)</argsstring>
        <name>dyn_cast</name>
        <param>
          <type>Y &amp;</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="349" column="54" bodyfile="include/Util/Casting.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="_casting_8h_1a105c5c5e97d56533fb2b3ba7a0bc59f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>LLVM_NODISCARD <ref refid="struct_s_v_f_1_1_s_v_f_util_1_1cast__retty" kindref="compound">cast_retty</ref>&lt; X, Y * &gt;::ret_type</type>
        <definition>LLVM_NODISCARD cast_retty&lt;X, Y *&gt;::ret_type SVF::SVFUtil::dyn_cast</definition>
        <argsstring>(Y *Val)</argsstring>
        <name>dyn_cast</name>
        <param>
          <type>Y *</type>
          <declname>Val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/Casting.h" line="355" column="54" bodyfile="include/Util/Casting.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a85ab6b592fefc45a0674d3295e01638f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
        <definition>raw_ostream&amp; SVF::SVFUtil::outs</definition>
        <argsstring>()</argsstring>
        <name>outs</name>
        <briefdescription>
<para>Overwrite llvm::outs() </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="47" column="20" bodyfile="include/Util/SVFUtil.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1af0f447732c67402037a86ea29006efc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
        <definition>raw_ostream&amp; SVF::SVFUtil::errs</definition>
        <argsstring>()</argsstring>
        <name>errs</name>
        <briefdescription>
<para>Overwrite llvm::errs() </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="53" column="20" bodyfile="include/Util/SVFUtil.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a220f4c09e4c09c58d018719d44ec1dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::dumpSet</definition>
        <argsstring>(NodeBS To, raw_ostream &amp;O=SVFUtil::outs())</argsstring>
        <name>dumpSet</name>
        <param>
          <type>NodeBS</type>
          <declname>To</declname>
          <defname>bs</defname>
        </param>
        <param>
          <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
          <declname>O</declname>
          <defval>SVFUtil::outs()</defval>
        </param>
        <briefdescription>
<para>Dump sparse bitvector set. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump bit vector set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="59" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="129" bodyend="136" declfile="include/Util/SVFUtil.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1abd0a9ee845a455f9354d24a8b84a0bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::dumpPointsToSet</definition>
        <argsstring>(unsigned node, NodeBS To)</argsstring>
        <name>dumpPointsToSet</name>
        <param>
          <type>unsigned</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeBS</type>
          <declname>To</declname>
          <defname>bs</defname>
        </param>
        <briefdescription>
<para>Dump points-to set. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump points-to set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="62" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="108" bodyend="113" declfile="include/Util/SVFUtil.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a4a15cc5570eed12dd6ee766213e11d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::dumpAliasSet</definition>
        <argsstring>(unsigned node, NodeBS To)</argsstring>
        <name>dumpAliasSet</name>
        <param>
          <type>unsigned</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeBS</type>
          <declname>To</declname>
          <defname>bs</defname>
        </param>
        <briefdescription>
<para>Dump alias set. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump alias set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="65" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="119" bodyend="124" declfile="include/Util/SVFUtil.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a6a55f1f8598998a3ffbbc67d32eaf8c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::sucMsg</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>sucMsg</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Returns successful message by converting a string into green string output. </para>
        </briefdescription>
        <detaileddescription>
<para>print successful message by converting a string into green string output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="68" column="13" bodyfile="lib/Util/SVFUtil.cpp" bodystart="55" bodyend="58" declfile="include/Util/SVFUtil.h" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a6c06020737f7dff22a666b75c28c5e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::wrnMsg</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>wrnMsg</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Returns warning message by converting a string into yellow string output. </para>
        </briefdescription>
        <detaileddescription>
<para>print warning message by converting a string into yellow string output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="71" column="13" bodyfile="lib/Util/SVFUtil.cpp" bodystart="63" bodyend="66" declfile="include/Util/SVFUtil.h" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a077caa1b10ab84d101d79fc7ea50db2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::writeWrnMsg</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>writeWrnMsg</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Writes a message run through wrnMsg. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="74" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="68" bodyend="72" declfile="include/Util/SVFUtil.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a5d4bb92f5df30417f414397f8e58cf01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::errMsg</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>errMsg</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Print error message by converting a string into red string output. </para>
        </briefdescription>
        <detaileddescription>
<para>print error message by converting a string into red string output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="78" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="77" bodyend="80" declfile="include/Util/SVFUtil.h" declline="78" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1af6c66553e2559eebfe4f98c0c7ec4b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::bugMsg1</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>bugMsg1</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="79" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="82" bodyend="85" declfile="include/Util/SVFUtil.h" declline="79" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a054c3e668ce8b265bbc5d923f6243ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::bugMsg2</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>bugMsg2</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="80" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="87" bodyend="90" declfile="include/Util/SVFUtil.h" declline="80" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1aabbca7c40d2da6bd2374ea53d5de0553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::bugMsg3</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>bugMsg3</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="81" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="92" bodyend="95" declfile="include/Util/SVFUtil.h" declline="81" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a609eea630a8f88fe9eaba15ce7e48738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::pasMsg</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>pasMsg</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Print each pass/phase message by converting a string into blue string output. </para>
        </briefdescription>
        <detaileddescription>
<para>print each pass/phase message by converting a string into blue string output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="85" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="100" bodyend="103" declfile="include/Util/SVFUtil.h" declline="85" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a766d74e857f39789af3ebc8a6dae0c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::reportMemoryUsageKB</definition>
        <argsstring>(const std::string &amp;infor, raw_ostream &amp;O=SVFUtil::outs())</argsstring>
        <name>reportMemoryUsageKB</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>infor</declname>
        </param>
        <param>
          <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
          <declname>O</declname>
          <defval>SVFUtil::outs()</defval>
        </param>
        <briefdescription>
<para>Print memory usage in KB. </para>
        </briefdescription>
        <detaileddescription>
<para>Print memory usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="88" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="141" bodyend="146" declfile="include/Util/SVFUtil.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a630ff9c47f58f9b8df7c8a2b3711477c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::getMemoryUsageKB</definition>
        <argsstring>(u32_t *vmrss_kb, u32_t *vmsize_kb)</argsstring>
        <name>getMemoryUsageKB</name>
        <param>
          <type>u32_t *</type>
          <declname>vmrss_kb</declname>
        </param>
        <param>
          <type>u32_t *</type>
          <declname>vmsize_kb</declname>
        </param>
        <briefdescription>
<para>Get memory usage from system file. Return TRUE if succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>Get memory usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="91" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="151" bodyend="196" declfile="include/Util/SVFUtil.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a0d7588578735679773493ff2d5e458e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFUtil::increaseStackSize</definition>
        <argsstring>()</argsstring>
        <name>increaseStackSize</name>
        <briefdescription>
<para>Increase the stack size limit. </para>
        </briefdescription>
        <detaileddescription>
<para>Increase stack size </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="94" column="6" bodyfile="lib/Util/SVFUtil.cpp" bodystart="201" bodyend="216" declfile="include/Util/SVFUtil.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1aa5ce14119a6e3b0b6022753ddd5890f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::cmpPts</definition>
        <argsstring>(const PointsTo &amp;lpts, const PointsTo &amp;rpts)</argsstring>
        <name>cmpPts</name>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>lpts</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>rpts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two PointsTo according to their size and points-to elements.<orderedlist>
<listitem><para>PointsTo with smaller size is smaller than the other;</para>
</listitem><listitem><para>If the sizes are equal, comparing the points-to targets. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="101" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="101" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1ab7f58caf27c30a1d414e06f60ca84d80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isIntrinsicInst</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isIntrinsicInst</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Return true if it is an intrinsic instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="121" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a2e08ce822223842fa6a73fd659b1a526" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isCallSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isCallSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Whether an instruction is a call or invoke instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="138" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a38bf8f7eaa18fc5a09711959b5417854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isCallSite</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isCallSite</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Whether an instruction is a call or invoke instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="143" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a8d8216a92140d982303f83ea424ddc91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isNonInstricCallSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isNonInstricCallSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Whether an instruction is a callsite in the application code, excluding llvm intrinsic calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="151" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1abd525a2e3b7b9167b61b2304cc2cbdf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFUtil::isReturn</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isReturn</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Whether an instruction is a return instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="158" column="13" bodyfile="include/Util/SVFUtil.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a202de7ad2bea0311e2f75894c030e7a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSite</type>
        <definition>CallSite SVF::SVFUtil::getLLVMCallSite</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getLLVMCallSite</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Return LLVM callsite given a instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="164" column="17" bodyfile="include/Util/SVFUtil.h" bodystart="164" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a4f457db1cfa0d4f94762a306c0ac3757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::SVFUtil::getFunction</definition>
        <argsstring>(StringRef name)</argsstring>
        <name>getFunction</name>
        <param>
          <type>StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the corresponding Function based on its name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="172" column="26" bodyfile="include/Util/SVFUtil.h" bodystart="172" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a142e650415cb81011eb59dadd3cb0637" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::SVFUtil::getDefFunForMultipleModule</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getDefFunForMultipleModule</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get the definition of a function across multiple modules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="190" column="26" bodyfile="include/Util/SVFUtil.h" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a145abbd2958629718fbca41d25c3124d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::SVFUtil::getCallee</definition>
        <argsstring>(const CallSite cs)</argsstring>
        <name>getCallee</name>
        <param>
          <type>const CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return callee of a callsite. Return null if this is an indirect call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="202" column="26" bodyfile="include/Util/SVFUtil.h" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1af26c7636bfef7ab2a36cccdcf12c3538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::SVFUtil::getCallee</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getCallee</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="209" column="26" bodyfile="include/Util/SVFUtil.h" bodystart="209" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a28c0ede7e4765d2a686fc8ae0f5641a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::getSourceLoc</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>getSourceLoc</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return source code including line number and file name from debug information. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the meta data (line number and file name) info of a LLVM value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="220" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="241" bodyend="319" declfile="include/Util/SVFUtil.h" declline="220" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_s_v_f_util_8h_1a86c1c8bdfc1075c07c631525555194d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::SVFUtil::getSourceLocOfFunction</definition>
        <argsstring>(const Function *F)</argsstring>
        <name>getSourceLocOfFunction</name>
        <param>
          <type>const Function *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get source code line number of a function according to debug info </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFUtil.h" line="221" column="14" bodyfile="lib/Util/SVFUtil.cpp" bodystart="222" bodyend="236" declfile="include/Util/SVFUtil.h" declline="221" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/SVF-FE/LLVMUtil.h" line="42" column="1"/>
  </compounddef>
</doxygen>
