<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_w_p_a_solver" xml:lang="en-US">
<title>SVF::WPASolver&lt; GraphType &gt; Class Template Reference</title>
<indexterm><primary>SVF::WPASolver&lt; GraphType &gt;</primary></indexterm>
<para>Inheritance diagram for SVF::WPASolver&lt; GraphType &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_w_p_a_solver.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a64d9cb98ab38b441440b860ae4de0f9b"/>typedef llvm::GraphTraits&lt; GraphType &gt; <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a64d9cb98ab38b441440b860ae4de0f9b">GTraits</link></para>

<para>Define the GTraits and node iterator for printing. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a2b0c0c4d1f172e8eeae0230fa09f365e"/>typedef GTraits::NodeRef <emphasis role="strong">GNODE</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1ab7de73aabfa092b51b8dbe7b091e4c57"/>typedef GTraits::EdgeType <emphasis role="strong">GEDGE</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a4d5b605b8932824a7088399305952f12"/>typedef GTraits::ChildIteratorType <emphasis role="strong">child_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a1352953966be14b2a1d6244f35e74a33"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; GraphType &gt; <emphasis role="strong">SCC</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a624e9156b2d3a4f284548cbaaf650334"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; NodeID &gt; <emphasis role="strong">WorkList</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1ab3369caa278da03e6e6697a839985cd6"/>u32_t <link linkend="_class_s_v_f_1_1_w_p_a_solver_1ab3369caa278da03e6e6697a839985cd6">numOfIteration</link></para>

<para>num of iterations during constaint solving </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a0c5616b0e340955dafc2ab2f21740abd"/><link linkend="_class_s_v_f_1_1_w_p_a_solver_1a0c5616b0e340955dafc2ab2f21740abd">WPASolver</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1ac88ef07e88b453a1b35684b59a7dd04a"/>virtual <link linkend="_class_s_v_f_1_1_w_p_a_solver_1ac88ef07e88b453a1b35684b59a7dd04a">~WPASolver</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a37ca8a99b8f83fba796293e6e13b0953"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">SCC</link> * <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a37ca8a99b8f83fba796293e6e13b0953">getSCCDetector</link> () const</para>

<para>Get SCC detector. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1abe0a304039d1bd2cfd7befd32fdcde2b"/>const GraphType <link linkend="_class_s_v_f_1_1_w_p_a_solver_1abe0a304039d1bd2cfd7befd32fdcde2b">graph</link> ()</para>

<para>Get/Set graph methods. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1aa04deb39cd024c051f30ac43d1d62b34"/>void <emphasis role="strong">setGraph</emphasis> (GraphType g)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1aaa932894d00b69cfa741f9987a9cc6b8"/>virtual NodeStack &amp; <link linkend="_class_s_v_f_1_1_w_p_a_solver_1aaa932894d00b69cfa741f9987a9cc6b8">SCCDetect</link> ()</para>

<para>SCC detection. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a16d371c8f6a9bdb1ca984bcb287d6c5a"/>virtual NodeStack &amp; <emphasis role="strong">SCCDetect</emphasis> (NodeSet &amp;candidates)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a44d31c197e7f6d88e410c7d85fdd6bdc"/>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a44d31c197e7f6d88e410c7d85fdd6bdc">solve</link> ()</para>

<para>Constraint Solving. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a7195381c3aab04890139b4fe2c561909"/>virtual void <emphasis role="strong">initWorklist</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1af1bb670efde7006e3e99b3735e4fc4cc"/>virtual void <emphasis role="strong">solveWorklist</emphasis> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver_1abd7fd785e70f66d394088101d78598ca">processNode</link> (NodeID)</para>

<para>Following methods are to be implemented in child class, in order to achieve a fully worked PTA. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a1d1892d8e7a9ede8cb181ad0ff191bc5"/>virtual bool <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a1d1892d8e7a9ede8cb181ad0ff191bc5">updateCallGraph</link> ()</para>

<para>update callgraph for all indirect callsites </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a138b403af0370ad6fdf8cc6af0530392"/>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a138b403af0370ad6fdf8cc6af0530392">collapsePWCNode</link> (NodeID)</para>

<para>collapse positive weight cycles of a graph </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a79c2b3f10f3f813396d8caaa1f7bc62a"/>virtual void <emphasis role="strong">collapseFields</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a369adb6e4ba0ebc535614b6fa1854eaa"/>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a369adb6e4ba0ebc535614b6fa1854eaa">printStat</link> ()</para>

<para>dump statistics </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a541ef7fda44ce79086c30b07a5f6126c"/>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a541ef7fda44ce79086c30b07a5f6126c">propagate</link> (GNODE *v)</para>

<para>Propagation for the solving, to be implemented in the child class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a904c056bcad2bdaff13763a48d372420"/>virtual bool <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a904c056bcad2bdaff13763a48d372420">propFromSrcToDst</link> (GEDGE *)</para>

<para>Propagate information from source to destination node, to be implemented in the child class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a3bd463cd456a1d58242f118328f51ddb"/>virtual NodeID <emphasis role="strong">sccRepNode</emphasis> (NodeID id) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a20a14ac31fe23d4fe67da15f5cc498df"/>NodeID <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a20a14ac31fe23d4fe67da15f5cc498df">popFromWorklist</link> ()</para>

<para>Worklist operations. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a4af1c3e72f5af96c4facff672108da58"/>virtual void <emphasis role="strong">pushIntoWorklist</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a992b105a0ec126050a123e24db3bd45b"/>bool <emphasis role="strong">isWorklistEmpty</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a09c85e7a12715fc64e05a8448b699ec0"/>bool <emphasis role="strong">isInWorklist</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a5fd488d74e04aa9e66ca4eb42c6dbbf4"/>GNODE * <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a5fd488d74e04aa9e66ca4eb42c6dbbf4">Node</link> (NodeID id)</para>

<para>Get node on the graph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a01450e1475679d093413e6496c198fc0"/>NodeID <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a01450e1475679d093413e6496c198fc0">Node_Index</link> (GNODE node)</para>

<para>Get node ID. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1ac460772d9236a2fefe17b2557023b883"/>bool <link linkend="_class_s_v_f_1_1_w_p_a_solver_1ac460772d9236a2fefe17b2557023b883">reanalyze</link></para>

<para>Reanalyze if any constraint value changed. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1aa7c0636780a86f376e9222bce771e859"/>u32_t <link linkend="_class_s_v_f_1_1_w_p_a_solver_1aa7c0636780a86f376e9222bce771e859">iterationForPrintStat</link></para>

<para>print out statistics for i-th iteration </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a87e9adb7fb0e0a42abaf90adac27a9c0"/>GraphType <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a87e9adb7fb0e0a42abaf90adac27a9c0">_graph</link></para>

<para>Graph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a21709a0f33b6238afe735cc9fe49ff70"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">SCC</link> * <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a21709a0f33b6238afe735cc9fe49ff70">scc</link></para>

<para>SCC. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1a1775717a8c8d5d125b7561bc1ae6abf5"/><link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">WorkList</link> <link linkend="_class_s_v_f_1_1_w_p_a_solver_1a1775717a8c8d5d125b7561bc1ae6abf5">worklist</link></para>

<para>Worklist for resolution. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_w_p_a_solver_1abd7fd785e70f66d394088101d78598ca"/>    <section>
    <title>processNode()</title>
<indexterm><primary>processNode</primary><secondary>SVF::WPASolver&lt; GraphType &gt;</secondary></indexterm>
<indexterm><primary>SVF::WPASolver&lt; GraphType &gt;</primary><secondary>processNode</secondary></indexterm>
<computeroutput>template&lt;class GraphType &gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_s_v_f_1_1_w_p_a_solver">SVF::WPASolver</link>&lt; GraphType &gt;::processNode (NodeID )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Following methods are to be implemented in child class, in order to achieve a fully worked PTA. </para>
</para>

<para>Process each node on the graph, to be implemented in the child class </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_flow_sensitive_1a16f594356ea565eb1fed2acea516a16b">SVF::FlowSensitive</link>, <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1afa1055cda6c910b24480505efd205895">SVF::AndersenWaveDiff</link>, <link linkend="_class_s_v_f_1_1_andersen_1a1caa6fa0740f4fa789d960a5a6fcb9c1">SVF::Andersen</link>, and <link linkend="_class_s_v_f_1_1_versioned_flow_sensitive_1a8cad0df2ae7df81dc2a966e694a0f7a2">SVF::VersionedFlowSensitive</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/WPA/WPASolver.h</section>
</section>
