<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_i_c_f_g" xml:lang="en-US">
<title>SVF::ICFG Class Reference</title>
<indexterm><primary>SVF::ICFG</primary></indexterm>
<para>Inheritance diagram for SVF::ICFG:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_i_c_f_g.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1af1fe5708c6f67fd87fa1edaa6c73ff5d"/>typedef Map&lt; NodeID, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * &gt; <emphasis role="strong">ICFGNodeIDToNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a20ea3e37e9c3c7d3138ff593041a8e47"/>typedef ICFGEdge::ICFGEdgeSetTy <emphasis role="strong">ICFGEdgeSetTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a498f84068ef643a94970aeb171607e31"/>typedef ICFGNodeIDToNodeMapTy::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a94e4de04d8da10a19ab65c22e257b82b"/>typedef ICFGNodeIDToNodeMapTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a05067e577bfcdcd37b94198ee97e7eb7"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *, <link linkend="_class_s_v_f_1_1_fun_entry_block_node">FunEntryBlockNode</link> * &gt; <emphasis role="strong">FunToFunEntryNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a456ecdf6f28e6325613833ac07a9ca4d"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *, <link linkend="_class_s_v_f_1_1_fun_exit_block_node">FunExitBlockNode</link> * &gt; <emphasis role="strong">FunToFunExitNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a13694bd3990dd29ebce641a7c827a370"/>typedef Map&lt; const Instruction *, <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt; <emphasis role="strong">CSToCallNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a3d519765c4bbc1479b64ef211f845edd"/>typedef Map&lt; const Instruction *, <link linkend="_class_s_v_f_1_1_ret_block_node">RetBlockNode</link> * &gt; <emphasis role="strong">CSToRetNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a8be76aeee4701852f907b5c93a207c38"/>typedef Map&lt; const Instruction *, <link linkend="_class_s_v_f_1_1_intra_block_node">IntraBlockNode</link> * &gt; <emphasis role="strong">InstToBlockNodeMapTy</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_1a683f33b8ad507a33809511954c7c1acb">ICFG</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1ae02e30b2d9c2cd070ba326b782fa8520"/>virtual <link linkend="_class_s_v_f_1_1_i_c_f_g_1ae02e30b2d9c2cd070ba326b782fa8520">~ICFG</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a5f2c0aaba07d6fdd63058da0fb60ca8b"/><link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a5f2c0aaba07d6fdd63058da0fb60ca8b">getICFGNode</link> (NodeID id) const</para>

<para>Get a <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a16c2ed1f9e28c84669b14dc48fb3c01a"/>bool <link linkend="_class_s_v_f_1_1_i_c_f_g_1a16c2ed1f9e28c84669b14dc48fb3c01a">hasICFGNode</link> (NodeID id) const</para>

<para>Whether has the <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1aa662baae5682ef6ec5084fa4147c9709">hasIntraICFGEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</para>

<para>Whether we has a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a86535e50d1feba706b19491d905baef1">hasInterICFGEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a29fb70d6638765ce291c5a8a11fbea64">hasThreadICFGEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a5dd4ac55123501c47c628adcf27e2475">getICFGEdge</link> (const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *src, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</para>

<para>Get a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge according to src and dst. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a999956500bbd605326531480546db9ba">dump</link> (const std::string &amp;file, bool simple=false)</para>

<para>Dump graph into dot file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a5a00682b75726cacc1b4d88bbf40c824">updateCallGraph</link> (<link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> *callgraph)</para>

<para>update <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> for indirect calls </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a534625b10673efe5b0f344bfebf9b3cf"/>void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a534625b10673efe5b0f344bfebf9b3cf">removeICFGEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> *edge)</para>

<para>Remove a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a403cd10f7c01cc879d803a9759e729cb"/>void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a403cd10f7c01cc879d803a9759e729cb">removeICFGNode</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *node)</para>

<para>Remove a <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1adafd8bbb91507a9a78a3f16305812afc">addIntraEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dstNode)</para>

<para>Add control-flow edges for top level pointers. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a8b038782880ae8950076e2c104bc4b18">addConditionalIntraEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dstNode, const Value *condition, NodeID branchID)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1abde033687317d47909ee45db7501723f">addCallEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dstNode, const Instruction *cs)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1a4a44849b596c89ab14d2e5f18366e848">addRetEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dstNode, const Instruction *cs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a70421a19a494eb6131a9ae72ef1a64d6"/>void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a70421a19a494eb6131a9ae72ef1a64d6">checkIntraEdgeParents</link> (const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *srcNode, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *dstNode)</para>

<para>sanitize Intra edges, verify that both nodes belong to the same function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a462f590c2604184d69e4efe3d85a7b5b"/>bool <link linkend="_class_s_v_f_1_1_i_c_f_g_1a462f590c2604184d69e4efe3d85a7b5b">addICFGEdge</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> *edge)</para>

<para>Add <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a15816a82d8c33a066009440dce6ee973"/>virtual void <link linkend="_class_s_v_f_1_1_i_c_f_g_1a15816a82d8c33a066009440dce6ee973">addICFGNode</link> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *node)</para>

<para>Add a <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1ab7b0b3088b46ad65451905cc4f567a7b">getBlockICFGNode</link> (const Instruction *inst)</para>

<para>Get a basic block <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a7d10e8a815c836a070d35850f817a18c"/><link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * <emphasis role="strong">getCallBlockNode</emphasis> (const Instruction *inst)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a6d66c83cb1656d0f8ec8b8b65a9e9c41"/><link linkend="_class_s_v_f_1_1_ret_block_node">RetBlockNode</link> * <emphasis role="strong">getRetBlockNode</emphasis> (const Instruction *inst)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a485fcd76a8a864c9b686e68a3ca66dfc"/><link linkend="_class_s_v_f_1_1_intra_block_node">IntraBlockNode</link> * <emphasis role="strong">getIntraBlockNode</emphasis> (const Instruction *inst)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1ae1ef14cdda27a2062c4c454750444108"/><link linkend="_class_s_v_f_1_1_fun_entry_block_node">FunEntryBlockNode</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1ae1ef14cdda27a2062c4c454750444108">getFunEntryBlockNode</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>

<para>Add a function entry node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1aa33426d57dc150956902945a17a29bcb"/><link linkend="_class_s_v_f_1_1_fun_exit_block_node">FunExitBlockNode</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_1aa33426d57dc150956902945a17a29bcb">getFunExitBlockNode</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>

<para>Add a function exit node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1ae3b8f1b45c75b5fc231da76d3a49ad57"/><link linkend="_class_s_v_f_1_1_global_block_node">GlobalBlockNode</link> * <emphasis role="strong">getGlobalBlockNode</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a5df6061b65d021cd73c66592ec79f052"/>NodeID <emphasis role="strong">totalICFGNode</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a683f33b8ad507a33809511954c7c1acb"/>    <section>
    <title>ICFG()</title>
<indexterm><primary>ICFG</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>ICFG</secondary></indexterm>
<para><computeroutput>ICFG::ICFG ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor<itemizedlist>
<listitem>
<para>Build <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> 1) build <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> nodes statements for top level pointers (PAGEdges) 2) connect <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> edges between two statements (PAGEdges) </para>
</listitem></itemizedlist>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1abde033687317d47909ee45db7501723f"/>    <section>
    <title>addCallEdge()</title>
<indexterm><primary>addCallEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>addCallEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::addCallEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dstNode, const Instruction * cs)</computeroutput></para>
<para>Add interprocedural call edges between two nodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a8b038782880ae8950076e2c104bc4b18"/>    <section>
    <title>addConditionalIntraEdge()</title>
<indexterm><primary>addConditionalIntraEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>addConditionalIntraEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::addConditionalIntraEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dstNode, const Value * condition, NodeID branchID)</computeroutput></para>
<para>Add conditional intraprocedural edges between two nodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1adafd8bbb91507a9a78a3f16305812afc"/>    <section>
    <title>addIntraEdge()</title>
<indexterm><primary>addIntraEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>addIntraEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::addIntraEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dstNode)</computeroutput></para><para>

<para>Add control-flow edges for top level pointers. </para>
</para>

<para>Add intraprocedural edges between two nodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a4a44849b596c89ab14d2e5f18366e848"/>    <section>
    <title>addRetEdge()</title>
<indexterm><primary>addRetEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>addRetEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::addRetEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * srcNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dstNode, const Instruction * cs)</computeroutput></para>
<para>Add interprocedural return edges between two nodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a999956500bbd605326531480546db9ba"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>dump</secondary></indexterm>
<para><computeroutput>void ICFG::dump (const std::string &amp; file, bool simple = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Dump graph into dot file. </para>
</para>

<para>Dump <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1ab7b0b3088b46ad65451905cc4f567a7b"/>    <section>
    <title>getBlockICFGNode()</title>
<indexterm><primary>getBlockICFGNode</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>getBlockICFGNode</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * ICFG::getBlockICFGNode (const Instruction * inst)</computeroutput></para><para>

<para>Get a basic block <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</para>

<para>Get a basic block <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> TODO:: need to fix the assertions </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a5dd4ac55123501c47c628adcf27e2475"/>    <section>
    <title>getICFGEdge()</title>
<indexterm><primary>getICFGEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>getICFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::getICFGEdge (const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * src, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</computeroutput></para><para>

<para>Get a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge according to src and dst. </para>
</para>

<para>Return the corresponding <link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a86535e50d1feba706b19491d905baef1"/>    <section>
    <title>hasInterICFGEdge()</title>
<indexterm><primary>hasInterICFGEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>hasInterICFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::hasInterICFGEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</computeroutput></para>
<para>Whether we has an inter <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1aa662baae5682ef6ec5084fa4147c9709"/>    <section>
    <title>hasIntraICFGEdge()</title>
<indexterm><primary>hasIntraICFGEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>hasIntraICFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::hasIntraICFGEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</computeroutput></para><para>

<para>Whether we has a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</para>

<para>Whether we has an intra <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a29fb70d6638765ce291c5a8a11fbea64"/>    <section>
    <title>hasThreadICFGEdge()</title>
<indexterm><primary>hasThreadICFGEdge</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>hasThreadICFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> * ICFG::hasThreadICFGEdge (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * src, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429">ICFGEdge::ICFGEdgeK</link> kind)</computeroutput></para>
<para>Whether we has an thread <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_1a5a00682b75726cacc1b4d88bbf40c824"/>    <section>
    <title>updateCallGraph()</title>
<indexterm><primary>updateCallGraph</primary><secondary>SVF::ICFG</secondary></indexterm>
<indexterm><primary>SVF::ICFG</primary><secondary>updateCallGraph</secondary></indexterm>
<para><computeroutput>void ICFG::updateCallGraph (<link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * callgraph)</computeroutput></para><para>

<para>update <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> for indirect calls </para>
</para>

<para>Update <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> for indirect calls </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/ICFG.hlib/Graphs/ICFG.cpp</section>
</section>
