<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_type_system" xml:lang="en-US">
<title>SVF::TypeSystem Class Reference</title>
<indexterm><primary>SVF::TypeSystem</primary></indexterm>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1ae3bb1f41445bc7258f32feadbf20f64e"/>typedef Map&lt; NodeID, <link linkend="_class_s_v_f_1_1_type_set">TypeSet</link> * &gt; <emphasis role="strong">VarToTypeSetMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a74e6c7885929b86eb4fa3d2c587d9631"/>typedef OrderedMap&lt; <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link>, NodeBS &gt; <emphasis role="strong">TypeToVarsMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a4708b09e485ed2cd4b8534793b942247"/>typedef VarToTypeSetMapTy::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1ad8106316691f8a2f01b296c484647431"/>typedef VarToTypeSetMapTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a16b21a48c3316630cf78868022213291"/>iterator <link linkend="_class_s_v_f_1_1_type_system_1a16b21a48c3316630cf78868022213291">begin</link> ()</para>

<para>Iterators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a8c8733d3ab9a28a25d9886ee97c3341f"/>iterator <emphasis role="strong">end</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a51fec074a4142e203396cb021a780128"/>const_iterator <emphasis role="strong">begin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a3c0e2a090705c1f6a67b36ee4c607b9d"/>const_iterator <emphasis role="strong">end</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a14f2c80f05304e9a3f257b29dd48985e"/><link linkend="_class_s_v_f_1_1_type_system_1a14f2c80f05304e9a3f257b29dd48985e">TypeSystem</link> (const <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *pag)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a945097eb1bb050a416f37beeb7ee6194"/>bool <link linkend="_class_s_v_f_1_1_type_system_1a945097eb1bb050a416f37beeb7ee6194">hasTypeSet</link> (NodeID var) const</para>

<para>Has typeset or not. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a6b52e1b6fbf9cfcc0337471bb425f330"/>const <link linkend="_class_s_v_f_1_1_type_set">TypeSet</link> * <link linkend="_class_s_v_f_1_1_type_system_1a6b52e1b6fbf9cfcc0337471bb425f330">getTypeSet</link> (NodeID var) const</para>

<para>Get a var&apos;s typeset. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_type_system_1ad88b2a9bb6ddfc5a9fbef0b924559685">addTypeForVar</link> (NodeID var, const <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link> &amp;type)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_type_system_1a78ba5fd094d4a5fd77cc9e01bca821c2">addTypeForVar</link> (NodeID var, const Type *type)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a8b14cbba82ee2608b1ac6007e003e93f"/>void <emphasis role="strong">addVarForType</emphasis> (NodeID var, const <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link> &amp;type)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1ae9b228ed0cabc0f7185a2187f5ff0c90"/>void <emphasis role="strong">addVarForType</emphasis> (NodeID var, const Type *type)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a5006938c789d97d2d1c4de3fa7a4b9a8"/>bool <emphasis role="strong">hasVarsForType</emphasis> (const <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link> &amp;type) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1a4e0aa8f26c1a7c51706acbba3f6642b8"/>NodeBS &amp; <emphasis role="strong">getVarsForType</emphasis> (const <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link> &amp;type)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_type_system_1af8ab46936a372441300b336a53aea662"/>void <link linkend="_class_s_v_f_1_1_type_system_1af8ab46936a372441300b336a53aea662">printTypeSystem</link> () const</para>

<para>Print each var&apos;s id and all its types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_type_system_1ad88b2a9bb6ddfc5a9fbef0b924559685"/>    <section>
    <title>addTypeForVar()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>addTypeForVar</primary><secondary>SVF::TypeSystem</secondary></indexterm>
<indexterm><primary>SVF::TypeSystem</primary><secondary>addTypeForVar</secondary></indexterm>
<para><computeroutput>bool SVF::TypeSystem::addTypeForVar (NodeID var, const <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link> &amp; type)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Add a ptatype for a var Return true if the ptatype is new for this var </para>
    </section><anchor xml:id="_class_s_v_f_1_1_type_system_1a78ba5fd094d4a5fd77cc9e01bca821c2"/>    <section>
    <title>addTypeForVar()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>addTypeForVar</primary><secondary>SVF::TypeSystem</secondary></indexterm>
<indexterm><primary>SVF::TypeSystem</primary><secondary>addTypeForVar</secondary></indexterm>
<para><computeroutput>bool SVF::TypeSystem::addTypeForVar (NodeID var, const Type * type)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Add a ptatype for a var Return true if the ptatype is new for this var </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/PTAType.h</section>
</section>
