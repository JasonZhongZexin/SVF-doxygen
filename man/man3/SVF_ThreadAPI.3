.TH "SVF::ThreadAPI" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::ThreadAPI
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTD_TYPE\fP { \fBTD_DUMMY\fP = 0, \fBTD_FORK\fP, \fBTD_JOIN\fP, \fBTD_DETACH\fP, \fBTD_ACQUIRE\fP, \fBTD_TRY_ACQUIRE\fP, \fBTD_RELEASE\fP, \fBTD_EXIT\fP, \fBTD_CANCEL\fP, \fBTD_COND_WAIT\fP, \fBTD_COND_SIGNAL\fP, \fBTD_COND_BROADCAST\fP, \fBTD_MUTEX_INI\fP, \fBTD_MUTEX_DESTROY\fP, \fBTD_CONDVAR_INI\fP, \fBTD_CONDVAR_DESTROY\fP, \fBTD_BAR_INIT\fP, \fBTD_BAR_WAIT\fP, \fBHARE_PAR_FOR\fP }"
.br
.ti -1c
.RI "typedef llvm::StringMap< \fBTD_TYPE\fP > \fBTDAPIMap\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBSVFFunction\fP * \fBgetCallee\fP (const Instruction *inst) const"
.br
.RI "Return the callee/callsite/func\&. "
.ti -1c
.RI "const \fBSVFFunction\fP * \fBgetCallee\fP (const CallSite cs) const"
.br
.ti -1c
.RI "const CallSite \fBgetLLVMCallSite\fP (const Instruction *inst) const"
.br
.ti -1c
.RI "bool \fBisTDFork\fP (const Instruction *inst) const"
.br
.RI "Return true if this call create a new thread\&. "
.ti -1c
.RI "bool \fBisTDFork\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisHareParFor\fP (const Instruction *inst) const"
.br
.RI "Return true if this call proceeds a hare_parallel_for\&. "
.ti -1c
.RI "bool \fBisHareParFor\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetForkedThread\fP (const Instruction *inst) const"
.br
.RI "Return arguments/attributes of pthread_create / hare_parallel_for\&. "
.ti -1c
.RI "const Value * \fBgetForkedThread\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetForkedFun\fP (const Instruction *inst) const"
.br
.ti -1c
.RI "const Value * \fBgetForkedFun\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetActualParmAtForkSite\fP (const Instruction *inst) const"
.br
.ti -1c
.RI "const Value * \fBgetActualParmAtForkSite\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetTaskFuncAtHareParForSite\fP (const Instruction *inst) const"
.br
.RI "Get the task function (i\&.e\&., the 5th parameter) of the hare_parallel_for call\&. "
.ti -1c
.RI "const Value * \fBgetTaskFuncAtHareParForSite\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetTaskDataAtHareParForSite\fP (const Instruction *inst) const"
.br
.RI "Get the task data (i\&.e\&., the 6th parameter) of the hare_parallel_for call\&. "
.ti -1c
.RI "const Value * \fBgetTaskDataAtHareParForSite\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisTDJoin\fP (const Instruction *inst) const"
.br
.RI "Return true if this call wait for a worker thread\&. "
.ti -1c
.RI "bool \fBisTDJoin\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetJoinedThread\fP (const Instruction *inst) const"
.br
.RI "Return arguments/attributes of pthread_join\&. "
.ti -1c
.RI "const Value * \fBgetJoinedThread\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetRetParmAtJoinedSite\fP (const Instruction *inst) const"
.br
.ti -1c
.RI "const Value * \fBgetRetParmAtJoinedSite\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisTDExit\fP (const Instruction *inst) const"
.br
.RI "Return true if this call exits/terminate a thread\&. "
.ti -1c
.RI "bool \fBisTDExit\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisTDAcquire\fP (const Instruction *inst) const"
.br
.RI "Return true if this call acquire a lock\&. "
.ti -1c
.RI "bool \fBisTDAcquire\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisTDRelease\fP (const Instruction *inst) const"
.br
.RI "Return true if this call release a lock\&. "
.ti -1c
.RI "bool \fBisTDRelease\fP (CallSite cs) const"
.br
.ti -1c
.RI "const Value * \fBgetLockVal\fP (const Instruction *inst) const"
.br
.RI "Return lock value\&. "
.ti -1c
.RI "const Value * \fBgetLockVal\fP (CallSite cs) const"
.br
.ti -1c
.RI "bool \fBisTDBarWait\fP (const Instruction *inst) const"
.br
.RI "Return true if this call waits for a barrier\&. "
.ti -1c
.RI "bool \fBisTDBarWait\fP (CallSite cs) const"
.br
.ti -1c
.RI "void \fBperformAPIStat\fP (\fBSVFModule\fP *m)"
.br
.ti -1c
.RI "void \fBstatInit\fP (llvm::StringMap< u32_t > &tdAPIStatMap)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBThreadAPI\fP * \fBgetThreadAPI\fP ()"
.br
.RI "Return a static reference\&. "
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSVF::ThreadAPI::TD_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITD_FORK \fP\fP
dummy type 
.TP
\fB\fITD_JOIN \fP\fP
create a new thread 
.TP
\fB\fITD_DETACH \fP\fP
wait for a thread to join 
.TP
\fB\fITD_ACQUIRE \fP\fP
detach a thread directly instead wait for it to join 
.TP
\fB\fITD_TRY_ACQUIRE \fP\fP
acquire a lock 
.TP
\fB\fITD_RELEASE \fP\fP
try to acquire a lock 
.TP
\fB\fITD_EXIT \fP\fP
release a lock 
.TP
\fB\fITD_CANCEL \fP\fP
exit/kill a thread 
.TP
\fB\fITD_COND_WAIT \fP\fP
cancel a thread by another 
.TP
\fB\fITD_COND_SIGNAL \fP\fP
wait a condition 
.TP
\fB\fITD_COND_BROADCAST \fP\fP
signal a condition 
.TP
\fB\fITD_MUTEX_INI \fP\fP
broadcast a condition 
.TP
\fB\fITD_MUTEX_DESTROY \fP\fP
initial a mutex variable 
.TP
\fB\fITD_CONDVAR_INI \fP\fP
initial a mutex variable 
.TP
\fB\fITD_CONDVAR_DESTROY \fP\fP
initial a mutex variable 
.TP
\fB\fITD_BAR_INIT \fP\fP
initial a mutex variable 
.TP
\fB\fITD_BAR_WAIT \fP\fP
Barrier init\&. 
.TP
\fB\fIHARE_PAR_FOR \fP\fP
Barrier wait\&. 
.SH "Member Function Documentation"
.PP 
.SS "const Value* SVF::ThreadAPI::getActualParmAtForkSite (const Instruction * inst) const\fC [inline]\fP"
Return the forth argument of the call, Note that, it is the sole argument of start routine ( a void* pointer ) 
.SS "const Value* SVF::ThreadAPI::getForkedFun (const Instruction * inst) const\fC [inline]\fP"
Return the third argument of the call, Note that, it could be function type or a void* pointer 
.SS "const Value* SVF::ThreadAPI::getForkedThread (const Instruction * inst) const\fC [inline]\fP"

.PP
Return arguments/attributes of pthread_create / hare_parallel_for\&. Return the first argument of the call, Note that, it is the pthread_t pointer 
.SS "const Value* SVF::ThreadAPI::getJoinedThread (const Instruction * inst) const\fC [inline]\fP"

.PP
Return arguments/attributes of pthread_join\&. Return the first argument of the call, Note that, it is the pthread_t pointer 
.SS "const Value* SVF::ThreadAPI::getLockVal (const Instruction * inst) const\fC [inline]\fP"

.PP
Return lock value\&. First argument of pthread_mutex_lock/pthread_mutex_unlock 
.SS "const Value* SVF::ThreadAPI::getRetParmAtJoinedSite (const Instruction * inst) const\fC [inline]\fP"
Return the send argument of the call, Note that, it is the pthread_t pointer 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
