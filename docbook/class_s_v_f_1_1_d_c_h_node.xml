<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_d_c_h_node" xml:lang="en-US">
<title>SVF::DCHNode Class Reference</title>
<indexterm><primary>SVF::DCHNode</primary></indexterm>
<para>Inheritance diagram for SVF::DCHNode:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_d_c_h_node.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3"/>enum <emphasis role="strong">CLASSATTR</emphasis> { <emphasis role="strong">PURE_ABSTRACT</emphasis> = 0x1
, <emphasis role="strong">MULTI_INHERITANCE</emphasis> = 0x2
, <emphasis role="strong">TEMPLATE</emphasis> = 0x04
, <emphasis role="strong">SCALAR</emphasis> = 0x08
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1aebd4fb544e8a97164901ab602e0fe7fc"/>typedef std::vector&lt; const Function * &gt; <emphasis role="strong">FuncVector</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a3e81cc40aa1c37999cead00f1af85a6e"/><emphasis role="strong">DCHNode</emphasis> (const DIType *diType, NodeID i=0, <link linkend="_class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c">GNodeK</link> k=0)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1aaf4036d892bdae02a01d31bfe3db2153"/>const DIType * <emphasis role="strong">getType</emphasis> (void) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a089af6085dec833b58133a9e834dab54"/>std::string <emphasis role="strong">getName</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a4e08c543fa2ae557ff835b1a0f3c53a4"/>void <link linkend="_class_s_v_f_1_1_d_c_h_node_1a4e08c543fa2ae557ff835b1a0f3c53a4">setFlag</link> (CLASSATTR mask)</para>

<para>Flags. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a743bc5df582114c45d1907d62a42a39c"/>bool <emphasis role="strong">hasFlag</emphasis> (CLASSATTR mask) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1afa271fdb9c1aa3589f41655813a2de8e"/>void <link linkend="_class_s_v_f_1_1_d_c_h_node_1afa271fdb9c1aa3589f41655813a2de8e">setPureAbstract</link> ()</para>

<para>Attribute. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a798e80f0cc5951789474abc3a0999166"/>void <emphasis role="strong">setMultiInheritance</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a3947007a7b8074f06064e34de9d980fe"/>void <emphasis role="strong">setTemplate</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a917265fa44ed08b66a6bd722f318bfa4"/>void <emphasis role="strong">setScalar</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1aed5e8397d43b602b79425acdae5e01f5"/>bool <emphasis role="strong">isPureAbstract</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a42026e30e790bce5be03da3e45353c8d"/>bool <emphasis role="strong">isMultiInheritance</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1ada436c7cb9108898c520952a87ebd01d"/>bool <emphasis role="strong">isTemplate</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a50cf99ff5cc910512c1ce3987c7395ef"/>bool <emphasis role="strong">isScalar</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a9d1016e3da3462664198b1125dfc8f6e"/>void <emphasis role="strong">addTypedef</emphasis> (const DIDerivedType *diTypedef)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1ac77edc44c3c5acc185c27c018837d066"/>const Set&lt; const DIDerivedType * &gt; &amp; <emphasis role="strong">getTypedefs</emphasis> (void) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1ab8a339276172b8aa0fc915e5bde0b3db"/>void <emphasis role="strong">setVTable</emphasis> (const GlobalValue *vtbl)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a1a75ca91148992166d42d245d6c51988"/>const GlobalValue * <emphasis role="strong">getVTable</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a0669b995c4fe72f206154f5cf6889fe8"/>const std::vector&lt; std::vector&lt; const Function * &gt; &gt; &amp; <link linkend="_class_s_v_f_1_1_d_c_h_node_1a0669b995c4fe72f206154f5cf6889fe8">getVfnVectors</link> (void) const</para>

<para>Returns the vector of virtual function vectors. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_c_h_node_1a11ad6b4fc518f6307727f6b76f7f6f53"/>std::vector&lt; const Function * &gt; &amp; <link linkend="_class_s_v_f_1_1_d_c_h_node_1a11ad6b4fc518f6307727f6b76f7f6f53">getVfnVector</link> (unsigned n)</para>

<para>Return the nth virtual function vector in the vtable. </para>
</listitem>
        </itemizedlist>
</simplesect>
<para>
The documentation for this class was generated from the following file:</para>
include/SVF-FE/DCHG.h</section>
