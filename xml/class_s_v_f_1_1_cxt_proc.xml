<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_proc" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtProc</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_cxt_thread_proc" prot="public" virt="non-virtual">SVF::CxtThreadProc</derivedcompoundref>
    <includes refid="_cxt_stmt_8h" local="no">CxtStmt.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_proc_1af5f186c71d815dabcbfab6bae7c57b59" prot="protected" static="no" mutable="no">
        <type>CallStrCxt</type>
        <definition>CallStrCxt SVF::CxtProc::cxt</definition>
        <argsstring></argsstring>
        <name>cxt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="379" column="16" bodyfile="include/Util/CxtStmt.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_proc_1a70b6a2ae40bd7e4b08ddcb6d6b0289df" prot="protected" static="no" mutable="no">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::CxtProc::fun</definition>
        <argsstring></argsstring>
        <name>fun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="380" column="23" bodyfile="include/Util/CxtStmt.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1ac1ca3a049f6d0f8a0548a153cc903aa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtProc::CxtProc</definition>
        <argsstring>(const CallStrCxt &amp;c, const SVFFunction *f)</argsstring>
        <name>CxtProc</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="307" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a25a80c93a6aeb1112a846d6c588364cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtProc::CxtProc</definition>
        <argsstring>(const CxtProc &amp;ctm)</argsstring>
        <name>CxtProc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
          <declname>ctm</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="312" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a94195be123e936ae55ea5c503b7f887f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtProc::~CxtProc</definition>
        <argsstring>()</argsstring>
        <name>~CxtProc</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="317" column="13" bodyfile="include/Util/CxtStmt.h" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1ab9ac6459c90873b7dea35e0a22700189" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::CxtProc::getProc</definition>
        <argsstring>() const</argsstring>
        <name>getProc</name>
        <briefdescription>
<para>Return current procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="321" column="30" bodyfile="include/Util/CxtStmt.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a99b0f68b4cbd733f91eea33aa3e64eb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallStrCxt &amp;</type>
        <definition>const CallStrCxt&amp; SVF::CxtProc::getContext</definition>
        <argsstring>() const</argsstring>
        <name>getContext</name>
        <briefdescription>
<para>Return current context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="326" column="29" bodyfile="include/Util/CxtStmt.h" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1ab58a8dc44944ac2ab3280562a8306e7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtProc::operator&lt;</definition>
        <argsstring>(const CxtProc &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="332" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a617c7ee432ac89cf419dfad47854e3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
        <definition>CxtProc&amp; SVF::CxtProc::operator=</definition>
        <argsstring>(const CxtProc &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="340" column="20" bodyfile="include/Util/CxtStmt.h" bodystart="340" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a7e019158f464401c6d7fc5676d48d69c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtProc::operator==</definition>
        <argsstring>(const CxtProc &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="350" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a1e9e5490dead73e1cd9ddd964848eb13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtProc::operator!=</definition>
        <argsstring>(const CxtProc &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="355" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1ac53f22f1e9547b15b8998d83290f4281" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CxtProc::cxtToStr</definition>
        <argsstring>() const</argsstring>
        <name>cxtToStr</name>
        <briefdescription>
<para>Return context in string format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="360" column="24" bodyfile="include/Util/CxtStmt.h" bodystart="360" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_proc_1a254c612f06a3f82b57b1c5a0e52c012f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtProc::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="373" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="373" bodyend="376"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context-sensitive procedure &lt;c,m&gt; c represent current context m represent current procedure </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::CxtProc</label>
        <link refid="class_s_v_f_1_1_cxt_proc"/>
      </node>
      <node id="2">
        <label>SVF::CxtThreadProc</label>
        <link refid="class_s_v_f_1_1_cxt_thread_proc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::CxtProc</label>
        <link refid="class_s_v_f_1_1_cxt_proc"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fun</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFFunction</label>
        <link refid="class_s_v_f_1_1_s_v_f_function"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFValue</label>
        <link refid="class_s_v_f_1_1_s_v_f_value"/>
      </node>
    </collaborationgraph>
    <location file="include/Util/CxtStmt.h" line="303" column="1" bodyfile="include/Util/CxtStmt.h" bodystart="304" bodyend="381"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_proc_1af5f186c71d815dabcbfab6bae7c57b59" prot="protected" virt="non-virtual"><scope>SVF::CxtProc</scope><name>cxt</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ac1ca3a049f6d0f8a0548a153cc903aa0" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>CxtProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a25a80c93a6aeb1112a846d6c588364cc" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>CxtProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ac53f22f1e9547b15b8998d83290f4281" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>cxtToStr</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a254c612f06a3f82b57b1c5a0e52c012f" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a70b6a2ae40bd7e4b08ddcb6d6b0289df" prot="protected" virt="non-virtual"><scope>SVF::CxtProc</scope><name>fun</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a99b0f68b4cbd733f91eea33aa3e64eb7" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>getContext</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ab9ac6459c90873b7dea35e0a22700189" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>getProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a1e9e5490dead73e1cd9ddd964848eb13" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ab58a8dc44944ac2ab3280562a8306e7b" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a617c7ee432ac89cf419dfad47854e3a5" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a7e019158f464401c6d7fc5676d48d69c" prot="public" virt="non-virtual"><scope>SVF::CxtProc</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a94195be123e936ae55ea5c503b7f887f" prot="public" virt="virtual"><scope>SVF::CxtProc</scope><name>~CxtProc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
