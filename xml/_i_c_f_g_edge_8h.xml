<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_i_c_f_g_edge_8h" kind="file" language="C++">
    <compoundname>ICFGEdge.h</compoundname>
    <includedby refid="_i_c_f_g_8h" local="yes">include/Graphs/ICFG.h</includedby>
    <includedby refid="_i_c_f_g_node_8h" local="yes">include/Graphs/ICFGNode.h</includedby>
    <includedby refid="_graph2_json_8h" local="yes">include/SVF-FE/Graph2Json.h</includedby>
    <invincdepgraph>
      <node id="16">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="51">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>include/Graphs/PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="3">
        <label>include/Graphs/ICFGStat.h</label>
        <link refid="_i_c_f_g_stat_8h_source"/>
      </node>
      <node id="54">
        <label>include/SVF-FE/Graph2Json.h</label>
        <link refid="_graph2_json_8h_source"/>
      </node>
      <node id="53">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="40">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="7">
        <label>include/Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="56">
        <label>include/Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/WPA/CSC.h</label>
        <link refid="_c_s_c_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="30">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="29">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="46">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="47">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="32">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="39">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/MemoryModel/PAGBuilderFromFile.h</label>
        <link refid="_p_a_g_builder_from_file_8h_source"/>
      </node>
      <node id="25">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="14">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="1">
        <label>include/Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="18">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="43">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>include/Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="60">
        <label>include/SABER/SaberCheckerAPI.h</label>
        <link refid="_saber_checker_a_p_i_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="55">
        <label>include/SVF-FE/PAGBuilder.h</label>
        <link refid="_p_a_g_builder_8h_source"/>
      </node>
      <node id="50">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>include/SVF-FE/ICFGBuilder.h</label>
        <link refid="_i_c_f_g_builder_8h_source"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_i_c_f_g_edge" prot="public">SVF::ICFGEdge</innerclass>
    <innerclass refid="class_s_v_f_1_1_intra_c_f_g_edge" prot="public">SVF::IntraCFGEdge</innerclass>
    <innerclass refid="class_s_v_f_1_1_call_c_f_g_edge" prot="public">SVF::CallCFGEdge</innerclass>
    <innerclass refid="class_s_v_f_1_1_ret_c_f_g_edge" prot="public">SVF::RetCFGEdge</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>ICFGEdge.h<sp/>--<sp/>ICFG<sp/>edge------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2018&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ICFGEdge.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Sep<sp/>11,<sp/>2018</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ICFGEdge_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ICFGEdge_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ICFGNode;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_edge" kindref="compound">GenericEdge&lt;ICFGNode&gt;</ref><sp/><ref refid="namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404" kindref="member">GenericICFGEdgeTy</ref>;</highlight></codeline>
<codeline lineno="42" refid="class_s_v_f_1_1_i_c_f_g_edge" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_edge" kindref="compound">GenericICFGEdgeTy</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49" refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdgeK</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntraCF,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallCF,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RetCF,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdgeK</ref><sp/>SVFGEdgeK;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60" refid="class_s_v_f_1_1_i_c_f_g_edge_1a9b8f369727bd03106bafacd4eee3dd04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a9b8f369727bd03106bafacd4eee3dd04" kindref="member">ICFGEdge</ref>(<ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>s,<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>d,<sp/><ref refid="class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614" kindref="member">GEdgeFlag</ref><sp/>k)<sp/>:<sp/><ref refid="class_s_v_f_1_1_generic_edge" kindref="compound">GenericICFGEdgeTy</ref>(s,d,k)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64" refid="class_s_v_f_1_1_i_c_f_g_edge_1a6dea0df51f68b621fcabef6a3ce9e778" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a6dea0df51f68b621fcabef6a3ce9e778" kindref="member">~ICFGEdge</ref>()</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"></codeline>
<codeline lineno="70" refid="class_s_v_f_1_1_i_c_f_g_edge_1a3d3813be0b873335b17bb590e130d173" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a3d3813be0b873335b17bb590e130d173" kindref="member">isCFGEdge</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="71"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEdgeKind()<sp/>==<sp/>IntraCF<sp/>||<sp/>getEdgeKind()<sp/>==<sp/>CallCF<sp/>||<sp/>getEdgeKind()<sp/>==<sp/>RetCF;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCallCFGEdge()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="75"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEdgeKind()<sp/>==<sp/>CallCF;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRetCFGEdge()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEdgeKind()<sp/>==<sp/>RetCF;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isIntraCFGEdge()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEdgeKind()<sp/>==<sp/>IntraCF;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GenericNode&lt;ICFGNode,ICFGEdge&gt;::GEdgeSetTy<sp/>ICFGEdgeSetTy;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ICFGEdgeSetTy<sp/>SVFGEdgeSetTy;</highlight></codeline>
<codeline lineno="90" refid="class_s_v_f_1_1_i_c_f_g_edge_1a00b2650d7afd8b98c108d6a168299993" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614" kindref="member">GEdgeFlag</ref><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a00b2650d7afd8b98c108d6a168299993" kindref="member">makeEdgeFlagWithInvokeID</ref>(GEdgeKind<sp/>k,<sp/>CallSiteID<sp/>cs)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cs<sp/>&lt;&lt;<sp/><ref refid="class_s_v_f_1_1_generic_edge_1af1c2fd4b5ef1d7b7605572bf2489c298" kindref="member">EdgeKindMaskBits</ref>)<sp/>|<sp/>k;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"></codeline>
<codeline lineno="97" refid="class_s_v_f_1_1_i_c_f_g_edge_1a19a7a4e97b497d5ecc48016181ec58ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref>&amp;<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a19a7a4e97b497d5ecc48016181ec58ce" kindref="member">operator&lt;&lt; </ref>(<ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref><sp/>&amp;o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref><sp/>&amp;edge)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>&lt;&lt;<sp/>edge.toString();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_s_v_f_1_1_intra_c_f_g_edge" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_intra_c_f_g_edge" kindref="compound">IntraCFGEdge</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="class_s_v_f_1_1_intra_c_f_g_edge_1a92c78050b62f802fff360bac02cd42dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>Value*,NodeID&gt;<sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a92c78050b62f802fff360bac02cd42dd" kindref="member">BranchCondition</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="class_s_v_f_1_1_intra_c_f_g_edge_1aeab701d63caadf8effabdbd23ac0cd49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1aeab701d63caadf8effabdbd23ac0cd49" kindref="member">IntraCFGEdge</ref>(<ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>s,<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>d):<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref>(s,d,IntraCF)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"></codeline>
<codeline lineno="128" refid="class_s_v_f_1_1_intra_c_f_g_edge_1a70bdadf898a10c6db89e9f432529092c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a70bdadf898a10c6db89e9f432529092c" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge" kindref="compound">IntraCFGEdge</ref><sp/>*)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a70bdadf898a10c6db89e9f432529092c" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>IntraCF;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a70bdadf898a10c6db89e9f432529092c" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404" kindref="member">GenericICFGEdgeTy</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>IntraCF;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a92c78050b62f802fff360bac02cd42dd" kindref="member">BranchCondition</ref>&amp;<sp/>getBranchCondtion(){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>brCondition;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBranchCondtion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>pNode,<sp/>NodeID<sp/>branchID){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brCondition<sp/>=<sp/>std::make_pair(pNode,branchID);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_intra_c_f_g_edge_1a92c78050b62f802fff360bac02cd42dd" kindref="member">BranchCondition</ref><sp/>brCondition;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="class_s_v_f_1_1_call_c_f_g_edge" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_call_c_f_g_edge" kindref="compound">CallCFGEdge</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref></highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/>cs;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="169" refid="class_s_v_f_1_1_call_c_f_g_edge_1ab62ae6ed463def78bb2cdc01527d4b02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge_1ab62ae6ed463def78bb2cdc01527d4b02" kindref="member">CallCFGEdge</ref>(<ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>s,<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/>c):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref>(s,d,CallCF),cs(c)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174" refid="class_s_v_f_1_1_call_c_f_g_edge_1ab25becb3cae2747eb518a6bfc7ad5332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge_1ab25becb3cae2747eb518a6bfc7ad5332" kindref="member">getCallSite</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="175"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"></codeline>
<codeline lineno="180" refid="class_s_v_f_1_1_call_c_f_g_edge_1a38b56212fb58934ee50079b1e69ad5ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge_1a38b56212fb58934ee50079b1e69ad5ff" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge" kindref="compound">CallCFGEdge</ref><sp/>*)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge_1a38b56212fb58934ee50079b1e69ad5ff" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>CallCF;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_c_f_g_edge_1a38b56212fb58934ee50079b1e69ad5ff" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404" kindref="member">GenericICFGEdgeTy</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>CallCF;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="class_s_v_f_1_1_ret_c_f_g_edge" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_ret_c_f_g_edge" kindref="compound">RetCFGEdge</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref></highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/>cs;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206" refid="class_s_v_f_1_1_ret_c_f_g_edge_1a4754147b969bd3cd912b98dfd3fbe48a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge_1a4754147b969bd3cd912b98dfd3fbe48a" kindref="member">RetCFGEdge</ref>(<ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>s,<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/>c):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref>(s,d,RetCF),cs(c)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211" refid="class_s_v_f_1_1_ret_c_f_g_edge_1a121c3069d4c82b56a0398fd517a9a714" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge_1a121c3069d4c82b56a0398fd517a9a714" kindref="member">getCallSite</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="212"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"></codeline>
<codeline lineno="217" refid="class_s_v_f_1_1_ret_c_f_g_edge_1aa26fbdb6a5fc801eef8a7f59ea28bc3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge_1aa26fbdb6a5fc801eef8a7f59ea28bc3a" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge" kindref="compound">RetCFGEdge</ref><sp/>*)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge_1aa26fbdb6a5fc801eef8a7f59ea28bc3a" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>RetCF;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ret_c_f_g_edge_1aa26fbdb6a5fc801eef8a7f59ea28bc3a" kindref="member">classof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404" kindref="member">GenericICFGEdgeTy</ref><sp/>*edge)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge-&gt;getEdgeKind()<sp/>==<sp/>RetCF;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ICFGEdge_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/Graphs/ICFGEdge.h"/>
  </compounddef>
</doxygen>
