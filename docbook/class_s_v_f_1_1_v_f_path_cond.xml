<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_v_f_path_cond" xml:lang="en-US">
<title>SVF::VFPathCond Class Reference</title>
<indexterm><primary>SVF::VFPathCond</primary></indexterm>
<para>Inheritance diagram for SVF::VFPathCond:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_v_f_path_cond.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1aa3b138bed5ec7f1c7533cf6ac5571310"/>typedef <link linkend="_struct_dd_node">PathCondAllocator::Condition</link> <emphasis role="strong">PathCond</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a17f76b046c8f968b559b2d3e4b2ddf57"/>typedef std::vector&lt; std::pair&lt; NodeID, NodeID &gt; &gt; <emphasis role="strong">EdgeSet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1ac103b1478b15083b989969d5461db212"/><link linkend="_class_s_v_f_1_1_v_f_path_cond_1ac103b1478b15083b989969d5461db212">VFPathCond</link> (<link linkend="_struct_dd_node">PathCond</link> *p=PathCondAllocator::trueCond())</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1ab6826c1ee28ed96fa736cdf7323f600c"/><link linkend="_class_s_v_f_1_1_v_f_path_cond_1ab6826c1ee28ed96fa736cdf7323f600c">VFPathCond</link> (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp;cond)</para>

<para>Copy Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a6d8d2ec399adff481ddc6e9210614e06"/>virtual <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a6d8d2ec399adff481ddc6e9210614e06">~VFPathCond</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a802d1c1f0114b5adf179dd09b765c666"/>u32_t <emphasis role="strong">getMaxPathLen</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a8e9b42c314d4d182252e171b5b7f8cc4"/><link linkend="_struct_dd_node">PathCond</link> * <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a8e9b42c314d4d182252e171b5b7f8cc4">getPaths</link> () const</para>

<para>Return paths. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a451e3476a1d20f232f401d74b2e91589"/>const EdgeSet &amp; <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a451e3476a1d20f232f401d74b2e91589">getVFEdges</link> () const</para>

<para>Return paths. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a77e2e07d2c428ac80fe6edafbbb3986b"/>void <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a77e2e07d2c428ac80fe6edafbbb3986b">setPaths</link> (<link linkend="_struct_dd_node">PathCond</link> *p, const EdgeSet &amp;e)</para>

<para>Set paths. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a8fc62f3aa9faf26b2618ab13dade33b8"/>u32_t <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a8fc62f3aa9faf26b2618ab13dade33b8">pathLen</link> () const</para>

<para>Get path length. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1adbf3026a7f2a9cbbb1de55159e264263"/>void <link linkend="_class_s_v_f_1_1_v_f_path_cond_1adbf3026a7f2a9cbbb1de55159e264263">addVFEdge</link> (NodeID from, NodeID to)</para>

<para>Add <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> Edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a64edbab728287b8a263ea25670671724"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a64edbab728287b8a263ea25670671724">hasVFEdge</link> (NodeID from, NodeID to) const</para>

<para>Has <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> Edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1abb236b6b551cb58e4fb483c07aa5aa77"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1abb236b6b551cb58e4fb483c07aa5aa77">hasIncomingEdge</link> (NodeID node) const</para>

<para>Whether Node dst has incoming edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a86e063928329b21cce0a319efac56fb9"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a86e063928329b21cce0a319efac56fb9">hasOutgoingEdge</link> (NodeID node) const</para>

<para>Whether Node dst has outgoing edge. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1aaaff4d4ebd59e3310175e3f672809a16">addPath</link> (<link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> *allocator, <link linkend="_struct_dd_node">PathCond</link> *c, NodeID from, NodeID to)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a30d0d29c2ca641335bc82bfda6031a17"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a30d0d29c2ca641335bc82bfda6031a17">condAnd</link> (<link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> *allocator, <link linkend="_struct_dd_node">PathCond</link> *c)</para>

<para>Condition operatoration. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a3b41fe4efc9382e045d2ec0122bb37d7"/>void <emphasis role="strong">condOr</emphasis> (<link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> *allocator, <link linkend="_struct_dd_node">PathCond</link> *c)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1adfec3fe0885067b6bd4455d9c12609b5">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a4bc59244e43d7db4478b0b9f868a0dab"/><link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp; <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a4bc59244e43d7db4478b0b9f868a0dab">operator=</link> (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a475c7d4b05dbde2dc9aed2699dacc2bb"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a475c7d4b05dbde2dc9aed2699dacc2bb">operator==</link> (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a6511e52c695247cd887f04ef37de15ff"/>bool <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a6511e52c695247cd887f04ef37de15ff">operator!=</link> (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp;rhs) const</para>

<para>Overloading operator!=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a9b7b81222fc7a128f9f48034d050ce06"/>std::string <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a9b7b81222fc7a128f9f48034d050ce06">vfEdgesTrace</link> () const</para>

<para>Get value-flow edge traces. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1a21665a89c2ba52de5754c2faad53166c"/>std::string <link linkend="_class_s_v_f_1_1_v_f_path_cond_1a21665a89c2ba52de5754c2faad53166c">toString</link> () const</para>

<para>Dump context condition. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1ab1ad3045a8a42ce75fcfaba9b5c0ec63"/>static void <link linkend="_class_s_v_f_1_1_v_f_path_cond_1ab1ad3045a8a42ce75fcfaba9b5c0ec63">setMaxPathLen</link> (u32_t max)</para>

<para>set max path limit </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1aa02a7074d4bfa09996006f04bbfb57a6"/>static u32_t <emphasis role="strong">maximumPath</emphasis> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1aaaff4d4ebd59e3310175e3f672809a16"/>    <section>
    <title>addPath()</title>
<indexterm><primary>addPath</primary><secondary>SVF::VFPathCond</secondary></indexterm>
<indexterm><primary>SVF::VFPathCond</primary><secondary>addPath</secondary></indexterm>
<para><computeroutput>bool SVF::VFPathCond::addPath (<link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> * allocator, <link linkend="_struct_dd_node">PathCond</link> * c, NodeID from, NodeID to)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>drop condition when existing a loop (vf cycle)</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_path_cond_1adfec3fe0885067b6bd4455d9c12609b5"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::VFPathCond</secondary></indexterm>
<indexterm><primary>SVF::VFPathCond</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::VFPathCond::operator&lt; (const <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Util/DPItem.hlib/Util/PathCondAllocator.cpp</section>
</section>
