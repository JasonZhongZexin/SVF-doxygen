<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver" xml:lang="en-US">
<title>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt; Class Template Reference</title>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;DDAVFSolver.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a502207f81ed22fa42f9e18ccba83ad4e"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * &gt; <emphasis role="strong">SVFGSCC</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af6e05e87ba8d6b6ae65807803b1b0221"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * &gt; <emphasis role="strong">CallGraphSCC</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ac227096ad71dfda8bc48c139fccb3af2"/>typedef PTACallGraphEdge::CallInstSet <emphasis role="strong">CallInstSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7248a3fe0078a2b13786765b5f014ba6"/>typedef PAG::CallSiteSet <emphasis role="strong">CallSiteSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a05d6b074b04aad7dc1f3cbe0ca587467"/>typedef OrderedSet&lt; DPIm &gt; <emphasis role="strong">DPTItemSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a8b5a34679fb1362425c88d6e74b6c019"/>typedef OrderedMap&lt; DPIm, CPtSet &gt; <emphasis role="strong">DPImToCPtSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af0538abf12c01d31a0296553e2f7c92d"/>typedef OrderedMap&lt; DPIm, CVar &gt; <emphasis role="strong">DPMToCVarMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2ccbcfa949a1796094b5d9499177fc2b"/>typedef OrderedMap&lt; DPIm, DPIm &gt; <emphasis role="strong">DPMToDPMMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aab76f98ae4f0c1f62f101ac5c5fdbf83"/>typedef OrderedMap&lt; NodeID, DPTItemSet &gt; <emphasis role="strong">LocToDPMVecMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aef98e8e9144a69bb7481fef5d2dcb303"/>typedef OrderedSet&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> * &gt; <emphasis role="strong">ConstSVFGEdgeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a6489319b33a807f7caba2d34017a3e1b"/>typedef SVFGEdge::SVFGEdgeSetTy <emphasis role="strong">SVFGEdgeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1accaacd2dd680f92ff83cfe75eef6ffab"/>typedef OrderedMap&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *, DPTItemSet &gt; <emphasis role="strong">StoreToPMSetMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7ee96b513074c283d23434590ce15e7d"/><link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7ee96b513074c283d23434590ce15e7d">DDAVFSolver</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a211f2f0c572d5085d22c2cb40341b606"/>virtual <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a211f2f0c572d5085d22c2cb40341b606">~DDAVFSolver</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a73bbf4f763316e8d5db62d163da35a18"/>NodeBS &amp; <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a73bbf4f763316e8d5db62d163da35a18">getCandidateQueries</link> ()</para>

<para>Return candidate pointers for DDA. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ad7d92fad8606d5512786a7b7a08930e2"/>virtual DPIm <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ad7d92fad8606d5512786a7b7a08930e2">getDPIm</link> (const CVar &amp;var, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *loc) const</para>

<para>Given CVar and location (SVFGNode) return a new <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a99764ee5bc19378795fe464e9036e78b"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a99764ee5bc19378795fe464e9036e78b">unionDDAPts</link> (CPtSet &amp;pts, const CPtSet &amp;targetPts)</para>

<para>Union pts. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae7949e141978474f3b6cb510bacafa37"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae7949e141978474f3b6cb510bacafa37">unionDDAPts</link> (DPIm dpm, const CPtSet &amp;targetPts)</para>

<para>Union pts. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a5a8632a957fce63f186dd8b657566dd2"/>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a5a8632a957fce63f186dd8b657566dd2">addDDAPts</link> (CPtSet &amp;pts, const CVar &amp;var)</para>

<para>Add pts. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1acb7980c7e0d1d8ad6abab0b80831d2a9"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1acb7980c7e0d1d8ad6abab0b80831d2a9">getSVFG</link> () const</para>

<para>Return <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1fdd7c0efa8f0506edfba2da8f2b3cc0"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">SVFGSCC</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1fdd7c0efa8f0506edfba2da8f2b3cc0">getSVFGSCC</link> () const</para>

<para>Return SVFGSCC. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa4dc73ea65f736282a413a9d286141e5"/>void <emphasis role="strong">dumpCPtSet</emphasis> (const CPtSet &amp;cpts) const</para>
</listitem>
            <listitem><para>virtual const CPtSet &amp; <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a52737dd41c63404ef91691154aa250ce">findPT</link> (const DPIm &amp;dpm)</para>

<para>Compute points-to. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a99f631cf1bc438e3f08f7f935e98e38d">handleSingleStatement</link> (const DPIm &amp;dpm, CPtSet &amp;pts)</para>

<para>Handle single statement. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a8c5220108a65fa281959529cb1e9cc57">reCompute</link> (const DPIm &amp;dpm)</para>

<para>recompute points-to for value-flow cycles and indirect calls </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ace037388135f272365cee2e87844bfba">reComputeForEdges</link> (const DPIm &amp;dpm, const SVFGEdgeSet &amp;edgeSet, bool indirectCall=false)</para>

<para>Traverse along out edges to find all nodes which may be affected by locDPM. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af2a0732401e5904ebf81878d3ffe0675"/>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1af2a0732401e5904ebf81878d3ffe0675">buildSVFG</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *pag)</para>

<para>Build <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1afe518d3d7f8051de5b9860f2460aa1b7"/>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1afe518d3d7f8051de5b9860f2460aa1b7">resetQuery</link> ()</para>

<para>Reset visited map for next points-to query. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ab60c701f1881d88aa4440991fb972638"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ab60c701f1881d88aa4440991fb972638">OOBResetVisited</link> ()</para>

<para>Reset visited map if the current query is out-of-budget. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a55803a2d30137b5ad15c5afeec7c6b28"/>const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a55803a2d30137b5ad15c5afeec7c6b28">getDefSVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>

<para>GetDefinition <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a040bc02742836b0a6d46ce3c3e89fa46"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a040bc02742836b0a6d46ce3c3e89fa46">backtraceAlongIndirectVF</link> (CPtSet &amp;pts, const DPIm &amp;oldDpm)</para>

<para>Backward traverse along indirect value flows. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7a6af30f30f32d55fc910f2ae4909791"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7a6af30f30f32d55fc910f2ae4909791">backtraceAlongDirectVF</link> (CPtSet &amp;pts, const DPIm &amp;oldDpm)</para>

<para>Backward traverse along direct value flows. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af83f88f2ae2456f2691e8822d56b1598"/>class <emphasis role="strong">DDAStat</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1afdecfbacc64cb8d694268aa73ec8a7b6"/>bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1afdecfbacc64cb8d694268aa73ec8a7b6">outOfBudgetQuery</link></para>

<para>Whether the current query is out of step limits. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af08857f907caa32c090eed2c1b404729"/><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1af08857f907caa32c090eed2c1b404729">_pag</link></para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a74d83f06e8fc0ecedc1e1846030c99c6"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a74d83f06e8fc0ecedc1e1846030c99c6">_svfg</link></para>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa1d1b6e8cc23f0a6d3935cbe4f02cbdf"/><link linkend="_class_s_v_f_1_1_andersen_wave_diff">AndersenWaveDiff</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa1d1b6e8cc23f0a6d3935cbe4f02cbdf">_ander</link></para>

<para><link linkend="_class_s_v_f_1_1_andersen">Andersen</link>&apos;s analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae0e78fafb7eec0fbc1a02d24547335e9"/>NodeBS <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae0e78fafb7eec0fbc1a02d24547335e9">candidateQueries</link></para>

<para>candidate pointers; </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1abf24080617c6a74abed9f0bb0bc9c0c5"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1abf24080617c6a74abed9f0bb0bc9c0c5">_callGraph</link></para>

<para>CallGraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4c307d486756daa1e79595b1e9edc40a"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">CallGraphSCC</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4c307d486756daa1e79595b1e9edc40a">_callGraphSCC</link></para>

<para>SCC for CallGraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a54f5d4972238ae69f19c9da3b9f51644"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">SVFGSCC</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a54f5d4972238ae69f19c9da3b9f51644">_svfgSCC</link></para>

<para>SCC for <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a63d04c3af4529d0e0f82acd76ed57f6c"/>DPTItemSet <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a63d04c3af4529d0e0f82acd76ed57f6c">backwardVisited</link></para>

<para>visited map during backward traversing </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2d6df8149b45d719e22fc505df94171a"/>DPImToCPtSetMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2d6df8149b45d719e22fc505df94171a">dpmToTLCPtSetMap</link></para>

<para>points-to caching map for top-level vars </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2565bf8dcacb22350dc1dc98ec7595f2"/>DPImToCPtSetMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2565bf8dcacb22350dc1dc98ec7595f2">dpmToADCPtSetMap</link></para>

<para>points-to caching map for address-taken vars </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa724698d499615bce7caf8f312b746a7"/>LocToDPMVecMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa724698d499615bce7caf8f312b746a7">locToDpmSetMap</link></para>

<para>map location to its dpms </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9d8959dfee05685cd74d0d7a78069692"/>DPMToDPMMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9d8959dfee05685cd74d0d7a78069692">dpmToloadDpmMap</link></para>

<para>dpms at loads for may/must-alias analysis with stores </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a6d62420837fe0c7814fc4da68a91eda4"/>DPMToCVarMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a6d62420837fe0c7814fc4da68a91eda4">loadToPTCVarMap</link></para>

<para>map a load dpm to its cvar pointed by its pointer operand </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aad57a954473f3099188cf8c8fba87880"/>DPTItemSet <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1aad57a954473f3099188cf8c8fba87880">outOfBudgetDpms</link></para>

<para>out of budget dpm set </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af66895278f0ecbc882f9e4f43ef9c8a8"/>StoreToPMSetMap <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1af66895278f0ecbc882f9e4f43ef9c8a8">storeToDPMs</link></para>

<para>map store to set of DPM which have been stong updated there </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae40c7bad663e0fa07dee4be3d1794ff2"/><link linkend="_class_s_v_f_1_1_d_d_a_stat">DDAStat</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae40c7bad663e0fa07dee4be3d1794ff2">ddaStat</link></para>

<para>DDA stat. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a0d563fe8b016b27a58f5b054fec9c38a"/><link linkend="_class_s_v_f_1_1_s_v_f_g_builder">SVFGBuilder</link> <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a0d563fe8b016b27a58f5b054fec9c38a">svfgBuilder</link></para>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> Builder. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1acd694c2092adf8c516d1aba5f798cec7">startNewPTCompFromLoadSrc</link> (CPtSet &amp;pts, const DPIm &amp;oldDpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aff744e724dcf06a2b1cdd7ba2b1093f1"/>void <emphasis role="strong">startNewPTCompFromStoreDst</emphasis> (CPtSet &amp;pts, const DPIm &amp;oldDpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1adbd209b4a2327b2b068fbb56e12042f7"/>void <emphasis role="strong">backtraceToStoreSrc</emphasis> (CPtSet &amp;pts, const DPIm &amp;oldDpm)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1af6a6243b497df5fdab9f658b9add9c8a">backwardPropDpm</link> (CPtSet &amp;pts, NodeID ptr, const DPIm &amp;oldDpm, const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *edge)</para>

<para>dpm transit during backward tracing </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a345e5379f53b618adef014aa6887bfe7"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a345e5379f53b618adef014aa6887bfe7">isMustAlias</link> (const DPIm &amp;, const DPIm &amp;)</para>

<para>whether load and store are aliased </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a94bcddbc7b9ccecb3fbb693b13372785">isStrongUpdate</link> (const CPtSet &amp;dstCPSet, const <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreSVFGNode</link> *store)</para>

<para>Return TRUE if this is a strong update STORE statement. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a20cadb651b41343437e135e985c4e566"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a20cadb651b41343437e135e985c4e566">isLocalCVarInRecursion</link> (const CVar &amp;var) const</para>

<para>Whether a local variable is in function recursions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ace35b8247204d9806ca1a4f01bff2364"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ace35b8247204d9806ca1a4f01bff2364">propagateViaObj</link> (const CVar &amp;storeObj, const CVar &amp;loadObj)</para>

<para>If the points-to contain the object obj, we could move forward along indirect value-flow edge. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1afcc074be34dd0c45418ff16b3d9d4192">resolveFunPtr</link> (const DPIm &amp;dpm)</para>

<para>resolve function pointer </para>
</listitem>
            <listitem><para>virtual NodeID <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a3fa002d4ba4194ffde62ecbdd361a24d">getPtrNodeID</link> (const CVar &amp;var) const =0</para>

<para>Methods to be implemented in child class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ab10a34efa1acb6125ea32cf7a8cf919f"/>virtual CPtSet <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ab10a34efa1acb6125ea32cf7a8cf919f">processGepPts</link> (const <link linkend="_class_s_v_f_1_1_gep_v_f_g_node">GepSVFGNode</link> *gep, const CPtSet &amp;srcPts)=0</para>

<para>ProcessGep node to generate field object nodes of a struct. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1acfe7d961caac8f0f558881a9a006b1fa"/>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1acfe7d961caac8f0f558881a9a006b1fa">handleAddr</link> (CPtSet &amp;pts, const DPIm &amp;dpm, const <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrSVFGNode</link> *addr)=0</para>

<para>Handle AddrSVFGNode to add proper points-to. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a38f5a6b666b2a427d55f1217f9c5595f"/>virtual CPtSet <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a38f5a6b666b2a427d55f1217f9c5595f">getConservativeCPts</link> (const DPIm &amp;dpm)=0</para>

<para>Get conservative points-to results when the query is out of budget. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a601282325e55badc15f3ba9141816af5"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a601282325e55badc15f3ba9141816af5">handleBKCondition</link> (DPIm &amp;, const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *)</para>

<para>Handle condition for context or path analysis (backward analysis) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4f63b6b3a06633675ae99667cbaa6cdc"/>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4f63b6b3a06633675ae99667cbaa6cdc">updateCallGraphAndSVFG</link> (const DPIm &amp;, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *, SVFGEdgeSet &amp;)</para>

<para>Update call graph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7112ce6145be0855f8b035bb0d8a331c"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7112ce6145be0855f8b035bb0d8a331c">markbkVisited</link> (const DPIm &amp;dpm)</para>

<para>Visited flags to avoid cycles. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9a9c3a8b5e4ffc89418073110e446f20"/>bool <emphasis role="strong">isbkVisited</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aa7e5839c5bc6f913561de10bce61e74b"/>void <emphasis role="strong">clearbkVisited</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae31e9281e4f1e0585fdf328b7339e1bf"/>virtual const CPtSet &amp; <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae31e9281e4f1e0585fdf328b7339e1bf">getCachedPointsTo</link> (const DPIm &amp;dpm)</para>

<para>Points-to Caching for top-level pointers and address-taken objects. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a239a55960dfbbe73df63063070a18b56"/>virtual void <emphasis role="strong">updateCachedPointsTo</emphasis> (const DPIm &amp;dpm, const CPtSet &amp;pts)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aac432dfa7ccfc3434d9e0e2eb65afe7f"/>virtual const CPtSet &amp; <emphasis role="strong">getCachedTLPointsTo</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a2a2b3783074c9f509fc265b97b979704"/>virtual const CPtSet &amp; <emphasis role="strong">getCachedADPointsTo</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7b35588de00e322afd742041bf735571"/>bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7b35588de00e322afd742041bf735571">isTopLevelPtrStmt</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *stmt)</para>

<para>Whether this is a top-level pointer statement. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ac4cb0b666d68d135c5e385bfc880fd67"/>virtual DPIm <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ac4cb0b666d68d135c5e385bfc880fd67">getDPImWithOldCond</link> (const DPIm &amp;oldDpm, const CVar &amp;var, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *loc)</para>

<para>Return dpm with old context and path conditions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aba0ec611a5cfd096ac0b8b11e0bd5580"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1aba0ec611a5cfd096ac0b8b11e0bd5580">SVFGSCCDetection</link> ()</para>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> SCC detection. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1583ed2eb1d4b88dc2a5b4c0b6842496"/>NodeID <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1583ed2eb1d4b88dc2a5b4c0b6842496">getSVFGSCCRepNode</link> (NodeID id)</para>

<para>Get SCC rep node of a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1add7daee4a0ecae479a5ab015130c8c93"/>bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1add7daee4a0ecae479a5ab015130c8c93">isSVFGNodeInCycle</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>

<para>Return whether this SVFGNode is in cycle. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a034e3c8b2eec00aee9de439dfeeda332"/>bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a034e3c8b2eec00aee9de439dfeeda332">edgeInSVFGSCC</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *edge)</para>

<para>Return TRUE if this edge is inside a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> SCC, i.e., src node and dst node are in the same SCC on the <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1afc2b0eeb1d5d5f292690f3c949217c38"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1afc2b0eeb1d5d5f292690f3c949217c38">setCallGraph</link> (<link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> *cg)</para>

<para>Set callgraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1abd652b2627f68d7d4f8bf3bdb20ce975"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1abd652b2627f68d7d4f8bf3bdb20ce975">setCallGraphSCC</link> (<link linkend="_class_s_v_f_1_1_s_c_c_detection">CallGraphSCC</link> *scc)</para>

<para>Set callgraphSCC. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a645c7d0637b49e139898016ff652e1f3"/>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a645c7d0637b49e139898016ff652e1f3">isHeapCondMemObj</link> (const CVar &amp;var, const <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreSVFGNode</link> *)</para>

<para>Check heap and array object. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9aaa5ee3dc8abc51c4b6e463e1949ee7"/>bool <emphasis role="strong">isArrayCondMemObj</emphasis> (const CVar &amp;var) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a37a6321f50bef2939b287cc088e76170"/>bool <emphasis role="strong">isFieldInsenCondMemObj</emphasis> (const CVar &amp;var) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1cd1023bca18db16bc54e622c881e494"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a1cd1023bca18db16bc54e622c881e494">addLoadDpmAndCVar</link> (const DPIm &amp;dpm, const DPIm &amp;loadDpm, const CVar &amp;loadVar)</para>

<para>LoadDpm for must-alias analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4725013a7617645e1418ed670d4837b5"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a4725013a7617645e1418ed670d4837b5">addLoadDpm</link> (const DPIm &amp;dpm, const DPIm &amp;loadDpm)</para>

<para>Note that simply use &quot;dpmToloadDpmMap[dpm]=loadDpm&quot;, requires DPIm have a default constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a630aad14a285c954a50c632f9cb13fa9"/>const DPIm &amp; <emphasis role="strong">getLoadDpm</emphasis> (const DPIm &amp;dpm) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7579491400f1781356cb7d1913537547"/>void <emphasis role="strong">addLoadCVar</emphasis> (const DPIm &amp;dpm, const CVar &amp;loadVar)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ad42efad8e857290459689833c224e467"/>const CVar &amp; <emphasis role="strong">getLoadCVar</emphasis> (const DPIm &amp;dpm) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ac39860015b45b9af6351d0343f8983bb"/><link linkend="_class_s_v_f_1_1_andersen_wave_diff">AndersenWaveDiff</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1ac39860015b45b9af6351d0343f8983bb">getAndersenAnalysis</link> () const</para>

<para>Return <link linkend="_class_s_v_f_1_1_andersen">Andersen</link>&apos;s analysis. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9005f1f0e4a808838276ff44b300f96d">handleOutOfBudgetDpm</link> (const DPIm &amp;dpm)</para>

<para>handle out-of-budget queries </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a3fb52286c5324ea3d58e22c630b307e3"/>bool <emphasis role="strong">testOutOfBudget</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7994236bff84ba8244592fdf5e546734"/>bool <emphasis role="strong">isOutOfBudgetQuery</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ae1e77060ac22d465b5cc9430962e280c"/>void <emphasis role="strong">addOutOfBudgetDpm</emphasis> (const DPIm &amp;dpm)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a0b1f774883adc7d535f8363bf3c8b1e8"/>bool <emphasis role="strong">isOutOfBudgetDpm</emphasis> (const DPIm &amp;dpm) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1adcb641eec4f620effdb3f61a46429f40"/><link linkend="_class_s_v_f_1_1_d_d_a_stat">DDAStat</link> * <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1adcb641eec4f620effdb3f61a46429f40">setDDAStat</link> (<link linkend="_class_s_v_f_1_1_d_d_a_stat">DDAStat</link> *s)</para>

<para>Set <link linkend="_class_s_v_f_1_1_d_d_a_stat">DDAStat</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1aeb6b56cf3d140d251b0524eb5cbd6dce"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1aeb6b56cf3d140d251b0524eb5cbd6dce">addSUStat</link> (const DPIm &amp;dpm, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>

<para>stat strong updates num </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7d0775354df32f293e98578ed071d33c"/>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver_1a7d0775354df32f293e98578ed071d33c">rmSUStat</link> (const DPIm &amp;dpm, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>

<para>remove strong updates num if the dpm goes to weak updates branch </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class CVar, class CPtSet, class DPIm&gt;
class SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</title></simplesect>


<para>Value-Flow Based Demand-Driven Points-to Analysis </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1af6a6243b497df5fdab9f658b9add9c8a"/>    <section>
    <title>backwardPropDpm()</title>
<indexterm><primary>backwardPropDpm</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>backwardPropDpm</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::backwardPropDpm (CPtSet &amp; pts, NodeID ptr, const DPIm &amp; oldDpm, const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> * edge)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>dpm transit during backward tracing </para>
</para>

<para>handle context-/path- sensitivity</para>

<para>record the source of load dpm</para>

<para>handle out of budget case</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a52737dd41c63404ef91691154aa250ce"/>    <section>
    <title>findPT()</title>
<indexterm><primary>findPT</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>findPT</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>virtual const CPtSet&amp; <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::findPT (const DPIm &amp; dpm)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Compute points-to. </para>
</para>

<para>Add successors of current stmt if its pts has been changed.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a3fa002d4ba4194ffde62ecbdd361a24d"/>    <section>
    <title>getPtrNodeID()</title>
<indexterm><primary>getPtrNodeID</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>getPtrNodeID</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>virtual NodeID <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::getPtrNodeID (const CVar &amp; var) const<computeroutput>[protected]</computeroutput>, <computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Methods to be implemented in child class. </para>
</para>

<para>Get variable ID (PAGNodeID) according to CVar </para>
<para>
Implemented in <link linkend="_class_s_v_f_1_1_flow_d_d_a_1a9749c82c1164adb17e2ae53e725ded9a">SVF::FlowDDA</link>, and <link linkend="_class_s_v_f_1_1_context_d_d_a_1a6ae16be6774994932aaa594c9b9cb397">SVF::ContextDDA</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a9005f1f0e4a808838276ff44b300f96d"/>    <section>
    <title>handleOutOfBudgetDpm()</title>
<indexterm><primary>handleOutOfBudgetDpm</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>handleOutOfBudgetDpm</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::handleOutOfBudgetDpm (const DPIm &amp; dpm)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>handle out-of-budget queries </para>
</para>

<para>Handle out-of-budget dpm </para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a99f631cf1bc438e3f08f7f935e98e38d"/>    <section>
    <title>handleSingleStatement()</title>
<indexterm><primary>handleSingleStatement</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>handleSingleStatement</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::handleSingleStatement (const DPIm &amp; dpm, CPtSet &amp; pts)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Handle single statement. </para>
</para>

<para>resolve function pointer first at indirect callsite</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a94bcddbc7b9ccecb3fbb693b13372785"/>    <section>
    <title>isStrongUpdate()</title>
<indexterm><primary>isStrongUpdate</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>isStrongUpdate</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::isStrongUpdate (const CPtSet &amp; dstCPSet, const <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreSVFGNode</link> * store)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return TRUE if this is a strong update STORE statement. </para>
</para>

<para>Find the unique element in cpts</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1a8c5220108a65fa281959529cb1e9cc57"/>    <section>
    <title>reCompute()</title>
<indexterm><primary>reCompute</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>reCompute</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::reCompute (const DPIm &amp; dpm)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>recompute points-to for value-flow cycles and indirect calls </para>
</para>

<para>re-compute due to indirect calls</para>

<para>callgraph scc detection for local variable in recursion</para>

<para>re-compute for transitive closures</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1ace037388135f272365cee2e87844bfba"/>    <section>
    <title>reComputeForEdges()</title>
<indexterm><primary>reComputeForEdges</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>reComputeForEdges</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::reComputeForEdges (const DPIm &amp; dpm, const SVFGEdgeSet &amp; edgeSet, bool indirectCall = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Traverse along out edges to find all nodes which may be affected by locDPM. </para>
</para>

<para>Only collect nodes we have traversed</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1afcc074be34dd0c45418ff16b3d9d4192"/>    <section>
    <title>resolveFunPtr()</title>
<indexterm><primary>resolveFunPtr</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>resolveFunPtr</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::resolveFunPtr (const DPIm &amp; dpm)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>resolve function pointer </para>
</para>

<para>use pre-analysis call graph to approximate all potential callsites</para>
    </section><anchor xml:id="_class_s_v_f_1_1_d_d_a_v_f_solver_1acd694c2092adf8c516d1aba5f798cec7"/>    <section>
    <title>startNewPTCompFromLoadSrc()</title>
<indexterm><primary>startNewPTCompFromLoadSrc</primary><secondary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</secondary></indexterm>
<indexterm><primary>SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</primary><secondary>startNewPTCompFromLoadSrc</secondary></indexterm>
<computeroutput>template&lt;class CVar , class CPtSet , class DPIm &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver</link>&lt; CVar, CPtSet, DPIm &gt;::startNewPTCompFromLoadSrc (CPtSet &amp; pts, const DPIm &amp; oldDpm)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Backward traverse for top-level pointers of load/store statements </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/DDA/DDAVFSolver.h</section>
</section>
