<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_pointer_analysis" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::PointerAnalysis</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_cond_p_t_a_impl" prot="public" virt="non-virtual">SVF::CondPTAImpl&lt; ContextCond &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" prot="public" virt="non-virtual">SVF::BVDataPTAImpl</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_cond_p_t_a_impl" prot="public" virt="non-virtual">SVF::CondPTAImpl&lt; Cond &gt;</derivedcompoundref>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::PointerAnalysis::getPAG</definition>
        <argsstring>() const</argsstring>
        <name>getPAG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get/set <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="197" column="16" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_a_stat" kindref="compound">PTAStat</ref> *</type>
        <definition>PTAStat* SVF::PointerAnalysis::getStat</definition>
        <argsstring>() const</argsstring>
        <name>getStat</name>
        <briefdescription>
<para>Get PTA stat. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="204" column="20" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::PointerAnalysis::getModule</definition>
        <argsstring>() const</argsstring>
        <name>getModule</name>
        <briefdescription>
<para>Module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="209" column="22" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OrderedNodeSet &amp;</type>
        <definition>OrderedNodeSet&amp; SVF::PointerAnalysis::getAllValidPtrs</definition>
        <argsstring>()</argsstring>
        <name>getAllValidPtrs</name>
        <briefdescription>
<para>Get all Valid Pointers for resolution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="214" column="27" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>PointerAnalysis::~PointerAnalysis</definition>
        <argsstring>()</argsstring>
        <name>~PointerAnalysis</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="220" column="13" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_base_1a4d3496c305281d7fb423db21e38cf690">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a20617a69c112ad423b1b5021e48a8548">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_c_d_1aaac9cac7fc5696adb585abd9d67f8c14">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_l_c_d_1a5926080868429040f5142843f01a2a5c">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_f_r_1a3b255068b3ea53041af94fd373a53bd4">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_1ad6243c1317503bed39411dab47c83da7">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_type_analysis_1a34177236a41f7a2b432243062f829985">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1adb9f21a86daeb2dd79537f3939c393cf">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_d_d_a_1af1fcf058a9feefeda63f07d4189513a1">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a4c5fb70aafc3a589b7b1e82ba8f61a6f">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_versioned_flow_sensitive_1a81d3528fd082018e4345f0b026bf3584">initialize</reimplementedby>
        <briefdescription>
<para>Initialization of a pointer analysis, including building symbol table and <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> etc. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialization of pointer analysis </para>
        </detaileddescription>
        <inbodydescription>
<para>initialise pta call graph for every pointer analysis instance</para>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="223" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="156" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_base_1a099dad1149eb2e3f8068ef23870005a8">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1ad90c8cf193bd81870ce8dd88c9580e2c">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_1afed358369102f01f6fe88b1433e704c3">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_type_analysis_1a8efef079c8b33e2215f92ac3629789e6">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1ae34cd06ee3b7d763c81ec418af76d244">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_d_d_a_1a5abae08577ab24684653421dc712431a">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3564d6ad7e12e0a833b4cea203a809e4">finalize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_versioned_flow_sensitive_1ad955fda89f4f749151a1bd14562b03f6">finalize</reimplementedby>
        <briefdescription>
<para>Finalization of a pointer analysis, including checking alias correctness. </para>
        </briefdescription>
        <detaileddescription>
<para>Finalize the analysis after solving Given the alias results, verify whether it is correct or not using alias check functions </para>
        </detaileddescription>
        <inbodydescription>
<para>Print statistics</para>
<para>Dump results</para>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="226" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="260" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::analyze</definition>
        <argsstring>()=0</argsstring>
        <name>analyze</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_base_1a6d1ff3396814a118ce3d200157426cd3">analyze</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_1a267f7198600dde3054feb40def7a6681">analyze</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_type_analysis_1a6073fc43443ceba8d77212ba04e483ef">analyze</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1ac8fe1cb3af6048a28028f00bb87a5eba">analyze</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_d_d_a_1aa26f9b5ba2e51f904d8ede1db8584460">analyze</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abcab6281cced08d90c92d67d43a37c2c">analyze</reimplementedby>
        <briefdescription>
<para>Start Analysis here (main part of pointer analysis). It needs to be implemented in child class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="229" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::computeDDAPts</definition>
        <argsstring>(NodeID)</argsstring>
        <name>computeDDAPts</name>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1a337eb89cc5f31741ad8d840d9f284ca5">computeDDAPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_d_d_a_1a113faa56ee75eff39da19fd4b47a47e0">computeDDAPts</reimplementedby>
        <param>
          <type>NodeID</type>
        </param>
        <briefdescription>
<para>Compute points-to results on-demand, overridden by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="232" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::PointerAnalysis::alias</definition>
        <argsstring>(const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)=0</argsstring>
        <name>alias</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1afa6dffc1ac7e8dada1ff9e75b8cfd187">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1afa6dffc1ac7e8dada1ff9e75b8cfd187">alias</reimplementedby>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocA</declname>
        </param>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocB</declname>
        </param>
        <briefdescription>
<para>Interface exposed to users of our pointer analysis, given Location infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="235" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::PointerAnalysis::alias</definition>
        <argsstring>(const Value *V1, const Value *V2)=0</argsstring>
        <name>alias</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a171918ada9b679b0114b27476caa5ee6">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a171918ada9b679b0114b27476caa5ee6">alias</reimplementedby>
        <param>
          <type>const Value *</type>
          <declname>V1</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>V2</declname>
        </param>
        <briefdescription>
<para>Interface exposed to users of our pointer analysis, given Value infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="239" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::PointerAnalysis::alias</definition>
        <argsstring>(NodeID node1, NodeID node2)=0</argsstring>
        <name>alias</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1ac18e1dc9c6fc8cc952f67a93c2491876">alias</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1ac18e1dc9c6fc8cc952f67a93c2491876">alias</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>node1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>node2</declname>
        </param>
        <briefdescription>
<para>Interface exposed to users of our pointer analysis, given PAGNodeID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="243" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const PointsTo &amp;</type>
        <definition>virtual const PointsTo&amp; SVF::PointerAnalysis::getPts</definition>
        <argsstring>(NodeID ptr)=0</argsstring>
        <name>getPts</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_steensgaard_1adbcb9af660ab9bb0202bd32342280486">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a0b96ba98239186d6d676f9540da9e590">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a0b96ba98239186d6d676f9540da9e590">getPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get points-to targets of a pointer. It needs to be implemented in child class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="246" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const NodeSet &amp;</type>
        <definition>virtual const NodeSet&amp; SVF::PointerAnalysis::getRevPts</definition>
        <argsstring>(NodeID nodeId)=0</argsstring>
        <name>getRevPts</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9">getRevPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given an object, get all the nodes having whose pointsto contains the object. Similar to getPts, this also needs to be implemented in child classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="250" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::clearPts</definition>
        <argsstring>()</argsstring>
        <name>clearPts</name>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1adfae199dfbe05c9c20052e0fc204e6de">clearPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1adfae199dfbe05c9c20052e0fc204e6de">clearPts</reimplementedby>
        <briefdescription>
<para>Clear points-to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="253" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::printIndCSTargets</definition>
        <argsstring>(const CallBlockNode *cs, const FunctionSet &amp;targets)</argsstring>
        <name>printIndCSTargets</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const FunctionSet &amp;</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
<para>Print targets of a function pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Print indirect call targets at an indirect callsite </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="258" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="411" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a627bdc95485fd65e8846fcaa5e89559f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::dumpTopLevelPtsTo</definition>
        <argsstring>()</argsstring>
        <name>dumpTopLevelPtsTo</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752">dumpTopLevelPtsTo</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a80daa422e0dacf75aceb4fe5b4687c04">dumpTopLevelPtsTo</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1a80daa422e0dacf75aceb4fe5b4687c04">dumpTopLevelPtsTo</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1a43858bd242c7f2c5f33c3c0f6445376a">dumpTopLevelPtsTo</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="262" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a861554c2fdeaa406131c2c920b4c7908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::dumpAllPts</definition>
        <argsstring>()</argsstring>
        <name>dumpAllPts</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22">dumpAllPts</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="263" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ad409cbf61271743394b9e5868f3fd197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::PointerAnalysis::dumpCPts</definition>
        <argsstring>()</argsstring>
        <name>dumpCPts</name>
        <reimplementedby refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93">dumpCPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa260a3275fbec7061295306a58763d24">dumpCPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa260a3275fbec7061295306a58763d24">dumpCPts</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="264" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::dumpPts</definition>
        <argsstring>(NodeID ptr, const PointsTo &amp;pts)</argsstring>
        <name>dumpPts</name>
        <param>
          <type>NodeID</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump points-to of top-level pointers (<ref refid="class_s_v_f_1_1_val_p_n" kindref="compound">ValPN</ref>) </para>
        </detaileddescription>
        <inbodydescription>
<para>print the points-to set of node which has the maximum pts size.</para>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="265" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="352" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::printIndCSTargets</definition>
        <argsstring>()</argsstring>
        <name>printIndCSTargets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print all indirect callsites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="266" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="440" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::dumpAllTypes</definition>
        <argsstring>()</argsstring>
        <name>dumpAllTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="267" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="329" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::dumpStat</definition>
        <argsstring>()</argsstring>
        <name>dumpStat</name>
        <briefdescription>
<para>Dump the statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="296" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::containBlackHoleNode</definition>
        <argsstring>(const PointsTo &amp;pts)</argsstring>
        <name>containBlackHoleNode</name>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
<para>Determine whether a points-to contains a black hole or constant node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="300" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::containConstantNode</definition>
        <argsstring>(const PointsTo &amp;pts)</argsstring>
        <name>containConstantNode</name>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="304" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::PointerAnalysis::isBlkObjOrConstantObj</definition>
        <argsstring>(NodeID ptd) const</argsstring>
        <name>isBlkObjOrConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="308" column="25" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isNonPointerObj</definition>
        <argsstring>(NodeID ptd) const</argsstring>
        <name>isNonPointerObj</name>
        <param>
          <type>NodeID</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="312" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isHeapMemObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isHeapMemObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Whether this object is heap or array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="320" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="320" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isArrayMemObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isArrayMemObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="327" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isFIObjNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isFIObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For field-sensitivity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="337" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PointerAnalysis::getBaseObjNode</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getBaseObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="341" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PointerAnalysis::getFIObjNode</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getFIObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="345" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PointerAnalysis::getGepObjNode</definition>
        <argsstring>(NodeID id, const LocationSet &amp;ls)</argsstring>
        <name>getGepObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="349" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const NodeBS &amp;</type>
        <definition>virtual const NodeBS&amp; SVF::PointerAnalysis::getAllFieldsObjNode</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getAllFieldsObjNode</name>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a96089e24ef6aaa7f7d30c50a64d5042f">getAllFieldsObjNode</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="353" column="33" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PointerAnalysis::setObjFieldInsensitive</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>setObjFieldInsensitive</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="357" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="357" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isFieldInsensitive</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isFieldInsensitive</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="362" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="362" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallSiteToFunPtrMap &amp;</type>
        <definition>const CallSiteToFunPtrMap&amp; SVF::PointerAnalysis::getIndirectCallsites</definition>
        <argsstring>() const</argsstring>
        <name>getIndirectCallsites</name>
        <briefdescription>
<para>Return all indirect callsites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="272" column="38" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PointerAnalysis::getFunPtr</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getFunPtr</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Return function pointer <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> at a callsite cs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="277" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::validateTests</definition>
        <argsstring>()</argsstring>
        <name>validateTests</name>
        <briefdescription>
<para>Alias check functions to verify correctness of pointer analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate test cases </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="283" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="311" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::validateSuccessTests</definition>
        <argsstring>(std::string fun)</argsstring>
        <name>validateSuccessTests</name>
        <param>
          <type>std::string</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the alias check functions annotated in the C files check whether the alias analysis results consistent with the alias check function itself </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="284" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="607" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::validateExpectedFailureTests</definition>
        <argsstring>(std::string fun)</argsstring>
        <name>validateExpectedFailureTests</name>
        <param>
          <type>std::string</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer analysis validator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="285" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="677" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PointerAnalysis::dumpGraph</definition>
        <argsstring>()</argsstring>
        <name>dumpGraph</name>
        <briefdescription>
<para>Whether to dump the graph for debugging purpose. </para>
        </briefdescription>
        <detaileddescription>
<para>Flag in order to dump graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="289" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::resetObjFieldSensitive</definition>
        <argsstring>()</argsstring>
        <name>resetObjFieldSensitive</name>
        <briefdescription>
<para>Reset all object node as field-sensitive. </para>
        </briefdescription>
        <detaileddescription>
<para>Reset field sensitivity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="292" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="228" bodyend="235"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" prot="public" static="no" strong="no">
        <type></type>
        <name>PTATY</name>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49" prot="public">
          <name>Andersen_BASE</name>
          <briefdescription>
<para>Base <ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref> PTA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" prot="public">
          <name>Andersen_WPA</name>
          <briefdescription>
<para><ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref> PTA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" prot="public">
          <name>AndersenLCD_WPA</name>
          <briefdescription>
<para>Lazy cycle detection andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" prot="public">
          <name>AndersenHCD_WPA</name>
          <briefdescription>
<para>Hybird cycle detection andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" prot="public">
          <name>AndersenHLCD_WPA</name>
          <briefdescription>
<para>Hybird lazy cycle detection andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" prot="public">
          <name>AndersenSCD_WPA</name>
          <briefdescription>
<para>Selective cycle detection andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" prot="public">
          <name>AndersenSFR_WPA</name>
          <briefdescription>
<para>Stride-based field representation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" prot="public">
          <name>AndersenWaveDiff_WPA</name>
          <briefdescription>
<para>Diff wave propagation andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" prot="public">
          <name>AndersenWaveDiffWithType_WPA</name>
          <briefdescription>
<para>Diff wave propagation with type info andersen-style WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" prot="public">
          <name>Steensgaard_WPA</name>
          <briefdescription>
<para><ref refid="class_s_v_f_1_1_steensgaard" kindref="compound">Steensgaard</ref> PTA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09" prot="public">
          <name>CSCallString_WPA</name>
          <briefdescription>
<para>Call string based context sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27" prot="public">
          <name>CSSummary_WPA</name>
          <briefdescription>
<para>Summary based context sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322" prot="public">
          <name>FSDATAFLOW_WPA</name>
          <briefdescription>
<para>Traditional Dataflow-based flow sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" prot="public">
          <name>FSSPARSE_WPA</name>
          <briefdescription>
<para>Sparse flow sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" prot="public">
          <name>FSTBHC_WPA</name>
          <briefdescription>
<para>Sparse flow-sensitive type-based heap cloning WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" prot="public">
          <name>VFS_WPA</name>
          <briefdescription>
<para>Versioned sparse flow-sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82" prot="public">
          <name>FSCS_WPA</name>
          <briefdescription>
<para>Flow-, context- sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4" prot="public">
          <name>FSCSPS_WPA</name>
          <briefdescription>
<para>Flow-, context-, path- sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda" prot="public">
          <name>ADAPTFSCS_WPA</name>
          <briefdescription>
<para>Adaptive Flow-, context-, sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada" prot="public">
          <name>ADAPTFSCSPS_WPA</name>
          <briefdescription>
<para>Adaptive Flow-, context-, path- sensitive WPA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" prot="public">
          <name>TypeCPP_WPA</name>
          <briefdescription>
<para>Type-based analysis for C++. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61" prot="public">
          <name>FieldS_DDA</name>
          <briefdescription>
<para>Field sensitive DDA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18" prot="public">
          <name>FlowS_DDA</name>
          <briefdescription>
<para>Flow sensitive DDA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58" prot="public">
          <name>PathS_DDA</name>
          <briefdescription>
<para>Guarded value-flow DDA. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8" prot="public">
          <name>Cxt_DDA</name>
          <briefdescription>
<para>context sensitive DDA </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" prot="public">
          <name>Default_PTA</name>
          <briefdescription>
<para>default pta without any analysis </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Pointer analysis type list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="58" column="5" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="59" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" prot="public" static="no" strong="no">
        <type></type>
        <name>PTAImplTy</name>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a" prot="public">
          <name>BaseImpl</name>
          <briefdescription>
<para>Represents PointerAnalaysis. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8" prot="public">
          <name>BVDataImpl</name>
          <briefdescription>
<para>Represents <ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292" prot="public">
          <name>CondImpl</name>
          <briefdescription>
<para>Represents <ref refid="class_s_v_f_1_1_cond_p_t_a_impl" kindref="compound">CondPTAImpl</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Implementation type: <ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> or <ref refid="class_s_v_f_1_1_cond_p_t_a_impl" kindref="compound">CondPTAImpl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="94" column="5" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f" prot="public" static="no">
        <type>llvm::AliasAnalysis</type>
        <definition>typedef llvm::AliasAnalysis SVF::PointerAnalysis::AliasAnalysis</definition>
        <argsstring></argsstring>
        <name>AliasAnalysis</name>
        <briefdescription>
<para>Indirect call edges type, map a callsite to a set of callees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="103" column="33" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const CallBlockNode*&gt; SVF::PointerAnalysis::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="104" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7" prot="public" static="no">
        <type>PAG::CallSiteToFunPtrMap</type>
        <definition>typedef PAG::CallSiteToFunPtrMap SVF::PointerAnalysis::CallSiteToFunPtrMap</definition>
        <argsstring></argsstring>
        <name>CallSiteToFunPtrMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="105" column="38" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> * &gt;</type>
        <definition>typedef Set&lt;const SVFFunction*&gt; SVF::PointerAnalysis::FunctionSet</definition>
        <argsstring></argsstring>
        <name>FunctionSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="106" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4" prot="public" static="no">
        <type>OrderedMap&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, FunctionSet &gt;</type>
        <definition>typedef OrderedMap&lt;const CallBlockNode*, FunctionSet&gt; SVF::PointerAnalysis::CallEdgeMap</definition>
        <argsstring></argsstring>
        <name>CallEdgeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="107" column="24" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">SCCDetection</ref>&lt; <ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> * &gt;</type>
        <definition>typedef SCCDetection&lt;PTACallGraph*&gt; SVF::PointerAnalysis::CallGraphSCC</definition>
        <argsstring></argsstring>
        <name>CallGraphSCC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="108" column="26" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca" prot="public" static="no">
        <type>Set&lt; const GlobalValue * &gt;</type>
        <definition>typedef Set&lt;const GlobalValue*&gt; SVF::PointerAnalysis::VTableSet</definition>
        <argsstring></argsstring>
        <name>VTableSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="109" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> * &gt;</type>
        <definition>typedef Set&lt;const SVFFunction*&gt; SVF::PointerAnalysis::VFunSet</definition>
        <argsstring></argsstring>
        <name>VFunSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="110" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestMayAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestMayAlias</name>
        <initializer>= &quot;MAYALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="113" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestMayAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestMayAliasMangled</name>
        <initializer>= &quot;_Z8MAYALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="114" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestNoAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestNoAlias</name>
        <initializer>= &quot;NOALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="115" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestNoAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestNoAliasMangled</name>
        <initializer>= &quot;_Z7NOALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="116" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestPartialAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestPartialAlias</name>
        <initializer>= &quot;PARTIALALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="117" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestPartialAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestPartialAliasMangled</name>
        <initializer>= &quot;_Z12PARTIALALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="118" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestMustAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestMustAlias</name>
        <initializer>= &quot;MUSTALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="119" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestMustAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestMustAliasMangled</name>
        <initializer>= &quot;_Z9MUSTALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="120" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestFailMayAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestFailMayAlias</name>
        <initializer>= &quot;EXPECTEDFAIL_MAYALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="121" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestFailMayAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestFailMayAliasMangled</name>
        <initializer>= &quot;_Z21EXPECTEDFAIL_MAYALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="122" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestFailNoAlias</definition>
        <argsstring></argsstring>
        <name>aliasTestFailNoAlias</name>
        <initializer>= &quot;EXPECTEDFAIL_NOALIAS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="123" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string PointerAnalysis::aliasTestFailNoAliasMangled</definition>
        <argsstring></argsstring>
        <name>aliasTestFailNoAliasMangled</name>
        <initializer>= &quot;_Z20EXPECTEDFAIL_NOALIASPvS_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="124" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::print_stat</definition>
        <argsstring></argsstring>
        <name>print_stat</name>
        <briefdescription>
<para>User input flags. </para>
        </briefdescription>
        <detaileddescription>
<para>Flag for printing the statistic results </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="135" column="10" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::alias_validation</definition>
        <argsstring></argsstring>
        <name>alias_validation</name>
        <briefdescription>
<para>Flag for validating points-to/alias results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="137" column="10" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac" prot="protected" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::PointerAnalysis::OnTheFlyIterBudgetForStat</definition>
        <argsstring></argsstring>
        <name>OnTheFlyIterBudgetForStat</name>
        <briefdescription>
<para>Flag for iteration budget for on-the-fly statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="139" column="11" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::PointerAnalysis::svfMod</definition>
        <argsstring></argsstring>
        <name>svfMod</name>
        <briefdescription>
<para>Module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="145" column="15" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PTATY</ref></type>
        <definition>PTATY SVF::PointerAnalysis::ptaTy</definition>
        <argsstring></argsstring>
        <name>ptaTy</name>
        <briefdescription>
<para>Pointer analysis Type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="147" column="11" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" kindref="member">PTAImplTy</ref></type>
        <definition>PTAImplTy SVF::PointerAnalysis::ptaImplTy</definition>
        <argsstring></argsstring>
        <name>ptaImplTy</name>
        <briefdescription>
<para>PTA implementation type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="149" column="15" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_stat" kindref="compound">PTAStat</ref> *</type>
        <definition>PTAStat* SVF::PointerAnalysis::stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
<para>Statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="151" column="13" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::PointerAnalysis::ptaCallGraph</definition>
        <argsstring></argsstring>
        <name>ptaCallGraph</name>
        <briefdescription>
<para>Call graph used for pointer analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="153" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">CallGraphSCC</ref> *</type>
        <definition>CallGraphSCC* SVF::PointerAnalysis::callGraphSCC</definition>
        <argsstring></argsstring>
        <name>callGraphSCC</name>
        <briefdescription>
<para>SCC for CallGraph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="155" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> *</type>
        <definition>ICFG* SVF::PointerAnalysis::icfg</definition>
        <argsstring></argsstring>
        <name>icfg</name>
        <briefdescription>
<para>Interprocedural control-flow graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="157" column="10" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_type_system" kindref="compound">TypeSystem</ref> *</type>
        <definition>TypeSystem* SVF::PointerAnalysis::typeSystem</definition>
        <argsstring></argsstring>
        <name>typeSystem</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_type_system" kindref="compound">TypeSystem</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="161" column="16" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG * PointerAnalysis::pag</definition>
        <argsstring></argsstring>
        <name>pag</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="143" column="16" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_common_c_h_graph" kindref="compound">CommonCHGraph</ref> *</type>
        <definition>CommonCHGraph * PointerAnalysis::chgraph</definition>
        <argsstring></argsstring>
        <name>chgraph</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_c_h_graph" kindref="compound">CHGraph</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="159" column="26" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a03dadb5429e2b84f88713a83153979a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Release the memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="128" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="138" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PointerAnalysis::getNumOfResolvedIndCallEdge</definition>
        <argsstring>() const</argsstring>
        <name>getNumOfResolvedIndCallEdge</name>
        <briefdescription>
<para>Return number of resolved indirect call edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="165" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::PointerAnalysis::getPTACallGraph</definition>
        <argsstring>() const</argsstring>
        <name>getPTACallGraph</name>
        <briefdescription>
<para>Return call graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="170" column="25" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">CallGraphSCC</ref> *</type>
        <definition>CallGraphSCC* SVF::PointerAnalysis::getCallGraphSCC</definition>
        <argsstring>() const</argsstring>
        <name>getCallGraphSCC</name>
        <briefdescription>
<para>Return call graph SCC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="175" column="25" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PointerAnalysis::PointerAnalysis</definition>
        <argsstring>(PAG *pag, PTATY ty=Default_PTA, bool alias_check=true)</argsstring>
        <name>PointerAnalysis</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
          <declname>pag</declname>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PTATY</ref></type>
          <declname>ty</declname>
          <defval><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" kindref="member">Default_PTA</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alias_check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="181" column="5" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PTATY</ref></type>
        <definition>PTATY SVF::PointerAnalysis::getAnalysisTy</definition>
        <argsstring>() const</argsstring>
        <name>getAnalysisTy</name>
        <briefdescription>
<para>Type of pointer analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="184" column="18" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" kindref="member">PTAImplTy</ref></type>
        <definition>PTAImplTy SVF::PointerAnalysis::getImplTy</definition>
        <argsstring>() const</argsstring>
        <name>getImplTy</name>
        <briefdescription>
<para>Return implementation type of the pointer analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="190" column="22" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::printStat</definition>
        <argsstring>()</argsstring>
        <name>printStat</name>
        <briefdescription>
<para>Whether print statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="370" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PointerAnalysis::disablePrintStat</definition>
        <argsstring>()</argsstring>
        <name>disablePrintStat</name>
        <briefdescription>
<para>Whether print statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="376" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CallEdgeMap &amp;</type>
        <definition>CallEdgeMap&amp; SVF::PointerAnalysis::getIndCallMap</definition>
        <argsstring>()</argsstring>
        <name>getIndCallMap</name>
        <briefdescription>
<para>Get callees from an indirect callsite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="383" column="24" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::hasIndCSCallees</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasIndCSCallees</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="387" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunctionSet &amp;</type>
        <definition>const FunctionSet&amp; SVF::PointerAnalysis::getIndCSCallees</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getIndCSCallees</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="391" column="30" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::resolveIndCalls</definition>
        <argsstring>(const CallBlockNode *cs, const PointsTo &amp;target, CallEdgeMap &amp;newEdges, LLVMCallGraph *callgraph=NULL)</argsstring>
        <name>resolveIndCalls</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>CallEdgeMap &amp;</type>
          <declname>newEdges</declname>
        </param>
        <param>
          <type>LLVMCallGraph *</type>
          <declname>callgraph</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Resolve indirect call edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Resolve indirect calls </para>
        </detaileddescription>
        <inbodydescription>
<para>discover indirect pointer target</para>
<para>if the arg size does not match then we do not need to connect this parameter even if the callee is a variadic function (the first parameter of variadic function is its paramter number)</para>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="398" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="475" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PointerAnalysis::matchArgs</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee)</argsstring>
        <name>matchArgs</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Match arguments for callsite at caller and callee. </para>
        </briefdescription>
        <detaileddescription>
<para>Match arguments for callsite at caller and callee </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="400" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="523" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PointerAnalysis::callGraphSCCDetection</definition>
        <argsstring>()</argsstring>
        <name>callGraphSCCDetection</name>
        <briefdescription>
<para>CallGraph SCC related methods. </para>
        </briefdescription>
        <detaileddescription>
<para>CallGraph SCC detection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="405" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PointerAnalysis::getCallGraphSCCRepNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getCallGraphSCCRepNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get SCC rep node of a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="413" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::inSameCallGraphSCC</definition>
        <argsstring>(const SVFFunction *fun1, const SVFFunction *fun2)</argsstring>
        <name>inSameCallGraphSCC</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun2</declname>
        </param>
        <briefdescription>
<para>Return TRUE if this edge is inside a CallGraph SCC, i.e., src node and dst node are in the same SCC on the <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="418" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="418" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PointerAnalysis::isInRecursion</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>isInRecursion</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="424" column="17" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PointerAnalysis::isLocalVarInRecursiveFun</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isLocalVarInRecursiveFun</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Whether a local variable is in function recursions. </para>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if this node is a local variable of recursive function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="429" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="210" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::string</type>
        <definition>virtual const std::string SVF::PointerAnalysis::PTAName</definition>
        <argsstring>() const</argsstring>
        <name>PTAName</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_1ad92dbecc91170b235180e59ba307acda">PTAName</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_1a4f1a0d533381660055210be1e2d7d72a">PTAName</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1afb0ab7fc43e6f0331072419e39ae0606">PTAName</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_d_d_a_1ab3edece1bfb076bc01d60829615f2fa9">PTAName</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a1eb2f49fd20527b174c2acb8b7d64a41">PTAName</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_versioned_flow_sensitive_1a6e4964389f96667bd69354fd4a742720">PTAName</reimplementedby>
        <briefdescription>
<para>Return PTA name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="433" column="31" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_common_c_h_graph" kindref="compound">CommonCHGraph</ref> *</type>
        <definition>CommonCHGraph* SVF::PointerAnalysis::getCHGraph</definition>
        <argsstring>() const</argsstring>
        <name>getCHGraph</name>
        <briefdescription>
<para>get <ref refid="class_s_v_f_1_1_c_h_graph" kindref="compound">CHGraph</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="439" column="19" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::getVFnsFromCHA</definition>
        <argsstring>(const CallBlockNode *cs, VFunSet &amp;vfns)</argsstring>
        <name>getVFnsFromCHA</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>VFunSet &amp;</type>
          <declname>vfns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="444" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="534" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::getVFnsFromPts</definition>
        <argsstring>(const CallBlockNode *cs, const PointsTo &amp;target, VFunSet &amp;vfns)</argsstring>
        <name>getVFnsFromPts</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>VFunSet &amp;</type>
          <declname>vfns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="445" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="543" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PointerAnalysis::connectVCallToVFns</definition>
        <argsstring>(const CallBlockNode *cs, const VFunSet &amp;vfns, CallEdgeMap &amp;newEdges)</argsstring>
        <name>connectVCallToVFns</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const VFunSet &amp;</type>
          <declname>vfns</declname>
        </param>
        <param>
          <type>CallEdgeMap &amp;</type>
          <declname>newEdges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="446" column="10" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="569" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PointerAnalysis::resolveCPPIndCalls</definition>
        <argsstring>(const CallBlockNode *cs, const PointsTo &amp;target, CallEdgeMap &amp;newEdges)</argsstring>
        <name>resolveCPPIndCalls</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>CallEdgeMap &amp;</type>
          <declname>newEdges</declname>
        </param>
        <briefdescription>
<para>Resolve cpp indirect call edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="447" column="18" bodyfile="lib/MemoryModel/PointerAnalysis.cpp" bodystart="591" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_type_system" kindref="compound">TypeSystem</ref> *</type>
        <definition>const TypeSystem* SVF::PointerAnalysis::getTypeSystem</definition>
        <argsstring>() const</argsstring>
        <name>getTypeSystem</name>
        <briefdescription>
<para>get <ref refid="class_s_v_f_1_1_type_system" kindref="compound">TypeSystem</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysis.h" line="452" column="22" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="452" bodyend="455"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="16">
        <label>SVF::FlowDDA</label>
        <link refid="class_s_v_f_1_1_flow_d_d_a"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>SVF::VersionedFlowSensitive</label>
        <link refid="class_s_v_f_1_1_versioned_flow_sensitive"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>SVF::TypeAnalysis</label>
        <link refid="class_s_v_f_1_1_type_analysis"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SVF::AndersenSCD</label>
        <link refid="class_s_v_f_1_1_andersen_s_c_d"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>SVF::CondPTAImpl&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_cond_p_t_a_impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::AndersenSFR</label>
        <link refid="class_s_v_f_1_1_andersen_s_f_r"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::AndersenBase</label>
        <link refid="class_s_v_f_1_1_andersen_base"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::AndersenHCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_c_d"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::AndersenLCD</label>
        <link refid="class_s_v_f_1_1_andersen_l_c_d"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>SVF::AndersenHLCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_l_c_d"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>SVF::AndersenWaveDiffWithType</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff_with_type"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>SVF::Steensgaard</label>
        <link refid="class_s_v_f_1_1_steensgaard"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>SVF::AndersenWaveDiff</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::Andersen</label>
        <link refid="class_s_v_f_1_1_andersen"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>SVF::FlowSensitive</label>
        <link refid="class_s_v_f_1_1_flow_sensitive"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::CondPTAImpl&lt; ContextCond &gt;</label>
        <link refid="class_s_v_f_1_1_cond_p_t_a_impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::ContextDDA</label>
        <link refid="class_s_v_f_1_1_context_d_d_a"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>SVF::FSMPTA</label>
        <link refid="class_s_v_f_1_1_f_s_m_p_t_a"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>SVF::FlowSensitiveTBHC</label>
        <link refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="7">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="9">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="12">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="8">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="4">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="3">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="11">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="6">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="2" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MemoryModel/PointerAnalysis.h" line="53" column="1" bodyfile="include/MemoryModel/PointerAnalysis.h" bodystart="54" bodyend="456"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>ADAPTFSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>ADAPTFSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>alias_validation</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AliasAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestFailMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestFailMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestFailNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestFailNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestMustAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestMustAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestPartialAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>aliasTestPartialAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>Andersen_BASE</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>Andersen_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenHCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenHLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenSCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenSFR_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenWaveDiff_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>AndersenWaveDiffWithType_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>BaseImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>BVDataImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>callGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>callGraphSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>chgraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>computeDDAPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CondImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>connectVCallToVFns</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>containBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>containConstantNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CSCallString_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>CSSummary_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>Cxt_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>Default_PTA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a03dadb5429e2b84f88713a83153979a8" prot="private" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>disablePrintStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a861554c2fdeaa406131c2c920b4c7908" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>dumpAllPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>dumpAllTypes</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad409cbf61271743394b9e5868f3fd197" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>dumpCPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>dumpGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>dumpPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>dumpStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a627bdc95485fd65e8846fcaa5e89559f" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>dumpTopLevelPtsTo</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FieldS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>finalize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FlowS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FSDATAFLOW_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FSSPARSE_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FSTBHC_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getAllValidPtrs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getAnalysisTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getBaseObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getCallGraphSCCRepNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getCHGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getFunPtr</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getIndCallMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getNumOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getPTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280" prot="public" virt="pure-virtual"><scope>SVF::PointerAnalysis</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getTypeSystem</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getVFnsFromCHA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>getVFnsFromPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>hasIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>icfg</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>initialize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>inSameCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isArrayMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isHeapMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isInRecursion</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isLocalVarInRecursiveFun</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>isNonPointerObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>matchArgs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>OnTheFlyIterBudgetForStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>PathS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>PointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>print_stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>printStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>ptaCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>ptaImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>PTAImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>PTAName</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>ptaTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>PTATY</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>resetObjFieldSensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>resolveCPPIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>resolveIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>setObjFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>Steensgaard_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>svfMod</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>TypeCPP_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed" prot="protected" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>typeSystem</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc" prot="protected" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>validateExpectedFailureTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8" prot="protected" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>validateSuccessTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df" prot="protected" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>validateTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>VFS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>VFunSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca" prot="public" virt="non-virtual"><scope>SVF::PointerAnalysis</scope><name>VTableSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c" prot="public" virt="virtual"><scope>SVF::PointerAnalysis</scope><name>~PointerAnalysis</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
