<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_p_a_g_builder" kind="class" language="C++" prot="public">
    <compoundname>SVF::PAGBuilder</compoundname>
    <basecompoundref prot="public" virt="non-virtual">llvm::InstVisitor&lt; PAGBuilder &gt;</basecompoundref>
    <includes refid="_p_a_g_builder_8h" local="no">PAGBuilder.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_builder_1ae92e89e096a5f65c0c0421efc778523e" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::PAGBuilder::pag</definition>
        <argsstring></argsstring>
        <name>pag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="48" column="9" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_builder_1a7c197702fff05b1b6cd744b70a4a278c" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::PAGBuilder::svfMod</definition>
        <argsstring></argsstring>
        <name>svfMod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="49" column="15" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_builder_1aaae667a9481adac1ce3d757b9c31be24" prot="private" static="no" mutable="no">
        <type>const BasicBlock *</type>
        <definition>const BasicBlock* SVF::PAGBuilder::curBB</definition>
        <argsstring></argsstring>
        <name>curBB</name>
        <briefdescription>
<para>Current basic block during <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> construction when visiting the module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="50" column="22" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_builder_1a7a83bd8bf69747c8225301f5cc65d2da" prot="private" static="no" mutable="no">
        <type>const Value *</type>
        <definition>const Value* SVF::PAGBuilder::curVal</definition>
        <argsstring></argsstring>
        <name>curVal</name>
        <briefdescription>
<para>Current Value during <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> construction when visiting the module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="51" column="17" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a7c6b147496561a0efa5e4c27d5e1df8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::PAGBuilder::PAGBuilder</definition>
        <argsstring>()</argsstring>
        <name>PAGBuilder</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="55" column="5" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae6dd6cbbbc3963771971ae89b291b699" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::PAGBuilder::~PAGBuilder</definition>
        <argsstring>()</argsstring>
        <name>~PAGBuilder</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="59" column="13" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a757ab2c9481467842e1ad4c46a1f6291" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG * PAGBuilder::build</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Start building <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> here. </para>
        </briefdescription>
        <detaileddescription>
<para>Start building <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> here </para>
        </detaileddescription>
        <inbodydescription>
<para>initial external library information initial <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> nodes</para>
<para>initial <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edges: // handle globals</para>
<para>handle functions</para>
<para>collect return node of function fun</para>
<para>Return <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node will not be created for function which can not reach the return instruction due to call to abort(), exit(), etc. In 176.gcc of SPEC 2000, function build_objc_string() from c-lang.c shows an example when fun.doesNotReturn() evaluates to TRUE because of abort().</para>
<para>To be noted, we do not record arguments which are in declared function without body TODO: what about external functions with <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> imported by commandline?</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="64" column="17" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="47" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ac037265d15e76801cdf45ae5682ccef8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::PAGBuilder::getPAG</definition>
        <argsstring>() const</argsstring>
        <name>getPAG</name>
        <briefdescription>
<para>Return <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="67" column="9" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a2a2baa9aa1c4b467001ceab3f179ae1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::initialiseNodes</definition>
        <argsstring>()</argsstring>
        <name>initialiseNodes</name>
        <briefdescription>
<para>Initialize nodes and edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>add address edges for constant nodes.</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="74" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="131" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a4e6893b4ac983a96827e4447b471e8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::addEdge</definition>
        <argsstring>(NodeID src, NodeID dst, PAGEdge::PEDGEK kind, Size_t offset=0, Instruction *cs=NULL)</argsstring>
        <name>addEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>Size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>Instruction *</type>
          <declname>cs</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a378d2bc2d5526f0ab72c1488d3b58380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::sanityCheck</definition>
        <argsstring>()</argsstring>
        <name>sanityCheck</name>
        <briefdescription>
<para>Sanity check for <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="80" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="1333" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1acfb6701d6460f26cd31526754419847b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAGBuilder::getValueNode</definition>
        <argsstring>(const Value *V)</argsstring>
        <name>getValueNode</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>Get different kinds of node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="85" column="12" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="85" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a442ca853e750396d088aa736cc39356f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAGBuilder::getObjectNode</definition>
        <argsstring>(const Value *V)</argsstring>
        <name>getObjectNode</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>GetObject - Return the object node (stack/global/heap/function) according to a LLVM Value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="95" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a56174b3a60464bfb64f78b26d2408286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAGBuilder::getReturnNode</definition>
        <argsstring>(const SVFFunction *func)</argsstring>
        <name>getReturnNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>getReturnNode - Return the node representing the unique return value of a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="101" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1adab871886803e0dbe65b8c57bb15c309" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAGBuilder::getVarargNode</definition>
        <argsstring>(const SVFFunction *func)</argsstring>
        <name>getVarargNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>getVarargNode - Return the node representing the unique variadic argument of a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="107" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a7247d100cc4f652d7dc4ca356b0f2538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitGlobal</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>visitGlobal</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Handle globals including (global variable and functions) </para>
        </briefdescription>
        <detaileddescription>
<para>Visit global variables for building <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> </para>
        </detaileddescription>
        <inbodydescription>
<para>initialize global variable</para>
<para>initialize global functions</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="115" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="445" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a280244168f951cb2d6a061583c20c432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::InitialGlobal</definition>
        <argsstring>(const GlobalVariable *gvar, Constant *C, u32_t offset)</argsstring>
        <name>InitialGlobal</name>
        <param>
          <type>const GlobalVariable *</type>
          <declname>gvar</declname>
        </param>
        <param>
          <type>Constant *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>src should not point to anything yet</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="116" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="374" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a51bd1644b78b1123622a34e6dee40829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAGBuilder::getGlobalVarField</definition>
        <argsstring>(const GlobalVariable *gvar, u32_t offset)</argsstring>
        <name>getGlobalVarField</name>
        <param>
          <type>const GlobalVariable *</type>
          <declname>gvar</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the field of the global variable node FIXME:Here we only get the field that actually used in the program We ignore the initialization of global variable field that not used in the program </para>
        </detaileddescription>
        <inbodydescription>
<para>if we did not find the constant expression in the program, then we need to create a gep node for this field</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="118" column="12" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="344" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a97cee5531a01ce845dcd217302759326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::processCE</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>processCE</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Process constant expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle constant expression, and connect the gep edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="122" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="216" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a5cedcedab00c875ba392da281de7f5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PAGBuilder::computeGepOffset</definition>
        <argsstring>(const User *V, LocationSet &amp;ls)</argsstring>
        <name>computeGepOffset</name>
        <param>
          <type>const User *</type>
          <declname>V</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Compute offset of a gep instruction or gep constant expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the object node offset according to GEP insn (V). Given a gep edge p = q + i, if &quot;i&quot; is a constant then we return its offset size otherwise if &quot;i&quot; is a variable determined by runtime, then it is a variant offset Return TRUE if the offset of this GEP insn is a constant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="125" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1af0bcfa8c506dec6c8adb85852b39a8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::handleDirectCall</definition>
        <argsstring>(CallSite cs, const SVFFunction *F)</argsstring>
        <name>handleDirectCall</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Handle direct call. </para>
        </briefdescription>
        <detaileddescription>
<para>Add the constraints for a direct, non-external call. </para>
        </detaileddescription>
        <inbodydescription>
<para>FIXME: this assertion should be placed for correct checking except bug program like 188.ammp, 300.twolf</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="128" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="811" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ab222f5d9ad6c59e1c3a738153cf650d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::handleIndCall</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>handleIndCall</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Handle indirect call. </para>
        </briefdescription>
        <detaileddescription>
<para>Indirect call is resolved on-the-fly during pointer analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="131" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="1324" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a5344e675f4207a1e9a2de54d0e5f6e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PAGBuilder::handleExtCall</definition>
        <argsstring>(CallSite cs, const SVFFunction *F)</argsstring>
        <name>handleExtCall</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>F</declname>
          <defname>callee</defname>
        </param>
        <briefdescription>
<para>Handle external call. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle external calls </para>
        </detaileddescription>
        <inbodydescription>
<para>this case is for strcpy(dst,src); to maintain its semantics we will store src to the base of dst instead of dst. dst = load base store src base</para>
<para>create inter-procedural <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edges for thread forks</para>
<para>pthread_create has 1 arg. apr_thread_create has 2 arg.</para>
<para>Connect actual parameter to formal parameter of the start routine</para>
<para>handle indirect calls at pthread create APIs e.g., pthread_create(&amp;t1, NULL, fp, ...); const Value* fun = <ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI()</ref>-&gt;getForkedFun(inst); if(!SVFUtil::isa&lt;Function&gt;(fun)) pag-&gt;addIndirectCallsites(cs,pag-&gt;getValueNode(fun));</para>
<para>If forkedFun does not pass to spawnee as function type but as void pointer remember to update inter-procedural callgraph/PAG/SVFG etc. when indirect call targets are resolved We don&apos;t connect the callgraph here, further investigation is need to hanle mod-ref during <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> construction.</para>
<para>create inter-procedural <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edges for hare_parallel_for calls</para>
<para>The task function of hare_parallel_for has 3 args.</para>
<para>Connect actual parameter to formal parameter of the start routine</para>
<para>handle indirect calls at hare_parallel_for (e.g., hare_parallel_for(..., fp, ...); const Value* fun = <ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI()</ref>-&gt;getForkedFun(inst); if(!SVFUtil::isa&lt;Function&gt;(fun)) pag-&gt;addIndirectCallsites(cs,pag-&gt;getValueNode(fun));</para>
<para>TODO: inter-procedural <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edges for thread joins</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="135" column="18" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="926" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1af6862687d02f922f4a2561898778c4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * PAGBuilder::getBaseTypeAndFlattenedFields</definition>
        <argsstring>(Value *v, std::vector&lt; LocationSet &gt; &amp;fields)</argsstring>
        <name>getBaseTypeAndFlattenedFields</name>
        <param>
          <type>Value *</type>
          <declname>v</declname>
          <defname>V</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the base type and the max possible offset of an object pointed to by (V). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="136" column="16" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="877" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a0298648bd13700f9c4649c9ed39664a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::addComplexConsForExt</definition>
        <argsstring>(Value *D, Value *S, u32_t sz=0)</argsstring>
        <name>addComplexConsForExt</name>
        <param>
          <type>Value *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>Value *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>sz</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the load/store constraints and temp. nodes for the complex constraint *D = *S (where D/S may point to structs). </para>
        </detaileddescription>
        <inbodydescription>
<para>If sz is 0, we will add edges for all fields.</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="137" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="886" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ac119eecbd406c08b473b39c7fa3e475b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitAllocaInst</definition>
        <argsstring>(AllocaInst &amp;AI)</argsstring>
        <name>visitAllocaInst</name>
        <param>
          <type><ref refid="namespace_s_v_f_1a3bacb4f95c73e6d794901d01c6b65a83" kindref="member">AllocaInst</ref> &amp;</type>
          <declname>AI</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
<para>Our visit overrides. </para>
        </briefdescription>
        <detaileddescription>
<para>Visit alloca instructions Add edge V (dst) &lt;<ndash/> O (src), V here is a value node on <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>, O is object node on <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="143" column="18" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="495" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a77a96e3bad770eab314403b9d02b263f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitPHINode</definition>
        <argsstring>(PHINode &amp;I)</argsstring>
        <name>visitPHINode</name>
        <param>
          <type>PHINode &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit phi instructions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="144" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="513" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a767d67bbcf32288c3a255b20f3d236bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitStoreInst</definition>
        <argsstring>(StoreInst &amp;I)</argsstring>
        <name>visitStoreInst</name>
        <param>
          <type>StoreInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit store instructions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="145" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="549" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ad333677366e6e2eba1aa7f60f6e02814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitLoadInst</definition>
        <argsstring>(LoadInst &amp;I)</argsstring>
        <name>visitLoadInst</name>
        <param>
          <type>LoadInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="146" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="535" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a0385ab439c9f8788678f0490565f6396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitGetElementPtrInst</definition>
        <argsstring>(GetElementPtrInst &amp;I)</argsstring>
        <name>visitGetElementPtrInst</name>
        <param>
          <type>GetElementPtrInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit getelementptr instructions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="147" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="567" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a279ed7ff3400183d81b4a4fbebe502f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitCallInst</definition>
        <argsstring>(CallInst &amp;I)</argsstring>
        <name>visitCallInst</name>
        <param>
          <type>CallInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="148" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae0008830aa2aebe1d0f31ed10a0b5533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitInvokeInst</definition>
        <argsstring>(InvokeInst &amp;II)</argsstring>
        <name>visitInvokeInst</name>
        <param>
          <type>InvokeInst &amp;</type>
          <declname>II</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="152" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae38d34776d2f3744adb90374aa84d12d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitCallBrInst</definition>
        <argsstring>(CallBrInst &amp;I)</argsstring>
        <name>visitCallBrInst</name>
        <param>
          <type>CallBrInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="156" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1abe51d51b7bd29f223552643010df586b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitCallSite</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>visitCallSite</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Collect callsite arguments and returns</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="159" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="682" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1af56d19f29650c772bddeaee3d700b0a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitReturnInst</definition>
        <argsstring>(ReturnInst &amp;I)</argsstring>
        <name>visitReturnInst</name>
        <param>
          <type>ReturnInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit return instructions of a function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="160" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="735" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a1aa76038afad572861c72fde345f9ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitCastInst</definition>
        <argsstring>(CastInst &amp;I)</argsstring>
        <name>visitCastInst</name>
        <param>
          <type>CastInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="161" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="593" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a614aeca6530b697c0d67eb2b3173059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitSelectInst</definition>
        <argsstring>(SelectInst &amp;I)</argsstring>
        <name>visitSelectInst</name>
        <param>
          <type>SelectInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit select instructions </para>
        </detaileddescription>
        <inbodydescription>
<para>Two operands have same incoming basic block, both are the current BB</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="162" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="663" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a54bab83475c617d969b6525f08d68e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitExtractValueInst</definition>
        <argsstring>(ExtractValueInst &amp;EVI)</argsstring>
        <name>visitExtractValueInst</name>
        <param>
          <type>ExtractValueInst &amp;</type>
          <declname>EVI</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>visit extract value instructions for structures in registers TODO: for now we just assume the pointer after extraction points to blackhole for example %24 = extractvalue { i32, struct.s_hash* } call34, 0 %24 is a pointer points to first field of a register value call34 however we can not create call34 as an memory object, as it is register value. Is that necessary treat extract value as getelementptr instruction later to get more precise results? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="163" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="764" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a8afe9cfdcad2b2a961660fb1f8acd0d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitBranchInst</definition>
        <argsstring>(BranchInst &amp;I)</argsstring>
        <name>visitBranchInst</name>
        <param>
          <type>BranchInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Branch and switch instructions are treated as UnaryOP br cmp label if.then, label if.else </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="164" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="788" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a0a54a195cf948c400d1fbaf705a4b423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitSwitchInst</definition>
        <argsstring>(SwitchInst &amp;I)</argsstring>
        <name>visitSwitchInst</name>
        <param>
          <type>SwitchInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="165" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="799" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a45d125ab3215cb00171b3d8f2e7048ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitInsertValueInst</definition>
        <argsstring>(InsertValueInst &amp;I)</argsstring>
        <name>visitInsertValueInst</name>
        <param>
          <type>InsertValueInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="166" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a98abdcc0bb0aa457a3a77c03af2a6354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitBinaryOperator</definition>
        <argsstring>(BinaryOperator &amp;I)</argsstring>
        <name>visitBinaryOperator</name>
        <param>
          <type>BinaryOperator &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit Binary Operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="174" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="617" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a7dfed8e95ae4bccdeac53e9c2d3b3cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitUnaryOperator</definition>
        <argsstring>(UnaryOperator &amp;I)</argsstring>
        <name>visitUnaryOperator</name>
        <param>
          <type>UnaryOperator &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit Unary Operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="175" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="632" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae6f28734ad5b933d347f6ebc95dcd2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitCmpInst</definition>
        <argsstring>(CmpInst &amp;I)</argsstring>
        <name>visitCmpInst</name>
        <param>
          <type>CmpInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit compare instruction </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="176" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="647" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a4e81ef5eff62ec9d040f4fe256ce4cc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitVAArgInst</definition>
        <argsstring>(VAArgInst &amp;)</argsstring>
        <name>visitVAArgInst</name>
        <param>
          <type>VAArgInst &amp;</type>
        </param>
        <briefdescription>
<para>TODO: do we need to care about these corner cases? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="179" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a5b7b565582e046a3acb279e315dd5318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::visitExtractElementInst</definition>
        <argsstring>(ExtractElementInst &amp;I)</argsstring>
        <name>visitExtractElementInst</name>
        <param>
          <type>ExtractElementInst &amp;</type>
          <declname>I</declname>
          <defname>inst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The �extractelement� instruction extracts a single scalar element from a vector at a specified index. TODO: for now we just assume the pointer after extraction points to blackhole The first operand of an �extractelement� instruction is a value of vector type. The second operand is an index indicating the position from which to extract the element.</para>
<para>&lt;result&gt; = extractelement &lt;4 x i32&gt; vec, i32 0 ; yields i32 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="182" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="778" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a009b45ee9315080dbc80e25db7af3777" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitInsertElementInst</definition>
        <argsstring>(InsertElementInst &amp;I)</argsstring>
        <name>visitInsertElementInst</name>
        <param>
          <type>InsertElementInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="184" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1abc5e3c052a31028b3d676e09c7e895b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitShuffleVectorInst</definition>
        <argsstring>(ShuffleVectorInst &amp;I)</argsstring>
        <name>visitShuffleVectorInst</name>
        <param>
          <type>ShuffleVectorInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="188" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a67e8185163f90a02dac7cb18a6e4eda5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitLandingPadInst</definition>
        <argsstring>(LandingPadInst &amp;I)</argsstring>
        <name>visitLandingPadInst</name>
        <param>
          <type>LandingPadInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="192" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1acde7a8663cf936a2f5ce473673a09dc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitResumeInst</definition>
        <argsstring>(ResumeInst &amp;)</argsstring>
        <name>visitResumeInst</name>
        <param>
          <type>ResumeInst &amp;</type>
        </param>
        <briefdescription>
<para>Instruction not that often. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="198" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae9b2faad712a499759550b4958cef044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitUnreachableInst</definition>
        <argsstring>(UnreachableInst &amp;)</argsstring>
        <name>visitUnreachableInst</name>
        <param>
          <type>UnreachableInst &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="201" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a3d0cc10b66f6fc0f3e909861ac8cd244" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitFenceInst</definition>
        <argsstring>(FenceInst &amp;I)</argsstring>
        <name>visitFenceInst</name>
        <param>
          <type>FenceInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="204" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1af9e25ea8fee0e6d58c70ed7f1444ccaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitAtomicCmpXchgInst</definition>
        <argsstring>(AtomicCmpXchgInst &amp;I)</argsstring>
        <name>visitAtomicCmpXchgInst</name>
        <param>
          <type>AtomicCmpXchgInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="208" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a86667fc83e3afd45da76b8a0bf73ea83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitAtomicRMWInst</definition>
        <argsstring>(AtomicRMWInst &amp;I)</argsstring>
        <name>visitAtomicRMWInst</name>
        <param>
          <type>AtomicRMWInst &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="212" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a141d835fbf86c6b1963f23b9198f4edb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::visitInstruction</definition>
        <argsstring>(Instruction &amp;)</argsstring>
        <name>visitInstruction</name>
        <param>
          <type>Instruction &amp;</type>
        </param>
        <briefdescription>
<para>Provide base case for our instruction visit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="218" column="17" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ac982536389623922a8db341784f599e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::setCurrentLocation</definition>
        <argsstring>(const Value *val, const BasicBlock *bb)</argsstring>
        <name>setCurrentLocation</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Set current basic block in order to keep track of control flow information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="226" column="17" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a5147c8d5e072bf2e30b943e56a537925" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::PAGBuilder::getCurrentValue</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="231" column="24" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1abc50396b684b2c5d066974916b07424b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BasicBlock *</type>
        <definition>const BasicBlock* SVF::PAGBuilder::getCurrentBB</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentBB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="235" column="29" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a723c751c4575c5f73e2391c2ac1037c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAGBuilder::addGlobalBlackHoleAddrEdge</definition>
        <argsstring>(NodeID node, const ConstantExpr *int2Ptrce)</argsstring>
        <name>addGlobalBlackHoleAddrEdge</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const ConstantExpr *</type>
          <declname>int2Ptrce</declname>
        </param>
        <briefdescription>
<para>Add global black hole Address edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="241" column="10" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="241" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a612e0c0ebc12361d2fa56fb5fd85a671" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAGBuilder::addNullPtrNode</definition>
        <argsstring>()</argsstring>
        <name>addNullPtrNode</name>
        <briefdescription>
<para>Add NullPtr <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>let all undef value or non-determined pointers points-to black hole</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="251" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a8960f5bcb7484b548c27948686317783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAGBuilder::getGepValNode</definition>
        <argsstring>(const Value *val, const LocationSet &amp;ls, const Type *baseType, u32_t fieldidx)</argsstring>
        <name>getGepValNode</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>baseType</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>fieldidx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a temp field value node according to base value and offset this node is after the initial node method, it is out of scope of symInfo table </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="262" column="12" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="1359" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1abad522a6e5d90b6d59baf667a6ec8f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAGBuilder::setCurrentBBAndValueForPAGEdge</definition>
        <argsstring>(PAGEdge *edge)</argsstring>
        <name>setCurrentBBAndValueForPAGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>We assume every <ref refid="class_s_v_f_1_1_gep_val_p_n" kindref="compound">GepValPN</ref> and its <ref refid="class_s_v_f_1_1_gep_p_e" kindref="compound">GepPE</ref> are unique across whole program</para>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="264" column="10" bodyfile="lib/SVF-FE/PAGBuilder.cpp" bodystart="1406" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae27d71a747b7536cf7e8b375a70265be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge* SVF::PAGBuilder::addBlackHoleAddrEdge</definition>
        <argsstring>(NodeID node)</argsstring>
        <name>addBlackHoleAddrEdge</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="266" column="20" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1affc73e4204e3150b4f8cf654752d0bd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_addr_p_e" kindref="compound">AddrPE</ref> *</type>
        <definition>AddrPE* SVF::PAGBuilder::addAddrEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addAddrEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Address edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="274" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ad9d68206d9d900adc56474a97d84f5aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref> *</type>
        <definition>CopyPE* SVF::PAGBuilder::addCopyEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addCopyEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="281" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a883daf0dd77cffc7525522138a72f5f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cmp_p_e" kindref="compound">CmpPE</ref> *</type>
        <definition>CmpPE* SVF::PAGBuilder::addCmpEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addCmpEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="288" column="18" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="288" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a1e1a7ac8b5c26cc4a571a602eace6b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_binary_o_p_p_e" kindref="compound">BinaryOPPE</ref> *</type>
        <definition>BinaryOPPE* SVF::PAGBuilder::addBinaryOPEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addBinaryOPEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="295" column="23" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1aba8aa05cf63cec65b603b497ef35101f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_unary_o_p_p_e" kindref="compound">UnaryOPPE</ref> *</type>
        <definition>UnaryOPPE* SVF::PAGBuilder::addUnaryOPEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addUnaryOPEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Unary edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="302" column="22" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a607f25cf79a39de233c3c3226a5c3a84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref> *</type>
        <definition>LoadPE* SVF::PAGBuilder::addLoadEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addLoadEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Load edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="309" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ab5343c240c160f0ab1c97f3546e82bc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref> *</type>
        <definition>StorePE* SVF::PAGBuilder::addStoreEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addStoreEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Store edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="316" column="20" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a7f0bd7bb5f476a59490e09c599a7018d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_call_p_e" kindref="compound">CallPE</ref> *</type>
        <definition>CallPE* SVF::PAGBuilder::addCallEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addCallEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Call edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="328" column="19" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a0102a8cfcbcb1d3b86cf4eb4aceb45ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_ret_p_e" kindref="compound">RetPE</ref> *</type>
        <definition>RetPE* SVF::PAGBuilder::addRetEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addRetEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Return edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="335" column="18" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1afb20aef23c737da1f4253e0131a20918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_gep_p_e" kindref="compound">GepPE</ref> *</type>
        <definition>GepPE* SVF::PAGBuilder::addGepEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const LocationSet &amp;ls, bool constGep)</argsstring>
        <name>addGepEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>constGep</declname>
        </param>
        <briefdescription>
<para>Add Gep edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="342" column="18" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="342" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1ae8ae4030eb2aa3e91cbe3347ebbebe4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_normal_gep_p_e" kindref="compound">NormalGepPE</ref> *</type>
        <definition>NormalGepPE* SVF::PAGBuilder::addNormalGepEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const LocationSet &amp;ls)</argsstring>
        <name>addNormalGepEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Add Offset(Gep) edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="349" column="24" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="349" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1aca96a7d6ea2b029a094301744a803038" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_variant_gep_p_e" kindref="compound">VariantGepPE</ref> *</type>
        <definition>VariantGepPE* SVF::PAGBuilder::addVariantGepEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addVariantGepEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Variant(Gep) edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="356" column="25" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="356" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a1145de8b8cc483196ed48df4ddeb5518" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_d_fork_p_e" kindref="compound">TDForkPE</ref> *</type>
        <definition>TDForkPE* SVF::PAGBuilder::addThreadForkEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addThreadForkEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Thread fork edge for parameter passing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="363" column="21" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="363" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_builder_1a9d3dc63ec3c4a55168160eb413ee0133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_d_join_p_e" kindref="compound">TDJoinPE</ref> *</type>
        <definition>TDJoinPE* SVF::PAGBuilder::addThreadJoinEdge</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addThreadJoinEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Thread join edge for parameter passing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/PAGBuilder.h" line="370" column="21" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="370" bodyend="375"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> Builder </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>llvm::InstVisitor&lt; PAGBuilder &gt;</label>
      </node>
      <node id="1">
        <label>SVF::PAGBuilder</label>
        <link refid="class_s_v_f_1_1_p_a_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>llvm::InstVisitor&lt; PAGBuilder &gt;</label>
      </node>
      <node id="1">
        <label>SVF::PAGBuilder</label>
        <link refid="class_s_v_f_1_1_p_a_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/SVF-FE/PAGBuilder.h" line="44" column="1" bodyfile="include/SVF-FE/PAGBuilder.h" bodystart="45" bodyend="378"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1affc73e4204e3150b4f8cf654752d0bd7" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addAddrEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a1e1a7ac8b5c26cc4a571a602eace6b87" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addBinaryOPEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae27d71a747b7536cf7e8b375a70265be" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addBlackHoleAddrEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7f0bd7bb5f476a59490e09c599a7018d" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addCallEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a883daf0dd77cffc7525522138a72f5f5" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addCmpEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a0298648bd13700f9c4649c9ed39664a2" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addComplexConsForExt</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ad9d68206d9d900adc56474a97d84f5aa" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addCopyEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a4e6893b4ac983a96827e4447b471e8a3" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1afb20aef23c737da1f4253e0131a20918" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addGepEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a723c751c4575c5f73e2391c2ac1037c7" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addGlobalBlackHoleAddrEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a607f25cf79a39de233c3c3226a5c3a84" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addLoadEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae8ae4030eb2aa3e91cbe3347ebbebe4d" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addNormalGepEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a612e0c0ebc12361d2fa56fb5fd85a671" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addNullPtrNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a0102a8cfcbcb1d3b86cf4eb4aceb45ce" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addRetEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ab5343c240c160f0ab1c97f3546e82bc9" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addStoreEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a1145de8b8cc483196ed48df4ddeb5518" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addThreadForkEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a9d3dc63ec3c4a55168160eb413ee0133" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addThreadJoinEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1aba8aa05cf63cec65b603b497ef35101f" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addUnaryOPEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1aca96a7d6ea2b029a094301744a803038" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>addVariantGepEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a757ab2c9481467842e1ad4c46a1f6291" prot="public" virt="virtual"><scope>SVF::PAGBuilder</scope><name>build</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a5cedcedab00c875ba392da281de7f5f2" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>computeGepOffset</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1aaae667a9481adac1ce3d757b9c31be24" prot="private" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>curBB</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7a83bd8bf69747c8225301f5cc65d2da" prot="private" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>curVal</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1af6862687d02f922f4a2561898778c4b6" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getBaseTypeAndFlattenedFields</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1abc50396b684b2c5d066974916b07424b" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getCurrentBB</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a5147c8d5e072bf2e30b943e56a537925" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getCurrentValue</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a8960f5bcb7484b548c27948686317783" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getGepValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a51bd1644b78b1123622a34e6dee40829" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getGlobalVarField</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a442ca853e750396d088aa736cc39356f" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getObjectNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ac037265d15e76801cdf45ae5682ccef8" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a56174b3a60464bfb64f78b26d2408286" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getReturnNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1acfb6701d6460f26cd31526754419847b" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getValueNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1adab871886803e0dbe65b8c57bb15c309" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>getVarargNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1af0bcfa8c506dec6c8adb85852b39a8ab" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>handleDirectCall</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a5344e675f4207a1e9a2de54d0e5f6e9d" prot="public" virt="virtual"><scope>SVF::PAGBuilder</scope><name>handleExtCall</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ab222f5d9ad6c59e1c3a738153cf650d0" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>handleIndCall</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a280244168f951cb2d6a061583c20c432" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>InitialGlobal</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a2a2baa9aa1c4b467001ceab3f179ae1b" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>initialiseNodes</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae92e89e096a5f65c0c0421efc778523e" prot="private" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7c6b147496561a0efa5e4c27d5e1df8c" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>PAGBuilder</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a97cee5531a01ce845dcd217302759326" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>processCE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a378d2bc2d5526f0ab72c1488d3b58380" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>sanityCheck</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1abad522a6e5d90b6d59baf667a6ec8f32" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>setCurrentBBAndValueForPAGEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ac982536389623922a8db341784f599e5" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>setCurrentLocation</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7c197702fff05b1b6cd744b70a4a278c" prot="private" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>svfMod</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ac119eecbd406c08b473b39c7fa3e475b" prot="public" virt="virtual"><scope>SVF::PAGBuilder</scope><name>visitAllocaInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1af9e25ea8fee0e6d58c70ed7f1444ccaa" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitAtomicCmpXchgInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a86667fc83e3afd45da76b8a0bf73ea83" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitAtomicRMWInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a98abdcc0bb0aa457a3a77c03af2a6354" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitBinaryOperator</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a8afe9cfdcad2b2a961660fb1f8acd0d7" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitBranchInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae38d34776d2f3744adb90374aa84d12d" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitCallBrInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a279ed7ff3400183d81b4a4fbebe502f1" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitCallInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1abe51d51b7bd29f223552643010df586b" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a1aa76038afad572861c72fde345f9ad4" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitCastInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae6f28734ad5b933d347f6ebc95dcd2f2" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitCmpInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a5b7b565582e046a3acb279e315dd5318" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitExtractElementInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a54bab83475c617d969b6525f08d68e0c" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitExtractValueInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a3d0cc10b66f6fc0f3e909861ac8cd244" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitFenceInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a0385ab439c9f8788678f0490565f6396" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitGetElementPtrInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7247d100cc4f652d7dc4ca356b0f2538" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitGlobal</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a009b45ee9315080dbc80e25db7af3777" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitInsertElementInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a45d125ab3215cb00171b3d8f2e7048ed" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitInsertValueInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a141d835fbf86c6b1963f23b9198f4edb" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitInstruction</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae0008830aa2aebe1d0f31ed10a0b5533" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitInvokeInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a67e8185163f90a02dac7cb18a6e4eda5" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitLandingPadInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ad333677366e6e2eba1aa7f60f6e02814" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitLoadInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a77a96e3bad770eab314403b9d02b263f" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitPHINode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1acde7a8663cf936a2f5ce473673a09dc4" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitResumeInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1af56d19f29650c772bddeaee3d700b0a7" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitReturnInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a614aeca6530b697c0d67eb2b3173059c" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitSelectInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1abc5e3c052a31028b3d676e09c7e895b8" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitShuffleVectorInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a767d67bbcf32288c3a255b20f3d236bc" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitStoreInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a0a54a195cf948c400d1fbaf705a4b423" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitSwitchInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a7dfed8e95ae4bccdeac53e9c2d3b3cca" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitUnaryOperator</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae9b2faad712a499759550b4958cef044" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitUnreachableInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1a4e81ef5eff62ec9d040f4fe256ce4cc7" prot="public" virt="non-virtual"><scope>SVF::PAGBuilder</scope><name>visitVAArgInst</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_builder_1ae6dd6cbbbc3963771971ae89b291b699" prot="public" virt="virtual"><scope>SVF::PAGBuilder</scope><name>~PAGBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
