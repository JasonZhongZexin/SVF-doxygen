<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_race_result_validator" kind="class" language="C++" prot="public">
    <compoundname>RaceResultValidator</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_lock_validator" prot="public" virt="non-virtual">SVF::LockValidator</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_m_h_p_validator" prot="public" virt="non-virtual">SVF::MHPValidator</derivedcompoundref>
    <includes refid="_m_t_a_result_validator_8h" local="no">MTAResultValidator.h</includes>
    <innerclass refid="class_race_result_validator_1_1_access_pair" prot="public">RaceResultValidator::AccessPair</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_race_result_validator_1a640504d09fad1724b429abba7000d78a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int RaceResultValidator::RC_FLAG</definition>
        <argsstring></argsstring>
        <name>RC_FLAG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="162" column="17" bodyfile="include/MTA/MTAResultValidator.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_race_result_validator_1af4f176b7e01aff233c7d62cb6bf91401" prot="private" static="no" mutable="no">
        <type>SVFModule *</type>
        <definition>SVFModule* RaceResultValidator::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="367" column="15" bodyfile="include/MTA/MTAResultValidator.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1ae0aae7bfb6b0e08e9d9a1dd967acdc54" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_race_result_validator_1_1_access_pair" kindref="compound">AccessPair</ref> &gt;</type>
        <definition>std::vector&lt;AccessPair&gt; RaceResultValidator::accessPairs</definition>
        <argsstring></argsstring>
        <name>accessPairs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="368" column="17" bodyfile="include/MTA/MTAResultValidator.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1acc8504033fcb3c33bfcd67be8c9d80ef" prot="private" static="no" mutable="no">
        <type>RC_FLAG</type>
        <definition>RC_FLAG RaceResultValidator::selectedValidationScenarios</definition>
        <argsstring></argsstring>
        <name>selectedValidationScenarios</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="369" column="13" bodyfile="include/MTA/MTAResultValidator.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_race_result_validator_1a88e508612846e6e5527682d71d417c8a" prot="private" static="yes" mutable="no">
        <type>const RC_FLAG</type>
        <definition>const RC_FLAG RaceResultValidator::RC_MHP</definition>
        <argsstring></argsstring>
        <name>RC_MHP</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>Constant RC_FLAG values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="411" column="26" bodyfile="include/MTA/MTAResultValidator.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1a2422381d22e27a774ebbf3ea81e6c58d" prot="private" static="yes" mutable="no">
        <type>const RC_FLAG</type>
        <definition>const RC_FLAG RaceResultValidator::RC_ALIASES</definition>
        <argsstring></argsstring>
        <name>RC_ALIASES</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="412" column="26" bodyfile="include/MTA/MTAResultValidator.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1a101a1f81c268deb8459bc9241cf5e730" prot="private" static="yes" mutable="no">
        <type>const RC_FLAG</type>
        <definition>const RC_FLAG RaceResultValidator::RC_PROTECTED</definition>
        <argsstring></argsstring>
        <name>RC_PROTECTED</name>
        <initializer>= 0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="413" column="26" bodyfile="include/MTA/MTAResultValidator.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1a23f44d020da248e96cc90580f1505000" prot="private" static="yes" mutable="no">
        <type>const RC_FLAG</type>
        <definition>const RC_FLAG RaceResultValidator::RC_RACE</definition>
        <argsstring></argsstring>
        <name>RC_RACE</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="414" column="26" bodyfile="include/MTA/MTAResultValidator.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_race_result_validator_1a86288c9d74ec9ea77e53e22eb44f780b" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char const  *</type>
        <definition>constexpr char const* RaceResultValidator::RC_ACCESS</definition>
        <argsstring></argsstring>
        <name>RC_ACCESS</name>
        <initializer>= &quot;RC_ACCESS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name of the function which is used to specify the ground truth of the validation properties in the target program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="419" column="33" bodyfile="include/MTA/MTAResultValidator.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_race_result_validator_1aba1a226c3fb9799c38eff0513d75c52a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual RaceResultValidator::~RaceResultValidator</definition>
        <argsstring>()</argsstring>
        <name>~RaceResultValidator</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="200" column="13" bodyfile="include/MTA/MTAResultValidator.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1aaedcd28861706a418fdaf7582ea0553b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RaceResultValidator::init</definition>
        <argsstring>(SVFModule *M)</argsstring>
        <name>init</name>
        <param>
          <type>SVFModule *</type>
          <declname>M</declname>
        </param>
        <briefdescription>
<para>Initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="206" column="10" bodyfile="include/MTA/MTAResultValidator.h" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a21e23f7f1b1bbb1775a41f6e4b7d8bd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RaceResultValidator::analyze</definition>
        <argsstring>()</argsstring>
        <name>analyze</name>
        <briefdescription>
<para>Analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="214" column="10" bodyfile="include/MTA/MTAResultValidator.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1ae218778896057b975597948a59a46607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RaceResultValidator::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release resource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="220" column="10" bodyfile="include/MTA/MTAResultValidator.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a45e68a2e6a11ccc2031de7fd1014770f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RaceResultValidator::hasValidationTarget</definition>
        <argsstring>() const</argsstring>
        <name>hasValidationTarget</name>
        <briefdescription>
<para>Check if the input program has validation target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="225" column="17" bodyfile="include/MTA/MTAResultValidator.h" bodystart="225" bodyend="228"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_race_result_validator_1a90189d5d999fcad00a12821d620d6c59" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool RaceResultValidator::mayAccessAliases</definition>
        <argsstring>(const Instruction *I1, const Instruction *I2)</argsstring>
        <name>mayAccessAliases</name>
        <param>
          <type>const Instruction *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>I2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interface to the specific validation properties. Override one or more to implement your own analysis. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="234" column="18" bodyfile="include/MTA/MTAResultValidator.h" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1ad27006fe8be713c8d51bbe4b66af913c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool RaceResultValidator::mayHappenInParallel</definition>
        <argsstring>(const Instruction *I1, const Instruction *I2)</argsstring>
        <name>mayHappenInParallel</name>
        <param>
          <type>const Instruction *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>I2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="240" column="18" bodyfile="include/MTA/MTAResultValidator.h" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1ab4cb632afd825334aa69cee9790672fa" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool RaceResultValidator::protectedByCommonLocks</definition>
        <argsstring>(const Instruction *I1, const Instruction *I2)</argsstring>
        <name>protectedByCommonLocks</name>
        <param>
          <type>const Instruction *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>I2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="246" column="18" bodyfile="include/MTA/MTAResultValidator.h" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a1d170ebf9afb5d00b4bd36cc2b415dbb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool RaceResultValidator::mayHaveDataRace</definition>
        <argsstring>(const Instruction *I1, const Instruction *I2)</argsstring>
        <name>mayHaveDataRace</name>
        <param>
          <type>const Instruction *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>I2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="252" column="18" bodyfile="include/MTA/MTAResultValidator.h" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a3aa6ef4733150b1ea4ae396263e2d1e4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RaceResultValidator::collectValidationTargets</definition>
        <argsstring>()</argsstring>
        <name>collectValidationTargets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect the targets for validations. The targets should be memory access Instructions in pairs. The collected targets are stored in the member variable &quot;accessPairs&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="265" column="10" bodyfile="include/MTA/MTAResultValidator.h" bodystart="265" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a4327af2795a9aa336543d8b3c3a7bfdf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RaceResultValidator::validateAll</definition>
        <argsstring>()</argsstring>
        <name>validateAll</name>
        <briefdescription>
<para>Perform validation for all targets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="302" column="10" bodyfile="include/MTA/MTAResultValidator.h" bodystart="302" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_race_result_validator_1a4ae48756137dc202d48a4135251f6909" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RaceResultValidator::getOutput</definition>
        <argsstring>(const char *scenario, bool analysisRes, bool expectedRes)</argsstring>
        <name>getOutput</name>
        <param>
          <type>const char *</type>
          <declname>scenario</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>analysisRes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expectedRes</declname>
        </param>
        <briefdescription>
<para>Get the validation result string of a single validation scenario. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="350" column="24" bodyfile="include/MTA/MTAResultValidator.h" bodystart="350" bodyend="364"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_race_result_validator_1a1067cadab34a6f24a4e029cfed9bc551" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool RaceResultValidator::compare</definition>
        <argsstring>(const CallInst *CI1, const CallInst *CI2)</argsstring>
        <name>compare</name>
        <param>
          <type>const CallInst *</type>
          <declname>CI1</declname>
        </param>
        <param>
          <type>const CallInst *</type>
          <declname>CI2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Comparison function to sort the validation targets in ascending order of the validation id (i.e., the 1st argument of RC_ACCESS function call). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="375" column="17" bodyfile="include/MTA/MTAResultValidator.h" bodystart="375" bodyend="383"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_race_result_validator_1a6588056d493a2de94e140019b4964874" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Instruction *</type>
        <definition>const Instruction* RaceResultValidator::getPreviousMemoryAccessInst</definition>
        <argsstring>(const Instruction *I)</argsstring>
        <name>getPreviousMemoryAccessInst</name>
        <param>
          <type>const Instruction *</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the previous LoadInst or StoreInst from Instruction &quot;I&quot; in the same BasicBlock. Return NULL if none exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTAResultValidator.h" line="390" column="23" bodyfile="include/MTA/MTAResultValidator.h" bodystart="390" bodyend="407"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Validate the result of concurrent analysis. </para>
    </briefdescription>
    <detaileddescription>
<para>The properties to validate of two memory accesses include one or more of the following four: (1) they may accesses aliases; (2) they may happen in parallel; (3) they are protected by common lock(s); (4) they may cause a data race error. The ground truth are specified by the &quot;RC_ACCESS&quot; function in the target program.</para>
<para>Users may utilize this result validator to validate their analysis with one or more of the four properties, by inheriting the RCResultValidator class. The corresponding virtual function of the desired property should be overridden. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>RaceResultValidator</label>
        <link refid="class_race_result_validator"/>
      </node>
      <node id="2">
        <label>SVF::LockValidator</label>
        <link refid="class_s_v_f_1_1_lock_validator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::MHPValidator</label>
        <link refid="class_s_v_f_1_1_m_h_p_validator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/MTA/MTAResultValidator.h" line="159" column="1" bodyfile="include/MTA/MTAResultValidator.h" bodystart="160" bodyend="420"/>
    <listofallmembers>
      <member refid="class_race_result_validator_1ae0aae7bfb6b0e08e9d9a1dd967acdc54" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>accessPairs</name></member>
      <member refid="class_race_result_validator_1a21e23f7f1b1bbb1775a41f6e4b7d8bd2" prot="public" virt="non-virtual"><scope>RaceResultValidator</scope><name>analyze</name></member>
      <member refid="class_race_result_validator_1a3aa6ef4733150b1ea4ae396263e2d1e4" prot="protected" virt="non-virtual"><scope>RaceResultValidator</scope><name>collectValidationTargets</name></member>
      <member refid="class_race_result_validator_1a1067cadab34a6f24a4e029cfed9bc551" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>compare</name></member>
      <member refid="class_race_result_validator_1a4ae48756137dc202d48a4135251f6909" prot="protected" virt="non-virtual"><scope>RaceResultValidator</scope><name>getOutput</name></member>
      <member refid="class_race_result_validator_1a6588056d493a2de94e140019b4964874" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>getPreviousMemoryAccessInst</name></member>
      <member refid="class_race_result_validator_1a45e68a2e6a11ccc2031de7fd1014770f" prot="public" virt="non-virtual"><scope>RaceResultValidator</scope><name>hasValidationTarget</name></member>
      <member refid="class_race_result_validator_1aaedcd28861706a418fdaf7582ea0553b" prot="public" virt="non-virtual"><scope>RaceResultValidator</scope><name>init</name></member>
      <member refid="class_race_result_validator_1af4f176b7e01aff233c7d62cb6bf91401" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>M</name></member>
      <member refid="class_race_result_validator_1a90189d5d999fcad00a12821d620d6c59" prot="protected" virt="virtual"><scope>RaceResultValidator</scope><name>mayAccessAliases</name></member>
      <member refid="class_race_result_validator_1ad27006fe8be713c8d51bbe4b66af913c" prot="protected" virt="virtual"><scope>RaceResultValidator</scope><name>mayHappenInParallel</name></member>
      <member refid="class_race_result_validator_1a1d170ebf9afb5d00b4bd36cc2b415dbb" prot="protected" virt="virtual"><scope>RaceResultValidator</scope><name>mayHaveDataRace</name></member>
      <member refid="class_race_result_validator_1ab4cb632afd825334aa69cee9790672fa" prot="protected" virt="virtual"><scope>RaceResultValidator</scope><name>protectedByCommonLocks</name></member>
      <member refid="class_race_result_validator_1a86288c9d74ec9ea77e53e22eb44f780b" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_ACCESS</name></member>
      <member refid="class_race_result_validator_1a2422381d22e27a774ebbf3ea81e6c58d" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_ALIASES</name></member>
      <member refid="class_race_result_validator_1a640504d09fad1724b429abba7000d78a" prot="public" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_FLAG</name></member>
      <member refid="class_race_result_validator_1a88e508612846e6e5527682d71d417c8a" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_MHP</name></member>
      <member refid="class_race_result_validator_1a101a1f81c268deb8459bc9241cf5e730" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_PROTECTED</name></member>
      <member refid="class_race_result_validator_1a23f44d020da248e96cc90580f1505000" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>RC_RACE</name></member>
      <member refid="class_race_result_validator_1ae218778896057b975597948a59a46607" prot="public" virt="non-virtual"><scope>RaceResultValidator</scope><name>release</name></member>
      <member refid="class_race_result_validator_1acc8504033fcb3c33bfcd67be8c9d80ef" prot="private" virt="non-virtual"><scope>RaceResultValidator</scope><name>selectedValidationScenarios</name></member>
      <member refid="class_race_result_validator_1a4327af2795a9aa336543d8b3c3a7bfdf" prot="protected" virt="non-virtual"><scope>RaceResultValidator</scope><name>validateAll</name></member>
      <member refid="class_race_result_validator_1aba1a226c3fb9799c38eff0513d75c52a" prot="public" virt="virtual"><scope>RaceResultValidator</scope><name>~RaceResultValidator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
