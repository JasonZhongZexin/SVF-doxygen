.TH "SVF::IntraDisjointMRG" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::IntraDisjointMRG
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MemPartition\&.h>\fP
.PP
Inherits \fBSVF::MRGenerator\fP\&.
.PP
Inherited by \fBSVF::InterDisjointMRG\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef OrderedMap< PointsTo, PointsToList > \fBPtsToSubPtsMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, PtsToSubPtsMap > \fBFunToPtsMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, PointsToList > \fBFunToInterMap\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIntraDisjointMRG\fP (\fBBVDataPTAImpl\fP *p, bool ptrOnly)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBpartitionMRs\fP ()"
.br
.RI "Partition regions\&. "
.ti -1c
.RI "virtual void \fBgetMRsForLoad\fP (\fBMRSet\fP &aliasMRs, const PointsTo &cpts, const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "void \fBgetMRsForLoadFromInterList\fP (\fBMRSet\fP &mrs, const PointsTo &cpts, const PointsToList &inters)"
.br
.ti -1c
.RI "virtual void \fBgetMRsForCallSiteRef\fP (\fBMRSet\fP &aliasMRs, const PointsTo &cpts, const \fBSVFFunction\fP *fun)"
.br
.RI "Get memory regions to be inserted at a load statement\&. "
.ti -1c
.RI "void \fBcreateDisjointMR\fP (const \fBSVFFunction\fP *func, const PointsTo &cpts)"
.br
.RI "Create disjoint memory region\&. "
.ti -1c
.RI "void \fBcomputeIntersections\fP (const PointsTo &cpts, PointsToList &inters)"
.br
.RI "Compute intersections between cpts and computed cpts intersections before\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Create memory regions which don't have intersections with each other in the same function scope\&. 
.SH "Member Function Documentation"
.PP 
.SS "void IntraDisjointMRG::computeIntersections (const PointsTo & cpts, PointsToList & inters)\fC [protected]\fP"

.PP
Compute intersections between cpts and computed cpts intersections before\&. Compute intersections between cpts and computed cpts intersections before\&. 
.SS "void IntraDisjointMRG::createDisjointMR (const \fBSVFFunction\fP * func, const PointsTo & cpts)\fC [protected]\fP"

.PP
Create disjoint memory region\&. Create memory regions for each points-to target\&. 
.SS "void IntraDisjointMRG::getMRsForCallSiteRef (\fBMRSet\fP & aliasMRs, const PointsTo & cpts, const \fBSVFFunction\fP * fun)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Get memory regions to be inserted at a load statement\&. Get memory regions to be inserted at a load statement\&. Just process as \fBgetMRsForLoad()\fP\&. 
.PP
Reimplemented from \fBSVF::MRGenerator\fP\&.
.SS "virtual void SVF::IntraDisjointMRG::getMRsForLoad (\fBMRSet\fP & aliasMRs, const PointsTo & cpts, const \fBSVFFunction\fP * fun)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Get memory regions to be inserted at a load statement\&. 
.PP
\fBParameters\fP
.RS 4
\fIcpts\fP The conditional points-to set of load statement\&. 
.br
\fIfun\fP The function being analyzed\&. 
.br
\fImrs\fP Memory region set contains all possible target memory regions\&. 
.RE
.PP

.PP
Reimplemented from \fBSVF::MRGenerator\fP\&.
.PP
Reimplemented in \fBSVF::InterDisjointMRG\fP\&.
.SS "void IntraDisjointMRG::partitionMRs ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Partition regions\&. Create memory regions\&.
.PP
Reimplemented from \fBSVF::MRGenerator\fP\&.
.PP
Reimplemented in \fBSVF::InterDisjointMRG\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
