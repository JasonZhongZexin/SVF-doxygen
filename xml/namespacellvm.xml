<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacellvm" kind="namespace" language="C++">
    <compoundname>llvm</compoundname>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::ConstraintNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_constraint_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::ConstraintNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_graph_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::ConstraintGraph * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_graph_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::GenericGraph&lt; NodeTy, EdgeTy &gt; * &gt;</innerclass>
    <innerclass refid="classllvm_1_1_graph_printer" prot="public">llvm::GraphPrinter</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::ICFGNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::ICFGNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::ICFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_offline_cons_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::OfflineConsG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::PAGNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::PAGNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::PAG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::PTACallGraphNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::PTACallGraphNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::PTACallGraph * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_s_v_f_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::SVFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::VFGNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::VFGNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::VFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::TCTNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::TCTNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::TCT * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::CHNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_c_h_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::CHNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_graph_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::CHGraph * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::DCHNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::DCHNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_graph_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::DCHGraph * &gt;</innerclass>
    <innerclass refid="classllvm_1_1generic__bridge__gep__type__iterator" prot="public">llvm::generic_bridge_gep_type_iterator</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_constraint_graph_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; ConstraintGraph * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_i_c_f_g_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; ICFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_offline_cons_g_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; OfflineConsG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_p_a_g_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; PAG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_p_t_a_call_graph_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; PTACallGraph * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_s_v_f_g_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; SVFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_v_f_g_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; VFG * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_t_c_t_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; TCT * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_d_o_t_graph_traits_3_01_c_h_graph_01_5_01_4" prot="public">llvm::DOTGraphTraits&lt; CHGraph * &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacellvm_1af77a7ec045719d1f075cf6c591902522" prot="public" static="no">
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">generic_bridge_gep_type_iterator</ref></type>
        <definition>typedef generic_bridge_gep_type_iterator llvm::bridge_gep_iterator</definition>
        <argsstring></argsstring>
        <name>bridge_gep_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="120" column="10" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacellvm_1acfe99e9d441434240c79f6d76b73fe0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">bridge_gep_iterator</ref></type>
        <definition>bridge_gep_iterator llvm::bridge_gep_begin</definition>
        <argsstring>(const User *GEP)</argsstring>
        <name>bridge_gep_begin</name>
        <param>
          <type>const User *</type>
          <declname>GEP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="122" column="28" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacellvm_1a7cfc92a12082d69711c97bb3d1b99c48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">bridge_gep_iterator</ref></type>
        <definition>bridge_gep_iterator llvm::bridge_gep_end</definition>
        <argsstring>(const User *GEP)</argsstring>
        <name>bridge_gep_end</name>
        <param>
          <type>const User *</type>
          <declname>GEP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="130" column="28" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacellvm_1abbab4f4ed7ffae3e7e715990a0b416fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">bridge_gep_iterator</ref></type>
        <definition>bridge_gep_iterator llvm::bridge_gep_begin</definition>
        <argsstring>(const User &amp;GEP)</argsstring>
        <name>bridge_gep_begin</name>
        <param>
          <type>const User &amp;</type>
          <declname>GEP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="135" column="28" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacellvm_1adcacad81533beb6331d1cd4b1bbcf0d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">bridge_gep_iterator</ref></type>
        <definition>bridge_gep_iterator llvm::bridge_gep_end</definition>
        <argsstring>(const User &amp;GEP)</argsstring>
        <name>bridge_gep_end</name>
        <param>
          <type>const User &amp;</type>
          <declname>GEP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="143" column="28" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacellvm_1af784337dc495897cf05f28fd95f07477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classllvm_1_1generic__bridge__gep__type__iterator" kindref="compound">generic_bridge_gep_type_iterator</ref>&lt; const T * &gt;</type>
        <definition>generic_bridge_gep_type_iterator&lt;const T*&gt; llvm::bridge_gep_end</definition>
        <argsstring>(Type *, ArrayRef&lt; T &gt; A)</argsstring>
        <name>bridge_gep_end</name>
        <param>
          <type>Type *</type>
        </param>
        <param>
          <type>ArrayRef&lt; T &gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/GEPTypeBridgeIterator.h" line="149" column="41" bodyfile="include/SVF-FE/GEPTypeBridgeIterator.h" bodystart="149" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>GraphTraits specialization for constraint graph</para>
<para>GraphTraits specialization </para>
    </detaileddescription>
    <location file="include/Graphs/ConsG.h" line="369" column="1"/>
  </compounddef>
</doxygen>
