<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_location_set" xml:lang="en-US">
<title>SVF::LocationSet Class Reference</title>
<indexterm><primary>SVF::LocationSet</primary></indexterm>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a002a0c8ec2528835d809bf7eb3ebc83f"/>enum <emphasis role="strong">LSRelation</emphasis> { 
<emphasis role="strong">NonOverlap</emphasis>
, <emphasis role="strong">Overlap</emphasis>
, <emphasis role="strong">Subset</emphasis>
, <emphasis role="strong">Superset</emphasis>
, 
<emphasis role="strong">Same</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a8eb854480cc3efc1df4e6ebe916990d2"/>typedef FieldInfo::ElemNumStridePairVec <emphasis role="strong">ElemNumStridePairVec</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1ac07e93a10d3f981c2ef6fcc507118182"/><link linkend="_class_s_v_f_1_1_location_set_1ac07e93a10d3f981c2ef6fcc507118182">LocationSet</link> (Size_t o=0)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a290c7fe38704552fd66ad06e5deeaca9"/><link linkend="_class_s_v_f_1_1_location_set_1a290c7fe38704552fd66ad06e5deeaca9">LocationSet</link> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;ls)</para>

<para>Copy Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1afd3b135453644cd42e869d378c270d23"/><link linkend="_class_s_v_f_1_1_location_set_1afd3b135453644cd42e869d378c270d23">LocationSet</link> (const <link linkend="_class_s_v_f_1_1_field_info">FieldInfo</link> &amp;fi)</para>

<para>Initialization from <link linkend="_class_s_v_f_1_1_field_info">FieldInfo</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a19700ba5a9eebf50a0f3064f44e4bd97"/><link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> <link linkend="_class_s_v_f_1_1_location_set_1a19700ba5a9eebf50a0f3064f44e4bd97">operator+</link> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;rhs) const</para>

<para>Overload operators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a15975ec54c93c39fb1ed59599e5ec107"/>const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;rhs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a7325b652e80625329406d8155ae8d403"/>bool <emphasis role="strong">operator&lt;</emphasis> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a1b141afb9a38d12423f66b2dfe6bf232"/>bool <emphasis role="strong">operator==</emphasis> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1ab85c3707152e03722bd631b2525f223e"/>Size_t <link linkend="_class_s_v_f_1_1_location_set_1ab85c3707152e03722bd631b2525f223e">getOffset</link> () const</para>

<para>Get methods. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a5322dcda48d6980c3f7aafa169fcd77d"/>Size_t <emphasis role="strong">getByteOffset</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1acc8d400f4715e05d8d4174d7bf722346"/>void <emphasis role="strong">setFldIdx</emphasis> (Size_t idx)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a6c5b8c1a9f765de8bcbefb681ca6a92c"/>void <emphasis role="strong">setByteOffset</emphasis> (Size_t os)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a3720af92ca2a65f02492e752b07ba241"/>const ElemNumStridePairVec &amp; <emphasis role="strong">getNumStridePair</emphasis> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_location_set_1a38077e721631f3c6b09238880c97732b">addElemNumStridePair</link> (const NodePair &amp;pair)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a464c14d79a64dc403c2757b3b8520cbd"/>bool <link linkend="_class_s_v_f_1_1_location_set_1a464c14d79a64dc403c2757b3b8520cbd">isConstantOffset</link> () const</para>

<para>Return TRUE if this is a constant location set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a0e1cddc4228e310c95f68c661c7b94c8"/>bool <link linkend="_class_s_v_f_1_1_location_set_1a0e1cddc4228e310c95f68c661c7b94c8">intersects</link> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;RHS) const</para>

<para>Return TRUE if we share any location in common with RHS. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a4e5f29661da66367cea70a0d3fa108b4"/>std::string <link linkend="_class_s_v_f_1_1_location_set_1a4e5f29661da66367cea70a0d3fa108b4">dump</link> () const</para>

<para>Dump location set. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a6962903a24f540c6bc58b8ae6a0cc757"/>static LSRelation <link linkend="_class_s_v_f_1_1_location_set_1a6962903a24f540c6bc58b8ae6a0cc757">checkRelation</link> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;LHS, const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;RHS)</para>

<para>Check relations of two location sets. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1a32ddec529ccbf4ea6336e5fd765164d8"/>class <emphasis role="strong">SymbolTableInfo</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_location_set_1ac2acfe0b3cea2461ea6b6ba1a411d3b5"/>class <emphasis role="strong">LocSymTableInfo</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_location_set_1a38077e721631f3c6b09238880c97732b"/>    <section>
    <title>addElemNumStridePair()</title>
<indexterm><primary>addElemNumStridePair</primary><secondary>SVF::LocationSet</secondary></indexterm>
<indexterm><primary>SVF::LocationSet</primary><secondary>addElemNumStridePair</secondary></indexterm>
<para><computeroutput>void LocationSet::addElemNumStridePair (const NodePair &amp; pair)</computeroutput></para>
<para>Add element num and stride pair </para>

<para>The pair will not be added if any number of a stride is zero, because they will not have effect on the locations represented by this <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link>.</para>

<para>Find the GCD stride</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MemoryModel/LocationSet.hlib/MemoryModel/LocationSet.cpp</section>
</section>
