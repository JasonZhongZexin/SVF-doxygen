<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_v_f_g_node" xml:lang="en-US">
<title>SVF::VFGNode Class Reference</title>
<indexterm><primary>SVF::VFGNode</primary></indexterm>
<para>Inheritance diagram for SVF::VFGNode:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_v_f_g_node.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75">VFGNodeK</link> { 
<emphasis role="strong">Addr</emphasis>
, <emphasis role="strong">Copy</emphasis>
, <emphasis role="strong">Gep</emphasis>
, <emphasis role="strong">Store</emphasis>
, 
<emphasis role="strong">Load</emphasis>
, <emphasis role="strong">Cmp</emphasis>
, <emphasis role="strong">BinaryOp</emphasis>
, <emphasis role="strong">UnaryOp</emphasis>
, 
<emphasis role="strong">TPhi</emphasis>
, <emphasis role="strong">TIntraPhi</emphasis>
, <emphasis role="strong">TInterPhi</emphasis>
, <emphasis role="strong">MPhi</emphasis>
, 
<emphasis role="strong">MIntraPhi</emphasis>
, <emphasis role="strong">MInterPhi</emphasis>
, <emphasis role="strong">FRet</emphasis>
, <emphasis role="strong">ARet</emphasis>
, 
<emphasis role="strong">AParm</emphasis>
, <emphasis role="strong">FParm</emphasis>
, <emphasis role="strong">FunRet</emphasis>
, <emphasis role="strong">APIN</emphasis>
, 
<emphasis role="strong">APOUT</emphasis>
, <emphasis role="strong">FPIN</emphasis>
, <emphasis role="strong">FPOUT</emphasis>
, <emphasis role="strong">NPtr</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a8b320525e5a0ed93030d578030761124"/>typedef VFGEdge::VFGEdgeSetTy::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a3c558955f60c237c558d8faafed781e8"/>typedef VFGEdge::VFGEdgeSetTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a43b6b3dc747d310f793ca1b3bfa9d05f"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_call_p_e">CallPE</link> * &gt; <emphasis role="strong">CallPESet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a367413b90de8a382190ffa9f0c742e01"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_ret_p_e">RetPE</link> * &gt; <emphasis role="strong">RetPESet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a775b3bd4c7558a18c5bc890fe711f03c"/><link linkend="_class_s_v_f_1_1_v_f_g_node_1a775b3bd4c7558a18c5bc890fe711f03c">VFGNode</link> (NodeID i, <link linkend="_class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75">VFGNodeK</link> k)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a0675465e11d1d42ee7e2b7ab3c5de829"/>virtual const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * <link linkend="_class_s_v_f_1_1_v_f_g_node_1a0675465e11d1d42ee7e2b7ab3c5de829">getICFGNode</link> () const</para>

<para>Return corresponding <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a9c95dd4f0e70ccc4a03282cdddba95de"/>virtual void <link linkend="_class_s_v_f_1_1_v_f_g_node_1a9c95dd4f0e70ccc4a03282cdddba95de">setICFGNode</link> (const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *node)</para>

<para>Set corresponding <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1ab98e74dfd4756e70e3e3c5b7d5e5ae27"/>virtual const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <link linkend="_class_s_v_f_1_1_v_f_g_node_1ab98e74dfd4756e70e3e3c5b7d5e5ae27">getFun</link> () const</para>

<para>Get the function of this SVFGNode. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a0342b5a6f270f4ff0e8e2a9b0082c6c5"/>virtual const std::string <emphasis role="strong">toString</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a54c631f1e39be144c0cd25373f6b98b8"/>const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * <emphasis role="strong">icfgNode</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1acf120796be0cbb19c43fa271892b564a"/><link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; <link linkend="_class_s_v_f_1_1_v_f_g_node_1acf120796be0cbb19c43fa271892b564a">operator&lt;&lt;</link> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;o, const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> &amp;node)</para>

<para>Overloading operator &lt;&lt; for dumping <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node ID. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75"/>    <section>
    <title>VFGNodeK</title>
<indexterm><primary>VFGNodeK</primary><secondary>SVF::VFGNode</secondary></indexterm>
<indexterm><primary>SVF::VFGNode</primary><secondary>VFGNodeK</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75">SVF::VFGNode::VFGNodeK</link></computeroutput></para>
<para>24 kinds of <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node Gep represents offset edge for field sensitivity </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/VFGNode.hlib/Graphs/VFG.cpp</section>
</section>
