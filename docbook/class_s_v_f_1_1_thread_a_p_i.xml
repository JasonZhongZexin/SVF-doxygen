<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_thread_a_p_i" xml:lang="en-US">
<title>SVF::ThreadAPI Class Reference</title>
<indexterm><primary>SVF::ThreadAPI</primary></indexterm>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3">TD_TYPE</link> { 
<emphasis role="strong">TD_DUMMY</emphasis> = 0
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9a40948eeab9b022957ae33715ee83da">TD_FORK</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9efe9b72a2520e1fae3cae1e747e3134">TD_JOIN</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a0b558cf037397818414cac2f7c87ab08">TD_DETACH</link>
, 
<link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a5bda6aca46dfc712f3781b4732a373a3">TD_ACQUIRE</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3ab7ea623d48ae64aa09ab49deebbb7113">TD_TRY_ACQUIRE</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3ac826e1e1c43305a3abcfdc9a2169b8dd">TD_RELEASE</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3af3a3036705ecca40cf170d12d0ccf4dc">TD_EXIT</link>
, 
<link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3afad2e548ab59646972d8c66e593845cc">TD_CANCEL</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa8a39bd1bb13292a55dd6168909c872e">TD_COND_WAIT</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a01a3b1723176504482b606d8e097949f">TD_COND_SIGNAL</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa6ee2952d7757b0919f56bd39fd5a93e">TD_COND_BROADCAST</link>
, 
<link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3abb17ca545bd259f16a36a2d2af43948b">TD_MUTEX_INI</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a91db238366fcdcd65bd7710882c8716f">TD_MUTEX_DESTROY</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a1f921d7369e3a00a77394640f887c7ff">TD_CONDVAR_INI</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9c3f04e71ed64ce8d2862d7a6f39a95b">TD_CONDVAR_DESTROY</link>
, 
<link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a4fb99e17bf56ae018448f5f97aa8cda6">TD_BAR_INIT</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa2b2704ecc4c11ec0dbeaf1b22532431">TD_BAR_WAIT</link>
, <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a4690967fd6d32fb82c5de637846a3476">HARE_PAR_FOR</link>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ae9721b91bd60d27ae3dd48cb058301b2"/>typedef llvm::StringMap&lt; <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3">TD_TYPE</link> &gt; <emphasis role="strong">TDAPIMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a08c83946d87ab935bd8bf6fea20792ba"/>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a08c83946d87ab935bd8bf6fea20792ba">getCallee</link> (const Instruction *inst) const</para>

<para>Return the callee/callsite/func. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ab2c517ddae02fbb80f56ddc609b2f5ef"/>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <emphasis role="strong">getCallee</emphasis> (const CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ad4dfe9563de352bb40fb1028a2851512"/>const CallSite <emphasis role="strong">getLLVMCallSite</emphasis> (const Instruction *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf">isTDFork</link> (const Instruction *inst) const</para>

<para>Return true if this call create a new thread. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a261eb3c2f7e44a81edf4feddfc65a3cc"/>bool <emphasis role="strong">isTDFork</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a86d75b7e3570337e484397e60f97d88e"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a86d75b7e3570337e484397e60f97d88e">isHareParFor</link> (const Instruction *inst) const</para>

<para>Return true if this call proceeds a hare_parallel_for. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1adb944c2287cf7686a03b0e53a03ba025"/>bool <emphasis role="strong">isHareParFor</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a11dc55f35c18bd1f46d00c21c7dc695e">getForkedThread</link> (const Instruction *inst) const</para>

<para>Return arguments/attributes of pthread_create / hare_parallel_for. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a25a4bc5f173773340b430324a4d3bbdd"/>const Value * <emphasis role="strong">getForkedThread</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a7ddc0c71aeae315af21972a4905b3456">getForkedFun</link> (const Instruction *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1aff38fda045d0016660710ab9124da13c"/>const Value * <emphasis role="strong">getForkedFun</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a6bc40bc0b35c23e9d1874c844511449d">getActualParmAtForkSite</link> (const Instruction *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ae8224e28db2323874fb9da8b05d3ab80"/>const Value * <emphasis role="strong">getActualParmAtForkSite</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1afeedd6e518af76fa9e7142af8899b2f5"/>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1afeedd6e518af76fa9e7142af8899b2f5">getTaskFuncAtHareParForSite</link> (const Instruction *inst) const</para>

<para>Get the task function (i.e., the 5th parameter) of the hare_parallel_for call. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a282d6aeab91135af4cab8195d67badf6"/>const Value * <emphasis role="strong">getTaskFuncAtHareParForSite</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a58cf56e35be873a5a26c5eb0d9b5c9b3"/>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a58cf56e35be873a5a26c5eb0d9b5c9b3">getTaskDataAtHareParForSite</link> (const Instruction *inst) const</para>

<para>Get the task data (i.e., the 6th parameter) of the hare_parallel_for call. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1aee8fac6281a95d8a519add100e8887d1"/>const Value * <emphasis role="strong">getTaskDataAtHareParForSite</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44">isTDJoin</link> (const Instruction *inst) const</para>

<para>Return true if this call wait for a worker thread. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a50e56d63c6d713ac34b4006d248f880b"/>bool <emphasis role="strong">isTDJoin</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1ac9f3cc080275ce7d76dd2f56fc7c6434">getJoinedThread</link> (const Instruction *inst) const</para>

<para>Return arguments/attributes of pthread_join. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1adf4350f4ef5a8d845806ab99591efa93"/>const Value * <emphasis role="strong">getJoinedThread</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1ad1c595f7b15a2d3079b9e9200c84f7d7">getRetParmAtJoinedSite</link> (const Instruction *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a5439ef32c909b02c83cbd30eb0a0fe12"/>const Value * <emphasis role="strong">getRetParmAtJoinedSite</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ae87d129560d7015966336f06a516db23"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1ae87d129560d7015966336f06a516db23">isTDExit</link> (const Instruction *inst) const</para>

<para>Return true if this call exits/terminate a thread. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a22d6c0cf0ba19af0661b106a8859024f"/>bool <emphasis role="strong">isTDExit</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a9db4df7968ec179e5012794c58fdee70"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a9db4df7968ec179e5012794c58fdee70">isTDAcquire</link> (const Instruction *inst) const</para>

<para>Return true if this call acquire a lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a608f0cb60a665745748b6a6654a6e837"/>bool <emphasis role="strong">isTDAcquire</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38adae633d5aceddcca3b3a23ad66db9"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38adae633d5aceddcca3b3a23ad66db9">isTDRelease</link> (const Instruction *inst) const</para>

<para>Return true if this call release a lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a1bba2e9df7a74e7e2f728267ff4bfe0f"/>bool <emphasis role="strong">isTDRelease</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para>const Value * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a8f1c869eb42f7c89697cf2c7452ba9e9">getLockVal</link> (const Instruction *inst) const</para>

<para>Return lock value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ad1d43e47f5036138e85068a1714f6c48"/>const Value * <emphasis role="strong">getLockVal</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a0ff50b4312b9aa2c7ebd00e9a40a2668"/>bool <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a0ff50b4312b9aa2c7ebd00e9a40a2668">isTDBarWait</link> (const Instruction *inst) const</para>

<para>Return true if this call waits for a barrier. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1af3aa58dc83dca382162df67c12169585"/>bool <emphasis role="strong">isTDBarWait</emphasis> (CallSite cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a60fba05298bc3bf43ec786255daba4ba"/>void <emphasis role="strong">performAPIStat</emphasis> (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> *m)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ac07a0ae387ad9ff483fb9e2993d4b69e"/>void <emphasis role="strong">statInit</emphasis> (llvm::StringMap&lt; u32_t &gt; &amp;tdAPIStatMap)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53"/>static <link linkend="_class_s_v_f_1_1_thread_a_p_i">ThreadAPI</link> * <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53">getThreadAPI</link> ()</para>

<para>Return a static reference. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3"/>    <section>
    <title>TD_TYPE</title>
<indexterm><primary>TD_TYPE</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_TYPE</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3">SVF::ThreadAPI::TD_TYPE</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TD_FORK</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_FORK</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9a40948eeab9b022957ae33715ee83da"/>TD_FORK</entry><entry>
<para>dummy type </para>
</entry></row><row><entry><indexterm><primary>TD_JOIN</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_JOIN</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9efe9b72a2520e1fae3cae1e747e3134"/>TD_JOIN</entry><entry>
<para>create a new thread </para>
</entry></row><row><entry><indexterm><primary>TD_DETACH</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_DETACH</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a0b558cf037397818414cac2f7c87ab08"/>TD_DETACH</entry><entry>
<para>wait for a thread to join </para>
</entry></row><row><entry><indexterm><primary>TD_ACQUIRE</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_ACQUIRE</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a5bda6aca46dfc712f3781b4732a373a3"/>TD_ACQUIRE</entry><entry>
<para>detach a thread directly instead wait for it to join </para>
</entry></row><row><entry><indexterm><primary>TD_TRY_ACQUIRE</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_TRY_ACQUIRE</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3ab7ea623d48ae64aa09ab49deebbb7113"/>TD_TRY_ACQUIRE</entry><entry>
<para>acquire a lock </para>
</entry></row><row><entry><indexterm><primary>TD_RELEASE</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_RELEASE</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3ac826e1e1c43305a3abcfdc9a2169b8dd"/>TD_RELEASE</entry><entry>
<para>try to acquire a lock </para>
</entry></row><row><entry><indexterm><primary>TD_EXIT</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_EXIT</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3af3a3036705ecca40cf170d12d0ccf4dc"/>TD_EXIT</entry><entry>
<para>release a lock </para>
</entry></row><row><entry><indexterm><primary>TD_CANCEL</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_CANCEL</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3afad2e548ab59646972d8c66e593845cc"/>TD_CANCEL</entry><entry>
<para>exit/kill a thread </para>
</entry></row><row><entry><indexterm><primary>TD_COND_WAIT</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_COND_WAIT</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa8a39bd1bb13292a55dd6168909c872e"/>TD_COND_WAIT</entry><entry>
<para>cancel a thread by another </para>
</entry></row><row><entry><indexterm><primary>TD_COND_SIGNAL</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_COND_SIGNAL</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a01a3b1723176504482b606d8e097949f"/>TD_COND_SIGNAL</entry><entry>
<para>wait a condition </para>
</entry></row><row><entry><indexterm><primary>TD_COND_BROADCAST</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_COND_BROADCAST</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa6ee2952d7757b0919f56bd39fd5a93e"/>TD_COND_BROADCAST</entry><entry>
<para>signal a condition </para>
</entry></row><row><entry><indexterm><primary>TD_MUTEX_INI</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_MUTEX_INI</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3abb17ca545bd259f16a36a2d2af43948b"/>TD_MUTEX_INI</entry><entry>
<para>broadcast a condition </para>
</entry></row><row><entry><indexterm><primary>TD_MUTEX_DESTROY</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_MUTEX_DESTROY</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a91db238366fcdcd65bd7710882c8716f"/>TD_MUTEX_DESTROY</entry><entry>
<para>initial a mutex variable </para>
</entry></row><row><entry><indexterm><primary>TD_CONDVAR_INI</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_CONDVAR_INI</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a1f921d7369e3a00a77394640f887c7ff"/>TD_CONDVAR_INI</entry><entry>
<para>initial a mutex variable </para>
</entry></row><row><entry><indexterm><primary>TD_CONDVAR_DESTROY</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_CONDVAR_DESTROY</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a9c3f04e71ed64ce8d2862d7a6f39a95b"/>TD_CONDVAR_DESTROY</entry><entry>
<para>initial a mutex variable </para>
</entry></row><row><entry><indexterm><primary>TD_BAR_INIT</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_BAR_INIT</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a4fb99e17bf56ae018448f5f97aa8cda6"/>TD_BAR_INIT</entry><entry>
<para>initial a mutex variable </para>
</entry></row><row><entry><indexterm><primary>TD_BAR_WAIT</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>TD_BAR_WAIT</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3aa2b2704ecc4c11ec0dbeaf1b22532431"/>TD_BAR_WAIT</entry><entry>
<para>Barrier init. </para>
</entry></row><row><entry><indexterm><primary>HARE_PAR_FOR</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>HARE_PAR_FOR</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a38a7516702c55ab418167b7c850516b3a4690967fd6d32fb82c5de637846a3476"/>HARE_PAR_FOR</entry><entry>
<para>Barrier wait. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a6bc40bc0b35c23e9d1874c844511449d"/>    <section>
    <title>getActualParmAtForkSite()</title>
<indexterm><primary>getActualParmAtForkSite</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getActualParmAtForkSite</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getActualParmAtForkSite (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Return the forth argument of the call, Note that, it is the sole argument of start routine ( a void* pointer ) </para>
    </section><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a7ddc0c71aeae315af21972a4905b3456"/>    <section>
    <title>getForkedFun()</title>
<indexterm><primary>getForkedFun</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getForkedFun</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getForkedFun (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Return the third argument of the call, Note that, it could be function type or a void* pointer </para>
    </section><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a11dc55f35c18bd1f46d00c21c7dc695e"/>    <section>
    <title>getForkedThread()</title>
<indexterm><primary>getForkedThread</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getForkedThread</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getForkedThread (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return arguments/attributes of pthread_create / hare_parallel_for. </para>
</para>

<para>Return the first argument of the call, Note that, it is the pthread_t pointer </para>
    </section><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ac9f3cc080275ce7d76dd2f56fc7c6434"/>    <section>
    <title>getJoinedThread()</title>
<indexterm><primary>getJoinedThread</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getJoinedThread</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getJoinedThread (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return arguments/attributes of pthread_join. </para>
</para>

<para>Return the first argument of the call, Note that, it is the pthread_t pointer </para>
    </section><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1a8f1c869eb42f7c89697cf2c7452ba9e9"/>    <section>
    <title>getLockVal()</title>
<indexterm><primary>getLockVal</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getLockVal</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getLockVal (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return lock value. </para>
</para>

<para>First argument of pthread_mutex_lock/pthread_mutex_unlock </para>
    </section><anchor xml:id="_class_s_v_f_1_1_thread_a_p_i_1ad1c595f7b15a2d3079b9e9200c84f7d7"/>    <section>
    <title>getRetParmAtJoinedSite()</title>
<indexterm><primary>getRetParmAtJoinedSite</primary><secondary>SVF::ThreadAPI</secondary></indexterm>
<indexterm><primary>SVF::ThreadAPI</primary><secondary>getRetParmAtJoinedSite</secondary></indexterm>
<para><computeroutput>const Value* SVF::ThreadAPI::getRetParmAtJoinedSite (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Return the send argument of the call, Note that, it is the pthread_t pointer </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Util/ThreadAPI.hlib/Util/ThreadAPI.cpp</section>
</section>
