<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_f_i_f_o_work_list" xml:lang="en-US">
<title>SVF::FIFOWorkList&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>SVF::FIFOWorkList&lt; Data &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;WorkList.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_f_i_f_o_work_list_1a7056704c224dfb4b57287fe90c004aa8"/>bool <emphasis role="strong">empty</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_f_i_f_o_work_list_1a86f2393b1cce7969d6974b53970ead54"/>bool <emphasis role="strong">find</emphasis> (Data data) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8">push</link> (Data data)</para>
</listitem>
            <listitem><para>Data <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list_1a8fa72918fce7e9c0b2dc34b683a797c6">pop</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list_1a29d9fec1ea7b8e5456342522eea403ad">clear</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Data&gt;
class SVF::FIFOWorkList&lt; Data &gt;</title></simplesect>


<para>Worklist with &quot;first in first out&quot; order. New nodes will be pushed at back and popped from front. Elements in the list are unique as they&apos;re recorded by Set. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_f_i_f_o_work_list_1a29d9fec1ea7b8e5456342522eea403ad"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>SVF::FIFOWorkList&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::FIFOWorkList&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">SVF::FIFOWorkList</link>&lt; Data &gt;::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Clear all the data </para>
    </section><anchor xml:id="_class_s_v_f_1_1_f_i_f_o_work_list_1a8fa72918fce7e9c0b2dc34b683a797c6"/>    <section>
    <title>pop()</title>
<indexterm><primary>pop</primary><secondary>SVF::FIFOWorkList&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::FIFOWorkList&lt; Data &gt;</primary><secondary>pop</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>Data <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">SVF::FIFOWorkList</link>&lt; Data &gt;::pop ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Pop a data from the END of work list. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8"/>    <section>
    <title>push()</title>
<indexterm><primary>push</primary><secondary>SVF::FIFOWorkList&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::FIFOWorkList&lt; Data &gt;</primary><secondary>push</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">SVF::FIFOWorkList</link>&lt; Data &gt;::push (Data data)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Push a data into the work list. </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Util/WorkList.h</section>
</section>
