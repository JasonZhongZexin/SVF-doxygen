<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cond_std_set" kind="class" language="C++" prot="public">
    <compoundname>SVF::CondStdSet</compoundname>
    <includes refid="_conditional_p_t_8h" local="no">ConditionalPT.h</includes>
    <templateparamlist>
      <param>
        <type>class Element</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_std_set_1a3fcc7079d72b0b392731ae7bf1ef2939" prot="private" static="no">
        <type>OrderedSet&lt; Element &gt;</type>
        <definition>typedef OrderedSet&lt;Element&gt; SVF::CondStdSet&lt; Element &gt;::ElementSet</definition>
        <argsstring></argsstring>
        <name>ElementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="133" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_std_set_1a6d82b5ddafa28542ce65adb0cc56cdce" prot="public" static="no">
        <type>OrderedSet&lt; Element &gt;::iterator</type>
        <definition>typedef OrderedSet&lt;Element&gt;::iterator SVF::CondStdSet&lt; Element &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="136" column="44" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_std_set_1a55152b7749868cc25f1c3c33ea57a650" prot="public" static="no">
        <type>OrderedSet&lt; Element &gt;::const_iterator</type>
        <definition>typedef OrderedSet&lt;Element&gt;::const_iterator SVF::CondStdSet&lt; Element &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="137" column="50" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_std_set_1a1caece9a66b6617b89037fd8211f2934" prot="private" static="no" mutable="no">
        <type>ElementSet</type>
        <definition>ElementSet SVF::CondStdSet&lt; Element &gt;::elements</definition>
        <argsstring></argsstring>
        <name>elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="292" column="16" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a1f3e8aa09ca8e7f252525e35c4886c5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondStdSet&lt; Element &gt;::CondStdSet</definition>
        <argsstring>()</argsstring>
        <name>CondStdSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="139" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1abc67e77de2d1363af92c3bca2ccccbf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondStdSet&lt; Element &gt;::~CondStdSet</definition>
        <argsstring>()</argsstring>
        <name>~CondStdSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="140" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a3f1885562bb34c3ccbd15117788725e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondStdSet&lt; Element &gt;::CondStdSet</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;cptsSet)</argsstring>
        <name>CondStdSet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>cptsSet</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="143" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a3e72341580263f3a9b48ce0e8c7bbbec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::test_and_set</definition>
        <argsstring>(const Element &amp;var)</argsstring>
        <name>test_and_set</name>
        <param>
          <type>const Element &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Return true if the element is added. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="148" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a6bf6fafc6f8391dbff08a6bd9d07f4d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::test</definition>
        <argsstring>(const Element &amp;var) const</argsstring>
        <name>test</name>
        <param>
          <type>const Element &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Return true if the element is in the set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="153" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1ae11deddad534be115d29daad08c90599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondStdSet&lt; Element &gt;::set</definition>
        <argsstring>(const Element &amp;var)</argsstring>
        <name>set</name>
        <param>
          <type>const Element &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Add the element into set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="158" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a857396d9e820a9fab8a498d981855e2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondStdSet&lt; Element &gt;::reset</definition>
        <argsstring>(const Element &amp;var)</argsstring>
        <name>reset</name>
        <param>
          <type>const Element &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Remove var from the set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="163" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a0305cbf452b4e858e464023727417d76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Set size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="170" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1afa190562e8b85630845617c23fc5a16b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned SVF::CondStdSet&lt; Element &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="174" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1aa19e82905537f3ae41f64fce070ee555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned SVF::CondStdSet&lt; Element &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="178" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a4c49e2964276825744ffce26fc43ec36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondStdSet&lt; Element &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="185" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1adf095111734d81b6ad1908a7f795b038" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondStdSet&lt; Element &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="192" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a93c232ef7e5dea652622da7f994e1dc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondStdSet&lt; Element &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="196" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a76fb2382bf424638ed8e03cb48cdc90e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondStdSet&lt; Element &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="200" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1accc5305781696701c00245ed1e8a25a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondStdSet&lt; Element &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="204" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a90e4c4ead1cbdca01c0be801a68b005b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::operator|=</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overload operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="212" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1aa0ca8da1ee68b34e9515f2ebac55bc91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::operator&amp;=</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="221" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="221" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a060a01d33fcd5ed4dfcaecb3d24cda07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::operator!=</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="236" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a6697d9c3d1107db2be430b8e8b670cb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::operator==</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="240" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a9fa868a473993d0244431d640799ce98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
        <definition>CondStdSet&lt;Element&gt;&amp; SVF::CondStdSet&lt; Element &gt;::operator=</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="244" column="23" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1ad3c38bb031419dd583a9cb0314e76afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::operator&lt;</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="252" column="12" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1ac422c3fb8bce1378d69c234e6b11fdb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondStdSet&lt; Element &gt;::intersects</definition>
        <argsstring>(const CondStdSet&lt; Element &gt; &amp;rhs) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; Element &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if this and RHS share common elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="261" column="10" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="261" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a07267b0a4f7cfeaa6d1f7d722932c4d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CondStdSet&lt; Element &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="274" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="274" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_std_set_1a29892f43cc8420d4d2b4046140476320" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ElementSet &amp;</type>
        <definition>const ElementSet&amp; SVF::CondStdSet&lt; Element &gt;::getElementSet</definition>
        <argsstring>() const</argsstring>
        <name>getElementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="287" column="29" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="287" bodyend="290"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Conditional variable set </para>
    </detaileddescription>
    <location file="include/MemoryModel/ConditionalPT.h" line="131" column="1" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="132" bodyend="293"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cond_std_set_1adf095111734d81b6ad1908a7f795b038" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a76fb2382bf424638ed8e03cb48cdc90e" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a4c49e2964276825744ffce26fc43ec36" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>clear</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a1f3e8aa09ca8e7f252525e35c4886c5b" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>CondStdSet</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a3f1885562bb34c3ccbd15117788725e0" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>CondStdSet</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a55152b7749868cc25f1c3c33ea57a650" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1aa19e82905537f3ae41f64fce070ee555" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>count</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a1caece9a66b6617b89037fd8211f2934" prot="private" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>elements</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a3fcc7079d72b0b392731ae7bf1ef2939" prot="private" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>ElementSet</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a0305cbf452b4e858e464023727417d76" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>empty</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a93c232ef7e5dea652622da7f994e1dc3" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1accc5305781696701c00245ed1e8a25a3" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a29892f43cc8420d4d2b4046140476320" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>getElementSet</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1ac422c3fb8bce1378d69c234e6b11fdb1" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>intersects</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a6d82b5ddafa28542ce65adb0cc56cdce" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a060a01d33fcd5ed4dfcaecb3d24cda07" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1aa0ca8da1ee68b34e9515f2ebac55bc91" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator&amp;=</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1ad3c38bb031419dd583a9cb0314e76afd" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a9fa868a473993d0244431d640799ce98" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a6697d9c3d1107db2be430b8e8b670cb5" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a90e4c4ead1cbdca01c0be801a68b005b" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>operator|=</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a857396d9e820a9fab8a498d981855e2a" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>reset</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1ae11deddad534be115d29daad08c90599" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>set</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1afa190562e8b85630845617c23fc5a16b" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>size</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a6bf6fafc6f8391dbff08a6bd9d07f4d4" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>test</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a3e72341580263f3a9b48ce0e8c7bbbec" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>test_and_set</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1a07267b0a4f7cfeaa6d1f7d722932c4d5" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>toString</name></member>
      <member refid="class_s_v_f_1_1_cond_std_set_1abc67e77de2d1363af92c3bca2ccccbf1" prot="public" virt="non-virtual"><scope>SVF::CondStdSet</scope><name>~CondStdSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
