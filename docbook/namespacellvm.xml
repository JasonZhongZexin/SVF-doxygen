<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacellvm" xml:lang="en-US">
<title>llvm Namespace Reference</title>
<indexterm><primary>llvm</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_node_01_5_01_4">GraphTraits&lt; SVF::ConstraintNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_constraint_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::ConstraintNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for Value flow node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_graph_01_5_01_4">GraphTraits&lt; SVF::ConstraintGraph * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4">GraphTraits&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_graph_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4">GraphTraits&lt; SVF::GenericGraph&lt; NodeTy, EdgeTy &gt; * &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classllvm_1_1_graph_printer">GraphPrinter</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4">GraphTraits&lt; SVF::ICFGNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::ICFGNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_01_5_01_4">GraphTraits&lt; SVF::ICFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_offline_cons_g_01_5_01_4">GraphTraits&lt; SVF::OfflineConsG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4">GraphTraits&lt; SVF::PAGNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::PAGNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for PAG node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_01_5_01_4">GraphTraits&lt; SVF::PAG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4">GraphTraits&lt; SVF::PTACallGraphNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::PTACallGraphNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_01_5_01_4">GraphTraits&lt; SVF::PTACallGraph * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_s_v_f_g_01_5_01_4">GraphTraits&lt; SVF::SVFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4">GraphTraits&lt; SVF::VFGNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::VFGNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_01_5_01_4">GraphTraits&lt; SVF::VFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4">GraphTraits&lt; SVF::TCTNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::TCTNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for Value flow node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_01_5_01_4">GraphTraits&lt; SVF::TCT * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_node_01_5_01_4">GraphTraits&lt; SVF::CHNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_c_h_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::CHNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_graph_01_5_01_4">GraphTraits&lt; SVF::CHGraph * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4">GraphTraits&lt; SVF::DCHNode * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4_01_4">GraphTraits&lt; Inverse&lt; SVF::DCHNode * &gt; &gt;</link></para>

<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal. </para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_graph_01_5_01_4">GraphTraits&lt; SVF::DCHGraph * &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">generic_bridge_gep_type_iterator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_constraint_graph_01_5_01_4">DOTGraphTraits&lt; ConstraintGraph * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_i_c_f_g_01_5_01_4">DOTGraphTraits&lt; ICFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_offline_cons_g_01_5_01_4">DOTGraphTraits&lt; OfflineConsG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_p_a_g_01_5_01_4">DOTGraphTraits&lt; PAG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_p_t_a_call_graph_01_5_01_4">DOTGraphTraits&lt; PTACallGraph * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_s_v_f_g_01_5_01_4">DOTGraphTraits&lt; SVFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_v_f_g_01_5_01_4">DOTGraphTraits&lt; VFG * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_t_c_t_01_5_01_4">DOTGraphTraits&lt; TCT * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_c_h_graph_01_5_01_4">DOTGraphTraits&lt; CHGraph * &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_namespacellvm_1af77a7ec045719d1f075cf6c591902522"/>typedef <link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">generic_bridge_gep_type_iterator</link> <emphasis role="strong">bridge_gep_iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_namespacellvm_1acfe99e9d441434240c79f6d76b73fe0a"/><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">bridge_gep_iterator</link> <emphasis role="strong">bridge_gep_begin</emphasis> (const User *GEP)</para>
</listitem>
            <listitem><para><anchor xml:id="_namespacellvm_1a7cfc92a12082d69711c97bb3d1b99c48"/><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">bridge_gep_iterator</link> <emphasis role="strong">bridge_gep_end</emphasis> (const User *GEP)</para>
</listitem>
            <listitem><para><anchor xml:id="_namespacellvm_1abbab4f4ed7ffae3e7e715990a0b416fe"/><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">bridge_gep_iterator</link> <emphasis role="strong">bridge_gep_begin</emphasis> (const User &amp;GEP)</para>
</listitem>
            <listitem><para><anchor xml:id="_namespacellvm_1adcacad81533beb6331d1cd4b1bbcf0d8"/><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">bridge_gep_iterator</link> <emphasis role="strong">bridge_gep_end</emphasis> (const User &amp;GEP)</para>
</listitem>
            <listitem><para><anchor xml:id="_namespacellvm_1af784337dc495897cf05f28fd95f07477"/>template&lt;typename T &gt; </para><para><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">generic_bridge_gep_type_iterator</link>&lt; const T * &gt; <emphasis role="strong">bridge_gep_end</emphasis> (Type *, ArrayRef&lt; T &gt; A)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>GraphTraits specialization for constraint graph</para>

<para>GraphTraits specialization </para>
</section>
</section>
