<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c" xml:lang="en-US">
<title>SVF::FlowSensitiveTBHC Class Reference</title>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary></indexterm>
<para>
<computeroutput>#include &lt;FlowSensitiveTBHC.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::FlowSensitiveTBHC:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_flow_sensitive_t_b_h_c.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a26e5bad116d0738534b1311346c5f400"/><link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a26e5bad116d0738534b1311346c5f400">FlowSensitiveTBHC</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> type=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203">FSTBHC_WPA</link>)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1af790272dd41bb5960626c6ffd0acdc0d"/>virtual <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1af790272dd41bb5960626c6ffd0acdc0d">~FlowSensitiveTBHC</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abcab6281cced08d90c92d67d43a37c2c"/>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abcab6281cced08d90c92d67d43a37c2c">analyze</link> () override</para>

<para>Flow sensitive analysis with FSTBHC. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a4c5fb70aafc3a589b7b1e82ba8f61a6f"/>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a4c5fb70aafc3a589b7b1e82ba8f61a6f">initialize</link> () override</para>

<para>Initialize analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3564d6ad7e12e0a833b4cea203a809e4"/>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3564d6ad7e12e0a833b4cea203a809e4">finalize</link> () override</para>

<para>Finalize analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a1eb2f49fd20527b174c2acb8b7d64a41"/>virtual const std::string <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a1eb2f49fd20527b174c2acb8b7d64a41">PTAName</link> () const override</para>

<para>Get PTA name. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a83a4defe2bcb1c99c66aea8c8325d5fd">propAlongIndirectEdge</link> (const <link linkend="_class_s_v_f_1_1_indirect_s_v_f_g_edge">IndirectSVFGEdge</link> *edge) override</para>

<para>Propagate points-to information along an INDIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a15b8610fd7456d158a9e640c69d401a0">propAlongDirectEdge</link> (const <link linkend="_class_s_v_f_1_1_direct_s_v_f_g_edge">DirectSVFGEdge</link> *edge) override</para>

<para>Propagate points-to information along a DIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abce5580e93cba1e591a0bac4e9070816">processAddr</link> (const <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrSVFGNode</link> *addr) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abf96f7329d8c50dcd75da048548d2c85">processGep</link> (const <link linkend="_class_s_v_f_1_1_gep_v_f_g_node">GepSVFGNode</link> *gep) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a42c8023e0e60e8701ec197b3d775b423">processLoad</link> (const <link linkend="_class_s_v_f_1_1_load_v_f_g_node">LoadSVFGNode</link> *load) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ac937e0e388071bbf94a477e1880663eb">processStore</link> (const <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreSVFGNode</link> *store) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a0eb8335dd45b35b20d34c981b86b059c">processPhi</link> (const <link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">PHISVFGNode</link> *phi) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ab6525ac133151692176a03227f81bcac">processCopy</link> (const <link linkend="_class_s_v_f_1_1_copy_v_f_g_node">CopySVFGNode</link> *copy) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a96089e24ef6aaa7f7d30c50a64d5042f"/>virtual const NodeBS &amp; <emphasis role="strong">getAllFieldsObjNode</emphasis> (NodeID id) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1acb11d6879836e27195c85ca882df6d17"/>virtual bool <emphasis role="strong">updateInFromIn</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *srcStmt, NodeID srcVar, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *dstStmt, NodeID dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ab9615acdb43219c39f40e886f5baf803"/>virtual bool <emphasis role="strong">updateInFromOut</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *srcStmt, NodeID srcVar, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *dstStmt, NodeID dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ad53c6aebdcfa9fa334ccff4c68efa8ae"/>virtual bool <emphasis role="strong">unionPtsFromIn</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *stmt, NodeID srcVar, NodeID dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1adee98278cf3944e0b2b22e34aaecc4c5"/>virtual bool <emphasis role="strong">unionPtsFromTop</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *stmt, NodeID srcVar, NodeID dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abf5cca7e8332930c8f6adbfdb6f72629"/>virtual bool <emphasis role="strong">propDFOutToIn</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *srcStmt, NodeID srcVar, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *dstStmt, NodeID dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1aab08c9a0527138599e58e72f69071ecb"/>virtual bool <emphasis role="strong">propDFInToIn</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *srcStmt, NodeID srcVar, const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *dstStmt, NodeID dstVar) override</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3af0297eb75ac4009433be44bb286d30">expandFIObjs</link> (const PointsTo &amp;pts, PointsTo &amp;expandedPts) override</para>

<para>Expand FI objects. </para>
</listitem>
            <listitem><para>const DIType * <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7">getTypeFromCTirMetadata</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static const MDNode * <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a2c47ba37bd250be455a21d1f0049d556">getRawCTirMetadata</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1afe46af7ca4f735e500b35f4f4bb8d910"/>static bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1afe46af7ca4f735e500b35f4f4bb8d910">classof</link> (const <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c">FlowSensitiveTBHC</link> *)</para>

<para>For LLVM RTTI. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a0b213f9c4011642309c550503802dad5"/>static bool <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a0b213f9c4011642309c550503802dad5">classof</link> (const <link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> *pta)</para>

<para>For LLVM RTTI. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a81ce8b1e98db245d3f4ccf189ca11e47">backPropagate</link> (NodeID clone) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abe784dfae06a7c1943b8f0a18bd79f14"/>virtual void <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abe784dfae06a7c1943b8f0a18bd79f14">countAliases</link> (Set&lt; std::pair&lt; NodeID, NodeID &gt;&gt; cmp, unsigned *mayAliases, unsigned *noAliases) override</para>

<para>Fills may/noAliases for the location/pointer pairs in cmp. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Flow sensitive whole program pointer analysis with type-based heap cloning. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a81ce8b1e98db245d3f4ccf189ca11e47"/>    <section>
    <title>backPropagate()</title>
<indexterm><primary>backPropagate</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>backPropagate</secondary></indexterm>
<para><computeroutput>void FlowSensitiveTBHC::backPropagate (NodeID clone)<computeroutput>[override]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Required by user. Handles back-propagation of newly created clone after all metadata has been set. Used by cloneObject. </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_type_based_heap_cloning_1a1d48cd7ccbcd9bdf1470a5d9aca3298d">SVF::TypeBasedHeapCloning</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3af0297eb75ac4009433be44bb286d30"/>    <section>
    <title>expandFIObjs()</title>
<indexterm><primary>expandFIObjs</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>expandFIObjs</secondary></indexterm>
<para><computeroutput>void FlowSensitiveTBHC::expandFIObjs (const PointsTo &amp; pts, PointsTo &amp; expandedPts)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Expand FI objects. </para>
</para>

<para>Expand all fields of an aggregate in all points-to sets </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721">SVF::BVDataPTAImpl</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a2c47ba37bd250be455a21d1f0049d556"/>    <section>
    <title>getRawCTirMetadata()</title>
<indexterm><primary>getRawCTirMetadata</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>getRawCTirMetadata</secondary></indexterm>
<para><computeroutput>const MDNode * FlowSensitiveTBHC::getRawCTirMetadata (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> * s)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns raw ctir metadata of the instruction behind a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> node. Wraps <link linkend="_class_s_v_f_1_1_type_based_heap_cloning_1a21d2fd8bbef0c6f6ddddb5387569a7fa">getRawCTirMetadata(const Value *)</link>. Returns null if it doesn&apos;t exist. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7"/>    <section>
    <title>getTypeFromCTirMetadata()</title>
<indexterm><primary>getTypeFromCTirMetadata</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>getTypeFromCTirMetadata</secondary></indexterm>
<para><computeroutput>const DIType * FlowSensitiveTBHC::getTypeFromCTirMetadata (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> * s)</computeroutput></para>
<para>Extracts the value from SVFGNode (if it exists), and calls <link linkend="_class_s_v_f_1_1_type_based_heap_cloning_1ac4565775cced4444ba007e310c4a02d8">getTypeFromCTirMetadata(const Value *)</link>. If no ctir type exists, returns null (void). </para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abce5580e93cba1e591a0bac4e9070816"/>    <section>
    <title>processAddr()</title>
<indexterm><primary>processAddr</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processAddr</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processAddr (const <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrSVFGNode</link> * addr)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process address node </para>

<para>TODO: If this object has been set as field-insensitive, just add the insensitive object node into dst pointer&apos;s pts.</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1abb37c5e4e6fa4742e8dbcf397aea086e">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ab6525ac133151692176a03227f81bcac"/>    <section>
    <title>processCopy()</title>
<indexterm><primary>processCopy</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processCopy</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processCopy (const <link linkend="_class_s_v_f_1_1_copy_v_f_g_node">CopySVFGNode</link> * copy)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process copy node </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1aa401cc90de4e1c6842f08a43a28c5aa1">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abf96f7329d8c50dcd75da048548d2c85"/>    <section>
    <title>processGep()</title>
<indexterm><primary>processGep</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processGep</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processGep (const <link linkend="_class_s_v_f_1_1_gep_v_f_g_node">GepSVFGNode</link> * edge)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process gep node </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1ae017c39ac471727d06868e0eacafd791">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a42c8023e0e60e8701ec197b3d775b423"/>    <section>
    <title>processLoad()</title>
<indexterm><primary>processLoad</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processLoad</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processLoad (const <link linkend="_class_s_v_f_1_1_load_v_f_g_node">LoadSVFGNode</link> * load)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process load node</para>

<para>Foreach node \in src pts(dst) = union pts(node) </para>

<para>If the ptd is a field-insensitive node, we should also get all field nodes&apos; points-to sets and pass them to pagDst.</para>

<para>If the ptd is a field-insensitive node, we should also get all field nodes&apos; points-to sets and pass them to pagDst.</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1a9968530b3dee876f55e6659530decf27">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a0eb8335dd45b35b20d34c981b86b059c"/>    <section>
    <title>processPhi()</title>
<indexterm><primary>processPhi</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processPhi</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processPhi (const <link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">PHISVFGNode</link> * phi)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process mssa phi node </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1aa36fd1387e948e83107431179d819067">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ac937e0e388071bbf94a477e1880663eb"/>    <section>
    <title>processStore()</title>
<indexterm><primary>processStore</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>processStore</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::processStore (const <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreSVFGNode</link> * store)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process store node</para>

<para>foreach node \in dst pts(node) = union pts(src) </para>

<para>STORE statement can only be processed if the pointer on the LHS points to something. If we handle STORE with an empty points-to set, the OUT set will be updated from IN set. Then if LHS pointer points-to one target and it has been identified as a strong update, we can&apos;t remove those points-to information computed before this strong update from the OUT set.</para>

<para>check if this is a strong updates store</para>

<para>STORE statement can only be processed if the pointer on the LHS points to something. If we handle STORE with an empty points-to set, the OUT set will be updated from IN set. Then if LHS pointer points-to one target and it has been identified as a strong update, we can&apos;t remove those points-to information computed before this strong update from the OUT set.</para>

<para>check if this is a strong updates store</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1aa37d591d2d4f65957e840bef4d142a6a">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a15b8610fd7456d158a9e640c69d401a0"/>    <section>
    <title>propAlongDirectEdge()</title>
<indexterm><primary>propAlongDirectEdge</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>propAlongDirectEdge</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::propAlongDirectEdge (const <link linkend="_class_s_v_f_1_1_direct_s_v_f_g_edge">DirectSVFGEdge</link> * edge)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Propagate points-to information along a DIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</para>

<para>Propagate points-to information along DIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1ad3518931d3b8a0671cbeb975f853b956">SVF::FlowSensitive</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a83a4defe2bcb1c99c66aea8c8325d5fd"/>    <section>
    <title>propAlongIndirectEdge()</title>
<indexterm><primary>propAlongIndirectEdge</primary><secondary>SVF::FlowSensitiveTBHC</secondary></indexterm>
<indexterm><primary>SVF::FlowSensitiveTBHC</primary><secondary>propAlongIndirectEdge</secondary></indexterm>
<para><computeroutput>bool FlowSensitiveTBHC::propAlongIndirectEdge (const <link linkend="_class_s_v_f_1_1_indirect_s_v_f_g_edge">IndirectSVFGEdge</link> * edge)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Propagate points-to information along an INDIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</para>

<para>Propagate points-to information along INDIRECT <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>

<para>If this is a field-insensitive obj, propagate all field node&apos;s pts</para>

<para>If this is a field-insensitive obj, propagate all field node&apos;s pts</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_flow_sensitive_1aeb1e002519123a67f8d18f78cda04bac">SVF::FlowSensitive</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/WPA/FlowSensitiveTBHC.hlib/WPA/FlowSensitiveTBHC.cpp</section>
</section>
