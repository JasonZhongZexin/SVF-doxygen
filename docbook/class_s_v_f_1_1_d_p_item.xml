<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_d_p_item" xml:lang="en-US">
<title>SVF::DPItem Class Reference</title>
<indexterm><primary>SVF::DPItem</primary></indexterm>
<para>
<computeroutput>#include &lt;DPItem.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::DPItem:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_d_p_item.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1ac5dbe11ebf512e6dccdfa1eceba04fe8"/><link linkend="_class_s_v_f_1_1_d_p_item_1ac5dbe11ebf512e6dccdfa1eceba04fe8">DPItem</link> (NodeID c)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a715b7de4a392d8c389e611e27f8b9184"/><link linkend="_class_s_v_f_1_1_d_p_item_1a715b7de4a392d8c389e611e27f8b9184">DPItem</link> (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp;dps)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a1df86140eee6015369836d20d509f14d"/>virtual <link linkend="_class_s_v_f_1_1_d_p_item_1a1df86140eee6015369836d20d509f14d">~DPItem</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a03a90eca842c0e83d874902103f6fdb2"/>NodeID <emphasis role="strong">getCurNodeID</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a5fbde30cae2cb09bd9dc9a6969ea4b90"/>void <emphasis role="strong">setCurNodeID</emphasis> (NodeID c)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_d_p_item_1a639c757076141a14bedc26c73f875ffe">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a10226d37dfef045bec9f7cfb78315440"/><link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp; <link linkend="_class_s_v_f_1_1_d_p_item_1a10226d37dfef045bec9f7cfb78315440">operator=</link> (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp;rhs)</para>

<para>Overloading Operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1ad67fcd340351360555b0cb88f57b183a"/>bool <link linkend="_class_s_v_f_1_1_d_p_item_1ad67fcd340351360555b0cb88f57b183a">operator==</link> (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp;rhs) const</para>

<para>Overloading Operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1add804064ca2bfaa16bcc25503698a1ea"/>bool <link linkend="_class_s_v_f_1_1_d_p_item_1add804064ca2bfaa16bcc25503698a1ea">operator!=</link> (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp;rhs) const</para>

<para>Overloading Operator!=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a6048fa772b5023710c34687c4f047d44"/>void <emphasis role="strong">dump</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a687ef8944ccb55b826508c47ea5b9240"/>static void <link linkend="_class_s_v_f_1_1_d_p_item_1a687ef8944ccb55b826508c47ea5b9240">setMaxBudget</link> (u32_t max)</para>

<para>set max step budge per query </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1af9d8f95249190e164131dc19b6db1b67"/>static u32_t <emphasis role="strong">getMaxBudget</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a82d2a11fb456192ec88fcb5ffe239d80"/>NodeID <emphasis role="strong">cur</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_d_p_item_1a5dbb0e6010b38c5b937ff06cb40cd0ef"/>static u64_t <emphasis role="strong">maximumBudget</emphasis> = ULONG_MAX - 1</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Dynamic programming item for CFL researchability search This serves as a base class for CFL-reachability formulation by matching parentheses. Extend this class for further sophisticated CFL-reachability items (e.g. field, flow, path) </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_d_p_item_1a639c757076141a14bedc26c73f875ffe"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::DPItem</secondary></indexterm>
<indexterm><primary>SVF::DPItem</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::DPItem::operator&lt; (const <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Util/DPItem.hlib/Util/PathCondAllocator.cpp</section>
</section>
