<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_v_f_g" kind="class" language="C++" prot="public">
    <compoundname>SVF::VFG</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_generic_graph" prot="public" virt="non-virtual">SVF::GenericGraph&lt; VFGNode, VFGEdge &gt;</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_g" prot="public" virt="non-virtual">SVF::SVFG</derivedcompoundref>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>VFGNodeSet &amp;</type>
        <definition>VFGNodeSet&amp; SVF::VFG::getVFGNodes</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return all the VFGNodes of a function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="286" column="19" bodyfile="include/Graphs/VFG.h" bodystart="286" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a76af43e28630eb56a1aa5971f516d43d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::hasVFGNodes</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>hasVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="289" column="13" bodyfile="include/Graphs/VFG.h" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a43f4002b0beb00ed2026f7edd9ebbb1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::VFGNodes</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>VFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="292" column="13" bodyfile="include/Graphs/VFG.h" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a5166be2c1231a93c9b9ce5f272797b94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>VFGNodeSet::const_iterator</type>
        <definition>VFGNodeSet::const_iterator SVF::VFG::getVFGNodeBegin</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>getVFGNodeBegin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="295" column="35" bodyfile="include/Graphs/VFG.h" bodystart="295" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a28f2bdcbbc0bab00e93df62ea11647a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>VFGNodeSet::const_iterator</type>
        <definition>VFGNodeSet::const_iterator SVF::VFG::getVFGNodeEnd</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>getVFGNodeEnd</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="300" column="35" bodyfile="include/Graphs/VFG.h" bodystart="300" bodyend="304"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" prot="public" static="no" strong="no">
        <type></type>
        <name>VFGK</name>
        <enumvalue id="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad49dfa7d8b1abaa2efebfdcf461a36b0" prot="public">
          <name>ORIGSVFGK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad803e81268c1464f74da7add938e0aef" prot="public">
          <name>PTRONLYSVFGK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="53" column="5" bodyfile="include/Graphs/VFG.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ab2abe2ba4ac9e3e1d326d042d35acbc0" prot="public" static="no">
        <type>Map&lt; NodeID, <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;NodeID, VFGNode *&gt; SVF::VFG::VFGNodeIDToNodeMapTy</definition>
        <argsstring></argsstring>
        <name>VFGNodeIDToNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="58" column="17" bodyfile="include/Graphs/VFG.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a03d388eec513f713f5e0d06f920168db" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;VFGNode*&gt; SVF::VFG::VFGNodeSet</definition>
        <argsstring></argsstring>
        <name>VFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="59" column="17" bodyfile="include/Graphs/VFG.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ab9381c54f2339b3738348ae8b0d6659f" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, NodeID &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, NodeID&gt; SVF::VFG::PAGNodeToDefMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToDefMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="60" column="17" bodyfile="include/Graphs/VFG.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1abec730a1ec61532cd164f3d42aa107b0" prot="public" static="no">
        <type>Map&lt; std::pair&lt; NodeID, const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;, <ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;std::pair&lt;NodeID,const CallBlockNode*&gt;, ActualParmVFGNode *&gt; SVF::VFG::PAGNodeToActualParmMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToActualParmMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="61" column="17" bodyfile="include/Graphs/VFG.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a999654aa377639db5c1e40f603e655a7" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, ActualRetVFGNode *&gt; SVF::VFG::PAGNodeToActualRetMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToActualRetMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="62" column="17" bodyfile="include/Graphs/VFG.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a6eb72d2fe080def018d09604fe3affcf" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, FormalParmVFGNode *&gt; SVF::VFG::PAGNodeToFormalParmMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToFormalParmMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="63" column="17" bodyfile="include/Graphs/VFG.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a52dac90d700a2377b657ec34d3ad2241" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, FormalRetVFGNode *&gt; SVF::VFG::PAGNodeToFormalRetMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToFormalRetMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="64" column="17" bodyfile="include/Graphs/VFG.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ab37b067a59b52c472a284eabbeba43ff" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *, <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGEdge*, StmtVFGNode*&gt; SVF::VFG::PAGEdgeToStmtVFGNodeMapTy</definition>
        <argsstring></argsstring>
        <name>PAGEdgeToStmtVFGNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="65" column="17" bodyfile="include/Graphs/VFG.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1aeed3eca629b10554f40b1d2b478580d4" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_intra_p_h_i_v_f_g_node" kindref="compound">IntraPHIVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, IntraPHIVFGNode*&gt; SVF::VFG::PAGNodeToPHIVFGNodeMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToPHIVFGNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="66" column="17" bodyfile="include/Graphs/VFG.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a7cefa553955e208d6eb4fcd01ed3c383" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_binary_o_p_v_f_g_node" kindref="compound">BinaryOPVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, BinaryOPVFGNode*&gt; SVF::VFG::PAGNodeToBinaryOPVFGNodeMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToBinaryOPVFGNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="67" column="17" bodyfile="include/Graphs/VFG.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1acfcd84ac6bedde4e7e74abdeb9233474" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_unary_o_p_v_f_g_node" kindref="compound">UnaryOPVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, UnaryOPVFGNode*&gt; SVF::VFG::PAGNodeToUnaryOPVFGNodeMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToUnaryOPVFGNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="68" column="17" bodyfile="include/Graphs/VFG.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a9c2446f54d3738b6c0e65632a1200ba0" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, <ref refid="class_s_v_f_1_1_cmp_v_f_g_node" kindref="compound">CmpVFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, CmpVFGNode*&gt; SVF::VFG::PAGNodeToCmpVFGNodeMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToCmpVFGNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="69" column="17" bodyfile="include/Graphs/VFG.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ad63218978f65ab91ae21bc24c882a716" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, VFGNodeSet &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*, VFGNodeSet &gt; SVF::VFG::FunToVFGNodesMapTy</definition>
        <argsstring></argsstring>
        <name>FunToVFGNodesMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="70" column="17" bodyfile="include/Graphs/VFG.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ade3f735b3c7b1a53cab3d67cd9f7b874" prot="public" static="no">
        <type>FormalParmVFGNode::CallPESet</type>
        <definition>typedef FormalParmVFGNode::CallPESet SVF::VFG::CallPESet</definition>
        <argsstring></argsstring>
        <name>CallPESet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="72" column="42" bodyfile="include/Graphs/VFG.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1abf966182c28f0521dcd161aa299e453d" prot="public" static="no">
        <type>FormalRetVFGNode::RetPESet</type>
        <definition>typedef FormalRetVFGNode::RetPESet SVF::VFG::RetPESet</definition>
        <argsstring></argsstring>
        <name>RetPESet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="73" column="40" bodyfile="include/Graphs/VFG.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a0bdac7337a393ad2e21a33ec1978ca3f" prot="public" static="no">
        <type>VFGEdge::VFGEdgeSetTy</type>
        <definition>typedef VFGEdge::VFGEdgeSetTy SVF::VFG::VFGEdgeSetTy</definition>
        <argsstring></argsstring>
        <name>VFGEdgeSetTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="74" column="35" bodyfile="include/Graphs/VFG.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ac97ef8c479556f9ca2c40cd4d8a18694" prot="public" static="no">
        <type>VFGEdge::SVFGEdgeSetTy</type>
        <definition>typedef VFGEdge::SVFGEdgeSetTy SVF::VFG::SVFGEdgeSetTy</definition>
        <argsstring></argsstring>
        <name>SVFGEdgeSetTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="75" column="36" bodyfile="include/Graphs/VFG.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a3037ca34a555ebdb4fbf0e86291dc4ea" prot="public" static="no">
        <type>VFGEdge::VFGEdgeSetTy::iterator</type>
        <definition>typedef VFGEdge::VFGEdgeSetTy::iterator SVF::VFG::VFGNodeIter</definition>
        <argsstring></argsstring>
        <name>VFGNodeIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="76" column="45" bodyfile="include/Graphs/VFG.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a241d0489bf0315460e2b07db87e7847c" prot="public" static="no">
        <type>VFGNodeIDToNodeMapTy::iterator</type>
        <definition>typedef VFGNodeIDToNodeMapTy::iterator SVF::VFG::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="77" column="44" bodyfile="include/Graphs/VFG.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a225a91c04afac6a8fe198e9860890a52" prot="public" static="no">
        <type>VFGNodeIDToNodeMapTy::const_iterator</type>
        <definition>typedef VFGNodeIDToNodeMapTy::const_iterator SVF::VFG::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="78" column="50" bodyfile="include/Graphs/VFG.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ade9d05bb026081e9a2c839dd2c56eab9" prot="public" static="no">
        <type>PAG::PAGEdgeSet</type>
        <definition>typedef PAG::PAGEdgeSet SVF::VFG::PAGEdgeSet</definition>
        <argsstring></argsstring>
        <name>PAGEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="79" column="29" bodyfile="include/Graphs/VFG.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1a113185086912213257b04daa4590bf13" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const VFGNode*&gt; SVF::VFG::GlobalVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>GlobalVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="80" column="17" bodyfile="include/Graphs/VFG.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_g_1ab12de81e2912f06551ca7a6693f5046b" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const PAGNode*&gt; SVF::VFG::PAGNodeSet</definition>
        <argsstring></argsstring>
        <name>PAGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="81" column="17" bodyfile="include/Graphs/VFG.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1acb181d4f9faa40578c80e2018e2742b8" prot="protected" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::VFG::totalVFGNode</definition>
        <argsstring></argsstring>
        <name>totalVFGNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="85" column="12" bodyfile="include/Graphs/VFG.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" prot="protected" static="no" mutable="no">
        <type>PAGNodeToDefMapTy</type>
        <definition>PAGNodeToDefMapTy SVF::VFG::PAGNodeToDefMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToDefMap</name>
        <briefdescription>
<para>map a pag node to its definition SVG node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="86" column="23" bodyfile="include/Graphs/VFG.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" prot="protected" static="no" mutable="no">
        <type>PAGNodeToActualParmMapTy</type>
        <definition>PAGNodeToActualParmMapTy SVF::VFG::PAGNodeToActualParmMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToActualParmMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to an actual parameter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="87" column="30" bodyfile="include/Graphs/VFG.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" prot="protected" static="no" mutable="no">
        <type>PAGNodeToActualRetMapTy</type>
        <definition>PAGNodeToActualRetMapTy SVF::VFG::PAGNodeToActualRetMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToActualRetMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to an actual return </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="88" column="29" bodyfile="include/Graphs/VFG.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" prot="protected" static="no" mutable="no">
        <type>PAGNodeToFormalParmMapTy</type>
        <definition>PAGNodeToFormalParmMapTy SVF::VFG::PAGNodeToFormalParmMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToFormalParmMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to a formal parameter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="89" column="30" bodyfile="include/Graphs/VFG.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" prot="protected" static="no" mutable="no">
        <type>PAGNodeToFormalRetMapTy</type>
        <definition>PAGNodeToFormalRetMapTy SVF::VFG::PAGNodeToFormalRetMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToFormalRetMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to a formal return </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="90" column="29" bodyfile="include/Graphs/VFG.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" prot="protected" static="no" mutable="no">
        <type>PAGNodeToPHIVFGNodeMapTy</type>
        <definition>PAGNodeToPHIVFGNodeMapTy SVF::VFG::PAGNodeToIntraPHIVFGNodeMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToIntraPHIVFGNodeMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to its <ref refid="class_s_v_f_1_1_p_h_i_v_f_g_node" kindref="compound">PHIVFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="91" column="30" bodyfile="include/Graphs/VFG.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" prot="protected" static="no" mutable="no">
        <type>PAGNodeToBinaryOPVFGNodeMapTy</type>
        <definition>PAGNodeToBinaryOPVFGNodeMapTy SVF::VFG::PAGNodeToBinaryOPVFGNodeMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToBinaryOPVFGNodeMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to its <ref refid="class_s_v_f_1_1_binary_o_p_v_f_g_node" kindref="compound">BinaryOPVFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="92" column="35" bodyfile="include/Graphs/VFG.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" prot="protected" static="no" mutable="no">
        <type>PAGNodeToUnaryOPVFGNodeMapTy</type>
        <definition>PAGNodeToUnaryOPVFGNodeMapTy SVF::VFG::PAGNodeToUnaryOPVFGNodeMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToUnaryOPVFGNodeMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to its <ref refid="class_s_v_f_1_1_unary_o_p_v_f_g_node" kindref="compound">UnaryOPVFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="93" column="34" bodyfile="include/Graphs/VFG.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" prot="protected" static="no" mutable="no">
        <type>PAGNodeToCmpVFGNodeMapTy</type>
        <definition>PAGNodeToCmpVFGNodeMapTy SVF::VFG::PAGNodeToCmpVFGNodeMap</definition>
        <argsstring></argsstring>
        <name>PAGNodeToCmpVFGNodeMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> to its <ref refid="class_s_v_f_1_1_cmp_v_f_g_node" kindref="compound">CmpVFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="94" column="30" bodyfile="include/Graphs/VFG.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" prot="protected" static="no" mutable="no">
        <type>PAGEdgeToStmtVFGNodeMapTy</type>
        <definition>PAGEdgeToStmtVFGNodeMapTy SVF::VFG::PAGEdgeToStmtVFGNodeMap</definition>
        <argsstring></argsstring>
        <name>PAGEdgeToStmtVFGNodeMap</name>
        <briefdescription>
<para>map a <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> to its <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="95" column="31" bodyfile="include/Graphs/VFG.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" prot="protected" static="no" mutable="no">
        <type>FunToVFGNodesMapTy</type>
        <definition>FunToVFGNodesMapTy SVF::VFG::funToVFGNodesMap</definition>
        <argsstring></argsstring>
        <name>funToVFGNodesMap</name>
        <briefdescription>
<para>map a function to its VFGNodes; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="96" column="24" bodyfile="include/Graphs/VFG.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" prot="protected" static="no" mutable="no">
        <type>GlobalVFGNodeSet</type>
        <definition>GlobalVFGNodeSet SVF::VFG::globalVFGNodes</definition>
        <argsstring></argsstring>
        <name>globalVFGNodes</name>
        <briefdescription>
<para>set of global store <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="98" column="22" bodyfile="include/Graphs/VFG.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a0c8cf98b652b5eb97d22e2636576f92f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::VFG::callgraph</definition>
        <argsstring></argsstring>
        <name>callgraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="99" column="18" bodyfile="include/Graphs/VFG.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1ad4f5debd234a444516c3a406c464795c" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::VFG::pag</definition>
        <argsstring></argsstring>
        <name>pag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="100" column="9" bodyfile="include/Graphs/VFG.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1a3867c591a231bad0aa2e6ab7c095a42f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></type>
        <definition>VFGK SVF::VFG::kind</definition>
        <argsstring></argsstring>
        <name>kind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="101" column="10" bodyfile="include/Graphs/VFG.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_g_1ae92915ff0535e22f9239fc2a0c7f0265" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::VFG::dumpVFG</definition>
        <argsstring></argsstring>
        <name>dumpVFG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="102" column="10" bodyfile="include/Graphs/VFG.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VFG::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Memory has been cleaned up at <ref refid="class_s_v_f_1_1_generic_graph" kindref="compound">GenericGraph</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="105" column="10" bodyfile="lib/Graphs/VFG.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::checkIntraEdgeParents</definition>
        <argsstring>(const VFGNode *srcNode, const VFGNode *dstNode)</argsstring>
        <name>checkIntraEdgeParents</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <briefdescription>
<para>sanitize Intra edges, verify that both nodes belong to the same function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="345" column="17" bodyfile="include/Graphs/VFG.h" bodystart="345" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge* SVF::VFG::addInterEdgeFromAPToFP</definition>
        <argsstring>(ActualParmVFGNode *src, FormalParmVFGNode *dst, CallSiteID csId)</argsstring>
        <name>addInterEdgeFromAPToFP</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from actual to formal parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="356" column="20" bodyfile="include/Graphs/VFG.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge* SVF::VFG::addInterEdgeFromFRToAR</definition>
        <argsstring>(FormalRetVFGNode *src, ActualRetVFGNode *dst, CallSiteID csId)</argsstring>
        <name>addInterEdgeFromFRToAR</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from callee return to callsite receive parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="361" column="20" bodyfile="include/Graphs/VFG.h" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge* SVF::VFG::addInterEdgeFromAPToFP</definition>
        <argsstring>(NodeID src, NodeID dst, CallSiteID csId)</argsstring>
        <name>addInterEdgeFromAPToFP</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from actual to formal parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="367" column="20" bodyfile="include/Graphs/VFG.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge* SVF::VFG::addInterEdgeFromFRToAR</definition>
        <argsstring>(NodeID src, NodeID dst, CallSiteID csId)</argsstring>
        <name>addInterEdgeFromFRToAR</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from callee return to callsite receive parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="372" column="20" bodyfile="include/Graphs/VFG.h" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::VFG::connectAParamAndFParam</definition>
        <argsstring>(const PAGNode *csArg, const PAGNode *funArg, const CallBlockNode *cbn, CallSiteID csId, VFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectAParamAndFParam</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4">connectAParamAndFParam</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>csArg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>funArg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cbn</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>VFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes between caller and callee for indirect call site. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect actual-param and formal param </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="380" column="25" bodyfile="include/Graphs/VFG.h" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::VFG::connectFRetAndARet</definition>
        <argsstring>(const PAGNode *funReturn, const PAGNode *csReturn, CallSiteID csId, VFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectFRetAndARet</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1aad3217fa932738ab8ba09e1e9f48ac56">connectFRetAndARet</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>funReturn</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>csReturn</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>VFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect formal-ret and actual ret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="389" column="25" bodyfile="include/Graphs/VFG.h" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::setDef</definition>
        <argsstring>(const PAGNode *pagNode, const VFGNode *node)</argsstring>
        <name>setDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Given a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>, set/get its def <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node (definition of top level pointers) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="401" column="17" bodyfile="include/Graphs/VFG.h" bodystart="401" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a7343f970332391634f79b2023bba6650" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::VFG::getDef</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="414" column="19" bodyfile="include/Graphs/VFG.h" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ab5b63b4f6317bfb5875f2b977bcf26a4" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::hasDef</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>hasDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="420" column="17" bodyfile="include/Graphs/VFG.h" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VFG::addVFGNodes</definition>
        <argsstring>()</argsstring>
        <name>addVFGNodes</name>
        <briefdescription>
<para>Create <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Create <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes for top level pointers </para>
        </detaileddescription>
        <inbodydescription>
<para>for external function we do not create acutalRet <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> they are in the formal of <ref refid="class_s_v_f_1_1_addr_v_f_g_node" kindref="compound">AddrVFGNode</ref> if the external function returns an allocated memory if fun has body, it may also exist in isExtCall, e.g., xmalloc() in bzip2, spec2000.</para>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="427" column="10" bodyfile="lib/Graphs/VFG.cpp" bodystart="327" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>PAGEdge::PAGEdgeSetTy &amp;</type>
        <definition>virtual PAGEdge::PAGEdgeSetTy&amp; SVF::VFG::getPAGEdgeSet</definition>
        <argsstring>(PAGEdge::PEDGEK kind)</argsstring>
        <name>getPAGEdgeSet</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="430" column="42" bodyfile="include/Graphs/VFG.h" bodystart="430" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a0b71873131a63eb6ee47ed2f66e3154a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::VFG::isInterestedPAGNode</definition>
        <argsstring>(const PAGNode *node) const</argsstring>
        <name>isInterestedPAGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="438" column="25" bodyfile="include/Graphs/VFG.h" bodystart="438" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VFG::connectDirectVFGEdges</definition>
        <argsstring>()</argsstring>
        <name>connectDirectVFGEdges</name>
        <briefdescription>
<para>Create edges between <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes within a function. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect def-use chains for direct value-flow, (value-flow of top level pointers) </para>
        </detaileddescription>
        <inbodydescription>
<para>do not handle AddrSVFG node, as it is already the source of a definition</para>
<para>for all other cases, like copy/gep/load/ret, connect the RHS pointer to its def</para>
<para>for store, connect the RHS/LHS pointer to its def</para>
<para>connect formal ret to its definition node</para>
<para>connect formal ret to actual ret</para>
<para>Do not process <ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref>, as they are connected by copy within callee We assume one procedure only has unique return</para>
<para>connect direct value-flow edges (parameter passing) for thread fork/join add fork edge</para>
<para>add join edge</para>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="447" column="10" bodyfile="lib/Graphs/VFG.cpp" bodystart="579" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addVFGInterEdges</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee)</argsstring>
        <name>addVFGInterEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Create edges between <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes across functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="450" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a8ddf15d89a1b11a7f7720b671f4f0295" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::isPhiCopyEdge</definition>
        <argsstring>(const PAGEdge *copy) const</argsstring>
        <name>isPhiCopyEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="452" column="17" bodyfile="include/Graphs/VFG.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::VFG::addVFGNode</definition>
        <argsstring>(VFGNode *vfgNode, ICFGNode *icfgNode)</argsstring>
        <name>addVFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>vfgNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>icfgNode</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="458" column="25" bodyfile="include/Graphs/VFG.h" bodystart="458" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addStmtVFGNode</definition>
        <argsstring>(StmtVFGNode *node, const PAGEdge *pagEdge)</argsstring>
        <name>addStmtVFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>pagEdge</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node for program statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="471" column="17" bodyfile="include/Graphs/VFG.h" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addNullPtrVFGNode</definition>
        <argsstring>(const PAGNode *pagNode)</argsstring>
        <name>addNullPtrVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a Dummy <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node for null pointer definition To be noted for black hole pointer it has already has address edge connected </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="479" column="17" bodyfile="include/Graphs/VFG.h" bodystart="479" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addAddrVFGNode</definition>
        <argsstring>(const AddrPE *addr)</argsstring>
        <name>addAddrVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_addr_p_e" kindref="compound">AddrPE</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Add an Address <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="486" column="17" bodyfile="include/Graphs/VFG.h" bodystart="486" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addCopyVFGNode</definition>
        <argsstring>(const CopyPE *copy)</argsstring>
        <name>addCopyVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref> *</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Add a Copy <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="493" column="17" bodyfile="include/Graphs/VFG.h" bodystart="493" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addGepVFGNode</definition>
        <argsstring>(const GepPE *gep)</argsstring>
        <name>addGepVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_gep_p_e" kindref="compound">GepPE</ref> *</type>
          <declname>gep</declname>
        </param>
        <briefdescription>
<para>Add a Gep <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="500" column="17" bodyfile="include/Graphs/VFG.h" bodystart="500" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addLoadVFGNode</definition>
        <argsstring>(const LoadPE *load)</argsstring>
        <name>addLoadVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref> *</type>
          <declname>load</declname>
        </param>
        <briefdescription>
<para>Add a Load <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="507" column="10" bodyfile="include/Graphs/VFG.h" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addStoreVFGNode</definition>
        <argsstring>(const StorePE *store)</argsstring>
        <name>addStoreVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a Store <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node, To be noted store does not create a new pointer, we do not set def for any <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="515" column="10" bodyfile="include/Graphs/VFG.h" bodystart="515" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addActualParmVFGNode</definition>
        <argsstring>(const PAGNode *aparm, const CallBlockNode *cs)</argsstring>
        <name>addActualParmVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>aparm</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an actual parameter <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node To be noted that multiple actual parameters may have same value (<ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>) So we need to make a pair &lt;PAGNodeID,CallSiteID&gt; to find the right VFGParmNode </para>
        </detaileddescription>
        <inbodydescription>
<para>do not set def here, this node is not a variable definition</para>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="524" column="17" bodyfile="include/Graphs/VFG.h" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addFormalParmVFGNode</definition>
        <argsstring>(const PAGNode *fparm, const SVFFunction *fun, CallPESet &amp;callPEs)</argsstring>
        <name>addFormalParmVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fparm</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>CallPESet &amp;</type>
          <declname>callPEs</declname>
        </param>
        <briefdescription>
<para>Add a formal parameter <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="532" column="17" bodyfile="include/Graphs/VFG.h" bodystart="532" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addFormalRetVFGNode</definition>
        <argsstring>(const PAGNode *uniqueFunRet, const SVFFunction *fun, RetPESet &amp;retPEs)</argsstring>
        <name>addFormalRetVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>uniqueFunRet</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>RetPESet &amp;</type>
          <declname>retPEs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a callee Return <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node To be noted that here we assume returns of a procedure have already been unified into one Otherwise, we need to handle formalRet using &lt;PAGNodeID,CallSiteID&gt; pair to find FormalRetVFG node same as handling actual parameters </para>
        </detaileddescription>
        <inbodydescription>
<para>if this uniqueFunRet is a phi node, which means it will receive values from multiple return instructions of fun we will set this phi node&apos;s def later</para>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="546" column="17" bodyfile="include/Graphs/VFG.h" bodystart="546" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addActualRetVFGNode</definition>
        <argsstring>(const PAGNode *ret, const CallBlockNode *cs)</argsstring>
        <name>addActualRetVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add a callsite Receive <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="560" column="17" bodyfile="include/Graphs/VFG.h" bodystart="560" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addIntraPHIVFGNode</definition>
        <argsstring>(const PAGNode *phiResNode, PAG::CopyPEList &amp;oplist)</argsstring>
        <name>addIntraPHIVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>phiResNode</declname>
        </param>
        <param>
          <type>PAG::CopyPEList &amp;</type>
          <declname>oplist</declname>
        </param>
        <briefdescription>
<para>Add an llvm PHI <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="568" column="17" bodyfile="include/Graphs/VFG.h" bodystart="568" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addCmpVFGNode</definition>
        <argsstring>(const PAGNode *resNode, PAG::CmpPEList &amp;oplist)</argsstring>
        <name>addCmpVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>resNode</declname>
        </param>
        <param>
          <type>PAG::CmpPEList &amp;</type>
          <declname>oplist</declname>
        </param>
        <briefdescription>
<para>Add a Compare <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="584" column="17" bodyfile="include/Graphs/VFG.h" bodystart="584" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addBinaryOPVFGNode</definition>
        <argsstring>(const PAGNode *resNode, PAG::BinaryOPList &amp;oplist)</argsstring>
        <name>addBinaryOPVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>resNode</declname>
        </param>
        <param>
          <type>PAG::BinaryOPList &amp;</type>
          <declname>oplist</declname>
        </param>
        <briefdescription>
<para>Add a BinaryOperator <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="600" column="17" bodyfile="include/Graphs/VFG.h" bodystart="600" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::addUnaryOPVFGNode</definition>
        <argsstring>(const PAGNode *resNode, PAG::UnaryOPList &amp;oplist)</argsstring>
        <name>addUnaryOPVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>resNode</declname>
        </param>
        <param>
          <type>PAG::UnaryOPList &amp;</type>
          <declname>oplist</declname>
        </param>
        <briefdescription>
<para>Add a UnaryOperator <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="617" column="17" bodyfile="include/Graphs/VFG.h" bodystart="617" bodyend="632"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VFG::VFG</definition>
        <argsstring>(PTACallGraph *callgraph, VFGK k=ORIGSVFGK)</argsstring>
        <name>VFG</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
          <declname>callgraph</declname>
          <defname>cg</defname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></type>
          <declname>k</declname>
          <defval>ORIGSVFGK</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor<itemizedlist>
<listitem><para>Build <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> 1) build <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes statements for top level pointers (PAGEdges) 2) connect <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> edges between two statements (PAGEdges) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="109" column="5" bodyfile="lib/Graphs/VFG.cpp" bodystart="305" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::VFG::~VFG</definition>
        <argsstring>()</argsstring>
        <name>~VFG</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="112" column="13" bodyfile="include/Graphs/VFG.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></type>
        <definition>VFGK SVF::VFG::getKind</definition>
        <argsstring>() const</argsstring>
        <name>getKind</name>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="118" column="17" bodyfile="include/Graphs/VFG.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::isPtrOnlySVFG</definition>
        <argsstring>() const</argsstring>
        <name>isPtrOnlySVFG</name>
        <briefdescription>
<para>Return true if this <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> only contains pointer related SVFGNodes for pointer analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="124" column="17" bodyfile="include/Graphs/VFG.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::setDumpVFG</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setDumpVFG</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Whether to dump <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref>;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="130" column="13" bodyfile="include/Graphs/VFG.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::getDumpVFG</definition>
        <argsstring>() const</argsstring>
        <name>getDumpVFG</name>
        <briefdescription>
<para>Whether to dump <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref>;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="136" column="13" bodyfile="include/Graphs/VFG.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::VFG::getPAG</definition>
        <argsstring>() const</argsstring>
        <name>getPAG</name>
        <briefdescription>
<para>Return <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="142" column="16" bodyfile="include/Graphs/VFG.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::VFG::getCallGraph</definition>
        <argsstring>() const</argsstring>
        <name>getCallGraph</name>
        <briefdescription>
<para>Return CallGraph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="148" column="25" bodyfile="include/Graphs/VFG.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
        <definition>VFGNode* SVF::VFG::getVFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getVFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="154" column="20" bodyfile="include/Graphs/VFG.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::hasVFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>hasVFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Whether has the <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="160" column="17" bodyfile="include/Graphs/VFG.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GlobalVFGNodeSet &amp;</type>
        <definition>GlobalVFGNodeSet&amp; SVF::VFG::getGlobalVFGNodes</definition>
        <argsstring>()</argsstring>
        <name>getGlobalVFGNodes</name>
        <briefdescription>
<para>Return global stores. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="165" column="29" bodyfile="include/Graphs/VFG.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::getVFGEdge</definition>
        <argsstring>(const VFGNode *src, const VFGNode *dst, VFGEdge::VFGEdgeK kind)</argsstring>
        <name>getVFGEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge according to src and dst. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the corresponding <ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="171" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="747" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aee3d0c4ed32bde425f33281f248b7dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VFG::dump</definition>
        <argsstring>(const std::string &amp;file, bool simple=false)</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dump graph into dot file. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="174" column="10" bodyfile="lib/Graphs/VFG.cpp" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VFG::updateCallGraph</definition>
        <argsstring>(PointerAnalysis *pta)</argsstring>
        <name>updateCallGraph</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Update <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> based on pointer analysis results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="177" column="10" bodyfile="lib/Graphs/VFG.cpp" bodystart="776" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void VFG::connectCallerAndCallee</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee, VFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectCallerAndCallee</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_1a0cebc2ba5ae81a6d45b224a4f94fc8b4">connectCallerAndCallee</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
          <defname>callBlockNode</defname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>VFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> nodes between caller and callee for indirect call site. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect actual params/return to formal params/return for top-level variables. Also connect indirect actual in/out and formal in/out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="180" column="18" bodyfile="lib/Graphs/VFG.cpp" bodystart="798" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteID</type>
        <definition>CallSiteID SVF::VFG::getCallSiteID</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *func) const</argsstring>
        <name>getCallSiteID</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Get callsite given a callsiteID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="184" column="23" bodyfile="include/Graphs/VFG.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1af04068b6f6beff961f815cc6eae7f5b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>const CallBlockNode* SVF::VFG::getCallSite</definition>
        <argsstring>(CallSiteID id) const</argsstring>
        <name>getCallSite</name>
        <param>
          <type>CallSiteID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="188" column="32" bodyfile="include/Graphs/VFG.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
        <definition>const VFGNode* SVF::VFG::getDefVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getDefVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
<para>Given a pagNode, return its definition site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="195" column="26" bodyfile="include/Graphs/VFG.h" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
        <definition>const PAGNode * VFG::getLHSTopLevPtr</definition>
        <argsstring>(const VFGNode *node) const</argsstring>
        <name>getLHSTopLevPtr</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> node, return its left hand side top level pointer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="201" column="19" bodyfile="lib/Graphs/VFG.cpp" bodystart="848" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref> *</type>
        <definition>StmtVFGNode* SVF::VFG::getStmtVFGNode</definition>
        <argsstring>(const PAGEdge *pagEdge) const</argsstring>
        <name>getStmtVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>pagEdge</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="205" column="24" bodyfile="include/Graphs/VFG.h" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a688c0cc4a67c7cd9afbef2f0c264c85b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_intra_p_h_i_v_f_g_node" kindref="compound">IntraPHIVFGNode</ref> *</type>
        <definition>IntraPHIVFGNode* SVF::VFG::getIntraPHIVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getIntraPHIVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="211" column="28" bodyfile="include/Graphs/VFG.h" bodystart="211" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a27bd4d5ba75d65056d77882869b0c64d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_binary_o_p_v_f_g_node" kindref="compound">BinaryOPVFGNode</ref> *</type>
        <definition>BinaryOPVFGNode* SVF::VFG::getBinaryOPVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getBinaryOPVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="217" column="28" bodyfile="include/Graphs/VFG.h" bodystart="217" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a1ba67eb17437a1a47c230614c1e3d9fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_unary_o_p_v_f_g_node" kindref="compound">UnaryOPVFGNode</ref> *</type>
        <definition>UnaryOPVFGNode* SVF::VFG::getUnaryOPVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getUnaryOPVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="223" column="27" bodyfile="include/Graphs/VFG.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a9215c1d7f1152967f0731057a085e793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cmp_v_f_g_node" kindref="compound">CmpVFGNode</ref> *</type>
        <definition>CmpVFGNode* SVF::VFG::getCmpVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getCmpVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="229" column="23" bodyfile="include/Graphs/VFG.h" bodystart="229" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a01b8694a5ab7acf8df0213225550791b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref> *</type>
        <definition>ActualParmVFGNode* SVF::VFG::getActualParmVFGNode</definition>
        <argsstring>(const PAGNode *aparm, const CallBlockNode *cs) const</argsstring>
        <name>getActualParmVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>aparm</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="235" column="30" bodyfile="include/Graphs/VFG.h" bodystart="235" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a0b072e8e45899b89da0a466140563c38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref> *</type>
        <definition>ActualRetVFGNode* SVF::VFG::getActualRetVFGNode</definition>
        <argsstring>(const PAGNode *aret) const</argsstring>
        <name>getActualRetVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>aret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="241" column="29" bodyfile="include/Graphs/VFG.h" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a75eb519e4f89a116db98fccb263af4d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref> *</type>
        <definition>FormalParmVFGNode* SVF::VFG::getFormalParmVFGNode</definition>
        <argsstring>(const PAGNode *fparm) const</argsstring>
        <name>getFormalParmVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fparm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="247" column="30" bodyfile="include/Graphs/VFG.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ab7ba9d179504165f277d347a7cb9f5d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref> *</type>
        <definition>FormalRetVFGNode* SVF::VFG::getFormalRetVFGNode</definition>
        <argsstring>(const PAGNode *fret) const</argsstring>
        <name>getFormalRetVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="253" column="29" bodyfile="include/Graphs/VFG.h" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction * VFG::isFunEntryVFGNode</definition>
        <argsstring>(const VFGNode *node) const</argsstring>
        <name>isFunEntryVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether a node is function entry <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether this is an function entry <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> (formal parameter, formal In) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="262" column="23" bodyfile="lib/Graphs/VFG.cpp" bodystart="885" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::hasBlackHoleConstObjAddrAsDef</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>hasBlackHoleConstObjAddrAsDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
<para>Whether a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> has a blackhole or const object as its definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="265" column="17" bodyfile="include/Graphs/VFG.h" bodystart="265" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::addIntraDirectVFEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId)</argsstring>
        <name>addIntraDirectVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add control-flow edges for top level pointers</para>
<para>Add def-use edges for top level pointers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="308" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="520" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::addCallEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, CallSiteID csId)</argsstring>
        <name>addCallEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add interprocedural call edges for top level pointers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="309" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="540" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::addRetEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, CallSiteID csId)</argsstring>
        <name>addRetEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add interprocedural return edges for top level pointers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="310" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="559" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::removeVFGEdge</definition>
        <argsstring>(VFGEdge *edge)</argsstring>
        <name>removeVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="314" column="17" bodyfile="include/Graphs/VFG.h" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFG::removeVFGNode</definition>
        <argsstring>(VFGNode *node)</argsstring>
        <name>removeVFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="321" column="17" bodyfile="include/Graphs/VFG.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::hasIntraVFGEdge</definition>
        <argsstring>(VFGNode *src, VFGNode *dst, VFGEdge::VFGEdgeK kind)</argsstring>
        <name>hasIntraVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Whether we has a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an intra <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="328" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="694" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::hasInterVFGEdge</definition>
        <argsstring>(VFGNode *src, VFGNode *dst, VFGEdge::VFGEdgeK kind, CallSiteID csId)</argsstring>
        <name>hasInterVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an inter <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="329" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="729" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
        <definition>VFGEdge * VFG::hasThreadVFGEdge</definition>
        <argsstring>(VFGNode *src, VFGNode *dst, VFGEdge::VFGEdgeK kind)</argsstring>
        <name>hasThreadVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an thread <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="330" column="13" bodyfile="lib/Graphs/VFG.cpp" bodystart="712" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFG::addVFGEdge</definition>
        <argsstring>(VFGEdge *edge)</argsstring>
        <name>addVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFG.h" line="334" column="17" bodyfile="include/Graphs/VFG.h" bodystart="334" bodyend="340"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>SVF::SVFGOPT</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_o_p_t"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="5">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/VFG.h" line="48" column="1" bodyfile="include/Graphs/VFG.h" bodystart="49" bodyend="633"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addAddrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>addCallEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addCopyVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addGepVFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>addIntraDirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addLoadVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addNullPtrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>addRetEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addStoreVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>addVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addVFGInterEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" prot="protected" virt="virtual"><scope>SVF::VFG</scope><name>addVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>addVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c8cf98b652b5eb97d22e2636576f92f" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>callgraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade3f735b3c7b1a53cab3d67cd9f7b874" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>CallPESet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>checkIntraEdgeParents</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0" prot="protected" virt="virtual"><scope>SVF::VFG</scope><name>connectAParamAndFParam</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab" prot="public" virt="virtual"><scope>SVF::VFG</scope><name>connectCallerAndCallee</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>connectDirectVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b" prot="protected" virt="virtual"><scope>SVF::VFG</scope><name>connectFRetAndARet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a225a91c04afac6a8fe198e9860890a52" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aee3d0c4ed32bde425f33281f248b7dd2" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ae92915ff0535e22f9239fc2a0c7f0265" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>dumpVFG</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>funToVFGNodesMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63218978f65ab91ae21bc24c882a716" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>FunToVFGNodesMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a01b8694a5ab7acf8df0213225550791b" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b072e8e45899b89da0a466140563c38" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27bd4d5ba75d65056d77882869b0c64d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af04068b6f6beff961f815cc6eae7f5b0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getCallSite</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getCallSiteID</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9215c1d7f1152967f0731057a085e793" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7343f970332391634f79b2023bba6650" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>getDef</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getDefVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a75eb519e4f89a116db98fccb263af4d6" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab7ba9d179504165f277d347a7cb9f5d8" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getGlobalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a688c0cc4a67c7cd9afbef2f0c264c85b" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getLHSTopLevPtr</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" prot="protected" virt="virtual"><scope>SVF::VFG</scope><name>getPAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1ba67eb17437a1a47c230614c1e3d9fd" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a5166be2c1231a93c9b9ce5f272797b94" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getVFGNodeBegin</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28f2bdcbbc0bab00e93df62ea11647a2" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getVFGNodeEnd</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>getVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>globalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a113185086912213257b04daa4590bf13" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>GlobalVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasBlackHoleConstObjAddrAsDef</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab5b63b4f6317bfb5875f2b977bcf26a4" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>hasDef</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasInterVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasIntraVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasThreadVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a76af43e28630eb56a1aa5971f516d43d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>hasVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>isFunEntryVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b71873131a63eb6ee47ed2f66e3154a" prot="protected" virt="virtual"><scope>SVF::VFG</scope><name>isInterestedPAGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8ddf15d89a1b11a7f7720b671f4f0295" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>isPhiCopyEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>isPtrOnlySVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a241d0489bf0315460e2b07db87e7847c" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3867c591a231bad0aa2e6ab7c095a42f" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>kind</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad49dfa7d8b1abaa2efebfdcf461a36b0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>ORIGSVFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad4f5debd234a444516c3a406c464795c" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade9d05bb026081e9a2c839dd2c56eab9" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGEdgeToStmtVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab37b067a59b52c472a284eabbeba43ff" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGEdgeToStmtVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab12de81e2912f06551ca7a6693f5046b" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToActualParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abec730a1ec61532cd164f3d42aa107b0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToActualParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToActualRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a999654aa377639db5c1e40f603e655a7" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToActualRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToBinaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7cefa553955e208d6eb4fcd01ed3c383" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToBinaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToCmpVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9c2446f54d3738b6c0e65632a1200ba0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToCmpVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToDefMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab9381c54f2339b3738348ae8b0d6659f" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToDefMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToFormalParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6eb72d2fe080def018d09604fe3affcf" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToFormalParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToFormalRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a52dac90d700a2377b657ec34d3ad2241" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToFormalRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToIntraPHIVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeed3eca629b10554f40b1d2b478580d4" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToPHIVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToUnaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acfcd84ac6bedde4e7e74abdeb9233474" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PAGNodeToUnaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad803e81268c1464f74da7add938e0aef" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>PTRONLYSVFGK</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>removeVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>removeVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abf966182c28f0521dcd161aa299e453d" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>RetPESet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>setDef</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>setDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac97ef8c479556f9ca2c40cd4d8a18694" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>SVFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acb181d4f9faa40578c80e2018e2742b8" prot="protected" virt="non-virtual"><scope>SVF::VFG</scope><name>totalVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0bdac7337a393ad2e21a33ec1978ca3f" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab2abe2ba4ac9e3e1d326d042d35acbc0" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3037ca34a555ebdb4fbf0e86291dc4ea" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGNodeIter</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43f4002b0beb00ed2026f7edd9ebbb1c" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a03d388eec513f713f5e0d06f920168db" prot="public" virt="non-virtual"><scope>SVF::VFG</scope><name>VFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::VFG</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" prot="public" virt="virtual"><scope>SVF::VFG</scope><name>~VFG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
