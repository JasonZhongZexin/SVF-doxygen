<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_s_v_f_g_builder" xml:lang="en-US">
<title>SVF::SVFGBuilder Class Reference</title>
<indexterm><primary>SVF::SVFGBuilder</primary></indexterm>
<para>
<computeroutput>#include &lt;SVFGBuilder.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::SVFGBuilder:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_s_v_f_g_builder.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a77bc88750823c8a0d19aad002e56ce07"/>typedef PointerAnalysis::CallSiteSet <emphasis role="strong">CallSiteSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1ae12f803f5ccdb47232043c8c5ae129bf"/>typedef PointerAnalysis::CallEdgeMap <emphasis role="strong">CallEdgeMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a1f8e21823ddc9eb19e1fe18d9b2b8280"/>typedef PointerAnalysis::FunctionSet <emphasis role="strong">FunctionSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a640158fff237cb5afabdf1c5946550e0"/>typedef SVFG::SVFGEdgeSetTy <emphasis role="strong">SVFGEdgeSet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a003c6d9e13e5f73e0648d97400f1854e"/><link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a003c6d9e13e5f73e0648d97400f1854e">SVFGBuilder</link> (bool _SVFGWithIndCall=false)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1af45232cbcffcaa4c7e05dab96553068f"/>virtual <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1af45232cbcffcaa4c7e05dab96553068f">~SVFGBuilder</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1ab7353191edd06568e2598177d253c1d9"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">buildPTROnlySVFG</emphasis> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a3b162da8dfb123cada7a13ce0c154a46"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">buildPTROnlySVFGWithoutOPT</emphasis> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a54a713e3989597b11cee70864d0197bd"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">buildFullSVFG</emphasis> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a7a43ae081645eb74fa48c136548f0809"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">buildFullSVFGWithoutOPT</emphasis> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1ad70dc4134a6290223b4168bde146b6d5"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1ad70dc4134a6290223b4168bde146b6d5">getSVFG</link> () const</para>

<para>Get <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> instance. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a3f8fc56d5190ea59d06906b359640dae"/>void <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a3f8fc56d5190ea59d06906b359640dae">markValidVFEdge</link> (SVFGEdgeSet &amp;edges)</para>

<para>Mark feasible VF edge by removing it from set vfEdgesAtIndCallSite. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a9e8da6a516ed6598c66d81a0891fbb6e"/>bool <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a9e8da6a516ed6598c66d81a0891fbb6e">isSpuriousVFEdgeAtIndCallSite</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *edge)</para>

<para>Return true if this is an VF Edge pre-connected by <link linkend="_class_s_v_f_1_1_andersen">Andersen</link>&apos;s analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a49cee21be46d6a3f65eec638714038ed"/>virtual <link linkend="_class_s_v_f_1_1_mem_s_s_a">MemSSA</link> * <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a49cee21be46d6a3f65eec638714038ed">buildMSSA</link> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta, bool ptrOnlyMSSA)</para>

<para>Build Memory SSA. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a9767f95253f02901da757076e3010b37"/>static void <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a9767f95253f02901da757076e3010b37">releaseSVFG</link> ()</para>

<para>Clean up. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a31b754a303116f33d679dfcd886c4bed"/>static <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">globalSvfg</emphasis> = NULL</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a47591192260ddc3ff0717430f127cc95">build</link> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *pta, <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFG::VFGK</link> kind)</para>

<para>Create a DDA <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. By default actualOut and FormalIN are removed, unless withAOFI is set true. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1ae2d84f7527de200a2f269dc1c056a305">buildSVFG</link> ()</para>

<para>Can be rewritten by subclasses. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a6e08e6a99f7e743abf35e603e35e54f5">releaseMemory</link> ()</para>

<para>Release global <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1aa9b432dd72f1a39be142c4e2c2d51247"/>SVFGEdgeSet <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1aa9b432dd72f1a39be142c4e2c2d51247">vfEdgesAtIndCallSite</link></para>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> Edges connected at indirect call/ret sites. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a26bc3b9c07472e454bc567cd8746caef"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">svfg</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a70de38086437635d2e44d2a0c9fdded9"/>bool <link linkend="_class_s_v_f_1_1_s_v_f_g_builder_1a70de38086437635d2e44d2a0c9fdded9">SVFGWithIndCall</link></para>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> with precomputed indirect call edges. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> Builder </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a47591192260ddc3ff0717430f127cc95"/>    <section>
    <title>build()</title>
<indexterm><primary>build</primary><secondary>SVF::SVFGBuilder</secondary></indexterm>
<indexterm><primary>SVF::SVFGBuilder</primary><secondary>build</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * SVFGBuilder::build (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> * pta, <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFG::VFGK</link> kind)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Create a DDA <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. By default actualOut and FormalIN are removed, unless withAOFI is set true. </para>
</para>

<para>Create DDA <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>

<para>Note that we use callgraph from andersen analysis here</para>

<para>Update call graph using pre-analysis results</para>
    </section><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1ae2d84f7527de200a2f269dc1c056a305"/>    <section>
    <title>buildSVFG()</title>
<indexterm><primary>buildSVFG</primary><secondary>SVF::SVFGBuilder</secondary></indexterm>
<indexterm><primary>SVF::SVFGBuilder</primary><secondary>buildSVFG</secondary></indexterm>
<para><computeroutput>void SVFGBuilder::buildSVFG ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Can be rewritten by subclasses. </para>
</para>

<para>Create <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_saber_s_v_f_g_builder_1a4d70d1413f42f30437d8eb45ff00b6f6">SVF::SaberSVFGBuilder</link>, and <link linkend="_class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a3b75cd10a314c920669cd0d4790e1a16">SVF::MTASVFGBuilder</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_builder_1a6e08e6a99f7e743abf35e603e35e54f5"/>    <section>
    <title>releaseMemory()</title>
<indexterm><primary>releaseMemory</primary><secondary>SVF::SVFGBuilder</secondary></indexterm>
<indexterm><primary>SVF::SVFGBuilder</primary><secondary>releaseMemory</secondary></indexterm>
<para><computeroutput>void SVFGBuilder::releaseMemory ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Release global <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</para>

<para>Release memory </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MSSA/SVFGBuilder.hlib/MSSA/SVFGBuilder.cpp</section>
</section>
