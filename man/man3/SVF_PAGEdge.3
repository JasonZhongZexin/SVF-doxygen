.TH "SVF::PAGEdge" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::PAGEdge
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSVF::GenericEdge< NodeTy >\fP\&.
.PP
Inherited by \fBSVF::AddrPE\fP, \fBSVF::BinaryOPPE\fP, \fBSVF::CallPE\fP, \fBSVF::CmpPE\fP, \fBSVF::CopyPE\fP, \fBSVF::GepPE\fP, \fBSVF::LoadPE\fP, \fBSVF::RetPE\fP, \fBSVF::StorePE\fP, and \fBSVF::UnaryOPPE\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBPEDGEK\fP { \fBAddr\fP, \fBCopy\fP, \fBStore\fP, \fBLoad\fP, \fBCall\fP, \fBRet\fP, \fBNormalGep\fP, \fBVariantGep\fP, \fBThreadFork\fP, \fBThreadJoin\fP, \fBCmp\fP, \fBBinaryOp\fP, \fBUnaryOp\fP }"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBPAGNode\fP, \fBPAGEdge\fP >::GEdgeSetTy \fBPAGEdgeSetTy\fP"
.br
.ti -1c
.RI "typedef Map< EdgeID, PAGEdgeSetTy > \fBPAGEdgeToSetMapTy\fP"
.br
.ti -1c
.RI "typedef PAGEdgeToSetMapTy \fBPAGKindToEdgeSetMapTy\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPAGEdge\fP (\fBPAGNode\fP *s, \fBPAGNode\fP *d, \fBGEdgeFlag\fP k)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~PAGEdge\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "EdgeID \fBgetEdgeID\fP () const"
.br
.RI "Return Edge ID\&. "
.ti -1c
.RI "bool \fBisPTAEdge\fP () const"
.br
.RI "Whether src and dst nodes are both of pointer type\&. "
.ti -1c
.RI "const Instruction * \fBgetInst\fP () const"
.br
.RI "Get/set methods for llvm instruction\&. "
.ti -1c
.RI "void \fBsetValue\fP (const Value *val)"
.br
.ti -1c
.RI "const Value * \fBgetValue\fP () const"
.br
.ti -1c
.RI "void \fBsetBB\fP (const BasicBlock *bb)"
.br
.ti -1c
.RI "const BasicBlock * \fBgetBB\fP () const"
.br
.ti -1c
.RI "void \fBsetICFGNode\fP (\fBICFGNode\fP *node)"
.br
.ti -1c
.RI "\fBICFGNode\fP * \fBgetICFGNode\fP () const"
.br
.ti -1c
.RI "virtual const std::string \fBtoString\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBclassof\fP (const \fBPAGEdge\fP *)"
.br
.RI "ClassOf\&. "
.ti -1c
.RI "static bool \fBclassof\fP (const \fBGenericPAGEdgeTy\fP *edge)"
.br
.ti -1c
.RI "static \fBGEdgeFlag\fP \fBmakeEdgeFlagWithCallInst\fP (GEdgeKind k, const \fBICFGNode\fP *cs)"
.br
.RI "Compute the unique edgeFlag value from edge kind and call site Instruction\&. "
.ti -1c
.RI "static \fBGEdgeFlag\fP \fBmakeEdgeFlagWithStoreInst\fP (GEdgeKind k, const \fBICFGNode\fP *store)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static Size_t \fBtotalEdgeNum\fP"
.br
.RI "Total edge number\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBraw_ostream\fP & \fBoperator<<\fP (\fBraw_ostream\fP &o, const \fBPAGEdge\fP &edge)"
.br
.RI "Overloading operator << for dumping \fBPAGNode\fP value\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSVF::PAGEdge::PEDGEK\fP"
Thirteen kinds of \fBPAG\fP edges Gep represents offset edge for field sensitivity ThreadFork/ThreadJoin is to model parameter passings between thread spawners and spawnees\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PAGEdge::PAGEdge (\fBPAGNode\fP * s, \fBPAGNode\fP * d, \fBGEdgeFlag\fP k)"

.PP
Constructor\&. \fBPAGEdge\fP constructor 
.SH "Member Function Documentation"
.PP 
.SS "bool PAGEdge::isPTAEdge () const"

.PP
Whether src and dst nodes are both of pointer type\&. Whether src and dst nodes are both pointer type 
.SS "static \fBGEdgeFlag\fP SVF::PAGEdge::makeEdgeFlagWithStoreInst (GEdgeKind k, const \fBICFGNode\fP * store)\fC [inline]\fP, \fC [static]\fP"
Compute the unique edgeFlag value from edge kind and store Instruction\&. Two store instructions may share the same StorePAGEdge 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
