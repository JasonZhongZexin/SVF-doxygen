.TH "SVF::PTAStat" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::PTAStat
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PTAStat\&.h>\fP
.PP
Inherited by \fBSVF::AndersenStat\fP, \fBSVF::DDAStat\fP, \fBSVF::FlowSensitiveStat\fP, \fBSVF::ICFGStat\fP, \fBSVF::MTAStat\fP, \fBSVF::MemSSAStat\fP, \fBSVF::SVFGStat\fP, and \fBSVF::VersionedFlowSensitiveStat\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Map< const char *, u32_t > \fBNUMStatMap\fP"
.br
.ti -1c
.RI "typedef Map< const char *, double > \fBTIMEStatMap\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPTAStat\fP (\fBPointerAnalysis\fP *p)"
.br
.ti -1c
.RI "virtual void \fBstartClk\fP ()"
.br
.ti -1c
.RI "virtual void \fBendClk\fP ()"
.br
.ti -1c
.RI "virtual void \fBperformStat\fP ()"
.br
.ti -1c
.RI "virtual void \fBprintStat\fP (string str='')"
.br
.ti -1c
.RI "virtual void \fBperformStatPerQuery\fP (NodeID)"
.br
.ti -1c
.RI "virtual void \fBprintStatPerQuery\fP (NodeID, const PointsTo &)"
.br
.ti -1c
.RI "virtual void \fBcallgraphStat\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBsetMarkedClocksOnly\fP (void)"
.br
.RI "Sets setMarkedClocksOnly through MarkedClocksOnly in PTAStat\&.cpp\&. "
.ti -1c
.RI "static double \fBgetClk\fP (bool mark=false)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "NUMStatMap \fBgeneralNumMap\fP"
.br
.ti -1c
.RI "NUMStatMap \fBPTNumStatMap\fP"
.br
.ti -1c
.RI "TIMEStatMap \fBtimeStatMap\fP"
.br
.ti -1c
.RI "NodeBS \fBlocalVarInRecursion\fP"
.br
.ti -1c
.RI "double \fBstartTime\fP"
.br
.ti -1c
.RI "double \fBendTime\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const char * \fBTotalAnalysisTime\fP = 'TotalTime'"
.br
.RI "Total analysis time\&. "
.ti -1c
.RI "static const char * \fBSCCDetectionTime\fP = 'SCCDetectTime'"
.br
.RI "Total SCC detection time\&. "
.ti -1c
.RI "static const char * \fBSCCMergeTime\fP = 'SCCMergeTime'"
.br
.RI "Total SCC merge time\&. "
.ti -1c
.RI "static const char * \fBProcessLoadStoreTime\fP = 'LoadStoreTime'"
.br
.RI "time of processing loads and stores "
.ti -1c
.RI "static const char * \fBProcessCopyGepTime\fP = 'CopyGepTime'"
.br
.RI "time of processing copys and geps "
.ti -1c
.RI "static const char * \fBUpdateCallGraphTime\fP = 'UpdateCGTime'"
.br
.RI "time of updating call graph "
.ti -1c
.RI "static const char * \fBTotalNumOfPointers\fP = 'TotalPointers'"
.br
.RI "Total \fBPAG\fP value node\&. "
.ti -1c
.RI "static const char * \fBTotalNumOfObjects\fP = 'TotalObjects'"
.br
.RI "Total \fBPAG\fP object node\&. "
.ti -1c
.RI "static const char * \fBTotalNumOfFieldObjects\fP = 'TotalFieldObjects'"
.br
.RI "Total \fBPAG\fP field object node\&. "
.ti -1c
.RI "static const char * \fBMaxStructSize\fP = 'MaxStructSize'"
.br
.RI "Max struct size\&. "
.ti -1c
.RI "static const char * \fBTotalNumOfEdges\fP = 'TotalPAGEdges'"
.br
.RI "Total \fBPAG\fP edge number\&. "
.ti -1c
.RI "static const char * \fBNumOfAddrs\fP = 'AddrsNum'"
.br
.RI "\fBPAG\fP addr edge\&. "
.ti -1c
.RI "static const char * \fBNumOfLoads\fP = 'LoadsNum'"
.br
.RI "\fBPAG\fP load edge\&. "
.ti -1c
.RI "static const char * \fBNumOfStores\fP = 'StoresNum'"
.br
.RI "\fBPAG\fP store edge\&. "
.ti -1c
.RI "static const char * \fBNumOfCopys\fP = 'CopysNum'"
.br
.RI "\fBPAG\fP copy edge\&. "
.ti -1c
.RI "static const char * \fBNumOfGeps\fP = 'GepsNum'"
.br
.RI "\fBPAG\fP gep edge\&. "
.ti -1c
.RI "static const char * \fBNumOfCalls\fP = 'CallsNum'"
.br
.RI "\fBPAG\fP call edge\&. "
.ti -1c
.RI "static const char * \fBNumOfReturns\fP = 'ReturnsNum'"
.br
.RI "\fBPAG\fP return edge\&. "
.ti -1c
.RI "static const char * \fBNumOfProcessedAddrs\fP = 'AddrProcessed'"
.br
.RI "\fBPAG\fP processed addr edge\&. "
.ti -1c
.RI "static const char * \fBNumOfProcessedLoads\fP = 'LoadProcessed'"
.br
.RI "\fBPAG\fP processed load edge\&. "
.ti -1c
.RI "static const char * \fBNumOfProcessedStores\fP = 'StoreProcessed'"
.br
.RI "\fBPAG\fP processed store edge\&. "
.ti -1c
.RI "static const char * \fBNumOfProcessedCopys\fP = 'CopyProcessed'"
.br
.RI "\fBPAG\fP processed copy edge\&. "
.ti -1c
.RI "static const char * \fBNumOfProcessedGeps\fP = 'GepProcessed'"
.br
.RI "\fBPAG\fP processed gep edge\&. "
.ti -1c
.RI "static const char * \fBNumOfSfr\fP = 'NumOfSFRs'"
.br
.RI "num of field representatives "
.ti -1c
.RI "static const char * \fBNumOfFieldExpand\fP = 'NumOfFieldExpand'"
.br
.ti -1c
.RI "static const char * \fBNumOfFunctionObjs\fP = 'FunctionObjs'"
.br
.RI "Function numbers\&. "
.ti -1c
.RI "static const char * \fBNumOfGlobalObjs\fP = 'GlobalObjs'"
.br
.RI "\fBPAG\fP global object node\&. "
.ti -1c
.RI "static const char * \fBNumOfHeapObjs\fP = 'HeapObjs'"
.br
.RI "\fBPAG\fP heap object node\&. "
.ti -1c
.RI "static const char * \fBNumOfStackObjs\fP = 'StackObjs'"
.br
.RI "\fBPAG\fP stack object node\&. "
.ti -1c
.RI "static const char * \fBNumOfObjsHasVarStruct\fP = 'VarStructObj'"
.br
.RI "\fBPAG\fP object node has var struct (maybe nested with array) "
.ti -1c
.RI "static const char * \fBNumOfObjsHasVarArray\fP = 'VarArrayObj'"
.br
.RI "\fBPAG\fP object node has var array (maybe nested with struct) "
.ti -1c
.RI "static const char * \fBNumOfObjsHasConstStruct\fP = 'ConstStructObj'"
.br
.RI "\fBPAG\fP object node has const struct (maybe nested with array) "
.ti -1c
.RI "static const char * \fBNumOfObjsHasConstArray\fP = 'ConstArrayObj'"
.br
.RI "\fBPAG\fP object node has const array (maybe nested with struct) "
.ti -1c
.RI "static const char * \fBNumOfNonPtrObjs\fP = 'NonPtrObj'"
.br
.RI "\fBPAG\fP object node which is non pointer type object (do not have pts) "
.ti -1c
.RI "static const char * \fBNumOfConstantObjs\fP = 'ConstantObj'"
.br
.RI "\fBPAG\fP object node which is purely constant\&. "
.ti -1c
.RI "static const char * \fBNumberOfFieldInsensitiveObj\fP = 'FIObjNum'"
.br
.ti -1c
.RI "static const char * \fBNumberOfFieldSensitiveObj\fP = 'FSObjNum'"
.br
.ti -1c
.RI "static const char * \fBNumOfPointers\fP = 'Pointers'"
.br
.RI "\fBPAG\fP value node, each of them maps to a llvm value\&. "
.ti -1c
.RI "static const char * \fBNumOfGepFieldPointers\fP = 'DYFieldPtrs'"
.br
.RI "\fBPAG\fP gep value node (field value, dynamically created dummy node) "
.ti -1c
.RI "static const char * \fBNumOfMemObjects\fP = 'MemObjects'"
.br
.RI "\fBPAG\fP object node, each of them maps to a llvm value\&. "
.ti -1c
.RI "static const char * \fBNumOfGepFieldObjects\fP = 'DYFieldObjs'"
.br
.RI "\fBPAG\fP gep object node (field obj, dynamically created dummy node) "
.ti -1c
.RI "static const char * \fBAveragePointsToSetSize\fP = 'AvgPtsSetSize'"
.br
.RI "Average points-to size of all variables\&. "
.ti -1c
.RI "static const char * \fBAverageTopLevPointsToSetSize\fP = 'AvgTopLvlPtsSize'"
.br
.RI "Average points-to size of top-level variables\&. "
.ti -1c
.RI "static const char * \fBMaxPointsToSetSize\fP = 'MaxPtsSetSize'"
.br
.RI "Max points-to size\&. "
.ti -1c
.RI "static const char * \fBNumOfIterations\fP = 'Iterations'"
.br
.RI "Number of iterations during resolution\&. "
.ti -1c
.RI "static const char * \fBNumOfIndirectCallSites\fP = 'IndCallSites'"
.br
.RI "Number of indirect callsites\&. "
.ti -1c
.RI "static const char * \fBNumOfIndirectEdgeSolved\fP = 'IndEdgeSolved'"
.br
.RI "Number of indirect calledge resolved\&. "
.ti -1c
.RI "static const char * \fBNumOfSCCDetection\fP = 'NumOfSCCDetect'"
.br
.RI "Number of scc detection performed\&. "
.ti -1c
.RI "static const char * \fBNumOfCycles\fP = 'TotalCycleNum'"
.br
.RI "Number of scc cycles detected\&. "
.ti -1c
.RI "static const char * \fBNumOfPWCCycles\fP = 'TotalPWCCycleNum'"
.br
.RI "Number of scc cycles detected\&. "
.ti -1c
.RI "static const char * \fBNumOfNodesInCycles\fP = 'NodesInCycles'"
.br
.RI "Number of nodes in cycles detected\&. "
.ti -1c
.RI "static const char * \fBMaxNumOfNodesInSCC\fP = 'MaxNodesInSCC'"
.br
.RI "max Number of nodes in one scc "
.ti -1c
.RI "static const char * \fBNumOfNullPointer\fP = 'NullPointer'"
.br
.RI "Number of pointers points-to null\&. "
.ti -1c
.RI "static bool \fBmarkedClocksOnly\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
Pointer Analysis Statistics 
.SH "Member Function Documentation"
.PP 
.SS "static double SVF::PTAStat::getClk (bool mark = \fCfalse\fP)\fC [inline]\fP, \fC [static]\fP"
When mark is true, real clock is always returned\&. When mark is false, it is only returned when markedClocksOnly is not set; this is the default case\&. 
.SH "Member Data Documentation"
.PP 
.SS "const char * PTAStat::AveragePointsToSetSize = 'AvgPtsSetSize'\fC [static]\fP"

.PP
Average points-to size of all variables\&. Average Points-to set size\&. 
.SS "const char * PTAStat::AverageTopLevPointsToSetSize = 'AvgTopLvlPtsSize'\fC [static]\fP"

.PP
Average points-to size of top-level variables\&. Average Points-to set size of top level pointers\&. 
.SS "bool PTAStat::markedClocksOnly = false\fC [static]\fP"
If set, only return the clock when getClk is called as getClk(true)\&. Retrieving the clock is slow but it should be fine for a few calls\&. This is good for benchmarking when we don't need to know how long processLoad takes, for example (many calls), but want to know things like total solve time\&. Does not affect CLOCK_IN_MS\&. 
.SS "const char * PTAStat::MaxNumOfNodesInSCC = 'MaxNodesInSCC'\fC [static]\fP"

.PP
max Number of nodes in one scc max Number of nodes in one scc cycle 
.SS "const char * PTAStat::MaxPointsToSetSize = 'MaxPtsSetSize'\fC [static]\fP"

.PP
Max points-to size\&. Max Points-to set size\&. 
.SS "const char * PTAStat::MaxStructSize = 'MaxStructSize'\fC [static]\fP"

.PP
Max struct size\&. Max struct size (bytes) 
.SS "const char * PTAStat::NumOfConstantObjs = 'ConstantObj'\fC [static]\fP"

.PP
\fBPAG\fP object node which is purely constant\&. \fBPAG\fP object node which is purely scalar\&. 
.SS "const char * PTAStat::NumOfFunctionObjs = 'FunctionObjs'\fC [static]\fP"

.PP
Function numbers\&. function numbers 
.SS "const char * PTAStat::NumOfObjsHasVarArray = 'VarArrayObj'\fC [static]\fP"

.PP
\fBPAG\fP object node has var array (maybe nested with struct) \fBPAG\fP object node has array (maybe nested with struct) 
.SS "const char * PTAStat::NumOfObjsHasVarStruct = 'VarStructObj'\fC [static]\fP"

.PP
\fBPAG\fP object node has var struct (maybe nested with array) \fBPAG\fP object node has struct (maybe nested with array) 
.SS "const char * PTAStat::NumOfProcessedAddrs = 'AddrProcessed'\fC [static]\fP"

.PP
\fBPAG\fP processed addr edge\&. \fBPAG\fP addr processed edge\&. 
.SS "const char * PTAStat::NumOfProcessedCopys = 'CopyProcessed'\fC [static]\fP"

.PP
\fBPAG\fP processed copy edge\&. \fBPAG\fP copy processed edge\&. 
.SS "const char * PTAStat::NumOfProcessedGeps = 'GepProcessed'\fC [static]\fP"

.PP
\fBPAG\fP processed gep edge\&. \fBPAG\fP gep processed edge\&. 
.SS "const char * PTAStat::NumOfProcessedLoads = 'LoadProcessed'\fC [static]\fP"

.PP
\fBPAG\fP processed load edge\&. \fBPAG\fP load processed edge\&. 
.SS "const char * PTAStat::NumOfProcessedStores = 'StoreProcessed'\fC [static]\fP"

.PP
\fBPAG\fP processed store edge\&. \fBPAG\fP store processed edge\&. 
.SS "const char * PTAStat::NumOfPWCCycles = 'TotalPWCCycleNum'\fC [static]\fP"

.PP
Number of scc cycles detected\&. Number of pwc scc cycles detected\&. 
.SS "const char * PTAStat::NumOfSfr = 'NumOfSFRs'\fC [static]\fP"

.PP
num of field representatives number of field representatives 
.SS "const char * PTAStat::ProcessCopyGepTime = 'CopyGepTime'\fC [static]\fP"

.PP
time of processing copys and geps process copy and gep time 
.SS "const char * PTAStat::ProcessLoadStoreTime = 'LoadStoreTime'\fC [static]\fP"

.PP
time of processing loads and stores process load and store time 
.SS "const char * PTAStat::TotalAnalysisTime = 'TotalTime'\fC [static]\fP"

.PP
Total analysis time\&. \fBPAG\fP value nodes\&. 
.SS "const char * PTAStat::TotalNumOfPointers = 'TotalPointers'\fC [static]\fP"

.PP
Total \fBPAG\fP value node\&. \fBPAG\fP value nodes\&. 
.SS "const char * PTAStat::UpdateCallGraphTime = 'UpdateCGTime'\fC [static]\fP"

.PP
time of updating call graph process copy and gep time 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
