<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_thread" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtThread</compoundname>
    <includes refid="_cxt_stmt_8h" local="no">CxtStmt.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_1ae8e5c401e008739bf018f1d618c08ea5" prot="protected" static="no" mutable="no">
        <type>CallStrCxt</type>
        <definition>CallStrCxt SVF::CxtThread::cxt</definition>
        <argsstring></argsstring>
        <name>cxt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="291" column="16" bodyfile="include/Util/CxtStmt.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_1a6dc6ddb5399c1ddc53db2155943511fd" prot="protected" static="no" mutable="no">
        <type>const CallInst *</type>
        <definition>const CallInst* SVF::CxtThread::forksite</definition>
        <argsstring></argsstring>
        <name>forksite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="292" column="20" bodyfile="include/Util/CxtStmt.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_1a2066520689094db3c4a88f5a7fc4ec0c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::CxtThread::inloop</definition>
        <argsstring></argsstring>
        <name>inloop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="293" column="10" bodyfile="include/Util/CxtStmt.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_1a97d876697e682b23211a8f930fed7f32" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::CxtThread::incycle</definition>
        <argsstring></argsstring>
        <name>incycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="294" column="10" bodyfile="include/Util/CxtStmt.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a7f842879cad19328575f33220491352a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThread::CxtThread</definition>
        <argsstring>(const CallStrCxt &amp;c, const CallInst *fork)</argsstring>
        <name>CxtThread</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const CallInst *</type>
          <declname>fork</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="192" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1ac6af46ba08bbad4454358298fd2557d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThread::CxtThread</definition>
        <argsstring>(const CxtThread &amp;ct)</argsstring>
        <name>CxtThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="196" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a5792277805336f1c09f4303263521152" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtThread::~CxtThread</definition>
        <argsstring>()</argsstring>
        <name>~CxtThread</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="201" column="13" bodyfile="include/Util/CxtStmt.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a93d75593046e26eafcf1af3a596bba4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallStrCxt &amp;</type>
        <definition>const CallStrCxt&amp; SVF::CxtThread::getContext</definition>
        <argsstring>() const</argsstring>
        <name>getContext</name>
        <briefdescription>
<para>Return context of the thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="205" column="29" bodyfile="include/Util/CxtStmt.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a066ba29a83edc1042139641ca088b038" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallInst *</type>
        <definition>const CallInst* SVF::CxtThread::getThread</definition>
        <argsstring>() const</argsstring>
        <name>getThread</name>
        <briefdescription>
<para>Return forksite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="210" column="27" bodyfile="include/Util/CxtStmt.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a60b5b1a47869964fc8b6a27a38d11ae8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThread::operator&lt;</definition>
        <argsstring>(const CxtThread &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="216" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a3c22e59962a9c638a0f1b516c25aec8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
        <definition>CxtThread&amp; SVF::CxtThread::operator=</definition>
        <argsstring>(const CxtThread &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="224" column="22" bodyfile="include/Util/CxtStmt.h" bodystart="224" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1ae39e05ed7673a566708cec682d9b5d24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThread::operator==</definition>
        <argsstring>(const CxtThread &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="234" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1acee7934273db9dde73b25743ed4aa911" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThread::operator!=</definition>
        <argsstring>(const CxtThread &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="239" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1aa07c20dee73682364690c3b454084c47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CxtThread::cxtToStr</definition>
        <argsstring>() const</argsstring>
        <name>cxtToStr</name>
        <briefdescription>
<para>Return context in string format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="244" column="24" bodyfile="include/Util/CxtStmt.h" bodystart="244" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1aa4e1a9babb249a005e8dfae8cb83df21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtThread::setInloop</definition>
        <argsstring>(bool in)</argsstring>
        <name>setInloop</name>
        <param>
          <type>bool</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>inloop, incycle attributes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="259" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a39230596cd1c927353eaaee071eb16c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThread::isInloop</definition>
        <argsstring>() const</argsstring>
        <name>isInloop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="263" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1adde663205c3ecc5a2e01b18bc305d5cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtThread::setIncycle</definition>
        <argsstring>(bool in)</argsstring>
        <name>setIncycle</name>
        <param>
          <type>bool</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="267" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a54c95794963cb5a478db7c49c1b8c428" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThread::isIncycle</definition>
        <argsstring>() const</argsstring>
        <name>isIncycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="271" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_1a66709acfa2f5762d86574c9cf7f38a64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtThread::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="278" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="278" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context-sensitive thread &lt;c,t&gt; </para>
    </detaileddescription>
    <location file="include/Util/CxtStmt.h" line="188" column="1" bodyfile="include/Util/CxtStmt.h" bodystart="189" bodyend="295"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_thread_1ae8e5c401e008739bf018f1d618c08ea5" prot="protected" virt="non-virtual"><scope>SVF::CxtThread</scope><name>cxt</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a7f842879cad19328575f33220491352a" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>CxtThread</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1ac6af46ba08bbad4454358298fd2557d3" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>CxtThread</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1aa07c20dee73682364690c3b454084c47" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>cxtToStr</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a66709acfa2f5762d86574c9cf7f38a64" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a6dc6ddb5399c1ddc53db2155943511fd" prot="protected" virt="non-virtual"><scope>SVF::CxtThread</scope><name>forksite</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a93d75593046e26eafcf1af3a596bba4a" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>getContext</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a066ba29a83edc1042139641ca088b038" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>getThread</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a97d876697e682b23211a8f930fed7f32" prot="protected" virt="non-virtual"><scope>SVF::CxtThread</scope><name>incycle</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a2066520689094db3c4a88f5a7fc4ec0c" prot="protected" virt="non-virtual"><scope>SVF::CxtThread</scope><name>inloop</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a54c95794963cb5a478db7c49c1b8c428" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>isIncycle</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a39230596cd1c927353eaaee071eb16c6" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>isInloop</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1acee7934273db9dde73b25743ed4aa911" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a60b5b1a47869964fc8b6a27a38d11ae8" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a3c22e59962a9c638a0f1b516c25aec8f" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1ae39e05ed7673a566708cec682d9b5d24" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1adde663205c3ecc5a2e01b18bc305d5cb" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>setIncycle</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1aa4e1a9babb249a005e8dfae8cb83df21" prot="public" virt="non-virtual"><scope>SVF::CxtThread</scope><name>setInloop</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_1a5792277805336f1c09f4303263521152" prot="public" virt="virtual"><scope>SVF::CxtThread</scope><name>~CxtThread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
