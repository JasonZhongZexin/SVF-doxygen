<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespace_s_v_f_1_1cpp_util" kind="namespace" language="C++">
    <compoundname>SVF::cppUtil</compoundname>
    <innerclass refid="struct_s_v_f_1_1cpp_util_1_1_demangled_name" prot="public">SVF::cppUtil::DemangledName</innerclass>
    <innernamespace refid="namespace_s_v_f_1_1cpp_util_1_1ctir">SVF::cppUtil::ctir</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_p_p_util_8h_1a907df902afe3ddcd19f2d263287ef6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct_s_v_f_1_1cpp_util_1_1_demangled_name" kindref="compound">DemangledName</ref></type>
        <definition>struct DemangledName SVF::cppUtil::demangle</definition>
        <argsstring>(const std::string name)</argsstring>
        <name>demangle</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="1" column="0" declfile="include/SVF-FE/CPPUtil.h" declline="1" declcolumn="0"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a28d5c9b69f2a9f04f42fdcc2ec30c4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::cppUtil::getBeforeBrackets</definition>
        <argsstring>(const std::string name)</argsstring>
        <name>getBeforeBrackets</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="54" column="13" declfile="include/SVF-FE/CPPUtil.h" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1aeef0f5c6486379043a7d47b0635f2667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isValVtbl</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isValVtbl</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="55" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="122" bodyend="132" declfile="include/SVF-FE/CPPUtil.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a1e99d5cf28e0d6546e0d85b805a7e371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isLoadVtblInst</definition>
        <argsstring>(const LoadInst *loadInst)</argsstring>
        <name>isLoadVtblInst</name>
        <param>
          <type>const LoadInst *</type>
          <declname>loadInst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="56" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="203" bodyend="225" declfile="include/SVF-FE/CPPUtil.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1aca6465c72effcaddeb34f55da4555754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isVirtualCallSite</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>isVirtualCallSite</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="57" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="234" bodyend="264" declfile="include/SVF-FE/CPPUtil.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1ad6f9578cdce518141772a11617160da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isConstructor</definition>
        <argsstring>(const Function *F)</argsstring>
        <name>isConstructor</name>
        <param>
          <type>const Function *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TODO: on mac os function name is an empty string after demangling</para>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="58" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="404" bodyend="430" declfile="include/SVF-FE/CPPUtil.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1af19bec54621f4605bac4feaf9f73803c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isDestructor</definition>
        <argsstring>(const Function *F)</argsstring>
        <name>isDestructor</name>
        <param>
          <type>const Function *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="59" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="432" bodyend="460" declfile="include/SVF-FE/CPPUtil.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a26c3ceb82a398663284690c898a5354d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespace_s_v_f_1a58cdfbc4160cae08745b67844ac29801" kindref="member">Argument</ref> *</type>
        <definition>const Argument * SVF::cppUtil::getConstructorThisPtr</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getConstructorThisPtr</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="82" column="16" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="316" bodyend="322" declfile="include/SVF-FE/CPPUtil.h" declline="82" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a7c9507812041b5de8dbbca5b602fefbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value * SVF::cppUtil::getVCallThisPtr</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>getVCallThisPtr</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="83" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="266" bodyend="276" declfile="include/SVF-FE/CPPUtil.h" declline="83" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a3b00cc9770022f124958513bf1e52a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value * SVF::cppUtil::getVCallVtblPtr</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>getVCallVtblPtr</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="84" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="331" bodyend="340" declfile="include/SVF-FE/CPPUtil.h" declline="84" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1ad2a35c1d2e357690e634bb250a68795d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u64_t</type>
        <definition>u64_t SVF::cppUtil::getVCallIdx</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>getVCallIdx</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="85" column="7" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="342" bodyend="360" declfile="include/SVF-FE/CPPUtil.h" declline="85" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1ad83c097f1c77cdf52fc219ef07ee0b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string SVF::cppUtil::getClassNameFromVtblObj</definition>
        <argsstring>(const Value *value)</argsstring>
        <name>getClassNameFromVtblObj</name>
        <param>
          <type>const Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="86" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="385" bodyend="402" declfile="include/SVF-FE/CPPUtil.h" declline="86" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a891719bac36ebb6c001f073dfa5a9e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string SVF::cppUtil::getClassNameFromType</definition>
        <argsstring>(const Type *ty)</argsstring>
        <name>getClassNameFromType</name>
        <param>
          <type>const Type *</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="87" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="362" bodyend="383" declfile="include/SVF-FE/CPPUtil.h" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a3bed7bc0a0ae580841ca049f91690ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string SVF::cppUtil::getClassNameOfThisPtr</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>getClassNameOfThisPtr</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="88" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="462" bodyend="487" declfile="include/SVF-FE/CPPUtil.h" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a0a67c31dcc44784b09dca54b4b7c624a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string SVF::cppUtil::getFunNameOfVCallSite</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>getFunNameOfVCallSite</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="89" column="13" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="489" bodyend="499" declfile="include/SVF-FE/CPPUtil.h" declline="89" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1abcba23ffa41fe5b456289e528d1b4c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::VCallInCtorOrDtor</definition>
        <argsstring>(CallSite cs)</argsstring>
        <name>VCallInCtorOrDtor</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="90" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="505" bodyend="516" declfile="include/SVF-FE/CPPUtil.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_c_p_p_util_8h_1a5dd3230226002e126f6b0a877f9550ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::cppUtil::isSameThisPtrInConstructor</definition>
        <argsstring>(const Argument *thisPtr1, const Value *thisPtr2)</argsstring>
        <name>isSameThisPtrInConstructor</name>
        <param>
          <type>const <ref refid="namespace_s_v_f_1a58cdfbc4160cae08745b67844ac29801" kindref="member">Argument</ref> *</type>
          <declname>thisPtr1</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>thisPtr2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a inheritance relation B is a child of A We assume B::B(thisPtr1){ A::A(thisPtr2) } such that thisPtr1 == thisPtr2 In the following code thisPtr1 is &quot;%class.B1* %this&quot; and thisPtr2 is &quot;%class.A* %0&quot;.</para>
<para>define linkonce_odr dso_local void @B1::B1()(class.B1* this) unnamed_addr #6 comdat this.addr = alloca class.B1*, align 8 store class.B1* this, class.B1** this.addr, align 8 this1 = load class.B1*, class.B1** this.addr, align 8 %0 = bitcast class.B1* this1 to class.A* call void @A::A()(class.A* %0) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/CPPUtil.h" line="101" column="6" bodyfile="lib/SVF-FE/CPPUtil.cpp" bodystart="290" bodyend="314" declfile="include/SVF-FE/CPPUtil.h" declline="101" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/SVF-FE/CPPUtil.h" line="43" column="1"/>
  </compounddef>
</doxygen>
