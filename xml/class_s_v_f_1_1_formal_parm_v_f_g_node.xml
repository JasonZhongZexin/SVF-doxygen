<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_formal_parm_v_f_g_node" kind="class" language="C++" prot="public">
    <compoundname>SVF::FormalParmVFGNode</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_argument_v_f_g_node" prot="public" virt="non-virtual">SVF::ArgumentVFGNode</basecompoundref>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ac2711b6bf2b27386def742aa0959ba35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallPESet::const_iterator</type>
        <definition>CallPESet::const_iterator SVF::FormalParmVFGNode::callPEBegin</definition>
        <argsstring>() const</argsstring>
        <name>callPEBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call edge iterator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="850" column="38" bodyfile="include/Graphs/VFGNode.h" bodystart="850" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ae9a11d1c9c646baecc4e510eb10fa515" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallPESet::const_iterator</type>
        <definition>CallPESet::const_iterator SVF::FormalParmVFGNode::callPEEnd</definition>
        <argsstring>() const</argsstring>
        <name>callPEEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="854" column="38" bodyfile="include/Graphs/VFGNode.h" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1a5552cd32449249c1758ee8e222766b28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string</type>
        <definition>const std::string FormalParmVFGNode::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <reimplements refid="class_s_v_f_1_1_argument_v_f_g_node_1add076a578ac50298ae1e4f5643af004c">toString</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="880" column="31" bodyfile="lib/Graphs/VFG.cpp" bodystart="200" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1af91ecca224b99cd6dd3b9b17ad0d8e6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::FormalParmVFGNode::classof</definition>
        <argsstring>(const FormalParmVFGNode *)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref> *</type>
        </param>
        <briefdescription>
<para>Methods for support type inquiry through isa, cast, and dyn_cast: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="862" column="24" bodyfile="include/Graphs/VFGNode.h" bodystart="862" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ae4cac828eec4ac2f55ff9d580c855b34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::FormalParmVFGNode::classof</definition>
        <argsstring>(const VFGNode *node)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="866" column="24" bodyfile="include/Graphs/VFGNode.h" bodystart="866" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ad53fc9b2922c6c0145864bce59991d54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::FormalParmVFGNode::classof</definition>
        <argsstring>(const ArgumentVFGNode *node)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_argument_v_f_g_node" kindref="compound">ArgumentVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="870" column="24" bodyfile="include/Graphs/VFGNode.h" bodystart="870" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1a691dc39c5ed3f3fa1ea518b5ec802c60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::FormalParmVFGNode::classof</definition>
        <argsstring>(const GenericVFGNodeTy *node)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="namespace_s_v_f_1a3b4bbc4b72e982a79c23fd3ec26410b6" kindref="member">GenericVFGNodeTy</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="874" column="24" bodyfile="include/Graphs/VFGNode.h" bodystart="874" bodyend="877"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ad8f56074e213d2e7dc1d22a1b0765f8c" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::FormalParmVFGNode::fun</definition>
        <argsstring></argsstring>
        <name>fun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="822" column="23" bodyfile="include/Graphs/VFGNode.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1a8d124f42c320d38ddd08ed4948d63517" prot="private" static="no" mutable="no">
        <type>CallPESet</type>
        <definition>CallPESet SVF::FormalParmVFGNode::callPEs</definition>
        <argsstring></argsstring>
        <name>callPEs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="823" column="15" bodyfile="include/Graphs/VFGNode.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1a4f51e718a8519f6edcee627cdd51b272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::FormalParmVFGNode::FormalParmVFGNode</definition>
        <argsstring>(NodeID id, const PAGNode *n, const SVFFunction *f)</argsstring>
        <name>FormalParmVFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="827" column="5" bodyfile="include/Graphs/VFGNode.h" bodystart="827" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1ab1a9031c1fc5102e072b5035151c131c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
        <definition>const PAGNode* SVF::FormalParmVFGNode::getParam</definition>
        <argsstring>() const</argsstring>
        <name>getParam</name>
        <briefdescription>
<para>Return parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="833" column="26" bodyfile="include/Graphs/VFGNode.h" bodystart="833" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1a18157f92fd96f786c8e1ebc4c9c00994" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction* SVF::FormalParmVFGNode::getFun</definition>
        <argsstring>() const</argsstring>
        <name>getFun</name>
        <reimplements refid="class_s_v_f_1_1_v_f_g_node_1ab98e74dfd4756e70e3e3c5b7d5e5ae27">getFun</reimplements>
        <briefdescription>
<para>Return function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="839" column="30" bodyfile="include/Graphs/VFGNode.h" bodystart="839" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_formal_parm_v_f_g_node_1af0dfc7f8b58d5bc0e47c6ad17216cc1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::FormalParmVFGNode::addCallPE</definition>
        <argsstring>(const CallPE *call)</argsstring>
        <name>addCallPE</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_p_e" kindref="compound">CallPE</ref> *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Return call edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/VFGNode.h" line="844" column="17" bodyfile="include/Graphs/VFGNode.h" bodystart="844" bodyend="847"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::ArgumentVFGNode</label>
        <link refid="class_s_v_f_1_1_argument_v_f_g_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>GenericVFGNodeTy</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="1">
        <label>SVF::FormalParmVFGNode</label>
        <link refid="class_s_v_f_1_1_formal_parm_v_f_g_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::VFGNode</label>
        <link refid="class_s_v_f_1_1_v_f_g_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::ArgumentVFGNode</label>
        <link refid="class_s_v_f_1_1_argument_v_f_g_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>param</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>GenericICFGNodeTy</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="9">
        <label>SVF::PAGNode</label>
        <link refid="class_s_v_f_1_1_p_a_g_node"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>GenericPAGNodeTy</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="7">
        <label>SVF::SVFFunction</label>
        <link refid="class_s_v_f_1_1_s_v_f_function"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>GenericVFGNodeTy</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="1">
        <label>SVF::FormalParmVFGNode</label>
        <link refid="class_s_v_f_1_1_formal_parm_v_f_g_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::ICFGNode</label>
        <link refid="class_s_v_f_1_1_i_c_f_g_node"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>fun</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::VFGNode</label>
        <link refid="class_s_v_f_1_1_v_f_g_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>icfgNode</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>SVF::SVFValue</label>
        <link refid="class_s_v_f_1_1_s_v_f_value"/>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/VFGNode.h" line="819" column="1" bodyfile="include/Graphs/VFGNode.h" bodystart="820" bodyend="881"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1af0dfc7f8b58d5bc0e47c6ad17216cc1e" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>addCallPE</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a93d217b0c9fd8008a2989ca2b4f3fbfb" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>addIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ae74283fbc788665296a69e56f334557b" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>addOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75af866301a661c59a7aa3182c0a7fc0c92" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Addr</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ab7a57e9eef84c1078593dfbe88de6f14" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>AParm</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ab6ba0a5a5e8d8d37dc5e2a46224fdbad" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>APIN</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a562b0ba840860c8eeaaca1a66e61b54f" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>APOUT</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a283c290539f7f46d3cd474137ff37dfb" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>ARet</name></member>
      <member refid="class_s_v_f_1_1_argument_v_f_g_node_1a0b35234b96e98099a289b73028bae276" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>ArgumentVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a0e99fed4f3145668652aad5a3700e337" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>BinaryOp</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ac2711b6bf2b27386def742aa0959ba35" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>callPEBegin</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ae9a11d1c9c646baecc4e510eb10fa515" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>callPEEnd</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1a8d124f42c320d38ddd08ed4948d63517" prot="private" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>callPEs</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a43b6b3dc747d310f793ca1b3bfa9d05f" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>CallPESet</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1af91ecca224b99cd6dd3b9b17ad0d8e6f" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ae4cac828eec4ac2f55ff9d580c855b34" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ad53fc9b2922c6c0145864bce59991d54" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1a691dc39c5ed3f3fa1ea518b5ec802c60" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a98fd43afc6615f418d2d96209eb31828" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Cmp</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a3c558955f60c237c558d8faafed781e8" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75af589a053fdb7efc728b68a324fc58b2b" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Copy</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a4ab1f2e5db301e4a37215905a22e6476" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directInEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ab331402aed245c33bad841df2bc21f7b" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directInEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a19599627ba095b5452373284deab7f6c" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directInEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa7be9ff204bf85bc3bf2fa4e078fcab2" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directInEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa0e258d3a92dae367f2809a6f16c80db" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directOutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1acfae7a2809931cbd62b6f47c4813510d" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directOutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a5950d69d4ba6c2122dd06b93911e4992" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directOutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7f914b128f7839483efc9ad56834e7c2" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>directOutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a458c626543431b4314f5f4f532eb51de" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1a4f51e718a8519f6edcee627cdd51b272" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75aeb82378d1c11bd6bf1776eb884cc4db7" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FParm</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a3c58aedc46cdafac26b47ec9674c2ac5" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FPIN</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ac2c5b04acc4f754e70a782adee522e09" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FPOUT</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ae1d2cab9f6995b89064c2405f8eaf053" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FRet</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ad8f56074e213d2e7dc1d22a1b0765f8c" prot="private" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>fun</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ac8494021a71efb0f6df237ff12561c8d" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>FunRet</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a03c6da4a73c47f84f5c5b47252bc339a" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>GEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1acdca5baae3e9e4208a60322fec9c9d3f" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>GenericNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75aa2dffaa8741582ce06e591cbaf9257d7" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Gep</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1a18157f92fd96f786c8e1ebc4c9c00994" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>getFun</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a0675465e11d1d42ee7e2b7ab3c5de829" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>getICFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>getId</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1afc8b5f86d7795b6a0dfc0687d942d79b" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>getInEdges</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a391e996d695b114530120723da1d003e" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>getNodeKind</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a2d9cd758d6f8c5189d9b90b74f43e009" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>getOutEdges</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1ab1a9031c1fc5102e072b5035151c131c" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>getParam</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>GNodeK</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a06a7373b11143e709784de784fa476fe" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>hasIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1add6b6b3bd45a9460335c5db9eda821b8" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>hasIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a0931220d7a38e03f206cbdc6465d32ad" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>hasOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa0c40cb708b39300b3cb7354194e4993" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>hasOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a54c631f1e39be144c0cd25373f6b98b8" prot="protected" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>icfgNode</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ae5b113921530eee6afe58a65d8e5b3a7" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>InEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7c0ff80b1c0ae8b76fc620f21495ca39" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>InEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1afe6a7b286d9af4992f41b59612fd2900" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>InEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a0118fbeb2b314dcdcb53c56a2a13ab07" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>InEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_argument_v_f_g_node_1ab891206b29c1cf7a732f09f5a187928e" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>isPTANode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a8b320525e5a0ed93030d578030761124" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a0dfbaf92c48e11aebc85760e6e799d80" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Load</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75abe59940f52e7a98cfe2b9d581e7563f8" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>MInterPhi</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75abde838081562229a5a5ca8bb250d5e18" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>MIntraPhi</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75aac6fa19473ed8b90a7fd8c9080e5e014" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>MPhi</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ad63e862eb1d1369bd69318fe698e4a22" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a6df3eccb26b5d699c8adbd563b31f2ff" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>NPtr</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa4f103330118c8976bf95e4bf53416eb" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>OutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a50219c203fb5a8a44fe22428699f26e7" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>OutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a19a3366fd8a58290d0c740c46c3dcb3d" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>OutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ace88b6c7561f61f747ff08f61e2c18bc" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>OutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_argument_v_f_g_node_1af220abd2d55eafa518160be5a5137e8f" prot="protected" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>param</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a56dff05dc2b3c5664d3b8fc1c6c927d5" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>removeIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7c6192cb176bda3fad1819711302e468" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>removeOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a367413b90de8a382190ffa9f0c742e01" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>RetPESet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a9c95dd4f0e70ccc4a03282cdddba95de" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>setICFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a6df1bb8732d5402a6f40209ea8b803e8" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>Store</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75aa501e9891cbacea3950d80aa6071ec69" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>TInterPhi</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a3d97c6d57d8d2e7387715f4eb719f727" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>TIntraPhi</name></member>
      <member refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1a5552cd32449249c1758ee8e222766b28" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>toString</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75ac0bc801ca111129101616fbd39cce950" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>TPhi</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75a31dae52a5c31284a8fe54294bd34a5dc" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>UnaryOp</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a775b3bd4c7558a18c5bc890fe711f03c" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>VFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_node_1a99a54cf322b0eec3a1ef109ce5f2db75" prot="public" virt="non-virtual"><scope>SVF::FormalParmVFGNode</scope><name>VFGNodeK</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a48a8d05b81b5c8099c3f3d1f2c4983a9" prot="public" virt="virtual"><scope>SVF::FormalParmVFGNode</scope><name>~GenericNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
