<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cond_points_to_set" xml:lang="en-US">
<title>SVF::CondPointsToSet&lt; Cond &gt; Class Template Reference</title>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;ConditionalPT.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aaddc3f78a624de59dda6f078ba63ba52"/>typedef Map&lt; Cond, PointsTo &gt; <emphasis role="strong">CondPts</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ad9e4dea4b65d5f4a903a3cf89a421077"/>typedef CondPts::iterator <emphasis role="strong">CondPtsIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aa9d3a8c42b6df3fa9c2e7bcd7af75e16"/>typedef CondPts::const_iterator <emphasis role="strong">CondPtsConstIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a0ef73bd2c1b42439ee6f265e07f17514"/>typedef <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link>&lt; Cond &gt; <emphasis role="strong">SingleCondVar</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a76d4c06b04161738351a813ae406aa83"/>typedef CondPtsSetIterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a3670dc2bb046f2d3e0d27dc02b32e62f"/><link linkend="_class_s_v_f_1_1_cond_points_to_set_1a3670dc2bb046f2d3e0d27dc02b32e62f">CondPointsToSet</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a7217769c21c50c44f139006ec44d3a6f"/><emphasis role="strong">CondPointsToSet</emphasis> (const Cond &amp;cond, const PointsTo &amp;pts)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aad144061d006968ff4d6d21488b84801"/><link linkend="_class_s_v_f_1_1_cond_points_to_set_1aad144061d006968ff4d6d21488b84801">CondPointsToSet</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;cptsSet)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a63f09ca69e00b317de29af6a6a12daac"/>CondPts &amp; <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a63f09ca69e00b317de29af6a6a12daac">pointsTo</link> (void)</para>

<para>Get Conditional PointsTo and starndard points-to. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ada240bc77570174a1d17ac097583fa78"/>const CondPts &amp; <emphasis role="strong">pointsTo</emphasis> (void) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a03311162626acf16ad05b7b93248a92b"/>const PointsTo &amp; <emphasis role="strong">pointsTo</emphasis> (Cond cond) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ab1d20dfe6f243f7a09a8e2face097cc0"/>bool <emphasis role="strong">hasPointsTo</emphasis> (Cond cond) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a8775ef2c073af6c8055c3f5b0035288f"/>PointsTo &amp; <emphasis role="strong">pointsTo</emphasis> (Cond cond)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1acc5c77fbd1a6133d5e80c3f587d49fb3"/>CondPtsIter <link linkend="_class_s_v_f_1_1_cond_points_to_set_1acc5c77fbd1a6133d5e80c3f587d49fb3">cptsBegin</link> ()</para>

<para>iterators </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a20026db57cfef6bf6a978140b2372cea"/>CondPtsIter <emphasis role="strong">cptsEnd</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ad26570b94c56d6d2ae1cd5093ac66670"/>CondPtsConstIter <emphasis role="strong">cptsBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aa4c47630b9a06d70375daf5e9237303d"/>CondPtsConstIter <emphasis role="strong">cptsEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ad81774f0ad13fb21579180fc15affd7b"/>void <emphasis role="strong">clear</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a8d8f9e91b62b94d876f34066de7944d4"/>unsigned <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a8d8f9e91b62b94d876f34066de7944d4">numElement</link> () const</para>

<para>Get number of points-to targets. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aca84f0f9e09686d9f30f309d36267aff"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1aca84f0f9e09686d9f30f309d36267aff">empty</link> () const</para>

<para>Return true if no element in the set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a42056d7b29e50a3ed8a8db95674d24b2"/><link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp; <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a42056d7b29e50a3ed8a8db95674d24b2">operator=</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;other)</para>

<para>Overloading operators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1abe02e0bdcfddde7251b7d35e916c8f02"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1abe02e0bdcfddde7251b7d35e916c8f02">operator==</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs) const</para>

<para>Overloading operator ==. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1afcbb2cae75a5dd7947cb22c440b8fd0b">aliased</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1acefec4fbacde1099d3dc81ab45ab9b8c"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1acefec4fbacde1099d3dc81ab45ab9b8c">isSubset</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs) const</para>

<para>Check whether this <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link> is a subset of RHS. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a89d24257bd1436286dcbb025dd405b52">intersects</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; *rhs) const</para>

<para>Return TRUE if this and RHS share any common element. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a57fdbfc5bc0bc7eb7a8efefdcc689852"/>void <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a57fdbfc5bc0bc7eb7a8efefdcc689852">intersectWithComplement</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;cpts1, const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;cpts2)</para>

<para>Result of cpts1 &amp; ~cpts2 is stored into this bitmap. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a5a7ab3c22b3726541955b5be8a62aab6">intersectWithComplement</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;cpts1)</para>

<para>Result of cur &amp; ~cpts1 is stored into this bitmap. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a089474fea28e27248f5f9d6721726c94"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a089474fea28e27248f5f9d6721726c94">operator&amp;=</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs)</para>

<para>Overloading operator &amp;=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1af06ca0ddfcdca69199fbc9ab42f98558"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1af06ca0ddfcdca69199fbc9ab42f98558">operator!=</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs)</para>

<para>Overloading operator !=. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a74c50cfaf788a828a4fc97eba703ec4e">operator|=</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a54d9d3f3a38bf4066cd930845f86a63c">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1ac29ac1adefca6b34cd8e83fe3f0b4450"/>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set_1ac29ac1adefca6b34cd8e83fe3f0b4450">test_and_set</link> (const <link linkend="_class_s_v_f_1_1_cond_var">SingleCondVar</link> &amp;var)</para>

<para>Test and set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a1613b690473a4fcbae7bc41c3c5347d7"/>bool <emphasis role="strong">test</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_var">SingleCondVar</link> &amp;var) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aadf2576b55bbdb82d7affc8466c09861"/>void <emphasis role="strong">set</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_var">SingleCondVar</link> &amp;var)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1aced740c1aadf06b4a63630844fac2dd8"/>void <emphasis role="strong">reset</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_var">SingleCondVar</link> &amp;var)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a01762af2a47a55ef7b926a0c682c6333"/>void <emphasis role="strong">dump</emphasis> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;O) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1abcd2c01ec21e30caa91dba06386912cb"/>std::string <emphasis role="strong">dumpStr</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a3521ec3be48cc03d9d3f562cb088a9ad"/>iterator <link linkend="_class_s_v_f_1_1_cond_points_to_set_1a3521ec3be48cc03d9d3f562cb088a9ad">begin</link> ()</para>

<para>iterators </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a5ead697952ada3fbb07da3459a2b1b86"/>iterator <emphasis role="strong">end</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1acec077e130e49ac66a5c3e464a73dec2"/>iterator <emphasis role="strong">begin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a537890d918d23abeea39bc73198f7365"/>iterator <emphasis role="strong">end</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Cond&gt;
class SVF::CondPointsToSet&lt; Cond &gt;</title></simplesect>


<para>Conditional Points-to set </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1afcbb2cae75a5dd7947cb22c440b8fd0b"/>    <section>
    <title>aliased()</title>
<indexterm><primary>aliased</primary><secondary>SVF::CondPointsToSet&lt; Cond &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary><secondary>aliased</secondary></indexterm>
<computeroutput>template&lt;class Cond &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet</link>&lt; Cond &gt;::aliased (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Two conditional points-to set are aliased when they access the same memory location under the same condition </para>
    </section><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a89d24257bd1436286dcbb025dd405b52"/>    <section>
    <title>intersects()</title>
<indexterm><primary>intersects</primary><secondary>SVF::CondPointsToSet&lt; Cond &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary><secondary>intersects</secondary></indexterm>
<computeroutput>template&lt;class Cond &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet</link>&lt; Cond &gt;::intersects (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; * rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return TRUE if this and RHS share any common element. </para>
</para>

<para>if either cpts is empty, just return.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a5a7ab3c22b3726541955b5be8a62aab6"/>    <section>
    <title>intersectWithComplement()</title>
<indexterm><primary>intersectWithComplement</primary><secondary>SVF::CondPointsToSet&lt; Cond &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary><secondary>intersectWithComplement</secondary></indexterm>
<computeroutput>template&lt;class Cond &gt; </computeroutput><para><computeroutput>void <link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet</link>&lt; Cond &gt;::intersectWithComplement (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp; cpts1)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Result of cur &amp; ~cpts1 is stored into this bitmap. </para>
</para>

<para>if either cpts is empty, just return.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a54d9d3f3a38bf4066cd930845f86a63c"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::CondPointsToSet&lt; Cond &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;class Cond &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet</link>&lt; Cond &gt;::operator&lt; (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Compare two <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link> according to their points-to set size and points-to elements.<orderedlist>
<listitem>
<para><link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link> with smaller points-to set size is smaller than the other;</para>
</listitem><listitem>
<para>If the sizes are equal, comparing the conditions and real points-to targets in their points-to elements. </para>
</listitem></orderedlist>
</para>
    </section><anchor xml:id="_class_s_v_f_1_1_cond_points_to_set_1a74c50cfaf788a828a4fc97eba703ec4e"/>    <section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>SVF::CondPointsToSet&lt; Cond &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondPointsToSet&lt; Cond &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;class Cond &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet</link>&lt; Cond &gt;::operator|= (const <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link>&lt; Cond &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Overloading operator |= Merge <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link> of RHS into this one. </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/ConditionalPT.h</section>
</section>
