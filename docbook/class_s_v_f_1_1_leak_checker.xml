<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_leak_checker" xml:lang="en-US">
<title>SVF::LeakChecker Class Reference</title>
<indexterm><primary>SVF::LeakChecker</primary></indexterm>
<para>
<computeroutput>#include &lt;LeakChecker.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::LeakChecker:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_leak_checker.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a42f54433e5ca60928f3c329ab545842d"/>enum <emphasis role="strong">LEAK_TYPE</emphasis> { <emphasis role="strong">NEVER_FREE_LEAK</emphasis>
, <emphasis role="strong">CONTEXT_LEAK</emphasis>
, <emphasis role="strong">PATH_LEAK</emphasis>
, <emphasis role="strong">GLOBAL_LEAK</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a47a79514e1fdc402453b864407aacd6a"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt; <emphasis role="strong">SVFGNodeToCSIDMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1ae4622afe7eae8f6d8a3616de70c09fe0"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt; <emphasis role="strong">CSWorkList</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1af1e1f0fd38f72dcdfb5daa3d8af9538b"/>typedef <link linkend="_class_s_v_f_1_1_prog_slice_1a684e44ade783439c6f77a8d84eed282c">ProgSlice::VFWorkList</link> <emphasis role="strong">WorkList</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a65b05e30410e40fe64d41f71516cd367"/>typedef NodeBS <emphasis role="strong">SVFGNodeBS</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1af1140475e97947d193784d2b90809036"/><link linkend="_class_s_v_f_1_1_leak_checker_1af1140475e97947d193784d2b90809036">LeakChecker</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a1c47ce036a7ffcd7cbe5d5e372a30208"/>virtual <link linkend="_class_s_v_f_1_1_leak_checker_1a1c47ce036a7ffcd7cbe5d5e372a30208">~LeakChecker</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_leak_checker_1ab3bb79d88d73c8b881d714921e7b5e12">runOnModule</link> (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> *module)</para>

<para>We start from here. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_leak_checker_1a459205dd6bb225e48bfd0ef274555e47">initSrcs</link> ()</para>

<para>Initialize sources and sinks. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_leak_checker_1a5a40ee40e8e780f316f9f7cfadd655c2">initSnks</link> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1ad837e251ec0d3aa1f04748a59930fd7c"/>virtual bool <link linkend="_class_s_v_f_1_1_leak_checker_1ad837e251ec0d3aa1f04748a59930fd7c">isSourceLikeFun</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>

<para>Whether the function is a heap allocator/reallocator (allocate memory) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1aed909eededb365814a625abf9039d3a7"/>virtual bool <link linkend="_class_s_v_f_1_1_leak_checker_1aed909eededb365814a625abf9039d3a7">isSinkLikeFun</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>

<para>Whether the function is a heap deallocator (free/release memory) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1af792e4592732e0bb935f893405a9e2f3"/>bool <link linkend="_class_s_v_f_1_1_leak_checker_1af792e4592732e0bb935f893405a9e2f3">isSource</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>

<para>A <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> node is source if it is an actualRet at malloc site. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1ad3fc1b8ff5d6042ca18e7ce563c33694"/>bool <link linkend="_class_s_v_f_1_1_leak_checker_1ad3fc1b8ff5d6042ca18e7ce563c33694">isSink</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>

<para>A <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> node is source if it is an actual parameter at dealloca site. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a5d8f0d698b354f4c28fef9c51ac39bb6"/>virtual void <link linkend="_class_s_v_f_1_1_leak_checker_1a5d8f0d698b354f4c28fef9c51ac39bb6">reportBug</link> (<link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> *slice)</para>

<para>Report leaks. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a7b6710c3b56141a249bfc29fb6181583"/>void <emphasis role="strong">reportNeverFree</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a93486083c0f186b91e655cbef2382634"/>void <emphasis role="strong">reportPartialLeak</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_leak_checker_1aaf5d098e0d08929a108fb59bff46e424">testsValidation</link> (const <link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> *slice)</para>

<para>Validate test cases for regression test purpose. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a0aa051a956b61cad9ec5419f33829e6a"/>void <emphasis role="strong">validateSuccessTests</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *source, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1af098d01a353a217bd54a90f92f62a45f"/>void <emphasis role="strong">validateExpectedFailureTests</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *source, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a5046d4a090560dd6f4ffd85631086b10"/>void <link linkend="_class_s_v_f_1_1_leak_checker_1a5046d4a090560dd6f4ffd85631086b10">addSrcToCSID</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs)</para>

<para>Record a source to its callsite. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a4918e3e3e289cc39f3442cb26f28bcc4"/>const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * <emphasis role="strong">getSrcCSID</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Static Memory Leak Detector </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_leak_checker_1a5a40ee40e8e780f316f9f7cfadd655c2"/>    <section>
    <title>initSnks()</title>
<indexterm><primary>initSnks</primary><secondary>SVF::LeakChecker</secondary></indexterm>
<indexterm><primary>SVF::LeakChecker</primary><secondary>initSnks</secondary></indexterm>
<para><computeroutput>void LeakChecker::initSnks ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Initialize sinks </para>

<para>we only choose pointer parameters among all the actual parameters</para>
<para>
Implements <link linkend="_class_s_v_f_1_1_src_snk_d_d_a">SVF::SrcSnkDDA</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_leak_checker_1a459205dd6bb225e48bfd0ef274555e47"/>    <section>
    <title>initSrcs()</title>
<indexterm><primary>initSrcs</primary><secondary>SVF::LeakChecker</secondary></indexterm>
<indexterm><primary>SVF::LeakChecker</primary><secondary>initSrcs</secondary></indexterm>
<para><computeroutput>void LeakChecker::initSrcs ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Initialize sources and sinks. </para>
</para>

<para>Initialize sources and sinks</para>

<para>Initialize sources </para>

<para>if this callsite return reside in a dead function then we do not care about its leaks for example instruction p = malloc is in a dead function, then program won&apos;t allocate this memory</para>
<para>
Implements <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a1c8f91ffa0b9f01d51c8cd5e14f076d5">SVF::SrcSnkDDA</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_leak_checker_1ab3bb79d88d73c8b881d714921e7b5e12"/>    <section>
    <title>runOnModule()</title>
<indexterm><primary>runOnModule</primary><secondary>SVF::LeakChecker</secondary></indexterm>
<indexterm><primary>SVF::LeakChecker</primary><secondary>runOnModule</secondary></indexterm>
<para><computeroutput>virtual bool SVF::LeakChecker::runOnModule (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * module)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>We start from here. </para>
</para>

<para>start analysis</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_file_checker_1a98a68536b8ffdb2250bbb01437598ac3">SVF::FileChecker</link>, and <link linkend="_class_s_v_f_1_1_double_free_checker_1a71c9f9450e369d1196c49b7d9019dbda">SVF::DoubleFreeChecker</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_leak_checker_1aaf5d098e0d08929a108fb59bff46e424"/>    <section>
    <title>testsValidation()</title>
<indexterm><primary>testsValidation</primary><secondary>SVF::LeakChecker</secondary></indexterm>
<indexterm><primary>SVF::LeakChecker</primary><secondary>testsValidation</secondary></indexterm>
<para><computeroutput>void LeakChecker::testsValidation (const <link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> * slice)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Validate test cases for regression test purpose. </para>
</para>

<para>Validate test cases for regression test purpose </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/SABER/LeakChecker.hlib/SABER/LeakChecker.cpp</section>
</section>
