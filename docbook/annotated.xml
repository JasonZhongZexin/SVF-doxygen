<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_class_race_result_validator_1_1_access_pair">RaceResultValidator::AccessPair</link><link linkend="_class_s_v_f_1_1_actual_i_n_s_v_f_g_node">SVF::ActualINSVFGNode</link><link linkend="_class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node">SVF::ActualOUTSVFGNode</link><link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">SVF::ActualParmVFGNode</link><link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">SVF::ActualRetVFGNode</link><link linkend="_class_s_v_f_1_1_addr_c_g_edge">SVF::AddrCGEdge</link><link linkend="_class_s_v_f_1_1_addr_p_e">SVF::AddrPE</link><link linkend="_class_s_v_f_1_1_addr_v_f_g_node">SVF::AddrVFGNode</link><link linkend="_class_s_v_f_1_1_alias_d_d_a_client">SVF::AliasDDAClient</link><link linkend="_class_s_v_f_1_1_andersen">SVF::Andersen</link><link linkend="_class_s_v_f_1_1_andersen_base">SVF::AndersenBase</link><link linkend="_class_s_v_f_1_1_andersen_h_c_d">SVF::AndersenHCD</link><link linkend="_class_s_v_f_1_1_andersen_h_l_c_d">SVF::AndersenHLCD</link><link linkend="_class_s_v_f_1_1_andersen_l_c_d">SVF::AndersenLCD</link><link linkend="_class_s_v_f_1_1_andersen_s_c_d">SVF::AndersenSCD</link><link linkend="_class_s_v_f_1_1_andersen_s_f_r">SVF::AndersenSFR</link><link linkend="_class_s_v_f_1_1_andersen_stat">SVF::AndersenStat</link><link linkend="_class_s_v_f_1_1_andersen_wave_diff">SVF::AndersenWaveDiff</link><link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type">SVF::AndersenWaveDiffWithType</link><link linkend="_class_s_v_f_1_1_annotator">SVF::Annotator</link><link linkend="_class_s_v_f_1_1_argument_v_f_g_node">SVF::ArgumentVFGNode</link><link linkend="_class_s_v_f_1_1_bdd_cond_manager">SVF::BddCondManager</link><link linkend="_class_s_v_f_1_1_binary_o_p_p_e">SVF::BinaryOPPE</link><link linkend="_class_s_v_f_1_1_binary_o_p_v_f_g_node">SVF::BinaryOPVFGNode</link><link linkend="_class_s_v_f_1_1_break_constant_g_e_ps">SVF::BreakConstantGEPs</link><link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">SVF::BVDataPTAImpl</link><link linkend="_class_s_v_f_1_1_call_block_node">SVF::CallBlockNode</link><link linkend="_class_s_v_f_1_1_call_c_f_g_edge">SVF::CallCFGEdge</link><link linkend="_class_s_v_f_1_1_call_c_h_i">SVF::CallCHI&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_call_dir_s_v_f_g_edge">SVF::CallDirSVFGEdge</link><link linkend="_class_s_v_f_1_1_call_graph_builder">SVF::CallGraphBuilder</link><link linkend="_class_s_v_f_1_1_call_ind_s_v_f_g_edge">SVF::CallIndSVFGEdge</link><link linkend="_class_s_v_f_1_1_call_m_u">SVF::CallMU&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_call_p_e">SVF::CallPE</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__convert__val">SVF::SVFUtil::cast_convert_val&lt; To, From, SimpleFrom &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__convert__val_3_01_to_00_01_from_ty_00_01_from_ty_01_4">SVF::SVFUtil::cast_convert_val&lt; To, FromTy, FromTy &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty">SVF::SVFUtil::cast_retty&lt; To, From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl">SVF::SVFUtil::cast_retty_impl&lt; To, From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_5_01_4">SVF::SVFUtil::cast_retty_impl&lt; To, const From * &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_5const_01_4">SVF::SVFUtil::cast_retty_impl&lt; To, const From *const &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01const_01_from_01_4">SVF::SVFUtil::cast_retty_impl&lt; To, const From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01_from_01_5_01_4">SVF::SVFUtil::cast_retty_impl&lt; To, From * &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__impl_3_01_to_00_01std_1_1unique__ptr_3_01_from_01_4_01_4">SVF::SVFUtil::cast_retty_impl&lt; To, std::unique_ptr&lt; From &gt; &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__wrap">SVF::SVFUtil::cast_retty_wrap&lt; To, From, SimpleFrom &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1cast__retty__wrap_3_01_to_00_01_from_ty_00_01_from_ty_01_4">SVF::SVFUtil::cast_retty_wrap&lt; To, FromTy, FromTy &gt;</link><link linkend="_class_s_v_f_1_1_c_f_l_solver">SVF::CFLSolver&lt; GraphType, DPIm &gt;</link><link linkend="_class_s_v_f_1_1_c_h_edge">SVF::CHEdge</link><link linkend="_class_s_v_f_1_1_c_h_graph">SVF::CHGraph</link><link linkend="_class_s_v_f_1_1_c_h_node">SVF::CHNode</link><link linkend="_class_s_v_f_1_1_clone_dummy_obj_p_n">SVF::CloneDummyObjPN</link><link linkend="_class_s_v_f_1_1_clone_f_i_obj_p_n">SVF::CloneFIObjPN</link><link linkend="_class_s_v_f_1_1_clone_gep_obj_p_n">SVF::CloneGepObjPN</link><link linkend="_class_s_v_f_1_1_cmp_p_e">SVF::CmpPE</link><link linkend="_class_s_v_f_1_1_cmp_v_f_g_node">SVF::CmpVFGNode</link><link linkend="_class_s_v_f_1_1_common_c_h_graph">SVF::CommonCHGraph</link>
<para>Common base for class hierarchy graph. Only implements what <link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> needs </para>
<link linkend="_class_s_v_f_1_1_cond_points_to_set">SVF::CondPointsToSet&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_cond_p_t_a_impl">SVF::CondPTAImpl&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_cond_std_set">SVF::CondStdSet&lt; Element &gt;</link><link linkend="_class_s_v_f_1_1_cond_var">SVF::CondVar&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_constraint_edge">SVF::ConstraintEdge</link><link linkend="_class_s_v_f_1_1_constraint_graph">SVF::ConstraintGraph</link><link linkend="_class_s_v_f_1_1_constraint_node">SVF::ConstraintNode</link><link linkend="_class_s_v_f_1_1_context_cond">SVF::ContextCond</link><link linkend="_class_s_v_f_1_1_context_d_d_a">SVF::ContextDDA</link><link linkend="_class_s_v_f_1_1_copy_c_g_edge">SVF::CopyCGEdge</link><link linkend="_class_s_v_f_1_1_copy_p_e">SVF::CopyPE</link><link linkend="_class_s_v_f_1_1_copy_v_f_g_node">SVF::CopyVFGNode</link><link linkend="_class_s_v_f_1_1_c_s_c">SVF::CSC</link><link linkend="_structcudd_path_pair">cuddPathPair</link><link linkend="_class_s_v_f_1_1_cxt_d_p_item">SVF::CxtDPItem</link><link linkend="_class_s_v_f_1_1_cxt_proc">SVF::CxtProc</link><link linkend="_class_s_v_f_1_1_cxt_stmt">SVF::CxtStmt</link><link linkend="_class_s_v_f_1_1_cxt_stmt_d_p_item">SVF::CxtStmtDPItem&lt; LocCond &gt;</link><link linkend="_class_s_v_f_1_1_cxt_thread">SVF::CxtThread</link><link linkend="_class_s_v_f_1_1_cxt_thread_proc">SVF::CxtThreadProc</link><link linkend="_class_s_v_f_1_1_cxt_thread_stmt">SVF::CxtThreadStmt</link><link linkend="_class_s_v_f_1_1_d_c_h_edge">SVF::DCHEdge</link><link linkend="_class_s_v_f_1_1_d_c_h_graph">SVF::DCHGraph</link>
<para>Dwarf based CHG </para>
<link linkend="_class_s_v_f_1_1_d_c_h_node">SVF::DCHNode</link><link linkend="_class_s_v_f_1_1_d_d_a_client">SVF::DDAClient</link><link linkend="_class_s_v_f_1_1_d_d_a_pass">SVF::DDAPass</link><link linkend="_class_s_v_f_1_1_d_d_a_stat">SVF::DDAStat</link><link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">SVF::DDAVFSolver&lt; CVar, CPtSet, DPIm &gt;</link><link linkend="_struct_dd_cache">DdCache</link><link linkend="_struct_dd_children">DdChildren</link><link linkend="_struct_dd_gen">DdGen</link><link linkend="_struct_dd_hash_item">DdHashItem</link><link linkend="_struct_dd_hash_table">DdHashTable</link><link linkend="_struct_dd_hook">DdHook</link><link linkend="_struct_dd_level_queue">DdLevelQueue</link><link linkend="_struct_dd_local_cache">DdLocalCache</link><link linkend="_struct_dd_local_cache_item">DdLocalCacheItem</link><link linkend="_struct_dd_manager">DdManager</link><link linkend="_struct_dd_node">DdNode</link><link linkend="_struct_dd_queue_item">DdQueueItem</link><link linkend="_struct_dd_subtable">DdSubtable</link><link linkend="_struct_s_v_f_1_1cpp_util_1_1_demangled_name">SVF::cppUtil::DemangledName</link><link linkend="_class_s_v_f_1_1_d_f_p_t_data">SVF::DFPTData&lt; Key, Datum, Data &gt;</link><link linkend="_class_s_v_f_1_1_diff_p_t_data">SVF::DiffPTData&lt; Key, Datum, Data &gt;</link><link linkend="_class_s_v_f_1_1_direct_s_v_f_g_edge">SVF::DirectSVFGEdge</link><link linkend="_class_s_v_f_1_1_distinct_m_r_g">SVF::DistinctMRG</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_c_h_graph_01_5_01_4">llvm::DOTGraphTraits&lt; CHGraph * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_constraint_graph_01_5_01_4">llvm::DOTGraphTraits&lt; ConstraintGraph * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_i_c_f_g_01_5_01_4">llvm::DOTGraphTraits&lt; ICFG * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_offline_cons_g_01_5_01_4">llvm::DOTGraphTraits&lt; OfflineConsG * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_p_a_g_01_5_01_4">llvm::DOTGraphTraits&lt; PAG * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_p_t_a_call_graph_01_5_01_4">llvm::DOTGraphTraits&lt; PTACallGraph * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_s_v_f_g_01_5_01_4">llvm::DOTGraphTraits&lt; SVFG * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_t_c_t_01_5_01_4">llvm::DOTGraphTraits&lt; TCT * &gt;</link><link linkend="_structllvm_1_1_d_o_t_graph_traits_3_01_v_f_g_01_5_01_4">llvm::DOTGraphTraits&lt; VFG * &gt;</link><link linkend="_class_s_v_f_1_1_double_free_checker">SVF::DoubleFreeChecker</link><link linkend="_class_s_v_f_1_1_d_p_item">SVF::DPItem</link><link linkend="_class_s_v_f_1_1_dummy_obj_p_n">SVF::DummyObjPN</link><link linkend="_class_s_v_f_1_1_dummy_val_p_n">SVF::DummyValPN</link><link linkend="_class_s_v_f_1_1_entry_c_h_i">SVF::EntryCHI&lt; Cond &gt;</link><link linkend="_struct_ep_double_struct">EpDoubleStruct</link><link linkend="_union_ep_type_union">EpTypeUnion</link><link linkend="_struct_s_v_f_1_1_generic_edge_1_1equal_g_edge">SVF::GenericEdge&lt; NodeTy &gt;::equalGEdge</link>
<para>Add the hash function for std::set (we also can overload operator&lt; to implement this) </para>
<link linkend="_struct_s_v_f_1_1_mem_region_1_1equal_mem_region">SVF::MemRegion::equalMemRegion</link><link linkend="_struct_s_v_f_1_1_mem_region_1_1equal_points_to">SVF::MemRegion::equalPointsTo</link><link linkend="_class_s_v_f_1_1_ext_a_p_i">SVF::ExtAPI</link><link linkend="_class_s_v_f_1_1_external_p_a_g">SVF::ExternalPAG</link><link linkend="_class_s_v_f_1_1_field_info">SVF::FieldInfo</link><link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">SVF::FIFOWorkList&lt; Data &gt;</link><link linkend="_class_s_v_f_1_1_file_checker">SVF::FileChecker</link><link linkend="_class_s_v_f_1_1_f_i_l_o_work_list">SVF::FILOWorkList&lt; Data &gt;</link><link linkend="_class_s_v_f_1_1_f_i_obj_p_n">SVF::FIObjPN</link><link linkend="_class_s_v_f_1_1_flow_d_d_a">SVF::FlowDDA</link><link linkend="_class_s_v_f_1_1_flow_sensitive">SVF::FlowSensitive</link><link linkend="_class_s_v_f_1_1_flow_sensitive_stat">SVF::FlowSensitiveStat</link><link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c">SVF::FlowSensitiveTBHC</link><link linkend="_class_s_v_f_1_1_fork_join_analysis">SVF::ForkJoinAnalysis</link><link linkend="_class_s_v_f_1_1_formal_i_n_s_v_f_g_node">SVF::FormalINSVFGNode</link><link linkend="_class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node">SVF::FormalOUTSVFGNode</link><link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">SVF::FormalParmVFGNode</link><link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">SVF::FormalRetVFGNode</link><link linkend="_class_s_v_f_1_1_f_s_m_p_t_a">SVF::FSMPTA</link><link linkend="_class_s_v_f_1_1_fun_entry_block_node">SVF::FunEntryBlockNode</link><link linkend="_class_s_v_f_1_1_fun_exit_block_node">SVF::FunExitBlockNode</link><link linkend="_class_s_v_f_1_1_funptr_d_d_a_client">SVF::FunptrDDAClient</link><link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">llvm::generic_bridge_gep_type_iterator&lt; ItTy &gt;</link><link linkend="_class_s_v_f_1_1_generic_edge">SVF::GenericEdge&lt; NodeTy &gt;</link><link linkend="_class_s_v_f_1_1_generic_graph">SVF::GenericGraph&lt; NodeTy, EdgeTy &gt;</link><link linkend="_class_s_v_f_1_1_generic_node">SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</link><link linkend="_class_s_v_f_1_1_gep_c_g_edge">SVF::GepCGEdge</link><link linkend="_class_s_v_f_1_1_gep_obj_p_n">SVF::GepObjPN</link><link linkend="_class_s_v_f_1_1_gep_p_e">SVF::GepPE</link><link linkend="_class_s_v_f_1_1_gep_val_p_n">SVF::GepValPN</link><link linkend="_class_s_v_f_1_1_gep_v_f_g_node">SVF::GepVFGNode</link><link linkend="_class_s_v_f_1_1_global_block_node">SVF::GlobalBlockNode</link><link linkend="_class_s_v_f_1_1_s_c_c_detection_1_1_g_node_s_c_c_info">SVF::SCCDetection&lt; GraphType &gt;::GNodeSCCInfo</link><link linkend="_classllvm_1_1_graph_printer">llvm::GraphPrinter</link><link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_c_h_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::CHNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_constraint_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::ConstraintNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for Value flow node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::DCHNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt; &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::ICFGNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::PAGNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for PAG node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::PTACallGraphNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::TCTNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for Value flow node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4_01_4">llvm::GraphTraits&lt; Inverse&lt; SVF::VFGNode * &gt; &gt;</link>
<para>Inverse GraphTraits specializations for call graph node, it is used for inverse traversal </para>
<link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_graph_01_5_01_4">llvm::GraphTraits&lt; SVF::CHGraph * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_c_h_node_01_5_01_4">llvm::GraphTraits&lt; SVF::CHNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_graph_01_5_01_4">llvm::GraphTraits&lt; SVF::ConstraintGraph * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_constraint_node_01_5_01_4">llvm::GraphTraits&lt; SVF::ConstraintNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_graph_01_5_01_4">llvm::GraphTraits&lt; SVF::DCHGraph * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_d_c_h_node_01_5_01_4">llvm::GraphTraits&lt; SVF::DCHNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_graph_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4">llvm::GraphTraits&lt; SVF::GenericGraph&lt; NodeTy, EdgeTy &gt; * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_generic_node_3_01_node_ty_00_01_edge_ty_01_4_01_5_01_4">llvm::GraphTraits&lt; SVF::GenericNode&lt; NodeTy, EdgeTy &gt; * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_01_5_01_4">llvm::GraphTraits&lt; SVF::ICFG * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_i_c_f_g_node_01_5_01_4">llvm::GraphTraits&lt; SVF::ICFGNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_offline_cons_g_01_5_01_4">llvm::GraphTraits&lt; SVF::OfflineConsG * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_01_5_01_4">llvm::GraphTraits&lt; SVF::PAG * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_a_g_node_01_5_01_4">llvm::GraphTraits&lt; SVF::PAGNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_01_5_01_4">llvm::GraphTraits&lt; SVF::PTACallGraph * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_p_t_a_call_graph_node_01_5_01_4">llvm::GraphTraits&lt; SVF::PTACallGraphNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_s_v_f_g_01_5_01_4">llvm::GraphTraits&lt; SVF::SVFG * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_01_5_01_4">llvm::GraphTraits&lt; SVF::TCT * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_t_c_t_node_01_5_01_4">llvm::GraphTraits&lt; SVF::TCTNode * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_01_5_01_4">llvm::GraphTraits&lt; SVF::VFG * &gt;</link><link linkend="_structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4">llvm::GraphTraits&lt; SVF::VFGNode * &gt;</link><link linkend="_unionhack">hack</link><link linkend="_class_s_v_f_1_1_hare_par_for_edge">SVF::HareParForEdge</link><link linkend="_structstd_1_1hash_3_01const_01_s_v_f_1_1_cond_var_3_01_cond_01_4_01_4">std::hash&lt; const SVF::CondVar&lt; Cond &gt; &gt;</link>
<para>Specialise hash for CondVar </para>
<link linkend="_structstd_1_1hash_3_01const_01_s_v_f_1_1_context_cond_01_4">std::hash&lt; const SVF::ContextCond &gt;</link>
<para>Specialise hash for ContextCond </para>
<link linkend="_structstd_1_1hash_3_01llvm_1_1_sparse_bit_vector_3_4_01_4">std::hash&lt; llvm::SparseBitVector&lt;&gt; &gt;</link>
<para>Specialise hash for SparseBitVectors </para>
<link linkend="_structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4">std::hash&lt; std::pair&lt; T, U &gt; &gt;</link>
<para>Specialise hash for pairs </para>
<link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_call_site_01_4">std::hash&lt; SVF::CallSite &gt;</link>
<para>Specialise hash for CallSites </para>
<link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_cond_var_3_01_cond_01_4_01_4">std::hash&lt; SVF::CondVar&lt; Cond &gt; &gt;</link><link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_context_cond_01_4">std::hash&lt; SVF::ContextCond &gt;</link><link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_cxt_d_p_item_01_4">std::hash&lt; SVF::CxtDPItem &gt;</link>
<para>Specialise hash for CxtDPItem </para>
<link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_cxt_stmt_d_p_item_3_01_loc_cond_01_4_01_4">std::hash&lt; SVF::CxtStmtDPItem&lt; LocCond &gt; &gt;</link>
<para>Specialise hash for CxtStmtDPItem </para>
<link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_location_set_01_4">std::hash&lt; SVF::LocationSet &gt;</link><link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_small_vector_3_01_t_00_01_n_01_4_01_4">std::hash&lt; SVF::SmallVector&lt; T, N &gt; &gt;</link>
<para>Specialise hash for SmallVectors </para>
<link linkend="_structstd_1_1hash_3_01_s_v_f_1_1_stmt_d_p_item_3_01_loc_cond_01_4_01_4">std::hash&lt; SVF::StmtDPItem&lt; LocCond &gt; &gt;</link>
<para>Specialise hash for StmtDPItem </para>
<link linkend="_class_s_v_f_1_1_i_c_f_g">SVF::ICFG</link><link linkend="_class_s_v_f_1_1_i_c_f_g_builder">SVF::ICFGBuilder</link><link linkend="_class_s_v_f_1_1_i_c_f_g_edge">SVF::ICFGEdge</link><link linkend="_class_s_v_f_1_1_i_c_f_g_node">SVF::ICFGNode</link><link linkend="_class_s_v_f_1_1_i_c_f_g_printer">SVF::ICFGPrinter</link><link linkend="_class_s_v_f_1_1_i_c_f_g_stat">SVF::ICFGStat</link><link linkend="_struct_ieee_double_struct">IeeeDoubleStruct</link><link linkend="_struct_ieee_nan_struct">IeeeNanStruct</link><link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data">SVF::IncMutableDFPTData&lt; Key, Datum, Data &gt;</link>
<para>Incremental version of the mutable data-flow points-to data structure </para>
<link linkend="_class_s_v_f_1_1_indirect_s_v_f_g_edge">SVF::IndirectSVFGEdge</link><link linkend="_class_s_v_f_1_1_inter_block_node">SVF::InterBlockNode</link><link linkend="_class_s_v_f_1_1_inter_disjoint_m_r_g">SVF::InterDisjointMRG</link><link linkend="_class_s_v_f_1_1_inter_m_s_s_a_p_h_i_s_v_f_g_node">SVF::InterMSSAPHISVFGNode</link><link linkend="_class_s_v_f_1_1_inter_p_h_i_v_f_g_node">SVF::InterPHIVFGNode</link><link linkend="_class_s_v_f_1_1_intra_block_node">SVF::IntraBlockNode</link><link linkend="_class_s_v_f_1_1_intra_c_f_g_edge">SVF::IntraCFGEdge</link><link linkend="_class_s_v_f_1_1_intra_dir_s_v_f_g_edge">SVF::IntraDirSVFGEdge</link><link linkend="_class_s_v_f_1_1_intra_disjoint_m_r_g">SVF::IntraDisjointMRG</link><link linkend="_class_s_v_f_1_1_intra_ind_s_v_f_g_edge">SVF::IntraIndSVFGEdge</link><link linkend="_class_s_v_f_1_1_intra_m_s_s_a_p_h_i_s_v_f_g_node">SVF::IntraMSSAPHISVFGNode</link><link linkend="_class_s_v_f_1_1_intra_p_h_i_v_f_g_node">SVF::IntraPHIVFGNode</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1is__simple__type">SVF::SVFUtil::is_simple_type&lt; X &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl">SVF::SVFUtil::isa_impl&lt; To, From, Enabler &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl_3_01_to_00_01_from_00_01typename_01std_1_1enable__if_3_102dd3131e5bd0494ea1ecbf8d46f5b8">SVF::SVFUtil::isa_impl&lt; To, From, typename std::enable_if&lt; std::is_base_of&lt; To, From &gt;::value &gt;::type &gt;</link>
<para>Always allow upcasts, and perform no dynamic check for them </para>
<link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl">SVF::SVFUtil::isa_impl_cl&lt; To, From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_5_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, const From * &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_5const_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, const From *const &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01_from_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, const From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01const_01std_1_1unique__ptr_3_01_from_01_4_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, const std::unique_ptr&lt; From &gt; &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01_from_01_5_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, From * &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__cl_3_01_to_00_01_from_01_5const_01_4">SVF::SVFUtil::isa_impl_cl&lt; To, From *const &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__wrap">SVF::SVFUtil::isa_impl_wrap&lt; To, From, SimpleFrom &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1isa__impl__wrap_3_01_to_00_01_from_ty_00_01_from_ty_01_4">SVF::SVFUtil::isa_impl_wrap&lt; To, FromTy, FromTy &gt;</link><link linkend="_class_s_v_f_1_1_iterated_dominance_frontier">SVF::IteratedDominanceFrontier</link><link linkend="_class_s_v_f_1_1_leak_checker">SVF::LeakChecker</link><link linkend="_class_s_v_f_1_1_list">SVF::List&lt; Data &gt;</link><link linkend="_class_s_v_f_1_1_l_l_v_m_module_set">SVF::LLVMModuleSet</link><link linkend="_class_s_v_f_1_1_load_c_g_edge">SVF::LoadCGEdge</link><link linkend="_class_s_v_f_1_1_load_m_u">SVF::LoadMU&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_load_p_e">SVF::LoadPE</link><link linkend="_class_s_v_f_1_1_load_v_f_g_node">SVF::LoadVFGNode</link><link linkend="_class_s_v_f_1_1_location_set">SVF::LocationSet</link><link linkend="_class_s_v_f_1_1_lock_analysis">SVF::LockAnalysis</link><link linkend="_class_s_v_f_1_1_lock_validator">SVF::LockValidator</link><link linkend="_class_s_v_f_1_1_loc_obj_type_info">SVF::LocObjTypeInfo</link><link linkend="_class_s_v_f_1_1_loc_sym_table_info">SVF::LocSymTableInfo</link><link linkend="_class_s_v_f_1_1_mem_obj">SVF::MemObj</link><link linkend="_class_s_v_f_1_1_mem_region">SVF::MemRegion</link>
<para>Memory Region class </para>
<link linkend="_class_s_v_f_1_1_mem_s_s_a">SVF::MemSSA</link><link linkend="_class_s_v_f_1_1_mem_s_s_a_d_f">SVF::MemSSADF</link><link linkend="_class_s_v_f_1_1_mem_s_s_a_stat">SVF::MemSSAStat</link><link linkend="_class_s_v_f_1_1_merge_function_rets">SVF::MergeFunctionRets</link><link linkend="_class_s_v_f_1_1_m_h_p">SVF::MHP</link><link linkend="_class_s_v_f_1_1_m_h_p_validator">SVF::MHPValidator</link><link linkend="_struct_move">Move</link><link linkend="_class_s_v_f_1_1_m_r_generator">SVF::MRGenerator</link><link linkend="_class_s_v_f_1_1_m_r_s_v_f_g_node">SVF::MRSVFGNode</link><link linkend="_class_s_v_f_1_1_m_r_ver">SVF::MRVer</link><link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">SVF::MSSACHI&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_m_s_s_a_d_e_f">SVF::MSSADEF</link><link linkend="_class_s_v_f_1_1_m_s_s_a_m_u">SVF::MSSAMU&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">SVF::MSSAPHI&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i_s_v_f_g_node">SVF::MSSAPHISVFGNode</link><link linkend="_class_s_v_f_1_1_m_t_a">SVF::MTA</link><link linkend="_class_s_v_f_1_1_m_t_a_annotator">SVF::MTAAnnotator</link><link linkend="_class_m_t_a_result_validator">MTAResultValidator</link><link linkend="_class_s_v_f_1_1_m_t_a_stat">SVF::MTAStat</link><link linkend="_class_s_v_f_1_1_m_t_a_s_v_f_g_builder">SVF::MTASVFGBuilder</link><link linkend="_struct_mtr_node">MtrNode</link><link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</link><link linkend="_class_s_v_f_1_1_mutable_diff_p_t_data">SVF::MutableDiffPTData&lt; Key, Datum, Data &gt;</link>
<para><link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link> implemented with points-to sets which are updated continuously </para>
<link linkend="_class_s_v_f_1_1_mutable_p_t_data">SVF::MutablePTData&lt; Key, Datum, Data &gt;</link>
<para><link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> implemented using points-to sets which are created once and updated continuously </para>
<link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</link><link linkend="_class_s_v_f_1_1_node_i_d_allocator">SVF::NodeIDAllocator</link><link linkend="_class_s_v_f_1_1_normal_gep_c_g_edge">SVF::NormalGepCGEdge</link><link linkend="_class_s_v_f_1_1_normal_gep_p_e">SVF::NormalGepPE</link><link linkend="_class_s_v_f_1_1_null_ptr_v_f_g_node">SVF::NullPtrVFGNode</link><link linkend="_class_s_v_f_1_1_obj_p_n">SVF::ObjPN</link><link linkend="_class_s_v_f_1_1_obj_type_info">SVF::ObjTypeInfo</link><link linkend="_class_s_v_f_1_1_offline_cons_g">SVF::OfflineConsG</link><link linkend="_class_s_v_f_1_1_p_a_g">SVF::PAG</link><link linkend="_class_s_v_f_1_1_p_a_g_builder">SVF::PAGBuilder</link><link linkend="_class_s_v_f_1_1_p_a_g_builder_from_file">SVF::PAGBuilderFromFile</link><link linkend="_class_s_v_f_1_1_p_a_g_edge">SVF::PAGEdge</link><link linkend="_class_s_v_f_1_1_p_a_g_node">SVF::PAGNode</link><link linkend="_class_s_v_f_1_1_path_cond_allocator">SVF::PathCondAllocator</link><link linkend="_class_s_v_f_1_1_path_stmt_d_p_item">SVF::PathStmtDPItem&lt; LocCond &gt;</link><link linkend="_class_s_v_f_1_1_p_c_g">SVF::PCG</link><link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">SVF::PHIVFGNode</link><link linkend="_class_s_v_f_1_1_pointer_analysis">SVF::PointerAnalysis</link><link linkend="_class_s_v_f_1_1_prog_slice">SVF::ProgSlice</link><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">SVF::PTACallGraph</link><link linkend="_class_s_v_f_1_1_p_t_a_call_graph_edge">SVF::PTACallGraphEdge</link><link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">SVF::PTACallGraphNode</link><link linkend="_class_s_v_f_1_1_p_t_a_c_f_info_builder">SVF::PTACFInfoBuilder</link><link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">SVF::PTASCEV</link><link linkend="_class_s_v_f_1_1_p_t_a_stat">SVF::PTAStat</link><link linkend="_class_s_v_f_1_1_p_t_a_type">SVF::PTAType</link><link linkend="_class_s_v_f_1_1_p_t_data">SVF::PTData&lt; Key, Datum, Data &gt;</link><link linkend="_class_race_result_validator">RaceResultValidator</link>
<para>Validate the result of concurrent analysis </para>
<link linkend="_class_s_v_f_1_1_ret_block_node">SVF::RetBlockNode</link><link linkend="_class_s_v_f_1_1_ret_c_f_g_edge">SVF::RetCFGEdge</link><link linkend="_class_s_v_f_1_1_ret_dir_s_v_f_g_edge">SVF::RetDirSVFGEdge</link><link linkend="_class_s_v_f_1_1_ret_ind_s_v_f_g_edge">SVF::RetIndSVFGEdge</link><link linkend="_class_s_v_f_1_1_ret_m_u">SVF::RetMU&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_ret_p_e">SVF::RetPE</link><link linkend="_class_s_v_f_1_1_ret_p_n">SVF::RetPN</link><link linkend="_class_s_v_f_1_1_saber_annotator">SVF::SaberAnnotator</link><link linkend="_class_s_v_f_1_1_saber_checker_a_p_i">SVF::SaberCheckerAPI</link><link linkend="_class_s_v_f_1_1_saber_s_v_f_g_builder">SVF::SaberSVFGBuilder</link><link linkend="_class_s_v_f_1_1_s_c_c_detection">SVF::SCCDetection&lt; GraphType &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1simplify__type">SVF::SVFUtil::simplify_type&lt; From &gt;</link><link linkend="_struct_s_v_f_1_1_s_v_f_util_1_1simplify__type_3_01const_01_from_01_4">SVF::SVFUtil::simplify_type&lt; const From &gt;</link><link linkend="_class_s_v_f_1_1_src_snk_d_d_a">SVF::SrcSnkDDA</link><link linkend="_structst__generator">st_generator</link><link linkend="_structst__table">st_table</link><link linkend="_structst__table__entry">st_table_entry</link><link linkend="_class_s_v_f_1_1_steensgaard">SVF::Steensgaard</link><link linkend="_class_s_v_f_1_1_st_info">SVF::StInfo</link><link linkend="_class_s_v_f_1_1_stmt_d_p_item">SVF::StmtDPItem&lt; LocCond &gt;</link><link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">SVF::StmtVFGNode</link><link linkend="_class_s_v_f_1_1_store_c_g_edge">SVF::StoreCGEdge</link><link linkend="_class_s_v_f_1_1_store_c_h_i">SVF::StoreCHI&lt; Cond &gt;</link><link linkend="_class_s_v_f_1_1_store_p_e">SVF::StorePE</link><link linkend="_class_s_v_f_1_1_store_v_f_g_node">SVF::StoreVFGNode</link><link linkend="_class_s_v_f_1_1_s_v_f_basic_block">SVF::SVFBasicBlock</link><link linkend="_class_s_v_f_1_1_s_v_f_function">SVF::SVFFunction</link><link linkend="_class_s_v_f_1_1_s_v_f_g">SVF::SVFG</link><link linkend="_class_s_v_f_1_1_s_v_f_g_builder">SVF::SVFGBuilder</link><link linkend="_class_s_v_f_1_1_s_v_f_global">SVF::SVFGlobal</link><link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t">SVF::SVFGOPT</link><link linkend="_class_s_v_f_1_1_s_v_f_g_stat">SVF::SVFGStat</link><link linkend="_class_s_v_f_1_1_s_v_f_instruction">SVF::SVFInstruction</link><link linkend="_class_s_v_f_1_1_s_v_f_module">SVF::SVFModule</link><link linkend="_class_s_v_f_1_1_s_v_f_value">SVF::SVFValue</link><link linkend="_class_s_v_f_1_1_symbol_table_info">SVF::SymbolTableInfo</link><link linkend="_class_s_v_f_1_1_t_c_t">SVF::TCT</link><link linkend="_class_s_v_f_1_1_t_c_t_edge">SVF::TCTEdge</link><link linkend="_class_s_v_f_1_1_t_c_t_node">SVF::TCTNode</link><link linkend="_class_s_v_f_1_1_t_d_fork_p_e">SVF::TDForkPE</link><link linkend="_class_s_v_f_1_1_t_d_join_p_e">SVF::TDJoinPE</link><link linkend="_class_s_v_f_1_1_thread_a_p_i">SVF::ThreadAPI</link><link linkend="_class_s_v_f_1_1_thread_call_graph">SVF::ThreadCallGraph</link><link linkend="_class_s_v_f_1_1_thread_call_graph_builder">SVF::ThreadCallGraphBuilder</link><link linkend="_class_s_v_f_1_1_thread_fork_edge">SVF::ThreadForkEdge</link><link linkend="_class_s_v_f_1_1_thread_join_edge">SVF::ThreadJoinEdge</link><link linkend="_class_s_v_f_1_1_thread_m_h_p_ind_s_v_f_g_edge">SVF::ThreadMHPIndSVFGEdge</link><link linkend="_class_s_v_f_1_1_type_analysis">SVF::TypeAnalysis</link><link linkend="_class_s_v_f_1_1_type_based_heap_cloning">SVF::TypeBasedHeapCloning</link><link linkend="_class_s_v_f_1_1_type_set">SVF::TypeSet</link><link linkend="_class_s_v_f_1_1_type_system">SVF::TypeSystem</link><link linkend="_class_s_v_f_1_1_unary_o_p_p_e">SVF::UnaryOPPE</link><link linkend="_class_s_v_f_1_1_unary_o_p_v_f_g_node">SVF::UnaryOPVFGNode</link><link linkend="_class_s_v_f_1_1_val_p_n">SVF::ValPN</link><link linkend="_class_s_v_f_1_1_var_arg_p_n">SVF::VarArgPN</link><link linkend="_class_s_v_f_1_1_variant_gep_c_g_edge">SVF::VariantGepCGEdge</link><link linkend="_class_s_v_f_1_1_variant_gep_p_e">SVF::VariantGepPE</link><link linkend="_class_s_v_f_1_1_versioned_flow_sensitive">SVF::VersionedFlowSensitive</link><link linkend="_class_s_v_f_1_1_versioned_flow_sensitive_stat">SVF::VersionedFlowSensitiveStat</link><link linkend="_class_s_v_f_1_1_versioned_p_t_data">SVF::VersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</link><link linkend="_class_s_v_f_1_1_v_f_g">SVF::VFG</link><link linkend="_class_s_v_f_1_1_v_f_g_edge">SVF::VFGEdge</link><link linkend="_class_s_v_f_1_1_v_f_g_node">SVF::VFGNode</link><link linkend="_class_s_v_f_1_1_v_f_path_cond">SVF::VFPathCond</link><link linkend="_class_s_v_f_1_1_w_p_a_f_s_solver">SVF::WPAFSSolver&lt; GraphType &gt;</link><link linkend="_class_s_v_f_1_1_w_p_a_minimum_solver">SVF::WPAMinimumSolver&lt; GraphType &gt;</link><link linkend="_class_s_v_f_1_1_w_p_a_pass">SVF::WPAPass</link><link linkend="_class_s_v_f_1_1_w_p_a_s_c_c_solver">SVF::WPASCCSolver&lt; GraphType &gt;</link><link linkend="_class_s_v_f_1_1_w_p_a_solver">SVF::WPASolver&lt; GraphType &gt;</link></section>
