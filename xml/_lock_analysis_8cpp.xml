<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_lock_analysis_8cpp" kind="file" language="C++">
    <compoundname>LockAnalysis.cpp</compoundname>
    <includes refid="_lock_analysis_8h" local="yes">MTA/LockAnalysis.h</includes>
    <includes refid="_m_t_a_8h" local="yes">MTA/MTA.h</includes>
    <includes refid="_m_t_a_result_validator_8h" local="yes">MTA/MTAResultValidator.h</includes>
    <includes refid="_s_v_f_util_8h" local="yes">Util/SVFUtil.h</includes>
    <incdepgraph>
      <node id="61">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>list</label>
      </node>
      <node id="77">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>system_error</label>
      </node>
      <node id="74">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="53">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="86">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="71">
        <label>assert.h</label>
      </node>
      <node id="35">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="103">
        <label>MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="9">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="81">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="67">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="41">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="88">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>cassert</label>
      </node>
      <node id="66">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="83">
        <label>string</label>
      </node>
      <node id="90">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="15">
        <label>map</label>
      </node>
      <node id="4">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="14">
        <label>unordered_set</label>
      </node>
      <node id="96">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="65">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>Util/DataFlowUtil.h</label>
      </node>
      <node id="22">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="7">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="2">
        <label>MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>limits.h</label>
      </node>
      <node id="106">
        <label>MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="54">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="30">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="62">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="80">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="24">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="70">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="23">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="27">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="56">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="78">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>MTA/MTA.h</label>
        <link refid="_m_t_a_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="73">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="63">
        <label>time.h</label>
      </node>
      <node id="91">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>lib/MTA/LockAnalysis.cpp</label>
        <link refid="_lock_analysis_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="85">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="51">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="72">
        <label>cstdlib</label>
      </node>
      <node id="57">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="50">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="18">
        <label>deque</label>
      </node>
      <node id="69">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="48">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="6">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="44">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="49">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="68">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="34">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="100">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="89">
        <label>stdio.h</label>
      </node>
      <node id="20">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="45">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="36">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="99">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>memory</label>
      </node>
      <node id="25">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="39">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="102">
        <label>Util/CxtStmt.h</label>
        <link refid="_cxt_stmt_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_s_v_f_1_1_lock_validator" prot="public">SVF::LockValidator</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_lock_analysis_8cpp_1a95c33e5198640b2c6691c0b4ceabe20c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; PrintLockSpan</definition>
        <argsstring>(&quot;print-lock&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Print Thread Interleaving Results&quot;))</argsstring>
        <name>PrintLockSpan</name>
        <param>
          <type>&quot;print-lock&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Print Thread Interleaving Results&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/MTA/LockAnalysis.cpp" line="16" column="22" declfile="lib/MTA/LockAnalysis.cpp" declline="16" declcolumn="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>LocksetAnalysis.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>26<sp/>Aug<sp/>2015</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>pengd</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTA/LockAnalysis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTA/MTA.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTA/MTAResultValidator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/SVFUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SVFUtil;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>PrintLockSpan(</highlight><highlight class="stringliteral">&quot;print-lock&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Print<sp/>Thread<sp/>Interleaving<sp/>Results&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Subclassing<sp/>RCResultValidator<sp/>to<sp/>define<sp/>the<sp/>abstract<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_s_v_f_1_1_lock_validator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_lock_validator" kindref="compound">LockValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_race_result_validator" kindref="compound">RaceResultValidator</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_lock_validator" kindref="compound">LockValidator</ref>(<ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref>*<sp/>ls)<sp/>:lsa(ls)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>protectedByCommonLocks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I2)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lsa-&gt;isProtectedByCommonLock(I1,<sp/>I2);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref><sp/>*lsa;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1ad1516b6cb1dbd06b8dff04ae3c944621" kindref="member">LockAnalysis::analyze</ref>()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>collectLockUnlocksites();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>buildCandidateFuncSetforLock();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lockStart<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DGENERAL,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tIntra-procedural<sp/>LockAnalysis\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tIntra-procedural<sp/>LockAnalysis\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>analyzeIntraProcedualLock();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DGENERAL,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tCollect<sp/>context-sensitive<sp/>locks\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tCollect<sp/>context-sensitive<sp/>locks\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>collectCxtLock();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DGENERAL,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tInter-procedural<sp/>LockAnalysis\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tInter-procedural<sp/>LockAnalysis\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>analyzeLockSpanCxtStmt();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lockEnd<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(lockTime<sp/>+=<sp/>(lockEnd<sp/>-<sp/>lockStart)<sp/>/<sp/>TIMEINTERVAL);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>validateResults();</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1aa8683de99ad02fb75b175b0bb54e5f7d" kindref="member">LockAnalysis::collectLockUnlocksites</ref>()</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>*<sp/>tcg=tct-&gt;getThreadCallGraph();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_s_v_f_module_1a709371b13dcf500277f8bc275bdb23c7" kindref="member">SVFModule::iterator</ref><sp/>F<sp/>=<sp/>tcg-&gt;getModule().<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>E<sp/>=<sp/>tcg-&gt;getModule().end();<sp/>F<sp/>!=<sp/>E;<sp/>++F)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespace_s_v_f_1a255af6ff30782cb9a548feadb0fe7d6b" kindref="member">inst_iterator</ref><sp/>II<sp/>=<sp/>inst_begin(*F),<sp/>EE<sp/>=<sp/>inst_end(*F);<sp/>II<sp/>!=<sp/>EE;<sp/>++II)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst<sp/>=<sp/>&amp;*II;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcg-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a38adae633d5aceddcca3b3a23ad66db9" kindref="member">isTDRelease</ref>(inst))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlocksites.insert(inst);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcg-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9db4df7968ec179e5012794c58fdee70" kindref="member">isTDAcquire</ref>(inst))</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locksites.insert(inst);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a271506d5032033efae684b0d729f5b3e" kindref="member">LockAnalysis::buildCandidateFuncSetforLock</ref>()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>*<sp/>tcg=tct-&gt;getThreadCallGraph();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>TCT::PTACGNodeSet<sp/>visited;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList&lt;const PTACallGraphNode*&gt;</ref><sp/>worklist;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::iterator<sp/>it<sp/>=<sp/>locksites.begin(),<sp/>eit<sp/>=<sp/>locksites.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun=(*it)-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>cgnode<sp/>=<sp/>tcg-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_1aaab54c670518d9d6790707f76ea76aa1" kindref="member">getCallGraphNode</ref>(fun);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited.find(cgnode)<sp/>==<sp/>visited.end())</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8" kindref="member">push</ref>(cgnode);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(cgnode);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::iterator<sp/>it<sp/>=<sp/>unlocksites.begin(),<sp/>eit<sp/>=<sp/>unlocksites.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun<sp/>=<sp/>(*it)-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>cgnode<sp/>=<sp/>tcg-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_1aaab54c670518d9d6790707f76ea76aa1" kindref="member">getCallGraphNode</ref>(fun);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited.find(cgnode)<sp/>==<sp/>visited.end())</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8" kindref="member">push</ref>(cgnode);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(cgnode);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!worklist.empty())</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>node<sp/>=<sp/>worklist.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1a8fa72918fce7e9c0b2dc34b683a797c6" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lockcandidateFuncSet.insert(node-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_node_1a959445c97605953fbdebbbd999437a09" kindref="member">getFunction</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphNode::const_iterator<sp/>nit<sp/>=<sp/>node-&gt;InEdgeBegin(),<sp/>neit<sp/>=<sp/>node-&gt;InEdgeEnd();<sp/>nit<sp/>!=<sp/>neit;<sp/>nit++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>srcNode<sp/>=<sp/>(*nit)-&gt;getSrcNode();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited.find(srcNode)<sp/>==<sp/>visited.end())</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(srcNode);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8" kindref="member">push</ref>(srcNode);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a8a34f7544f22a87e1caf010c34abda75" kindref="member">LockAnalysis::analyzeIntraProcedualLock</ref>()</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Identify<sp/>the<sp/>protected<sp/>Instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::const_iterator<sp/>it<sp/>=<sp/>locksites.begin(),<sp/>ie<sp/>=<sp/>locksites.end();<sp/>it<sp/>!=<sp/>ie;<sp/>++it)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst<sp/>*lockSite<sp/>=<sp/>SVFUtil::dyn_cast&lt;CallInst&gt;(*it);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(lockSite<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Lock<sp/>acquire<sp/>instruction<sp/>must<sp/>be<sp/>CallInst&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>forward<sp/>traversal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstSet<sp/>forwardInsts;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstSet<sp/>backwardInsts;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstSet<sp/>unlockSet;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward<sp/>=<sp/>intraForwardTraverse(lockSite,unlockSet,forwardInsts);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>backward<sp/>=<sp/>intraBackwardTraverse(unlockSet,backwardInsts);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(forward<sp/>&amp;&amp;<sp/>backward)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addIntraLock(lockSite,forwardInsts);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(forward<sp/>&amp;&amp;<sp/>!backward)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCondIntraLock(lockSite,forwardInsts);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a6febb0bb12f4983cd54b3bd310ce65d2" kindref="member">LockAnalysis::intraForwardTraverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>lockSite,<sp/>InstSet&amp;<sp/>unlockSet,<sp/>InstSet&amp;<sp/>forwardInsts)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun<sp/>=<sp/>lockSite-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>InstVec<sp/>worklist;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>worklist.push_back(lockSite);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!worklist.empty())</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I<sp/>=<sp/>worklist.back();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.pop_back();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;(getFunExitBB(fun)-&gt;back())<sp/>==<sp/>I)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>visited<sp/>Instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forwardInsts.find(I)!=forwardInsts.end())</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forwardInsts.insert(I);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDRelease(I)<sp/>&amp;&amp;<sp/>isAliasedLocks(lockSite,<sp/>I))</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlockSet.insert(I);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>ci<sp/>lock<sp/><sp/><sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>SVFUtil::getSourceLoc(lockSite)&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>ci<sp/>unlock<sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>SVFUtil::getSourceLoc(I)&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstVec<sp/>nextInsts;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getNextInsts(I,<sp/>nextInsts);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstVec::const_iterator<sp/>nit<sp/>=<sp/>nextInsts.begin(),<sp/>enit<sp/>=<sp/>nextInsts.end();<sp/>nit<sp/>!=<sp/>enit;<sp/>++nit)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.push_back(*nit);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a5f693c893f3701e1e025881f91193d53" kindref="member">LockAnalysis::intraBackwardTraverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstSet&amp;<sp/>unlockSet,<sp/>InstSet&amp;<sp/>backwardInsts)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>InstVec<sp/>worklist;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(InstSet::const_iterator<sp/>it<sp/>=<sp/>unlockSet.begin(),<sp/>eit<sp/>=<sp/>unlockSet.end();<sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>unlockSite<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun<sp/>=<sp/>unlockSite-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.push_back(*it);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!worklist.empty())</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I<sp/>=<sp/>worklist.back();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.pop_back();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;(fun-&gt;getEntryBlock().back())<sp/>==<sp/>I)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>visited<sp/>Instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backwardInsts.find(I)!=backwardInsts.end())</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backwardInsts.insert(I);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDAcquire(I)<sp/>&amp;&amp;<sp/>isAliasedLocks(unlockSite,<sp/>I))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>ci<sp/>lock<sp/><sp/><sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>SVFUtil::getSourceLoc(I)&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>ci<sp/>unlock<sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>SVFUtil::getSourceLoc(unlockSite)&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstVec<sp/>nextInsts;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getPrevInsts(I,<sp/>nextInsts);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstVec::const_iterator<sp/>nit<sp/>=<sp/>nextInsts.begin(),<sp/>enit<sp/>=<sp/>nextInsts.end();<sp/>nit<sp/>!=<sp/>enit;<sp/>++nit)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worklist.push_back(*nit);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::collectCxtLock()</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>FunSet<sp/>entryFuncSet<sp/>=<sp/>tct-&gt;getEntryProcs();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(FunSet::const_iterator<sp/>it<sp/>=<sp/>entryFuncSet.begin(),<sp/>eit<sp/>=<sp/>entryFuncSet.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isLockCandidateFun(*it))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>cxt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtLockProc<sp/>t(cxt,<sp/>*it);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTPWorkList(t);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!clpList.empty())</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtLockProc<sp/>clp<sp/>=<sp/>popFromCTPWorkList();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>cgNode<sp/>=<sp/>getTCG()-&gt;getCallGraphNode(clp.getProc());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isLockCandidateFun(cgNode-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_node_1a959445c97605953fbdebbbd999437a09" kindref="member">getFunction</ref>()))</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphNode::const_iterator<sp/>nit<sp/>=<sp/>cgNode-&gt;<ref refid="class_s_v_f_1_1_generic_node_1aa4f103330118c8976bf95e4bf53416eb" kindref="member">OutEdgeBegin</ref>(),<sp/>neit<sp/>=<sp/>cgNode-&gt;OutEdgeEnd();<sp/>nit<sp/>!=<sp/>neit;<sp/>nit++)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge" kindref="compound">PTACallGraphEdge</ref>*<sp/>cgEdge<sp/>=<sp/>(*nit);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphEdge::CallInstSet::const_iterator<sp/>cit<sp/>=<sp/>cgEdge-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge_1a750e50a9022451e406c4819979edffa5" kindref="member">directCallsBegin</ref>(),<sp/>ecit<sp/>=<sp/>cgEdge-&gt;directCallsEnd();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cit<sp/>!=<sp/>ecit;<sp/>++cit)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nCollecting<sp/>CxtLocks:<sp/>handling<sp/>direct<sp/>call:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>**cit<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cgEdge-&gt;getSrcNode()-&gt;getFunction()-&gt;getName()</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cgEdge-&gt;getDstNode()-&gt;getFunction()-&gt;getName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleCallRelation(clp,<sp/>cgEdge,<sp/>getLLVMCallSite(*cit));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphEdge::CallInstSet::const_iterator<sp/>ind<sp/>=<sp/>cgEdge-&gt;indirectCallsBegin(),<sp/>eind<sp/>=<sp/>cgEdge-&gt;indirectCallsEnd();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>!=<sp/>eind;<sp/>++ind)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nCollecting<sp/>CxtLocks:<sp/>handling<sp/>indirect<sp/>call:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>**ind<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cgEdge-&gt;getSrcNode()-&gt;getFunction()-&gt;getName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cgEdge-&gt;getDstNode()-&gt;getFunction()-&gt;getName()</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleCallRelation(clp,<sp/>cgEdge,<sp/>getLLVMCallSite(*ind));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::handleCallRelation(CxtLockProc&amp;<sp/>clp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge" kindref="compound">PTACallGraphEdge</ref>*<sp/>cgEdge,<sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee<sp/>=<sp/>cgEdge-&gt;getDstNode()-&gt;getFunction();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>CallStrCxt<sp/>cxt(clp.getContext());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDAcquire(cs.getInstruction()))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCxtLock(cxt,cs.getInstruction());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>pushCxt(cxt,<sp/>cs.getInstruction(),<sp/>callee);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtLockProc<sp/>newclp(cxt,<sp/>callee);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pushToCTPWorkList(newclp))</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>Process<sp/>CallRet<sp/>old<sp/>clp<sp/>--&quot;</highlight><highlight class="normal">;<sp/>clp.dump());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockAnalysis<sp/>Process<sp/>CallRet<sp/>new<sp/>clp<sp/>--&quot;</highlight><highlight class="normal">;<sp/>newclp.dump());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::analyzeLockSpanCxtStmt()</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>FunSet<sp/>entryFuncSet<sp/>=<sp/>tct-&gt;getEntryProcs();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(FunSet::const_iterator<sp/>it<sp/>=<sp/>entryFuncSet.begin(),<sp/>eit<sp/>=<sp/>entryFuncSet.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isLockCandidateFun(*it))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>cxt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>cxtstmt(cxt,<sp/>&amp;((*it)-&gt;front().front()));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(cxtstmt);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!cxtStmtList.empty())</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>cts<sp/>=<sp/>popFromCTSWorkList();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>touchCxtStmt(cts);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>curInst<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" kindref="member">getStmt</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instToCxtStmtSet[curInst].insert(cts);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nVisit<sp/>cxtStmt:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a56e2767c327a383db09dca96edb19614" kindref="member">dump</ref>());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nIts<sp/>cxt<sp/>lock<sp/>sets:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>printLocks(cts));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDFork(curInst))</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleFork(cts);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDAcquire(curInst))</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(hasCxtLock(cts)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;context-sensitive<sp/>lock<sp/>not<sp/>found!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(addCxtStmtToSpan(cts,cts))</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleIntra(cts);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTDRelease(curInst))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(removeCxtStmtToSpan(cts,cts))</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleIntra(cts);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;CallInst&gt;(curInst)<sp/>&amp;&amp;<sp/>!isExtCall(curInst))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleCall(cts);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;ReturnInst&gt;(curInst))</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleRet(cts);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleIntra(cts);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1ac1b42b0a53feae04f848e5b0828ff01a" kindref="member">LockAnalysis::printLocks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtLockSet<sp/>&amp;<sp/>lockset<sp/>=<sp/>getCxtLockfromCxtStmt(cts);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nlock<sp/>sets<sp/>size<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lockset.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CxtLockSet::iterator<sp/>it<sp/>=<sp/>lockset.begin(),<sp/>eit<sp/>=<sp/>lockset.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it).dump();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::handleFork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>call<sp/>=<sp/>SVFUtil::cast&lt;CallInst&gt;(cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" kindref="member">getStmt</ref>());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>curCxt<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" kindref="member">getContext</ref>();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(getTCG()-&gt;hasThreadForkEdge(call))</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ThreadCallGraph::ForkEdgeSet::const_iterator<sp/>cgIt<sp/>=<sp/>getTCG()-&gt;getForkEdgeBegin(call),</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ecgIt<sp/>=<sp/>getTCG()-&gt;getForkEdgeEnd(call);<sp/>cgIt<sp/>!=<sp/>ecgIt;<sp/>++cgIt)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee<sp/>=<sp/>(*cgIt)-&gt;getDstNode()-&gt;getFunction();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>newCxt<sp/>=<sp/>curCxt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushCxt(newCxt,call,callee);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>newCts(newCxt,<sp/>&amp;(callee-&gt;getEntryBlock().front()));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markCxtStmtFlag(newCts,<sp/>cts);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>handleIntra(cts);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::handleCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>call<sp/>=<sp/>SVFUtil::cast&lt;CallInst&gt;(cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" kindref="member">getStmt</ref>());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>curCxt<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" kindref="member">getContext</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getTCG()-&gt;hasCallGraphEdge(call))</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraph::CallGraphEdgeSet::const_iterator<sp/>cgIt<sp/>=<sp/>getTCG()-&gt;getCallEdgeBegin(call),<sp/>ecgIt<sp/>=<sp/>getTCG()-&gt;getCallEdgeEnd(call);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgIt<sp/>!=<sp/>ecgIt;<sp/>++cgIt)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee<sp/>=<sp/>(*cgIt)-&gt;getDstNode()-&gt;getFunction();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isExtCall(callee))</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>newCxt<sp/>=<sp/>curCxt;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushCxt(newCxt,<sp/>call,<sp/>callee);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>newCts(newCxt,<sp/>&amp;(callee-&gt;getEntryBlock().front()));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markCxtStmtFlag(newCts,<sp/>cts);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::handleRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>curInst<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" kindref="member">getStmt</ref>();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>curCxt<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" kindref="member">getContext</ref>();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref>*<sp/>curFunNode<sp/>=<sp/>getTCG()-&gt;getCallGraphNode(curInst-&gt;getParent()-&gt;getParent());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphNode::const_iterator<sp/>it<sp/>=<sp/>curFunNode-&gt;getInEdges().begin(),<sp/>eit<sp/>=<sp/>curFunNode-&gt;getInEdges().end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge" kindref="compound">PTACallGraphEdge</ref>*<sp/>edge<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;ThreadForkEdge&gt;(edge)<sp/>||<sp/>SVFUtil::isa&lt;ThreadJoinEdge&gt;(edge))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphEdge::CallInstSet::const_iterator<sp/>cit<sp/>=<sp/>(edge)-&gt;directCallsBegin(),<sp/>ecit<sp/>=<sp/>(edge)-&gt;directCallsEnd();<sp/>cit<sp/>!=<sp/>ecit;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cit)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>newCxt<sp/>=<sp/>curCxt;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchCxt(newCxt,<sp/>*cit,<sp/>curFunNode-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_node_1a959445c97605953fbdebbbd999437a09" kindref="member">getFunction</ref>()))</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstVec<sp/>nextInsts;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getNextInsts(*cit,<sp/>nextInsts);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstVec::const_iterator<sp/>nit<sp/>=<sp/>nextInsts.begin(),<sp/>enit<sp/>=<sp/>nextInsts.end();<sp/>nit<sp/>!=<sp/>enit;<sp/>++nit)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>newCts(newCxt,<sp/>*nit);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markCxtStmtFlag(newCts,<sp/>cts);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTACallGraphEdge::CallInstSet::const_iterator<sp/>cit<sp/>=<sp/>(edge)-&gt;indirectCallsBegin(),<sp/>ecit<sp/>=<sp/>(edge)-&gt;indirectCallsEnd();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cit<sp/>!=<sp/>ecit;<sp/>++cit)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallStrCxt<sp/>newCxt<sp/>=<sp/>curCxt;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchCxt(newCxt,<sp/>*cit,<sp/>curFunNode-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_node_1a959445c97605953fbdebbbd999437a09" kindref="member">getFunction</ref>()))</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstVec<sp/>nextInsts;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getNextInsts(*cit,<sp/>nextInsts);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstVec::const_iterator<sp/>nit<sp/>=<sp/>nextInsts.begin(),<sp/>enit<sp/>=<sp/>nextInsts.end();<sp/>nit<sp/>!=<sp/>enit;<sp/>++nit)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>newCts(newCxt,<sp/>*nit);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markCxtStmtFlag(newCts,<sp/>cts);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::handleIntra(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>curInst<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" kindref="member">getStmt</ref>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>curCxt<sp/>=<sp/>cts.<ref refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" kindref="member">getContext</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>InstVec<sp/>nextInsts;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>getNextInsts(curInst,<sp/>nextInsts);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstVec::const_iterator<sp/>nit<sp/>=<sp/>nextInsts.begin(),<sp/>enit<sp/>=<sp/>nextInsts.end();<sp/>nit<sp/>!=<sp/>enit;<sp/>++nit)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref><sp/>newCts(curCxt,<sp/>*nit);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markCxtStmtFlag(newCts,<sp/>cts);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::pushCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>caller<sp/>=<sp/>call-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSiteID<sp/>csId<sp/>=<sp/>getTCG()-&gt;getCallSiteID(getLLVMCallSite(call),<sp/>callee);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>///<sp/>handle<sp/>calling<sp/>context<sp/>for<sp/>candidate<sp/>functions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(isLockCandidateFun(caller)<sp/>==<sp/>false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tct-&gt;inSameCallGraphSCC(getTCG()-&gt;getCallGraphNode(caller),<sp/>getTCG()-&gt;getCallGraphNode(callee))<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tct-&gt;pushCxt(cxt,csId);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>tct-&gt;dumpCxt(cxt));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LockAnalysis::matchCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>caller<sp/>=<sp/>call-&gt;getParent()-&gt;getParent();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSiteID<sp/>csId<sp/>=<sp/>getTCG()-&gt;getCallSiteID(getLLVMCallSite(call),<sp/>callee);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>///<sp/>handle<sp/>calling<sp/>context<sp/>for<sp/>candidate<sp/>functions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(isLockCandidateFun(caller)<sp/>==<sp/>false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cxt.empty())</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tct-&gt;inSameCallGraphSCC(getTCG()-&gt;getCallGraphNode(caller),<sp/>getTCG()-&gt;getCallGraphNode(callee))<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cxt.back()<sp/>==<sp/>csId)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxt.pop_back();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DMTA,<sp/>tct-&gt;dumpCxt(cxt));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a4d4501d62bf51475662b6ba66e6380aa" kindref="member">LockAnalysis::isProtectedByCommonLock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i2)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>numOfTotalQueries++;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>commonlock<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>queryStart<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>());</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInsideIntraLock(i1)<sp/>&amp;&amp;<sp/>isInsideIntraLock(i2))</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonlock<sp/>=<sp/>isProtectedByCommonCILock(i1,i2)<sp/>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonlock<sp/>=<sp/>isProtectedByCommonCxtLock(i1,i2);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>queryEnd<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(lockQueriesTime<sp/>+=<sp/>(queryEnd<sp/>-<sp/>queryStart)<sp/>/<sp/>TIMEINTERVAL);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commonlock;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a842ddef4d1cb9c45555d949375627a48" kindref="member">LockAnalysis::isProtectedByCommonCILock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i2)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInsideCondIntraLock(i1)<sp/>&amp;&amp;<sp/>!isInsideCondIntraLock(i2))</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstSet&amp;<sp/>lockset1<sp/>=<sp/>getIntraLockSet(i1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstSet&amp;<sp/>lockset2<sp/>=<sp/>getIntraLockSet(i2);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::const_iterator<sp/>cil1<sp/>=<sp/>lockset1.begin(),<sp/>ecil1<sp/>=<sp/>lockset1.end();<sp/>cil1!=ecil1;<sp/>++cil1)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::const_iterator<sp/>cil2=lockset2.begin(),<sp/>ecil2=lockset2.end();<sp/>cil2!=ecil2;<sp/>++cil2)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isAliasedLocks(*cil1,<sp/>*cil2))</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287" kindref="member">LockAnalysis::isProtectedByCommonCxtLock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt2)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hasCxtLockfromCxtStmt(cxtStmt1)<sp/>||<sp/>!hasCxtLockfromCxtStmt(cxtStmt2))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtLockSet&amp;<sp/>lockset1<sp/>=<sp/>getCxtLockfromCxtStmt(cxtStmt1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtLockSet&amp;<sp/>lockset2<sp/>=<sp/>getCxtLockfromCxtStmt(cxtStmt2);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alias(lockset1,lockset2))</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287" kindref="member">LockAnalysis::isProtectedByCommonCxtLock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i2)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hasCxtStmtfromInst(i1)<sp/>||<sp/>!hasCxtStmtfromInst(i2))</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmtSet&amp;<sp/>ctsset1<sp/>=<sp/>getCxtStmtfromInst(i1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmtSet&amp;<sp/>ctsset2<sp/>=<sp/>getCxtStmtfromInst(i2);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CxtStmtSet::const_iterator<sp/>cts1<sp/>=<sp/>ctsset1.begin(),<sp/>ects1<sp/>=<sp/>ctsset1.end();<sp/>cts1<sp/>!=<sp/>ects1;<sp/>cts1++)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt1<sp/>=<sp/>*cts1;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CxtStmtSet::const_iterator<sp/>cts2<sp/>=<sp/>ctsset2.begin(),<sp/>ects2<sp/>=<sp/>ctsset2.end();<sp/>cts2<sp/>!=<sp/>ects2;<sp/>cts2++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt2<sp/>=<sp/>*cts2;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cxtStmt1==cxtStmt2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isProtectedByCommonCxtLock(cxtStmt1,cxtStmt2)==</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1af30d0dad3d17188de8c2cea9b004f3d3" kindref="member">LockAnalysis::isInSameSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i2)</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>queryStart<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>());</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sameSpan<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInsideIntraLock(i1)<sp/>&amp;&amp;<sp/>isInsideIntraLock(i2))</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sameSpan<sp/>=<sp/>isInSameCISpan(i1,<sp/>i2);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sameSpan<sp/>=<sp/>isInSameCSSpan(i1,<sp/>i2);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>queryEnd<sp/>=<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">PTAStat::getClk</ref>());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>DOTIMESTAT(lockQueriesTime<sp/>+=<sp/>(queryEnd<sp/>-<sp/>queryStart)<sp/>/<sp/>TIMEINTERVAL);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sameSpan;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a65aca2bc12fc34203b16549653943eae" kindref="member">LockAnalysis::isInSameCISpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*i2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="649"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInsideCondIntraLock(i1)<sp/>&amp;&amp;<sp/>!isInsideCondIntraLock(i2))</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstSet&amp;<sp/>lockset1<sp/>=<sp/>getIntraLockSet(i1);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstSet&amp;<sp/>lockset2<sp/>=<sp/>getIntraLockSet(i2);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::const_iterator<sp/>cil1<sp/>=<sp/>lockset1.begin(),<sp/>ecil1<sp/>=<sp/>lockset1.end();<sp/>cil1!=ecil1;<sp/>++cil1)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InstSet::const_iterator<sp/>cil2=lockset2.begin(),<sp/>ecil2=lockset2.end();<sp/>cil2!=ecil2;<sp/>++cil2)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*cil1==*cil2)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd" kindref="member">LockAnalysis::isInSameCSSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="670"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hasCxtLockfromCxtStmt(cxtStmt1)<sp/>||<sp/>!hasCxtLockfromCxtStmt(cxtStmt2))</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtLockSet&amp;<sp/>lockset1<sp/>=<sp/>getCxtLockfromCxtStmt(cxtStmt1);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtLockSet&amp;<sp/>lockset2<sp/>=<sp/>getCxtLockfromCxtStmt(cxtStmt2);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersects(lockset1,lockset2))</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd" kindref="member">LockAnalysis::isInSameCSSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*I2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="684"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hasCxtStmtfromInst(I1)<sp/>||<sp/>!hasCxtStmtfromInst(I2))</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmtSet&amp;<sp/>ctsset1<sp/>=<sp/>getCxtStmtfromInst(I1);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmtSet&amp;<sp/>ctsset2<sp/>=<sp/>getCxtStmtfromInst(I2);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CxtStmtSet::const_iterator<sp/>cts1<sp/>=<sp/>ctsset1.begin(),<sp/>ects1<sp/>=<sp/>ctsset1.end();<sp/>cts1<sp/>!=<sp/>ects1;<sp/>cts1++)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt1<sp/>=<sp/>*cts1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CxtStmtSet::const_iterator<sp/>cts2<sp/>=<sp/>ctsset2.begin(),<sp/>ects2<sp/>=<sp/>ctsset2.end();<sp/>cts2<sp/>!=<sp/>ects2;<sp/>cts2++)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cxtStmt2<sp/>=<sp/>*cts2;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cxtStmt1==cxtStmt2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isInSameCSSpan(cxtStmt1,cxtStmt2)==</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LockAnalysis::validateResults()</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>validator<sp/>and<sp/>perform<sp/>validation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_lock_validator" kindref="compound">LockValidator</ref><sp/>validator(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>validator.init(getTCG()-&gt;getModule());</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>validator.analyze();</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/MTA/LockAnalysis.cpp"/>
  </compounddef>
</doxygen>
