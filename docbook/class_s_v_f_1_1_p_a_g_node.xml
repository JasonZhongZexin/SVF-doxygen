<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_p_a_g_node" xml:lang="en-US">
<title>SVF::PAGNode Class Reference</title>
<indexterm><primary>SVF::PAGNode</primary></indexterm>
<para>Inheritance diagram for SVF::PAGNode:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_p_a_g_node.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_p_a_g_node_1a5cc5327ba68c3f11ed4bef47d89c3dfd">PNODEK</link> { 
<emphasis role="strong">ValNode</emphasis>
, <emphasis role="strong">ObjNode</emphasis>
, <emphasis role="strong">RetNode</emphasis>
, <emphasis role="strong">VarargNode</emphasis>
, 
<emphasis role="strong">GepValNode</emphasis>
, <emphasis role="strong">GepObjNode</emphasis>
, <emphasis role="strong">FIObjNode</emphasis>
, <emphasis role="strong">DummyValNode</emphasis>
, 
<emphasis role="strong">DummyObjNode</emphasis>
, <emphasis role="strong">CloneGepObjNode</emphasis>
, <emphasis role="strong">CloneFIObjNode</emphasis>
, <emphasis role="strong">CloneDummyObjNode</emphasis>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_p_a_g_node_1a37d3c3aef0c5bd7a5d0d516438673800">PAGNode</link> (const Value *val, NodeID i, <link linkend="_class_s_v_f_1_1_p_a_g_node_1a5cc5327ba68c3f11ed4bef47d89c3dfd">PNODEK</link> k)</para>

<para>address-taken pointer </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ab93588b44f5824f4caa9f954e2c1d0cd"/>virtual <link linkend="_class_s_v_f_1_1_p_a_g_node_1ab93588b44f5824f4caa9f954e2c1d0cd">~PAGNode</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae"/>const Value * <link linkend="_class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae">getValue</link> () const</para>

<para>Get/has methods of the components. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ab7ff5a1cfd0701997b23bf7be781ecf3"/>virtual const Type * <link linkend="_class_s_v_f_1_1_p_a_g_node_1ab7ff5a1cfd0701997b23bf7be781ecf3">getType</link> () const</para>

<para>Return type of the value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a071f592f2b811c136db5e05a6169aa99"/>bool <emphasis role="strong">hasValue</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1afa5f1f6b3b7ffff2c417d58db7ef6bc2"/>virtual bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1afa5f1f6b3b7ffff2c417d58db7ef6bc2">isPointer</link> () const</para>

<para>Whether it is a pointer. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a983d2d9a8ea6fd5be14af55cf22c65ce"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1a983d2d9a8ea6fd5be14af55cf22c65ce">isTopLevelPtr</link> () const</para>

<para>Whether it is a top-level pointer. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ad0e27b2330a0811ca63dc79fd7972714"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1ad0e27b2330a0811ca63dc79fd7972714">isAddressTakenPtr</link> () const</para>

<para>Whether it is an address-taken pointer. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1ac50befb2bed2a5298248bec277632b2e">isConstantData</link> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a32174f36da4ceeecd0f094b2f8321598"/>virtual const std::string <link linkend="_class_s_v_f_1_1_p_a_g_node_1a32174f36da4ceeecd0f094b2f8321598">getValueName</link> () const =0</para>

<para>Get name of the LLVM value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a1697d70ee484569bbd7557cf99b223dc"/>virtual const Function * <link linkend="_class_s_v_f_1_1_p_a_g_node_1a1697d70ee484569bbd7557cf99b223dc">getFunction</link> () const</para>

<para>Return the function that this <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> resides in. Return NULL if it is a global or constantexpr node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a5a5712e845d05c2eaef385113c5bce58"/>PAGEdge::PAGEdgeSetTy &amp; <link linkend="_class_s_v_f_1_1_p_a_g_node_1a5a5712e845d05c2eaef385113c5bce58">getIncomingEdges</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind)</para>

<para>Get incoming <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a92ae607f7a27f6597dd56aeaef064819"/>PAGEdge::PAGEdgeSetTy &amp; <link linkend="_class_s_v_f_1_1_p_a_g_node_1a92ae607f7a27f6597dd56aeaef064819">getOutgoingEdges</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind)</para>

<para>Get outgoing <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a9e6775e06806c54ee016e28c1324604a"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1a9e6775e06806c54ee016e28c1324604a">hasIncomingEdges</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Has incoming <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a6c54e1a54a1963ffa8c97d97ffd6f3bc"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1a6c54e1a54a1963ffa8c97d97ffd6f3bc">hasIncomingVariantGepEdge</link> () const</para>

<para>Has incoming VariantGepEdges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a945d9b4c57dfab9baa33e6dbc333ceee"/>PAGEdge::PAGEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_p_a_g_node_1a945d9b4c57dfab9baa33e6dbc333ceee">getIncomingEdgesBegin</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Get incoming <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> iterator. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ac8d69ac849b697663b19db76b92053bc"/>PAGEdge::PAGEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_p_a_g_node_1ac8d69ac849b697663b19db76b92053bc">getIncomingEdgesEnd</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Get incoming <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> iterator. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1aa311aaac0f8fbb8650fac9d7662ec795"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1aa311aaac0f8fbb8650fac9d7662ec795">hasOutgoingEdges</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Has outgoing <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a3db180378695da64a50a83bd8d8a7e47"/>PAGEdge::PAGEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_p_a_g_node_1a3db180378695da64a50a83bd8d8a7e47">getOutgoingEdgesBegin</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Get outgoing <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> iterator. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ad57a4d81a77520c773bee35d294a7ed3"/>PAGEdge::PAGEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_p_a_g_node_1ad57a4d81a77520c773bee35d294a7ed3">getOutgoingEdgesEnd</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind) const</para>

<para>Get outgoing <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> iterator. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a55bca5a9f3efe73feb45920f042e5965"/>void <link linkend="_class_s_v_f_1_1_p_a_g_node_1a55bca5a9f3efe73feb45920f042e5965">addInEdge</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *inEdge)</para>

<para>add methods of the components </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1aed41d396a1313757176f296e7d72f731"/>void <emphasis role="strong">addOutEdge</emphasis> (<link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *outEdge)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a2a9a5feb62138307b0b6f901cb5e0e0f"/>virtual const std::string <emphasis role="strong">toString</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a8662a272081441af5440af58c975b85e"/>const Value * <link linkend="_class_s_v_f_1_1_p_a_g_node_1a8662a272081441af5440af58c975b85e">value</link></para>

<para>value of this <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> node </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ac8376fa2a820a692cbeb82d5d350b34f"/>PAGEdge::PAGKindToEdgeSetMapTy <emphasis role="strong">InEdgeKindToSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1aa829bcee6e9456ccc895b72f52fae409"/>PAGEdge::PAGKindToEdgeSetMapTy <emphasis role="strong">OutEdgeKindToSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ae0e9f3bb2dccd6fe6be5e1f5fbb29066"/>bool <emphasis role="strong">isTLPointer</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a56df156ef784fe2c23691cd6e176e030"/>bool <link linkend="_class_s_v_f_1_1_p_a_g_node_1a56df156ef784fe2c23691cd6e176e030">isATPointer</link></para>

<para>top-level pointer </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a938343b901440e0898111a36e55bcae7"/><link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; <link linkend="_class_s_v_f_1_1_p_a_g_node_1a938343b901440e0898111a36e55bcae7">operator&lt;&lt;</link> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;o, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> &amp;node)</para>

<para>Overloading operator &lt;&lt; for dumping <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a5cc5327ba68c3f11ed4bef47d89c3dfd"/>    <section>
    <title>PNODEK</title>
<indexterm><primary>PNODEK</primary><secondary>SVF::PAGNode</secondary></indexterm>
<indexterm><primary>SVF::PAGNode</primary><secondary>PNODEK</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_p_a_g_node_1a5cc5327ba68c3f11ed4bef47d89c3dfd">SVF::PAGNode::PNODEK</link></computeroutput></para>
<para>Nine kinds of <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> nodes ValNode: llvm pointer value ObjNode: memory object RetNode: unique return node Vararg: unique node for vararg parameter GepValNode: tempory gep value node for field sensitivity GepValNode: tempory gep obj node for field sensitivity FIObjNode: for field insensitive analysis DummyValNode and DummyObjNode: for non-llvm-value node Clone*Node: objects created by TBHC. </para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1a37d3c3aef0c5bd7a5d0d516438673800"/>    <section>
    <title>PAGNode()</title>
<indexterm><primary>PAGNode</primary><secondary>SVF::PAGNode</secondary></indexterm>
<indexterm><primary>SVF::PAGNode</primary><secondary>PAGNode</secondary></indexterm>
<para><computeroutput>PAGNode::PAGNode (const Value * val, NodeID i, <link linkend="_class_s_v_f_1_1_p_a_g_node_1a5cc5327ba68c3f11ed4bef47d89c3dfd">PNODEK</link> k)</computeroutput></para><para>

<para>address-taken pointer </para>
</para>

<para>Constructor</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> constructor </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_node_1ac50befb2bed2a5298248bec277632b2e"/>    <section>
    <title>isConstantData()</title>
<indexterm><primary>isConstantData</primary><secondary>SVF::PAGNode</secondary></indexterm>
<indexterm><primary>SVF::PAGNode</primary><secondary>isConstantData</secondary></indexterm>
<para><computeroutput>bool SVF::PAGNode::isConstantData ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Whether it is constant data, i.e., &quot;0&quot;, &quot;1.001&quot;, &quot;str&quot; or llvm&apos;s metadata, i.e., metadata !4087 </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/PAGNode.hlib/Graphs/PAG.cpp</section>
</section>
