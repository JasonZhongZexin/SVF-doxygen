<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_l_l_v_m_util_8h" kind="file" language="C++">
    <compoundname>LLVMUtil.h</compoundname>
    <includes refid="_s_v_f_util_8h" local="yes">Util/SVFUtil.h</includes>
    <includes refid="_basic_types_8h" local="yes">Util/BasicTypes.h</includes>
    <includes refid="_ext_a_p_i_8h" local="yes">Util/ExtAPI.h</includes>
    <includes refid="_thread_a_p_i_8h" local="yes">Util/ThreadAPI.h</includes>
    <includes local="yes">llvm/Support/JSON.h</includes>
    <includedby refid="_p_a_g_node_8h" local="yes">include/Graphs/PAGNode.h</includedby>
    <includedby refid="_graph2_json_8h" local="yes">include/SVF-FE/Graph2Json.h</includedby>
    <includedby refid="_i_c_f_g_8cpp" local="yes">lib/Graphs/ICFG.cpp</includedby>
    <includedby refid="_p_a_g_8cpp" local="yes">lib/Graphs/PAG.cpp</includedby>
    <includedby refid="_p_t_a_call_graph_8cpp" local="yes">lib/Graphs/PTACallGraph.cpp</includedby>
    <includedby refid="_s_v_f_g_8cpp" local="yes">lib/Graphs/SVFG.cpp</includedby>
    <includedby refid="_v_f_g_8cpp" local="yes">lib/Graphs/VFG.cpp</includedby>
    <includedby refid="_mem_model_8cpp" local="yes">lib/MemoryModel/MemModel.cpp</includedby>
    <includedby refid="_pointer_analysis_8cpp" local="yes">lib/MemoryModel/PointerAnalysis.cpp</includedby>
    <includedby refid="_mem_region_8cpp" local="yes">lib/MSSA/MemRegion.cpp</includedby>
    <includedby refid="_mem_s_s_a_8cpp" local="yes">lib/MSSA/MemSSA.cpp</includedby>
    <includedby refid="_s_v_f_g_builder_8cpp" local="yes">lib/MSSA/SVFGBuilder.cpp</includedby>
    <includedby refid="_leak_checker_8cpp" local="yes">lib/SABER/LeakChecker.cpp</includedby>
    <includedby refid="_call_graph_builder_8cpp" local="yes">lib/SVF-FE/CallGraphBuilder.cpp</includedby>
    <includedby refid="_c_h_g_8cpp" local="yes">lib/SVF-FE/CHG.cpp</includedby>
    <includedby refid="_c_p_p_util_8cpp" local="yes">lib/SVF-FE/CPPUtil.cpp</includedby>
    <includedby refid="_i_c_f_g_builder_8cpp" local="yes">lib/SVF-FE/ICFGBuilder.cpp</includedby>
    <includedby refid="_l_l_v_m_module_8cpp" local="yes">lib/SVF-FE/LLVMModule.cpp</includedby>
    <includedby refid="_l_l_v_m_util_8cpp" local="yes">lib/SVF-FE/LLVMUtil.cpp</includedby>
    <includedby refid="_p_a_g_builder_8cpp" local="yes">lib/SVF-FE/PAGBuilder.cpp</includedby>
    <includedby refid="_symbol_table_info_8cpp" local="yes">lib/SVF-FE/SymbolTableInfo.cpp</includedby>
    <includedby refid="_path_cond_allocator_8cpp" local="yes">lib/Util/PathCondAllocator.cpp</includedby>
    <includedby refid="_s_v_f_util_8cpp" local="yes">lib/Util/SVFUtil.cpp</includedby>
    <includedby refid="_andersen_8cpp" local="yes">lib/WPA/Andersen.cpp</includedby>
    <includedby refid="_andersen_stat_8cpp" local="yes">lib/WPA/AndersenStat.cpp</includedby>
    <includedby refid="_flow_sensitive_stat_8cpp" local="yes">lib/WPA/FlowSensitiveStat.cpp</includedby>
    <includedby refid="_versioned_flow_sensitive_stat_8cpp" local="yes">lib/WPA/VersionedFlowSensitiveStat.cpp</includedby>
    <includedby refid="dda_8cpp" local="yes">tools/DDA/dda.cpp</includedby>
    <includedby refid="svf-ex_8cpp" local="yes">tools/Example/svf-ex.cpp</includedby>
    <includedby refid="saber_8cpp" local="yes">tools/SABER/saber.cpp</includedby>
    <includedby refid="wpa_8cpp" local="yes">tools/WPA/wpa.cpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>list</label>
      </node>
      <node id="4">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>system_error</label>
      </node>
      <node id="55">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="53">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="47">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="35">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="38">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="9">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="1">
        <label>include/SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="62">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="2">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>string</label>
      </node>
      <node id="15">
        <label>map</label>
      </node>
      <node id="42">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="14">
        <label>unordered_set</label>
      </node>
      <node id="60">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="7">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="40">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="54">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="30">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="58">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="24">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="23">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="27">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="56">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="10">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="21">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="59">
        <label>time.h</label>
      </node>
      <node id="63">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="51">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="57">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="50">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="18">
        <label>deque</label>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="48">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="6">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="44">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="49">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="46">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="34">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="20">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="45">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="36">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="19">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>memory</label>
      </node>
      <node id="25">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="39">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="43">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="51">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="54">
        <label>include/SVF-FE/Graph2Json.h</label>
        <link refid="_graph2_json_8h_source"/>
      </node>
      <node id="53">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="40">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="7">
        <label>include/Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="11">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/WPA/CSC.h</label>
        <link refid="_c_s_c_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="30">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="29">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="46">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="47">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="32">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="39">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/Graphs/PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/MemoryModel/PAGBuilderFromFile.h</label>
        <link refid="_p_a_g_builder_from_file_8h_source"/>
      </node>
      <node id="25">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="14">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="48">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="3">
        <label>include/Graphs/ExternalPAG.h</label>
        <link refid="_external_p_a_g_8h_source"/>
      </node>
      <node id="18">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="43">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="19">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="55">
        <label>include/SVF-FE/PAGBuilder.h</label>
        <link refid="_p_a_g_builder_8h_source"/>
      </node>
      <node id="50">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <innernamespace refid="namespace_s_v_f_1_1_s_v_f_util">SVF::SVFUtil</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>SVFUtil.h<sp/>--<sp/>Analysis<sp/>helper<sp/>functions----------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SVFUtil.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>11,<sp/>2013</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_SVF_FE_LLVMUTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_SVF_FE_LLVMUTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/SVFUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/BasicTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/ExtAPI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/ThreadAPI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llvm/Support/JSON.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SVFUtil</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAnAllocationWraper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>getLLVMFunction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*fun<sp/>=<sp/>SVFUtil::dyn_cast&lt;Function&gt;(val-&gt;stripPointerCasts());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"></codeline>
<codeline lineno="63"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_ext(fun);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isExtCall(getCallee(cs));</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isExtCall(getCallee(inst));</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"></codeline>
<codeline lineno="80"></codeline>
<codeline lineno="81"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtFunViaRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>(<ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_alloc(fun)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_realloc(fun));</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtFunViaArg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_arg_alloc(fun);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>cs.getInstruction()-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isHeapAllocExtFunViaRet(getCallee(cs));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>inst-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isHeapAllocExtFunViaRet(getCallee(inst));</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaArg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isHeapAllocExtFunViaArg(getCallee(cs));</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaArg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isHeapAllocExtFunViaArg(getCallee(inst));</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaRet(cs)<sp/>||<sp/>isHeapAllocExtCallViaArg(cs);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isHeapAllocExtCallViaRet(inst)<sp/>||<sp/>isHeapAllocExtCallViaArg(inst);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"></codeline>
<codeline lineno="127"></codeline>
<codeline lineno="128"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getHeapAllocHoldingArgPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;get_alloc_arg_pos(fun);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getHeapAllocHoldingArgPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getHeapAllocHoldingArgPosition(getCallee(cs));</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getHeapAllocHoldingArgPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getHeapAllocHoldingArgPosition(getCallee(inst));</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"></codeline>
<codeline lineno="145"></codeline>
<codeline lineno="146"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReallocExtFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>(<ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_realloc(fun));</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReallocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>cs.getInstruction()-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isReallocExtFun(getCallee(cs));</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReallocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>inst-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isReallocExtFun(getCallee(inst));</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"></codeline>
<codeline lineno="166"></codeline>
<codeline lineno="167"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDeallocExtFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>(<ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;is_dealloc(fun));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDeallocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDeallocExtFun(getCallee(cs));</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDeallocExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDeallocExtFun(getCallee(inst));</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"></codeline>
<codeline lineno="187"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStaticExtFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;has_static(fun);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStaticExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>cs.getInstruction()-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isStaticExtFun(getCallee(cs));</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStaticExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrTy<sp/>=<sp/>inst-&gt;getType()-&gt;isPointerTy();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isPtrTy<sp/>&amp;&amp;<sp/>isStaticExtFun(getCallee(inst));</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"></codeline>
<codeline lineno="207"></codeline>
<codeline lineno="208"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocOrStaticExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isStaticExtCall(cs)<sp/>||<sp/>isHeapAllocExtCall(cs);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHeapAllocOrStaticExtCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isStaticExtCall(inst)<sp/>||<sp/>isHeapAllocExtCall(inst);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"></codeline>
<codeline lineno="220"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ExtAPI::extf_t<sp/>extCallTy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>fun)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ext_a_p_i_1a86508e03ca1c2e37fc9414cb2335c3ec" kindref="member">ExtAPI::getExtAPI</ref>()-&gt;get_type(fun);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"></codeline>
<codeline lineno="227"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointerType<sp/>*getRefTypeOfHeapAllocOrStatic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointerType<sp/>*refType<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>heap<sp/>object<sp/>held<sp/>by<sp/>*argument,<sp/>we<sp/>should<sp/>get<sp/>its<sp/>element<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHeapAllocExtCallViaArg(cs))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argPos<sp/>=<sp/>getHeapAllocHoldingArgPosition(cs);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*arg<sp/>=<sp/>cs.getArgument(argPos);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointerType<sp/>*argType<sp/>=<sp/>SVFUtil::dyn_cast&lt;PointerType&gt;(arg-&gt;getType()))</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refType<sp/>=<sp/>SVFUtil::dyn_cast&lt;PointerType&gt;(argType-&gt;getElementType());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>heap/static<sp/>object<sp/>held<sp/>by<sp/>return<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((isStaticExtCall(cs)<sp/>||<sp/>isHeapAllocExtCallViaRet(cs))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>heap<sp/>alloc<sp/>via<sp/>ret,<sp/>or<sp/>static<sp/>allocation<sp/>site&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refType<sp/>=<sp/>SVFUtil::dyn_cast&lt;PointerType&gt;(cs.getType());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(refType<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Allocated<sp/>object<sp/>must<sp/>be<sp/>held<sp/>by<sp/>a<sp/>pointer-typed<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>refType;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointerType<sp/>*getRefTypeOfHeapAllocOrStatic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSite<sp/>cs(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Instruction*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRefTypeOfHeapAllocOrStatic(cs);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"></codeline>
<codeline lineno="258"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadForkCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf" kindref="member">isTDFork</ref>(cs);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadForkCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf" kindref="member">isTDFork</ref>(inst);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"></codeline>
<codeline lineno="270"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHareParForCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a86d75b7e3570337e484397e60f97d88e" kindref="member">isHareParFor</ref>(cs);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHareParForCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a86d75b7e3570337e484397e60f97d88e" kindref="member">isHareParFor</ref>(inst);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"></codeline>
<codeline lineno="282"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadJoinCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44" kindref="member">isTDJoin</ref>(cs);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadJoinCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44" kindref="member">isTDJoin</ref>(inst);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"></codeline>
<codeline lineno="294"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadExitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1ae87d129560d7015966336f06a516db23" kindref="member">isTDExit</ref>(cs);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThreadExitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1ae87d129560d7015966336f06a516db23" kindref="member">isTDExit</ref>(inst);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"></codeline>
<codeline lineno="306"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLockAquireCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9db4df7968ec179e5012794c58fdee70" kindref="member">isTDAcquire</ref>(cs);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLockAquireCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9db4df7968ec179e5012794c58fdee70" kindref="member">isTDAcquire</ref>(inst);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"></codeline>
<codeline lineno="318"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLockReleaseCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a38adae633d5aceddcca3b3a23ad66db9" kindref="member">isTDRelease</ref>(cs);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLockReleaseCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a38adae633d5aceddcca3b3a23ad66db9" kindref="member">isTDRelease</ref>(inst);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"></codeline>
<codeline lineno="329"></codeline>
<codeline lineno="330"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBarrierWaitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a0ff50b4312b9aa2c7ebd00e9a40a2668" kindref="member">isTDBarWait</ref>(cs);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBarrierWaitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a0ff50b4312b9aa2c7ebd00e9a40a2668" kindref="member">isTDBarWait</ref>(inst);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"></codeline>
<codeline lineno="341"></codeline>
<codeline lineno="342"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getForkedFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a7ddc0c71aeae315af21972a4905b3456" kindref="member">getForkedFun</ref>(cs);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getForkedFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a7ddc0c71aeae315af21972a4905b3456" kindref="member">getForkedFun</ref>(inst);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"></codeline>
<codeline lineno="353"></codeline>
<codeline lineno="354"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getActualParmAtForkSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a6bc40bc0b35c23e9d1874c844511449d" kindref="member">getActualParmAtForkSite</ref>(cs);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getActualParmAtForkSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a6bc40bc0b35c23e9d1874c844511449d" kindref="member">getActualParmAtForkSite</ref>(inst);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"></codeline>
<codeline lineno="365"></codeline>
<codeline lineno="366"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getTaskFuncAtHareParForSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1afeedd6e518af76fa9e7142af8899b2f5" kindref="member">getTaskFuncAtHareParForSite</ref>(cs);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getTaskFuncAtHareParForSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1afeedd6e518af76fa9e7142af8899b2f5" kindref="member">getTaskFuncAtHareParForSite</ref>(inst);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"></codeline>
<codeline lineno="377"></codeline>
<codeline lineno="378"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getTaskDataAtHareParForSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a58cf56e35be873a5a26c5eb0d9b5c9b3" kindref="member">getTaskDataAtHareParForSite</ref>(cs);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getTaskDataAtHareParForSite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_a_p_i_1a6852ff1eedc1117e95e45e4a90c80d53" kindref="member">ThreadAPI::getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a58cf56e35be873a5a26c5eb0d9b5c9b3" kindref="member">getTaskDataAtHareParForSite</ref>(inst);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"></codeline>
<codeline lineno="389"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isObject<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>ref);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstantData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SVFUtil::isa&lt;ConstantData&gt;(val)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>SVFUtil::isa&lt;ConstantAggregate&gt;(val)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>SVFUtil::isa&lt;MetadataAsValue&gt;(val)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>SVFUtil::isa&lt;BlockAddress&gt;(val);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"></codeline>
<codeline lineno="403"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDeadFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*<sp/>fun);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArgInDeadFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>val)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SVFUtil::isa&lt;Argument&gt;(val)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>isDeadFunction(SVFUtil::cast&lt;Argument&gt;(val)-&gt;getParent());</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"></codeline>
<codeline lineno="415"></codeline>
<codeline lineno="416"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProgEntryFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>fun-&gt;getName().str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProgEntryFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>fun-&gt;getName().str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/>getProgEntryFunction(SVFModule*<sp/>svfModule)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SVFModule::const_iterator<sp/>it<sp/>=<sp/>svfModule-&gt;begin(),<sp/>eit<sp/>=<sp/>svfModule-&gt;end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*fun<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isProgEntryFunction(fun))</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fun);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArgInProgEntryFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>val)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SVFUtil::isa&lt;Argument&gt;(val)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>isProgEntryFunction(SVFUtil::cast&lt;Argument&gt;(val)-&gt;getParent());</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPtrInDeadFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="448"></codeline>
<codeline lineno="450"></codeline>
<codeline lineno="451"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProgExitFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun<sp/>&amp;&amp;<sp/>(fun-&gt;getName().str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun-&gt;getName().str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__assert_rtn&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun-&gt;getName().str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__assert_fail&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProgExitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallSite<sp/>cs)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isProgExitFunction(getCallee(cs));</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProgExitCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isProgExitFunction(getCallee(inst));</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"></codeline>
<codeline lineno="470"></codeline>
<codeline lineno="471"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNoCallerFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDeadFunction(fun)<sp/>||<sp/>isProgEntryFunction(fun);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArgInNoCallerFunction<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>val)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SVFUtil::isa&lt;Argument&gt;(val)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>isNoCallerFunction(SVFUtil::cast&lt;Argument&gt;(val)-&gt;getParent());</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"></codeline>
<codeline lineno="486"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>functionDoesNotRet<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*<sp/>fun);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getFunReachableBBs<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function<sp/>*<sp/>fun,<sp/>DominatorTree*<sp/>dt,std::vector&lt;const<sp/>BasicBlock*&gt;&amp;<sp/>bbs);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>getFunExitBB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;fun-&gt;back();</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*<sp/>stripConstantCasts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">Value<sp/>*stripAllCasts(Value<sp/>*val)<sp/>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*getTypeOfHeapAlloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>llvm::Instruction<sp/>*inst)<sp/>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"></codeline>
<codeline lineno="508"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isGepConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::GetElementPtr)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isInt2PtrConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::IntToPtr)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isPtr2IntConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::PtrToInt)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isCastConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::BitCast)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isSelectConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::Select)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isTruncConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::Trunc<sp/>||</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::FPTrunc<sp/>||</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::ZExt<sp/>||</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::SExt<sp/>||</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::FPExt)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isCmpConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::ICmp<sp/>||<sp/>constExpr-&gt;getOpcode()<sp/>==<sp/>Instruction::FCmp)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isBinaryConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((constExpr-&gt;getOpcode()<sp/>&gt;=<sp/>Instruction::BinaryOpsBegin)<sp/>&amp;&amp;<sp/>(constExpr-&gt;getOpcode()<sp/>&lt;=<sp/>Instruction::BinaryOpsEnd))</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr<sp/>*isUnaryConstantExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*val)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstantExpr*<sp/>constExpr<sp/>=<sp/>SVFUtil::dyn_cast&lt;ConstantExpr&gt;(val))</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((constExpr-&gt;getOpcode()<sp/>&gt;=<sp/>Instruction::UnaryOpsBegin)<sp/>&amp;&amp;<sp/>(constExpr-&gt;getOpcode()<sp/>&lt;=<sp/>Instruction::UnaryOpsEnd))</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constExpr;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"></codeline>
<codeline lineno="604"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getNextInsts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>curInst,<sp/>std::vector&lt;const<sp/>Instruction*&gt;&amp;<sp/>instList);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getPrevInsts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>curInst,<sp/>std::vector&lt;const<sp/>Instruction*&gt;&amp;<sp/>instList);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">u32_t<sp/>getBBSuccessorPos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*BB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*Succ);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">u32_t<sp/>getBBSuccessorNum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*BB);</highlight></codeline>
<codeline lineno="614"><highlight class="normal">u32_t<sp/>getBBPredecessorPos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*BB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*Pred);</highlight></codeline>
<codeline lineno="616"><highlight class="normal">u32_t<sp/>getBBPredecessorNum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*BB);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isIRFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processArguments(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;arg_num,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**arg_value,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>&amp;moduleNameVec);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVFUtil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_SVF_FE_LLVMUTIL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/SVF-FE/LLVMUtil.h"/>
  </compounddef>
</doxygen>
