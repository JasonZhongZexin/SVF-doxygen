<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_v_f_g" xml:lang="en-US">
<title>SVF::VFG Class Reference</title>
<indexterm><primary>SVF::VFG</primary></indexterm>
<para>Inheritance diagram for SVF::VFG:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_v_f_g.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6"/>enum <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> { <emphasis role="strong">ORIGSVFGK</emphasis>
, <emphasis role="strong">PTRONLYSVFGK</emphasis>
 }</para>

<para><link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> kind. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab2abe2ba4ac9e3e1d326d042d35acbc0"/>typedef Map&lt; NodeID, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * &gt; <emphasis role="strong">VFGNodeIDToNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a03d388eec513f713f5e0d06f920168db"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * &gt; <emphasis role="strong">VFGNodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab9381c54f2339b3738348ae8b0d6659f"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, NodeID &gt; <emphasis role="strong">PAGNodeToDefMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1abec730a1ec61532cd164f3d42aa107b0"/>typedef Map&lt; std::pair&lt; NodeID, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt;, <link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">ActualParmVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToActualParmMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a999654aa377639db5c1e40f603e655a7"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">ActualRetVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToActualRetMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a6eb72d2fe080def018d09604fe3affcf"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">FormalParmVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToFormalParmMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a52dac90d700a2377b657ec34d3ad2241"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToFormalRetMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab37b067a59b52c472a284eabbeba43ff"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *, <link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link> * &gt; <emphasis role="strong">PAGEdgeToStmtVFGNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aeed3eca629b10554f40b1d2b478580d4"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_intra_p_h_i_v_f_g_node">IntraPHIVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToPHIVFGNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a7cefa553955e208d6eb4fcd01ed3c383"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_binary_o_p_v_f_g_node">BinaryOPVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToBinaryOPVFGNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1acfcd84ac6bedde4e7e74abdeb9233474"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_unary_o_p_v_f_g_node">UnaryOPVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToUnaryOPVFGNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9c2446f54d3738b6c0e65632a1200ba0"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *, <link linkend="_class_s_v_f_1_1_cmp_v_f_g_node">CmpVFGNode</link> * &gt; <emphasis role="strong">PAGNodeToCmpVFGNodeMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad63218978f65ab91ae21bc24c882a716"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *, VFGNodeSet &gt; <emphasis role="strong">FunToVFGNodesMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ade3f735b3c7b1a53cab3d67cd9f7b874"/>typedef FormalParmVFGNode::CallPESet <emphasis role="strong">CallPESet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1abf966182c28f0521dcd161aa299e453d"/>typedef FormalRetVFGNode::RetPESet <emphasis role="strong">RetPESet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0bdac7337a393ad2e21a33ec1978ca3f"/>typedef VFGEdge::VFGEdgeSetTy <emphasis role="strong">VFGEdgeSetTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ac97ef8c479556f9ca2c40cd4d8a18694"/>typedef VFGEdge::SVFGEdgeSetTy <emphasis role="strong">SVFGEdgeSetTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a3037ca34a555ebdb4fbf0e86291dc4ea"/>typedef VFGEdge::VFGEdgeSetTy::iterator <emphasis role="strong">VFGNodeIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a241d0489bf0315460e2b07db87e7847c"/>typedef VFGNodeIDToNodeMapTy::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a225a91c04afac6a8fe198e9860890a52"/>typedef VFGNodeIDToNodeMapTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ade9d05bb026081e9a2c839dd2c56eab9"/>typedef PAG::PAGEdgeSet <emphasis role="strong">PAGEdgeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a113185086912213257b04daa4590bf13"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * &gt; <emphasis role="strong">GlobalVFGNodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab12de81e2912f06551ca7a6693f5046b"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * &gt; <emphasis role="strong">PAGNodeSet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1">VFG</link> (<link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> *callgraph, <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> k=ORIGSVFGK)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b"/>virtual <link linkend="_class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b">~VFG</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7"/><link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> <link linkend="_class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7">getKind</link> () const</para>

<para>Get <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> kind. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d"/>bool <link linkend="_class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d">isPtrOnlySVFG</link> () const</para>

<para>Return true if this <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> only contains pointer related SVFGNodes for pointer analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4">setDumpVFG</link> (bool flag)</para>

<para>Whether to dump <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link>;. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688"/>bool <link linkend="_class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688">getDumpVFG</link> () const</para>

<para>Whether to dump <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link>;. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1"/><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1">getPAG</link> () const</para>

<para>Return <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2">getCallGraph</link> () const</para>

<para>Return CallGraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc"/><link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc">getVFGNode</link> (NodeID id) const</para>

<para>Get a <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1"/>bool <link linkend="_class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1">hasVFGNode</link> (NodeID id) const</para>

<para>Whether has the <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a"/>GlobalVFGNodeSet &amp; <link linkend="_class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a">getGlobalVFGNodes</link> ()</para>

<para>Return global stores. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48">getVFGEdge</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *src, const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</para>

<para>Get a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge according to src and dst. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1aee3d0c4ed32bde425f33281f248b7dd2">dump</link> (const std::string &amp;file, bool simple=false)</para>

<para>Dump graph into dot file. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b">updateCallGraph</link> (<link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> *pta)</para>

<para>Update <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> based on pointer analysis results. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab">connectCallerAndCallee</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *callee, VFGEdgeSetTy &amp;edges)</para>

<para>Connect <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes between caller and callee for indirect call site. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728"/>CallSiteID <link linkend="_class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728">getCallSiteID</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *func) const</para>

<para>Get callsite given a callsiteID. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1af04068b6f6beff961f815cc6eae7f5b0"/>const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * <emphasis role="strong">getCallSite</emphasis> (CallSiteID id) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e"/>const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e">getDefVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>

<para>Given a pagNode, return its definition site. </para>
</listitem>
            <listitem><para>const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac">getLHSTopLevPtr</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *node) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6"/><link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6">getStmtVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *pagEdge) const</para>

<para>Get an <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a688c0cc4a67c7cd9afbef2f0c264c85b"/><link linkend="_class_s_v_f_1_1_intra_p_h_i_v_f_g_node">IntraPHIVFGNode</link> * <emphasis role="strong">getIntraPHIVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a27bd4d5ba75d65056d77882869b0c64d"/><link linkend="_class_s_v_f_1_1_binary_o_p_v_f_g_node">BinaryOPVFGNode</link> * <emphasis role="strong">getBinaryOPVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a1ba67eb17437a1a47c230614c1e3d9fd"/><link linkend="_class_s_v_f_1_1_unary_o_p_v_f_g_node">UnaryOPVFGNode</link> * <emphasis role="strong">getUnaryOPVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9215c1d7f1152967f0731057a085e793"/><link linkend="_class_s_v_f_1_1_cmp_v_f_g_node">CmpVFGNode</link> * <emphasis role="strong">getCmpVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a01b8694a5ab7acf8df0213225550791b"/><link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">ActualParmVFGNode</link> * <emphasis role="strong">getActualParmVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *aparm, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0b072e8e45899b89da0a466140563c38"/><link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">ActualRetVFGNode</link> * <emphasis role="strong">getActualRetVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *aret) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a75eb519e4f89a116db98fccb263af4d6"/><link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">FormalParmVFGNode</link> * <emphasis role="strong">getFormalParmVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *fparm) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab7ba9d179504165f277d347a7cb9f5d8"/><link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link> * <emphasis role="strong">getFormalRetVFGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *fret) const</para>
</listitem>
            <listitem><para>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab">isFunEntryVFGNode</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *node) const</para>

<para>Whether a node is function entry <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50"/>bool <link linkend="_class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50">hasBlackHoleConstObjAddrAsDef</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>

<para>Whether a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> has a blackhole or const object as its definition. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2">addIntraDirectVFEdge</link> (NodeID srcId, NodeID dstId)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea">addCallEdge</link> (NodeID srcId, NodeID dstId, CallSiteID csId)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2">addRetEdge</link> (NodeID srcId, NodeID dstId, CallSiteID csId)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a">removeVFGEdge</link> (<link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> *edge)</para>

<para>Remove a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e">removeVFGNode</link> (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *node)</para>

<para>Remove a <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f">hasIntraVFGEdge</link> (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</para>

<para>Whether we has a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9">hasInterVFGEdge</link> (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind, CallSiteID csId)</para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba">hasThreadVFGEdge</link> (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d"/>bool <link linkend="_class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d">addVFGEdge</link> (<link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> *edge)</para>

<para>Add <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> edge. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>VFGNodeSet &amp; <link linkend="_class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9">getVFGNodes</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a76af43e28630eb56a1aa5971f516d43d"/>bool <emphasis role="strong">hasVFGNodes</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a43f4002b0beb00ed2026f7edd9ebbb1c"/>bool <emphasis role="strong">VFGNodes</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a5166be2c1231a93c9b9ce5f272797b94"/>VFGNodeSet::const_iterator <emphasis role="strong">getVFGNodeBegin</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a28f2bdcbbc0bab00e93df62ea11647a2"/>VFGNodeSet::const_iterator <emphasis role="strong">getVFGNodeEnd</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69">destroy</link> ()</para>

<para>Clean up memory. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96">checkIntraEdgeParents</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *srcNode, const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *dstNode)</para>

<para>sanitize Intra edges, verify that both nodes belong to the same function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461"/><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461">addInterEdgeFromAPToFP</link> (<link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">ActualParmVFGNode</link> *src, <link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">FormalParmVFGNode</link> *dst, CallSiteID csId)</para>

<para>Add inter VF edge from actual to formal parameters. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41"/><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41">addInterEdgeFromFRToAR</link> (<link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link> *src, <link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">ActualRetVFGNode</link> *dst, CallSiteID csId)</para>

<para>Add inter VF edge from callee return to callsite receive parameter. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2"/><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2">addInterEdgeFromAPToFP</link> (NodeID src, NodeID dst, CallSiteID csId)</para>

<para>Add inter VF edge from actual to formal parameters. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01"/><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * <link linkend="_class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01">addInterEdgeFromFRToAR</link> (NodeID src, NodeID dst, CallSiteID csId)</para>

<para>Add inter VF edge from callee return to callsite receive parameter. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0">connectAParamAndFParam</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *csArg, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *funArg, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cbn, CallSiteID csId, VFGEdgeSetTy &amp;edges)</para>

<para>Connect <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes between caller and callee for indirect call site. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b"/>virtual void <link linkend="_class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b">connectFRetAndARet</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *funReturn, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *csReturn, CallSiteID csId, VFGEdgeSetTy &amp;edges)</para>

<para>Connect formal-ret and actual ret. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660">setDef</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode, const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *node)</para>

<para>Given a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link>, set/get its def <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node (definition of top level pointers) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a7343f970332391634f79b2023bba6650"/>NodeID <emphasis role="strong">getDef</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab5b63b4f6317bfb5875f2b977bcf26a4"/>bool <emphasis role="strong">hasDef</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862">addVFGNodes</link> ()</para>

<para>Create <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682"/>virtual PAGEdge::PAGEdgeSetTy &amp; <link linkend="_class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682">getPAGEdgeSet</link> (<link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PAGEdge::PEDGEK</link> kind)</para>

<para>Get <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0b71873131a63eb6ee47ed2f66e3154a"/>virtual bool <emphasis role="strong">isInterestedPAGNode</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *node) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0">connectDirectVFGEdges</link> ()</para>

<para>Create edges between <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes within a function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b">addVFGInterEdges</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *callee)</para>

<para>Create edges between <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes across functions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a8ddf15d89a1b11a7f7720b671f4f0295"/>bool <emphasis role="strong">isPhiCopyEdge</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *copy) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383"/>virtual void <link linkend="_class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383">addVFGNode</link> (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *vfgNode, <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *icfgNode)</para>

<para>Add a <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927">addStmtVFGNode</link> (<link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link> *node, const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *pagEdge)</para>

<para>Add a <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node for program statement. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607">addNullPtrVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *pagNode)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959">addAddrVFGNode</link> (const <link linkend="_class_s_v_f_1_1_addr_p_e">AddrPE</link> *addr)</para>

<para>Add an Address <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46">addCopyVFGNode</link> (const <link linkend="_class_s_v_f_1_1_copy_p_e">CopyPE</link> *copy)</para>

<para>Add a Copy <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84">addGepVFGNode</link> (const <link linkend="_class_s_v_f_1_1_gep_p_e">GepPE</link> *gep)</para>

<para>Add a Gep <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61">addLoadVFGNode</link> (const <link linkend="_class_s_v_f_1_1_load_p_e">LoadPE</link> *load)</para>

<para>Add a Load <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be">addStoreVFGNode</link> (const <link linkend="_class_s_v_f_1_1_store_p_e">StorePE</link> *store)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39">addActualParmVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *aparm, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d">addFormalParmVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *fparm, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun, CallPESet &amp;callPEs)</para>

<para>Add a formal parameter <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373">addFormalRetVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *uniqueFunRet, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun, RetPESet &amp;retPEs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251">addActualRetVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *ret, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs)</para>

<para>Add a callsite Receive <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c">addIntraPHIVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *phiResNode, PAG::CopyPEList &amp;oplist)</para>

<para>Add an llvm PHI <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843">addCmpVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *resNode, PAG::CmpPEList &amp;oplist)</para>

<para>Add a Compare <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1">addBinaryOPVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *resNode, PAG::BinaryOPList &amp;oplist)</para>

<para>Add a BinaryOperator <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e"/>void <link linkend="_class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e">addUnaryOPVFGNode</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *resNode, PAG::UnaryOPList &amp;oplist)</para>

<para>Add a UnaryOperator <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1acb181d4f9faa40578c80e2018e2742b8"/>NodeID <emphasis role="strong">totalVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe"/>PAGNodeToDefMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe">PAGNodeToDefMap</link></para>

<para>map a pag node to its definition SVG node </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a"/>PAGNodeToActualParmMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a">PAGNodeToActualParmMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to an actual parameter </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66"/>PAGNodeToActualRetMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66">PAGNodeToActualRetMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to an actual return </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8"/>PAGNodeToFormalParmMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8">PAGNodeToFormalParmMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to a formal parameter </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a"/>PAGNodeToFormalRetMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a">PAGNodeToFormalRetMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to a formal return </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17"/>PAGNodeToPHIVFGNodeMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17">PAGNodeToIntraPHIVFGNodeMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to its <link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">PHIVFGNode</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6"/>PAGNodeToBinaryOPVFGNodeMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6">PAGNodeToBinaryOPVFGNodeMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to its <link linkend="_class_s_v_f_1_1_binary_o_p_v_f_g_node">BinaryOPVFGNode</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051"/>PAGNodeToUnaryOPVFGNodeMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051">PAGNodeToUnaryOPVFGNodeMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to its <link linkend="_class_s_v_f_1_1_unary_o_p_v_f_g_node">UnaryOPVFGNode</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde"/>PAGNodeToCmpVFGNodeMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde">PAGNodeToCmpVFGNodeMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> to its <link linkend="_class_s_v_f_1_1_cmp_v_f_g_node">CmpVFGNode</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f"/>PAGEdgeToStmtVFGNodeMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f">PAGEdgeToStmtVFGNodeMap</link></para>

<para>map a <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> to its <link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049"/>FunToVFGNodesMapTy <link linkend="_class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049">funToVFGNodesMap</link></para>

<para>map a function to its VFGNodes; </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3"/>GlobalVFGNodeSet <link linkend="_class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3">globalVFGNodes</link></para>

<para>set of global store <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0c8cf98b652b5eb97d22e2636576f92f"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <emphasis role="strong">callgraph</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad4f5debd234a444516c3a406c464795c"/><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <emphasis role="strong">pag</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a3867c591a231bad0aa2e6ab7c095a42f"/><link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> <emphasis role="strong">kind</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ae92915ff0535e22f9239fc2a0c7f0265"/>bool <emphasis role="strong">dumpVFG</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1"/>    <section>
    <title>VFG()</title>
<indexterm><primary>VFG</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>VFG</secondary></indexterm>
<para><computeroutput>VFG::VFG (<link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * cg, <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> k = <computeroutput>ORIGSVFGK</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor<itemizedlist>
<listitem>
<para>Build <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> 1) build <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes statements for top level pointers (PAGEdges) 2) connect <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> edges between two statements (PAGEdges) </para>
</listitem></itemizedlist>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39"/>    <section>
    <title>addActualParmVFGNode()</title>
<indexterm><primary>addActualParmVFGNode</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addActualParmVFGNode</secondary></indexterm>
<para><computeroutput>void SVF::VFG::addActualParmVFGNode (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * aparm, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * cs)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Add an actual parameter <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node To be noted that multiple actual parameters may have same value (<link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link>) So we need to make a pair &lt;PAGNodeID,CallSiteID&gt; to find the right VFGParmNode </para>

<para>do not set def here, this node is not a variable definition</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea"/>    <section>
    <title>addCallEdge()</title>
<indexterm><primary>addCallEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addCallEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::addCallEdge (NodeID srcId, NodeID dstId, CallSiteID csId)</computeroutput></para>
<para>Add interprocedural call edges for top level pointers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373"/>    <section>
    <title>addFormalRetVFGNode()</title>
<indexterm><primary>addFormalRetVFGNode</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addFormalRetVFGNode</secondary></indexterm>
<para><computeroutput>void SVF::VFG::addFormalRetVFGNode (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * uniqueFunRet, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * fun, RetPESet &amp; retPEs)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Add a callee Return <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node To be noted that here we assume returns of a procedure have already been unified into one Otherwise, we need to handle formalRet using &lt;PAGNodeID,CallSiteID&gt; pair to find FormalRetVFG node same as handling actual parameters </para>

<para>if this uniqueFunRet is a phi node, which means it will receive values from multiple return instructions of fun we will set this phi node&apos;s def later</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2"/>    <section>
    <title>addIntraDirectVFEdge()</title>
<indexterm><primary>addIntraDirectVFEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addIntraDirectVFEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::addIntraDirectVFEdge (NodeID srcId, NodeID dstId)</computeroutput></para>
<para>Add control-flow edges for top level pointers</para>

<para>Add def-use edges for top level pointers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607"/>    <section>
    <title>addNullPtrVFGNode()</title>
<indexterm><primary>addNullPtrVFGNode</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addNullPtrVFGNode</secondary></indexterm>
<para><computeroutput>void SVF::VFG::addNullPtrVFGNode (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * pagNode)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Add a Dummy <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node for null pointer definition To be noted for black hole pointer it has already has address edge connected </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2"/>    <section>
    <title>addRetEdge()</title>
<indexterm><primary>addRetEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addRetEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::addRetEdge (NodeID srcId, NodeID dstId, CallSiteID csId)</computeroutput></para>
<para>Add interprocedural return edges for top level pointers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be"/>    <section>
    <title>addStoreVFGNode()</title>
<indexterm><primary>addStoreVFGNode</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addStoreVFGNode</secondary></indexterm>
<para><computeroutput>void SVF::VFG::addStoreVFGNode (const <link linkend="_class_s_v_f_1_1_store_p_e">StorePE</link> * store)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Add a Store <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node, To be noted store does not create a new pointer, we do not set def for any <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> node </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862"/>    <section>
    <title>addVFGNodes()</title>
<indexterm><primary>addVFGNodes</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>addVFGNodes</secondary></indexterm>
<para><computeroutput>void VFG::addVFGNodes ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Create <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes. </para>
</para>

<para>Create <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes for top level pointers </para>

<para>for external function we do not create acutalRet <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> they are in the formal of <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrVFGNode</link> if the external function returns an allocated memory if fun has body, it may also exist in isExtCall, e.g., xmalloc() in bzip2, spec2000.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0"/>    <section>
    <title>connectAParamAndFParam()</title>
<indexterm><primary>connectAParamAndFParam</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>connectAParamAndFParam</secondary></indexterm>
<para><computeroutput>virtual void SVF::VFG::connectAParamAndFParam (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * csArg, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * funArg, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * cbn, CallSiteID csId, VFGEdgeSetTy &amp; edges)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Connect <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes between caller and callee for indirect call site. </para>
</para>

<para>Connect actual-param and formal param </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4">SVF::SVFGOPT</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab"/>    <section>
    <title>connectCallerAndCallee()</title>
<indexterm><primary>connectCallerAndCallee</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>connectCallerAndCallee</secondary></indexterm>
<para><computeroutput>void VFG::connectCallerAndCallee (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * callBlockNode, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * callee, VFGEdgeSetTy &amp; edges)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Connect <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes between caller and callee for indirect call site. </para>
</para>

<para>Connect actual params/return to formal params/return for top-level variables. Also connect indirect actual in/out and formal in/out. </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_s_v_f_g_1a0cebc2ba5ae81a6d45b224a4f94fc8b4">SVF::SVFG</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0"/>    <section>
    <title>connectDirectVFGEdges()</title>
<indexterm><primary>connectDirectVFGEdges</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>connectDirectVFGEdges</secondary></indexterm>
<para><computeroutput>void VFG::connectDirectVFGEdges ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Create edges between <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> nodes within a function. </para>
</para>

<para>Connect def-use chains for direct value-flow, (value-flow of top level pointers) </para>

<para>do not handle AddrSVFG node, as it is already the source of a definition</para>

<para>for all other cases, like copy/gep/load/ret, connect the RHS pointer to its def</para>

<para>for store, connect the RHS/LHS pointer to its def</para>

<para>connect formal ret to its definition node</para>

<para>connect formal ret to actual ret</para>

<para>Do not process <link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link>, as they are connected by copy within callee We assume one procedure only has unique return</para>

<para>connect direct value-flow edges (parameter passing) for thread fork/join add fork edge</para>

<para>add join edge</para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69"/>    <section>
    <title>destroy()</title>
<indexterm><primary>destroy</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>destroy</secondary></indexterm>
<para><computeroutput>void VFG::destroy ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Clean up memory. </para>
</para>

<para>Memory has been cleaned up at <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aee3d0c4ed32bde425f33281f248b7dd2"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>dump</secondary></indexterm>
<para><computeroutput>void VFG::dump (const std::string &amp; file, bool simple = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Dump graph into dot file. </para>
</para>

<para>Dump <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac"/>    <section>
    <title>getLHSTopLevPtr()</title>
<indexterm><primary>getLHSTopLevPtr</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>getLHSTopLevPtr</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * VFG::getLHSTopLevPtr (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * node) const</computeroutput></para>
<para>Given a <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> node, return its left hand side top level pointer </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48"/>    <section>
    <title>getVFGEdge()</title>
<indexterm><primary>getVFGEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>getVFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::getVFGEdge (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * src, const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</computeroutput></para><para>

<para>Get a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge according to src and dst. </para>
</para>

<para>Return the corresponding <link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9"/>    <section>
    <title>getVFGNodes()</title>
<indexterm><primary>getVFGNodes</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>getVFGNodes</secondary></indexterm>
<para><computeroutput>VFGNodeSet&amp; SVF::VFG::getVFGNodes (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * fun)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Return all the VFGNodes of a function </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9"/>    <section>
    <title>hasInterVFGEdge()</title>
<indexterm><primary>hasInterVFGEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>hasInterVFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::hasInterVFGEdge (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind, CallSiteID csId)</computeroutput></para>
<para>Whether we has an inter <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f"/>    <section>
    <title>hasIntraVFGEdge()</title>
<indexterm><primary>hasIntraVFGEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>hasIntraVFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::hasIntraVFGEdge (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</computeroutput></para><para>

<para>Whether we has a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edge. </para>
</para>

<para>Whether we has an intra <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba"/>    <section>
    <title>hasThreadVFGEdge()</title>
<indexterm><primary>hasThreadVFGEdge</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>hasThreadVFGEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> * VFG::hasThreadVFGEdge (<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * src, <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * dst, <link linkend="_class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5">VFGEdge::VFGEdgeK</link> kind)</computeroutput></para>
<para>Whether we has an thread <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link> edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab"/>    <section>
    <title>isFunEntryVFGNode()</title>
<indexterm><primary>isFunEntryVFGNode</primary><secondary>SVF::VFG</secondary></indexterm>
<indexterm><primary>SVF::VFG</primary><secondary>isFunEntryVFGNode</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * VFG::isFunEntryVFGNode (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * node) const</computeroutput></para><para>

<para>Whether a node is function entry <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>. </para>
</para>

<para>Whether this is an function entry <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> (formal parameter, formal In) </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/VFG.hlib/Graphs/VFG.cpp</section>
</section>
