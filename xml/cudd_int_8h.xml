<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cudd_int_8h" kind="file" language="C++">
    <compoundname>cuddInt.h</compoundname>
    <includes local="no">math.h</includes>
    <includes refid="cudd_8h" local="yes">cudd.h</includes>
    <includes refid="st_8h" local="yes">st.h</includes>
    <includedby refid="_conditions_8h" local="yes">include/Util/Conditions.h</includedby>
    <includedby refid="cudd_add_ite_8c" local="yes">lib/CUDD/cuddAddIte.c</includedby>
    <includedby refid="cudd_anneal_8c" local="yes">lib/CUDD/cuddAnneal.c</includedby>
    <includedby refid="cudd_a_p_i_8c" local="yes">lib/CUDD/cuddAPI.c</includedby>
    <includedby refid="cudd_bdd_abs_8c" local="yes">lib/CUDD/cuddBddAbs.c</includedby>
    <includedby refid="cudd_bdd_ite_8c" local="yes">lib/CUDD/cuddBddIte.c</includedby>
    <includedby refid="cudd_cache_8c" local="yes">lib/CUDD/cuddCache.c</includedby>
    <includedby refid="cudd_check_8c" local="yes">lib/CUDD/cuddCheck.c</includedby>
    <includedby refid="cudd_cof_8c" local="yes">lib/CUDD/cuddCof.c</includedby>
    <includedby refid="cudd_exact_8c" local="yes">lib/CUDD/cuddExact.c</includedby>
    <includedby refid="cudd_genetic_8c" local="yes">lib/CUDD/cuddGenetic.c</includedby>
    <includedby refid="cudd_group_8c" local="yes">lib/CUDD/cuddGroup.c</includedby>
    <includedby refid="cudd_init_8c" local="yes">lib/CUDD/cuddInit.c</includedby>
    <includedby refid="cudd_interact_8c" local="yes">lib/CUDD/cuddInteract.c</includedby>
    <includedby refid="cudd_l_cache_8c" local="yes">lib/CUDD/cuddLCache.c</includedby>
    <includedby refid="cudd_linear_8c" local="yes">lib/CUDD/cuddLinear.c</includedby>
    <includedby refid="cudd_ref_8c" local="yes">lib/CUDD/cuddRef.c</includedby>
    <includedby refid="cudd_reorder_8c" local="yes">lib/CUDD/cuddReorder.c</includedby>
    <includedby refid="cudd_sat_8c" local="yes">lib/CUDD/cuddSat.c</includedby>
    <includedby refid="cudd_symmetry_8c" local="yes">lib/CUDD/cuddSymmetry.c</includedby>
    <includedby refid="cudd_table_8c" local="yes">lib/CUDD/cuddTable.c</includedby>
    <includedby refid="cudd_util_8c" local="yes">lib/CUDD/cuddUtil.c</includedby>
    <includedby refid="cudd_window_8c" local="yes">lib/CUDD/cuddWindow.c</includedby>
    <includedby refid="cudd_zdd_funcs_8c" local="yes">lib/CUDD/cuddZddFuncs.c</includedby>
    <includedby refid="cudd_zdd_group_8c" local="yes">lib/CUDD/cuddZddGroup.c</includedby>
    <includedby refid="cudd_zdd_isop_8c" local="yes">lib/CUDD/cuddZddIsop.c</includedby>
    <includedby refid="cudd_zdd_lin_8c" local="yes">lib/CUDD/cuddZddLin.c</includedby>
    <includedby refid="cudd_zdd_reord_8c" local="yes">lib/CUDD/cuddZddReord.c</includedby>
    <includedby refid="cudd_zdd_setop_8c" local="yes">lib/CUDD/cuddZddSetop.c</includedby>
    <includedby refid="cudd_zdd_symm_8c" local="yes">lib/CUDD/cuddZddSymm.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="6">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="1">
        <label>include/CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="27">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="45">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>include/Util/CFLSolver.h</label>
        <link refid="_c_f_l_solver_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="47">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="1">
        <label>include/CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="36">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="24">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="14">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="13">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="40">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="41">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="16">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="25">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="17">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="42">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="29">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="33">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="35">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="44">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_dd_gen" prot="public">DdGen</innerclass>
    <innerclass refid="struct_dd_hook" prot="public">DdHook</innerclass>
    <innerclass refid="struct_dd_local_cache_item" prot="public">DdLocalCacheItem</innerclass>
    <innerclass refid="struct_dd_local_cache" prot="public">DdLocalCache</innerclass>
    <innerclass refid="struct_dd_hash_item" prot="public">DdHashItem</innerclass>
    <innerclass refid="struct_dd_hash_table" prot="public">DdHashTable</innerclass>
    <innerclass refid="struct_dd_cache" prot="public">DdCache</innerclass>
    <innerclass refid="struct_dd_subtable" prot="public">DdSubtable</innerclass>
    <innerclass refid="struct_dd_manager" prot="public">DdManager</innerclass>
    <innerclass refid="struct_move" prot="public">Move</innerclass>
    <innerclass refid="struct_dd_queue_item" prot="public">DdQueueItem</innerclass>
    <innerclass refid="struct_dd_level_queue" prot="public">DdLevelQueue</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cudd_int_8h_1ae07aeb3e71cba1db3dd632ae778a9854" prot="public" static="no">
        <name>DD_INLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CHeaderFile*****************************************************************</para>
<para>FileName [<ref refid="cudd_int_8h_source" kindref="compound">cuddInt.h</ref>]</para>
<para>PackageName [cudd]</para>
<para>Synopsis [Internal data structures of the CUDD package.]</para>
<para>Description []</para>
<para>SeeAlso []</para>
<para>Author [Fabio Somenzi]</para>
<para>Copyright [Copyright (c) 1995-2012, Regents of the University of Colorado</para>
<para>All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
<para>Neither the name of the University of Colorado nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.]</para>
<para>Revision [<simplesect kind="rcs"><title>Id</title><para><ref refid="cudd_int_8h_source" kindref="compound">cuddInt.h</ref>,v 1.142 2012/02/05 01:07:19 fabio Exp </para>
</simplesect>
] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="91" column="15" bodyfile="include/CUDD/cuddInt.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ad884f6728fb2a3fc752281d959f51d90" prot="public" static="no">
        <name>DD_UNUSED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="93" column="12" bodyfile="include/CUDD/cuddInt.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aefc30efdf0ba59fd4152b3f62262f0d7" prot="public" static="no">
        <name>DD_MAXREF</name>
        <initializer>((DdHalfWord) ~0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="101" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ada070a8b9e56e2607c66acd27ed53857" prot="public" static="no">
        <name>DD_DEFAULT_RESIZE</name>
        <initializer>10	/* how many extra variables */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="103" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a43e8925a026f605556bd501daa361d11" prot="public" static="no">
        <name>DD_MEM_CHUNK</name>
        <initializer>1022</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="105" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a9b5f59aa5d512b2e3783eec27765a2ee" prot="public" static="no">
        <name>DD_ONE_VAL</name>
        <initializer>(1.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="108" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a67c4f9758034f2090fac393726af9b72" prot="public" static="no">
        <name>DD_ZERO_VAL</name>
        <initializer>(0.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="109" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a93f3b925536dd3e95a7b2a27ffbb65c9" prot="public" static="no">
        <name>DD_EPSILON</name>
        <initializer>(1.0e-12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="110" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a8ea172fe92f5279a4d72d8436ac9bd03" prot="public" static="no">
        <name>DD_PLUS_INF_VAL</name>
        <initializer>(10e301)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="118" column="12" bodyfile="include/CUDD/cuddInt.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ada1d18243edfe13728afc38137337e3b" prot="public" static="no">
        <name>DD_CRI_HI_MARK</name>
        <initializer>(10e150)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="119" column="11" bodyfile="include/CUDD/cuddInt.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a4bb3f9a30070508a694e2136085624aa" prot="public" static="no">
        <name>DD_CRI_LO_MARK</name>
        <initializer>(-(DD_CRI_HI_MARK))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="120" column="11" bodyfile="include/CUDD/cuddInt.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1adb7865facc5cb706bb8e6378e114818e" prot="public" static="no">
        <name>DD_MINUS_INF_VAL</name>
        <initializer>(-(DD_PLUS_INF_VAL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="122" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a28d71cf697d3e6ee6f5d5eb61a0093ab" prot="public" static="no">
        <name>DD_NON_CONSTANT</name>
        <initializer>((<ref refid="struct_dd_node" kindref="compound">DdNode</ref> *) 1)	/* for Cudd_bddIteConstant */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="124" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ac208c481d05e63d611b27bc3de089b35" prot="public" static="no">
        <name>DD_MAX_SUBTABLE_DENSITY</name>
        <initializer>4	/* tells when to resize a subtable */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="127" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a9b1f609f95c31c8f64395a4b0c778a3f" prot="public" static="no">
        <name>DD_GC_FRAC_LO</name>
        <initializer>DD_MAX_SUBTABLE_DENSITY * 0.25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="134" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a000b28ff395aeb4c1ca8bc720f07753f" prot="public" static="no">
        <name>DD_GC_FRAC_HI</name>
        <initializer>DD_MAX_SUBTABLE_DENSITY * 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="135" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1acb2a86b57416fca50100a29ba98b8639" prot="public" static="no">
        <name>DD_GC_FRAC_MIN</name>
        <initializer>0.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="136" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a49f3f1465e810bd4decc9cf40f76d746" prot="public" static="no">
        <name>DD_MIN_HIT</name>
        <initializer>					   30	/* resize cache when hit ratio
					   above this percentage (default) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="138" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ad8c5aa8d9f7193b6683afcd2921454b1" prot="public" static="no">
        <name>DD_MAX_LOOSE_FRACTION</name>
        <initializer>				     5 /* 1 / (max fraction of memory used for
				     unique table in fast growth mode) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="140" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ab8b4e6213e6ff29d29597d6529ed6a20" prot="public" static="no">
        <name>DD_MAX_CACHE_FRACTION</name>
        <initializer>				     3 /* 1 / (max fraction of memory used for
				     computed table if resizing enabled) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="142" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a2077b968e316bf2d509eda64337d45da" prot="public" static="no">
        <name>DD_STASH_FRACTION</name>
        <initializer>				      64 /* 1 / (fraction of memory set
				      aside for emergencies) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="144" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aaf354bd23b83e924c3387cbbd893611c" prot="public" static="no">
        <name>DD_MAX_CACHE_TO_SLOTS_RATIO</name>
        <initializer>4 /* used to limit the cache size */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="145" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a25964633a29538c7f912f50092c24c9a" prot="public" static="no">
        <name>DD_SIFT_MAX_VAR</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="148" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a511221917589a0f42d86136249c9f814" prot="public" static="no">
        <name>DD_SIFT_MAX_SWAPS</name>
        <initializer>2000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="149" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a89ed92d64793daeccb07ad196e1ba70f" prot="public" static="no">
        <name>DD_DEFAULT_RECOMB</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="150" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ab98085007717c35f5c1c9b96f0afe790" prot="public" static="no">
        <name>DD_MAX_REORDER_GROWTH</name>
        <initializer>1.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="151" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a35a5d2d04bff219574a12836f120fa58" prot="public" static="no">
        <name>DD_FIRST_REORDER</name>
        <initializer>4004	/* 4 for the constants */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="152" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ae2a9d0ccd78a4c81e643ef54c2f51d53" prot="public" static="no">
        <name>DD_DYN_RATIO</name>
        <initializer>2	/* when to dynamically reorder */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="153" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a2045b3d711ea368629a9fe5e48b4e311" prot="public" static="no">
        <name>DD_P1</name>
        <initializer>12582917</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="156" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a1b56c3021ebad5c5856dbd19baf52832" prot="public" static="no">
        <name>DD_P2</name>
        <initializer>4256249</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="157" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a5d2c79ac1a8e020589cabc6c2a03af9d" prot="public" static="no">
        <name>DD_P3</name>
        <initializer>741457</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="158" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a045dbd545c78974dd6ec15e7f8e0a60d" prot="public" static="no">
        <name>DD_P4</name>
        <initializer>1618033999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="159" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a6a1532186f7766322a149ef992ceeb29" prot="public" static="no">
        <name>DD_ADD_ITE_TAG</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="173" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1af3f613526cd5dd617b66926f463b5b11" prot="public" static="no">
        <name>DD_BDD_AND_ABSTRACT_TAG</name>
        <initializer>0x06</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="174" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a3413858dc69ab98261e7cefa2fabdead" prot="public" static="no">
        <name>DD_BDD_XOR_EXIST_ABSTRACT_TAG</name>
        <initializer>0x0a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="175" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1abb5ae258360e9ccc6331d51b77a849df" prot="public" static="no">
        <name>DD_BDD_ITE_TAG</name>
        <initializer>0x0e</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="176" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1af87cfab6df69ada20508db8625144c89" prot="public" static="no">
        <name>DD_ADD_BDD_DO_INTERVAL_TAG</name>
        <initializer>0x22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="177" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a0ebf4f662fa0818bec8be59d5fdab715" prot="public" static="no">
        <name>DD_BDD_CLIPPING_AND_ABSTRACT_UP_TAG</name>
        <initializer>0x26</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="178" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ac305c1db1638753929d2ee3a781ce300" prot="public" static="no">
        <name>DD_BDD_CLIPPING_AND_ABSTRACT_DOWN_TAG</name>
        <initializer>0x2a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="179" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a1b81c1144279f97f310bb7c0a625ff93" prot="public" static="no">
        <name>DD_BDD_COMPOSE_RECUR_TAG</name>
        <initializer>0x2e</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="180" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a4416f24b7d590d6c906668a95f275a24" prot="public" static="no">
        <name>DD_ADD_COMPOSE_RECUR_TAG</name>
        <initializer>0x42</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="181" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a65579d3277f475e71f79bbb690d32821" prot="public" static="no">
        <name>DD_ADD_NON_SIM_COMPOSE_TAG</name>
        <initializer>0x46</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="182" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a544fba69760437cee493d4111f2e956f" prot="public" static="no">
        <name>DD_EQUIV_DC_TAG</name>
        <initializer>0x4a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="183" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a45f2ef5f3a4ba2e76a2a2dc12f786030" prot="public" static="no">
        <name>DD_ZDD_ITE_TAG</name>
        <initializer>0x4e</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="184" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a7eb5a51c0c49223f2219d3808a57fcb7" prot="public" static="no">
        <name>DD_ADD_ITE_CONSTANT_TAG</name>
        <initializer>0x62</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="185" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a58b1677b5e3936c5591c68de6df4157a" prot="public" static="no">
        <name>DD_ADD_EVAL_CONST_TAG</name>
        <initializer>0x66</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="186" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a0acc2577c71cdebc7ea6aaf9b1087ad8" prot="public" static="no">
        <name>DD_BDD_ITE_CONSTANT_TAG</name>
        <initializer>0x6a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="187" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a2a7eb74b6f03c1d1ef2806b09a6af426" prot="public" static="no">
        <name>DD_ADD_OUT_SUM_TAG</name>
        <initializer>0x6e</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="188" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ae51310f4dbc382140288e235e21840f3" prot="public" static="no">
        <name>DD_BDD_LEQ_UNLESS_TAG</name>
        <initializer>0x82</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="189" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a8ba2f4adc15884562224a5877ec86598" prot="public" static="no">
        <name>DD_ADD_TRIANGLE_TAG</name>
        <initializer>0x86</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="190" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aa18bf365207a609fdc3cf738331acd84" prot="public" static="no">
        <name>DD_BDD_MAX_EXP_TAG</name>
        <initializer>0x8a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="191" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a5ce7f741a7374cbadf24433560ef2079" prot="public" static="no">
        <name>CUDD_GEN_CUBES</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="194" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aff18a836f2a3ee874c52ea5cde26ea53" prot="public" static="no">
        <name>CUDD_GEN_PRIMES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="195" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a826464fd6a16ada9547cf94a1f72063f" prot="public" static="no">
        <name>CUDD_GEN_NODES</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="196" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1af0c948d4f5190290aa7be2751194421f" prot="public" static="no">
        <name>CUDD_GEN_ZDD_PATHS</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="197" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1af6e16b94ae740c9ff3e892570d867abe" prot="public" static="no">
        <name>CUDD_GEN_EMPTY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="198" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a709a721c2b9cb6017423ba5fbd32c648" prot="public" static="no">
        <name>CUDD_GEN_NONEMPTY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="199" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ab583c1e770609fce50fbf5569d1b61a7" prot="public" static="no">
        <name>cuddDeallocNode</name>
        <param><defname>unique</defname></param>
        <param><defname>node</defname></param>
        <initializer>    (node)-&gt;next = (unique)-&gt;nextFree; \
    (unique)-&gt;nextFree = node;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Adds node to the head of the free list.]</para>
<para>Description [Adds node to the head of the free list. Does not deallocate memory chunks that become free. This function is also used by the dynamic reordering functions.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddAllocNode cuddDynamicAllocNode cuddDeallocMove] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="520" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a97e622c1fa0463d7b77ec6e113aad89b" prot="public" static="no">
        <name>cuddDeallocMove</name>
        <param><defname>unique</defname></param>
        <param><defname>node</defname></param>
        <initializer>    ((<ref refid="struct_dd_node" kindref="compound">DdNode</ref> *)(node))-&gt;ref = 0; \
    ((<ref refid="struct_dd_node" kindref="compound">DdNode</ref> *)(node))-&gt;next = (unique)-&gt;nextFree; \
    (unique)-&gt;nextFree = (<ref refid="struct_dd_node" kindref="compound">DdNode</ref> *)(node);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Adds node to the head of the free list.]</para>
<para>Description [Adds node to the head of the free list. Does not deallocate memory chunks that become free. This function is also used by the dynamic reordering functions.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddDeallocNode cuddDynamicAllocNode] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="537" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a5eb828fea5b6c493712d171ca59f4496" prot="public" static="no">
        <name>cuddRef</name>
        <param><defname>n</defname></param>
        <initializer>cuddSatInc(Cudd_Regular(n)-&gt;ref)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Increases the reference count of a node, if it is not saturated.]</para>
<para>Description [Increases the reference count of a node, if it is not saturated. This being a macro, it is faster than Cudd_Ref, but it cannot be used in constructs like cuddRef(a = b()).]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_Ref] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="557" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ab274a54f55f018beea73ed6f1bc630c2" prot="public" static="no">
        <name>cuddDeref</name>
        <param><defname>n</defname></param>
        <initializer>cuddSatDec(Cudd_Regular(n)-&gt;ref)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Decreases the reference count of a node, if it is not saturated.]</para>
<para>Description [Decreases the reference count of node. It is primarily used in recursive procedures to decrease the ref count of a result node before returning it. This accomplishes the goal of removing the protection applied by a previous cuddRef. This being a macro, it is faster than Cudd_Deref, but it cannot be used in constructs like cuddDeref(a = b()).]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_Deref] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="577" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aa5cad999b2a4a3dbbfe5c1da1d8bc028" prot="public" static="no">
        <name>cuddIsConstant</name>
        <param><defname>node</defname></param>
        <initializer>((node)-&gt;index == CUDD_CONST_INDEX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns 1 if the node is a constant node.]</para>
<para>Description [Returns 1 if the node is a constant node (rather than an internal node). All constant nodes have the same index (CUDD_CONST_INDEX). The pointer passed to cuddIsConstant must be regular.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_IsConstant] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="593" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a09834c697b92ac296b1e50c863f88262" prot="public" static="no">
        <name>cuddT</name>
        <param><defname>node</defname></param>
        <initializer>((node)-&gt;type.kids.T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the then child of an internal node.]</para>
<para>Description [Returns the then child of an internal node. If <computeroutput>node</computeroutput> is a constant node, the result is unpredictable. The pointer passed to cuddT must be regular.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_T] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="609" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aaef03f10591d8e28bb5fecd2aa7c93ff" prot="public" static="no">
        <name>cuddE</name>
        <param><defname>node</defname></param>
        <initializer>((node)-&gt;type.kids.E)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the else child of an internal node.]</para>
<para>Description [Returns the else child of an internal node. If <computeroutput>node</computeroutput> is a constant node, the result is unpredictable. The pointer passed to cuddE must be regular.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_E] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="625" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ae4c91711a93064634cccc69dc22f3712" prot="public" static="no">
        <name>cuddV</name>
        <param><defname>node</defname></param>
        <initializer>((node)-&gt;type.value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the value of a constant node.]</para>
<para>Description [Returns the value of a constant node. If <computeroutput>node</computeroutput> is an internal node, the result is unpredictable. The pointer passed to cuddV must be regular.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_V] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="641" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aa7299d1217a57571ef88e9ac90530978" prot="public" static="no">
        <name>cuddI</name>
        <param><defname>dd</defname></param>
        <param><defname>index</defname></param>
        <initializer>(((index)==CUDD_CONST_INDEX)?(int)(index):(dd)-&gt;perm[(index)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Finds the current position of variable index in the order.]</para>
<para>Description [Finds the current position of variable index in the order. This macro duplicates the functionality of Cudd_ReadPerm, but it does not check for out-of-bounds indices and it is more efficient.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_ReadPerm] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="659" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1adcfdb309d88a7e772f0f326667ae86aa" prot="public" static="no">
        <name>cuddIZ</name>
        <param><defname>dd</defname></param>
        <param><defname>index</defname></param>
        <initializer>(((index)==CUDD_CONST_INDEX)?(int)(index):(dd)-&gt;permZ[(index)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Finds the current position of ZDD variable index in the order.]</para>
<para>Description [Finds the current position of ZDD variable index in the order. This macro duplicates the functionality of Cudd_ReadPermZdd, but it does not check for out-of-bounds indices and it is more efficient.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [Cudd_ReadPermZdd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="677" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a04555d27c114939b7c4a37be638b7968" prot="public" static="no">
        <name>ddHash</name>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>s</defname></param>
        <initializer>((((unsigned)(f) * DD_P1 + (unsigned)(g)) * DD_P2) &gt;&gt; (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Hash function for the unique table.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [ddCHash ddCHash2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="696" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a4e6f0cf91c278406cf4fd83173c2f7fe" prot="public" static="no">
        <name>ddCHash</name>
        <param><defname>o</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>s</defname></param>
        <initializer>((((((unsigned)(f) + (unsigned)(o)) * DD_P1 + (unsigned)(g)) * DD_P2 + \
   (unsigned)(h)) * DD_P3) &gt;&gt; (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Hash function for the cache.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [ddHash ddCHash2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="718" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a1cfb3e19763466948620b7d2af251c87" prot="public" static="no">
        <name>ddCHash2</name>
        <param><defname>o</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>s</defname></param>
        <initializer>(((((unsigned)(f) + (unsigned)(o)) * DD_P1 + (unsigned)(g)) * DD_P2) &gt;&gt; (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Hash function for the cache for functions with two operands.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [ddHash ddCHash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="741" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a10e04d8462abb58d18eb6d4ee5bfe33f" prot="public" static="no">
        <name>cuddClean</name>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="struct_dd_node" kindref="compound">DdNode</ref> *)((ptruint)(p) &amp; ~0xf))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Clears the 4 least significant bits of a pointer.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="757" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a2ca9cfb1642557eefc559198c4801092" prot="public" static="no">
        <name>ddMin</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((y) &lt; (x)) ? (y) : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes the minimum of two numbers.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [ddMax] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="771" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a7f287994317878552fd15e3c73e6de9e" prot="public" static="no">
        <name>ddMax</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((y) &gt; (x)) ? (y) : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes the maximum of two numbers.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [ddMin] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="785" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aa2b85051644f4b773320ab64c0eae9c2" prot="public" static="no">
        <name>ddAbs</name>
        <param><defname>x</defname></param>
        <initializer>(((x)&lt;0) ? -(x) : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes the absolute value of a number.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="799" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1adaebebca92b84664b62c0f962d0aa3d5" prot="public" static="no">
        <name>ddEqualVal</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>e</defname></param>
        <initializer>(ddAbs((x)-(y))&lt;(e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns 1 if the absolute value of the difference of the two arguments x and y is less than e.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="814" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a820d3934f12d1a15066986d58e44d923" prot="public" static="no">
        <name>cuddSatInc</name>
        <param><defname>x</defname></param>
        <initializer>((x) += (x) != (DdHalfWord)DD_MAXREF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Saturating increment operator.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [cuddSatDec] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="831" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1aa87dc1bc9890587b6f88a8afa9a68499" prot="public" static="no">
        <name>cuddSatDec</name>
        <param><defname>x</defname></param>
        <initializer>((x) -= (x) != (DdHalfWord)DD_MAXREF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Saturating decrement operator.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [cuddSatInc] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="849" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a0fc86b7b0c157b7fa3738661d65a22d7" prot="public" static="no">
        <name>DD_ONE</name>
        <param><defname>dd</defname></param>
        <initializer>((dd)-&gt;one)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the constant 1 node.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [DD_ZERO DD_PLUS_INFINITY DD_MINUS_INFINITY] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="864" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1ab78870b54aa3b1ff2eb38b311e5d8a1a" prot="public" static="no">
        <name>DD_ZERO</name>
        <param><defname>dd</defname></param>
        <initializer>((dd)-&gt;zero)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the arithmetic 0 constant node.]</para>
<para>Description [Returns the arithmetic 0 constant node. This is different from the logical zero. The latter is obtained by Cudd_Not(DD_ONE(dd)).]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [DD_ONE Cudd_Not DD_PLUS_INFINITY DD_MINUS_INFINITY] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="880" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a69c8b8620b5f49913acfd6667213bc5e" prot="public" static="no">
        <name>DD_PLUS_INFINITY</name>
        <param><defname>dd</defname></param>
        <initializer>((dd)-&gt;plusinfinity)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the plus infinity constant node.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [DD_ONE DD_ZERO DD_MINUS_INFINITY] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="894" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a048b0aa9313167a85f9681b4f6fe3db6" prot="public" static="no">
        <name>DD_MINUS_INFINITY</name>
        <param><defname>dd</defname></param>
        <initializer>((dd)-&gt;minusinfinity)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the minus infinity constant node.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [DD_ONE DD_ZERO DD_PLUS_INFINITY] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="908" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a2ff323254eb979e424f99cbe8ef593fe" prot="public" static="no">
        <name>cuddAdjust</name>
        <param><defname>x</defname></param>
        <initializer>((x) = ((x) &gt;= DD_CRI_HI_MARK) ? DD_PLUS_INF_VAL : (((x) &lt;= DD_CRI_LO_MARK) ? DD_MINUS_INF_VAL : (x)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Enforces DD_MINUS_INF_VAL &lt;= x &lt;= DD_PLUS_INF_VAL.]</para>
<para>Description [Enforces DD_MINUS_INF_VAL &lt;= x &lt;= DD_PLUS_INF_VAL. Furthermore, if x &lt;= DD_MINUS_INF_VAL/2, x is set to DD_MINUS_INF_VAL. Similarly, if DD_PLUS_INF_VAL/2 &lt;= x, x is set to DD_PLUS_INF_VAL. Normally this macro is a NOOP. However, if HAVE_IEEE_754 is not defined, it makes sure that a value does not get larger than infinity in absolute value, and once it gets to infinity, stays there. If the value overflows before this macro is applied, no recovery is possible.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="932" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a91c5fb8e220c15afe8bfb6b586e1740f" prot="public" static="no">
        <name>DD_LSDIGIT</name>
        <param><defname>x</defname></param>
        <initializer>((x) &amp; DD_APA_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Extract the least significant digit of a double digit.]</para>
<para>Description [Extract the least significant digit of a double digit. Used in the manipulation of arbitrary precision integers.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [DD_MSDIGIT] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="948" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a273d15ca57ba57aaa5ad60e8814b43fa" prot="public" static="no">
        <name>DD_MSDIGIT</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;&gt; DD_APA_BITS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Extract the most significant digit of a double digit.]</para>
<para>Description [Extract the most significant digit of a double digit. Used in the manipulation of arbitrary precision integers.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [DD_LSDIGIT] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="963" column="9" bodyfile="include/CUDD/cuddInt.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_int_8h_1a94289b59164b0be08fdb041e6f847fd4" prot="public" static="no">
        <name>statLine</name>
        <param><defname>dd</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Outputs a line of stats.]</para>
<para>Description [Outputs a line of stats if DD_COUNT and DD_STATS are defined. Increments the number of recursive calls if DD_COUNT is defined.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="990" column="10" bodyfile="include/CUDD/cuddInt.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cudd_int_8h_1aeea3133cdd0a05eab2254cadcdc66c89" prot="public" static="no">
        <type>struct <ref refid="struct_dd_hook" kindref="compound">DdHook</ref></type>
        <definition>typedef struct DdHook DdHook</definition>
        <argsstring></argsstring>
        <name>DdHook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="239" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a2c0c93b872fda3900c6a55f17d6b6640" prot="public" static="no">
        <type>int</type>
        <definition>typedef int ptrint</definition>
        <argsstring></argsstring>
        <name>ptrint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="245" column="13" bodyfile="include/CUDD/cuddInt.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1afd9afe0bf7ac5855fcd5eb42ea5fcb18" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int ptruint</definition>
        <argsstring></argsstring>
        <name>ptruint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="246" column="22" bodyfile="include/CUDD/cuddInt.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a6cee862ffaa35c53ec0e1b5afeca632c" prot="public" static="no">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>typedef DdNode* DdNodePtr</definition>
        <argsstring></argsstring>
        <name>DdNodePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="249" column="16" bodyfile="include/CUDD/cuddInt.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a621b33848c11d0e8e6014752a2d6683f" prot="public" static="no">
        <type>struct <ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref></type>
        <definition>typedef struct DdLocalCacheItem DdLocalCacheItem</definition>
        <argsstring></argsstring>
        <name>DdLocalCacheItem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="258" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a1c2528f60a3524067c2f7f3cdf4bb0d4" prot="public" static="no">
        <type>struct <ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref></type>
        <definition>typedef struct DdLocalCache DdLocalCache</definition>
        <argsstring></argsstring>
        <name>DdLocalCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="273" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a72e8a127aca07e957c9cc29c3d3b5fed" prot="public" static="no">
        <type>struct <ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref></type>
        <definition>typedef struct DdHashItem DdHashItem</definition>
        <argsstring></argsstring>
        <name>DdHashItem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="281" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1add675158ba1f2faeb0d9f1eee1e903b8" prot="public" static="no">
        <type>struct <ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref></type>
        <definition>typedef struct DdHashTable DdHashTable</definition>
        <argsstring></argsstring>
        <name>DdHashTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="295" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a19992f44f3595e1b99535061f6d4f100" prot="public" static="no">
        <type>struct <ref refid="struct_dd_cache" kindref="compound">DdCache</ref></type>
        <definition>typedef struct DdCache DdCache</definition>
        <argsstring></argsstring>
        <name>DdCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="304" column="9"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a976d9161bd54f42a28925b91c4572b43" prot="public" static="no">
        <type>struct <ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref></type>
        <definition>typedef struct DdSubtable DdSubtable</definition>
        <argsstring></argsstring>
        <name>DdSubtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="320" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1abf059843cfb9c8977466edd4f98ba545" prot="public" static="no">
        <type>struct <ref refid="struct_move" kindref="compound">Move</ref></type>
        <definition>typedef struct Move Move</definition>
        <argsstring></argsstring>
        <name>Move</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="471" column="6"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1ab693926d5e533cfeb112465fa8075c45" prot="public" static="no">
        <type>struct <ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref></type>
        <definition>typedef struct DdQueueItem DdQueueItem</definition>
        <argsstring></argsstring>
        <name>DdQueueItem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="478" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="cudd_int_8h_1a22c3c375a51c6879933d638f0e008ef5" prot="public" static="no">
        <type>struct <ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref></type>
        <definition>typedef struct DdLevelQueue DdLevelQueue</definition>
        <argsstring></argsstring>
        <name>DdLevelQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="492" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cudd_int_8h_1accf0bca7526dd62ca174ba4d376c3d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddExistAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *cube)</argsstring>
        <name>cuddAddExistAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="996" column="16" declfile="include/CUDD/cuddInt.h" declline="996" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4877e857791c4cecd118369f28739227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddUnivAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *cube)</argsstring>
        <name>cuddAddUnivAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="997" column="16" declfile="include/CUDD/cuddInt.h" declline="997" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab9061d1dca52894c7bb13e90ac9c4b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddOrAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *cube)</argsstring>
        <name>cuddAddOrAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="998" column="16" declfile="include/CUDD/cuddInt.h" declline="998" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a7369b4080f5f395e62716759e1ecb0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddApplyRecur</definition>
        <argsstring>(DdManager *dd, DdNode *(*)(DdManager *, DdNode **, DdNode **), DdNode *f, DdNode *g)</argsstring>
        <name>cuddAddApplyRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode **, DdNode **</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="999" column="16" declfile="include/CUDD/cuddInt.h" declline="999" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a41f9764e2dc30719c0ba37badf47de87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddMonadicApplyRecur</definition>
        <argsstring>(DdManager *dd, DdNode *(*op)(DdManager *, DdNode *), DdNode *f)</argsstring>
        <name>cuddAddMonadicApplyRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *, <ref refid="struct_dd_node" kindref="compound">DdNode</ref> *)</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1000" column="16" declfile="include/CUDD/cuddInt.h" declline="1000" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a145079dec4aff3732ac7ac4dcba0b5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddScalarInverseRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *epsilon)</argsstring>
        <name>cuddAddScalarInverseRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1001" column="16" declfile="include/CUDD/cuddInt.h" declline="1001" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a0cf0dde5a0cd0d6aaac1ef05231f9a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddIteRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddAddIteRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implements the recursive step of Cudd_addIte(f,g,h).]</para>
<para>Description [Implements the recursive step of Cudd_addIte(f,g,h). Returns a pointer to the resulting ADD if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_addIte] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1002" column="16" bodyfile="lib/CUDD/cuddAddIte.c" bodystart="441" bodyend="542" declfile="include/CUDD/cuddInt.h" declline="1002" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a52f31a4e0c4893655eb4f0b9d8aac89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddCmplRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddAddCmplRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_addCmpl.]</para>
<para>Description [Performs the recursive step of Cudd_addCmpl. Returns a pointer to the resulting ADD if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_addCmpl] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1003" column="16" bodyfile="lib/CUDD/cuddAddIte.c" bodystart="558" bodyend="602" declfile="include/CUDD/cuddInt.h" declline="1003" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a9ea505ea0375b0ef9ddf2044d094f06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddNegateRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddAddNegateRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1004" column="16" declfile="include/CUDD/cuddInt.h" declline="1004" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a592155f1805338008f99bda26007d08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddRoundOffRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, double trunc)</argsstring>
        <name>cuddAddRoundOffRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>trunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1005" column="16" declfile="include/CUDD/cuddInt.h" declline="1005" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a9f4ad4116db7673ca7b4b829ecb7197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddUnderApprox</definition>
        <argsstring>(DdManager *dd, DdNode *f, int numVars, int threshold, int safe, double quality)</argsstring>
        <name>cuddUnderApprox</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int</type>
          <declname>safe</declname>
        </param>
        <param>
          <type>double</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1006" column="16" declfile="include/CUDD/cuddInt.h" declline="1006" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afd6a96316d8465015470b02486ffaa86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddRemapUnderApprox</definition>
        <argsstring>(DdManager *dd, DdNode *f, int numVars, int threshold, double quality)</argsstring>
        <name>cuddRemapUnderApprox</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1007" column="16" declfile="include/CUDD/cuddInt.h" declline="1007" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a60bdad03bfa7e367b6b3efa7aa1e4c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBiasedUnderApprox</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *b, int numVars, int threshold, double quality1, double quality0)</argsstring>
        <name>cuddBiasedUnderApprox</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>quality1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>quality0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1008" column="16" declfile="include/CUDD/cuddInt.h" declline="1008" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a39f2fde1939701a286285c4efbc9655c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddAndAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *g, DdNode *cube)</argsstring>
        <name>cuddBddAndAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1009" column="16" declfile="include/CUDD/cuddInt.h" declline="1009" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a069882208201ba24a9d4beea7a16e81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddAnnealing</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddAnnealing</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Get new variable-order by simulated annealing algorithm.]</para>
<para>Description [Get x, y by random selection. Choose either exchange or jump randomly. In case of jump, choose between jump_up and jump_down randomly. Do exchange or jump and get optimal case. Loop until there is no improvement or temperature reaches minimum. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1010" column="12" bodyfile="lib/CUDD/cuddAnneal.c" bodystart="154" bodyend="284" declfile="include/CUDD/cuddInt.h" declline="1010" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aedc6f9870c712caec0c42ba311984288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddExistAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *cube)</argsstring>
        <name>cuddBddExistAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive steps of Cudd_bddExistAbstract.]</para>
<para>Description [Performs the recursive steps of Cudd_bddExistAbstract. Returns the BDD obtained by abstracting the variables of cube from f if successful; NULL otherwise. It is also used by Cudd_bddUnivAbstract.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddExistAbstract Cudd_bddUnivAbstract] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1011" column="16" bodyfile="lib/CUDD/cuddBddAbs.c" bodystart="393" bodyend="485" declfile="include/CUDD/cuddInt.h" declline="1011" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1adfcd7d01c37505e26ff4d7ae7617a43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddXorExistAbstractRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *g, DdNode *cube)</argsstring>
        <name>cuddBddXorExistAbstractRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Takes the exclusive OR of two BDDs and simultaneously abstracts the variables in cube.]</para>
<para>Description [Takes the exclusive OR of two BDDs and simultaneously abstracts the variables in cube. The variables are existentially abstracted. Returns a pointer to the result is successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddAndAbstract] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1012" column="16" bodyfile="lib/CUDD/cuddBddAbs.c" bodystart="503" bodyend="657" declfile="include/CUDD/cuddInt.h" declline="1012" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a978a5620fcf9f0463404d89870713340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddBooleanDiffRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *var)</argsstring>
        <name>cuddBddBooleanDiffRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive steps of Cudd_bddBoleanDiff.]</para>
<para>Description [Performs the recursive steps of Cudd_bddBoleanDiff. Returns the BDD obtained by XORing the cofactors of f with respect to var if successful; NULL otherwise. Exploits the fact that dF/dx = dF&apos;/dx.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1013" column="16" bodyfile="lib/CUDD/cuddBddAbs.c" bodystart="675" bodyend="729" declfile="include/CUDD/cuddInt.h" declline="1013" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6d52cd44b8033b3be8f23d21c46cd425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddIteRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddBddIteRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implements the recursive step of Cudd_bddIte.]</para>
<para>Description [Implements the recursive step of Cudd_bddIte. Returns a pointer to the resulting BDD. NULL if the intermediate result blows up or if reordering occurs.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1014" column="16" bodyfile="lib/CUDD/cuddBddIte.c" bodystart="742" bodyend="865" declfile="include/CUDD/cuddInt.h" declline="1014" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa43deef9cc0de026d2b4917aef1b4d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddIntersectRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddBddIntersectRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implements the recursive step of Cudd_bddIntersect.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddIntersect] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1015" column="16" bodyfile="lib/CUDD/cuddBddIte.c" bodystart="880" bodyend="978" declfile="include/CUDD/cuddInt.h" declline="1015" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a1766cd8bf8b2ec57ade0db1a461e352b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddAndRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *g)</argsstring>
        <name>cuddBddAndRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implements the recursive step of Cudd_bddAnd.]</para>
<para>Description [Implements the recursive step of Cudd_bddAnd by taking the conjunction of two BDDs. Returns a pointer to the result is successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddAnd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1016" column="16" bodyfile="lib/CUDD/cuddBddIte.c" bodystart="995" bodyend="1106" declfile="include/CUDD/cuddInt.h" declline="1016" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aed935896575aab5d56fefdd6d351b676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddXorRecur</definition>
        <argsstring>(DdManager *manager, DdNode *f, DdNode *g)</argsstring>
        <name>cuddBddXorRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implements the recursive step of Cudd_bddXor.]</para>
<para>Description [Implements the recursive step of Cudd_bddXor by taking the exclusive OR of two BDDs. Returns a pointer to the result is successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddXor] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1017" column="16" bodyfile="lib/CUDD/cuddBddIte.c" bodystart="1123" bodyend="1223" declfile="include/CUDD/cuddInt.h" declline="1017" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac30223534bffbe302ce4f92d4bb6b093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddTransfer</definition>
        <argsstring>(DdManager *ddS, DdManager *ddD, DdNode *f)</argsstring>
        <name>cuddBddTransfer</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>ddS</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>ddD</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1018" column="16" declfile="include/CUDD/cuddInt.h" declline="1018" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa45b698f72c553add12f58dd4089af02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddBddDoPattern</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddAddBddDoPattern</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1019" column="16" declfile="include/CUDD/cuddInt.h" declline="1019" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac9f3d4ce5f9ac0f4fcd8f96587e13227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddInitCache</definition>
        <argsstring>(DdManager *unique, unsigned int cacheSize, unsigned int maxCacheSize)</argsstring>
        <name>cuddInitCache</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cacheSize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxCacheSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Initializes the computed table.]</para>
<para>Description [Initializes the computed table. It is called by Cudd_Init. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_Init] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1020" column="12" bodyfile="lib/CUDD/cuddCache.c" bodystart="132" bodyend="199" declfile="include/CUDD/cuddInt.h" declline="1020" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac766e39390bf4d3c975d4a6bd34653dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddCacheInsert</definition>
        <argsstring>(DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h, DdNode *data)</argsstring>
        <name>cuddCacheInsert</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ptruint</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts a result in the cache for a function with three operands.]</para>
<para>Description [Inserts a result in the cache for a function with three operands. The operator tag (see <ref refid="cudd_int_8h_source" kindref="compound">CUDD/cuddInt.h</ref> for details) is split and stored into unused bits of the first two pointers.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddCacheInsert2 cuddCacheInsert1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1021" column="13" bodyfile="lib/CUDD/cuddCache.c" bodystart="217" bodyend="247" declfile="include/CUDD/cuddInt.h" declline="1021" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a27a1b481d65f85a84e531e0b18604313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddCacheInsert2</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *, DdNode *), DdNode *f, DdNode *g, DdNode *data)</argsstring>
        <name>cuddCacheInsert2</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1022" column="13" declfile="include/CUDD/cuddInt.h" declline="1022" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a42a5de1e6785fc89bb6df75ff076f62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddCacheInsert1</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *), DdNode *f, DdNode *data)</argsstring>
        <name>cuddCacheInsert1</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1023" column="13" declfile="include/CUDD/cuddInt.h" declline="1023" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab2e7f6c2eabfb9af8ed7e52dcc00a678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookup</definition>
        <argsstring>(DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddCacheLookup</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ptruint</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up in the cache for the result of op applied to f, g, and h.]</para>
<para>Description [Returns the result if found; it returns NULL if no result is found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddCacheLookup2 cuddCacheLookup1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1024" column="16" bodyfile="lib/CUDD/cuddCache.c" bodystart="347" bodyend="392" declfile="include/CUDD/cuddInt.h" declline="1024" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6ed37dd4abd3aad8e17cfde95808c8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookupZdd</definition>
        <argsstring>(DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddCacheLookupZdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ptruint</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up in the cache for the result of op applied to f, g, and h.]</para>
<para>Description [Returns the result if found; it returns NULL if no result is found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddCacheLookup2Zdd cuddCacheLookup1Zdd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1025" column="16" bodyfile="lib/CUDD/cuddCache.c" bodystart="409" bodyend="454" declfile="include/CUDD/cuddInt.h" declline="1025" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a070823435f540c772453821f35dfa547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookup2</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *, DdNode *), DdNode *f, DdNode *g)</argsstring>
        <name>cuddCacheLookup2</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1026" column="16" declfile="include/CUDD/cuddInt.h" declline="1026" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa45c6025c94c97edbd06fa40651a7894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookup1</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *), DdNode *f)</argsstring>
        <name>cuddCacheLookup1</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1027" column="16" declfile="include/CUDD/cuddInt.h" declline="1027" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ae693ffc8540d9e1bcd488ec90a52e893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookup2Zdd</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *, DdNode *), DdNode *f, DdNode *g)</argsstring>
        <name>cuddCacheLookup2Zdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1028" column="16" declfile="include/CUDD/cuddInt.h" declline="1028" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad34c4c8b4685cf1b3e7a516d290f247e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCacheLookup1Zdd</definition>
        <argsstring>(DdManager *table, DdNode *(*)(DdManager *, DdNode *), DdNode *f)</argsstring>
        <name>cuddCacheLookup1Zdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <array>*)(DdManager *, DdNode *</array>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1029" column="16" declfile="include/CUDD/cuddInt.h" declline="1029" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a1b226d52d599fc2febf36966be142b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddConstantLookup</definition>
        <argsstring>(DdManager *table, ptruint op, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddConstantLookup</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ptruint</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up in the cache for the result of op applied to f, g, and h.]</para>
<para>Description [Looks up in the cache for the result of op applied to f, g, and h. Assumes that the calling procedure (e.g., Cudd_bddIteConstant) is only interested in whether the result is constant or not. Returns the result if found (possibly DD_NON_CONSTANT); otherwise it returns NULL.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddCacheLookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1030" column="16" bodyfile="lib/CUDD/cuddCache.c" bodystart="690" bodyend="733" declfile="include/CUDD/cuddInt.h" declline="1030" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afb729dfe4ad40c46ab9918154831e4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddCacheProfile</definition>
        <argsstring>(DdManager *table, FILE *fp)</argsstring>
        <name>cuddCacheProfile</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes and prints a profile of the cache usage.]</para>
<para>Description [Computes and prints a profile of the cache usage. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1031" column="12" bodyfile="lib/CUDD/cuddCache.c" bodystart="749" bodyend="874" declfile="include/CUDD/cuddInt.h" declline="1031" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a71fcb8b02eb9a10d706301052525bcfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddCacheResize</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddCacheResize</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Resizes the cache.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1032" column="13" bodyfile="lib/CUDD/cuddCache.c" bodystart="889" bodyend="989" declfile="include/CUDD/cuddInt.h" declline="1032" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a3430a7b66708275953bffbdd8d04dba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddCacheFlush</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddCacheFlush</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Flushes the cache.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1033" column="13" bodyfile="lib/CUDD/cuddCache.c" bodystart="1004" bodyend="1020" declfile="include/CUDD/cuddInt.h" declline="1033" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac0c1936c2994972303a3a2696d9bdf39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddComputeFloorLog2</definition>
        <argsstring>(unsigned int value)</argsstring>
        <name>cuddComputeFloorLog2</name>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the floor of the logarithm to the base 2.]</para>
<para>Description [Returns the floor of the logarithm to the base 2. The input value is assumed to be greater than 0.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1034" column="12" bodyfile="lib/CUDD/cuddCache.c" bodystart="1036" bodyend="1049" declfile="include/CUDD/cuddInt.h" declline="1034" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ae551cd823e27a403ae9ab354b68f6b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHeapProfile</definition>
        <argsstring>(DdManager *dd)</argsstring>
        <name>cuddHeapProfile</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Prints information about the heap.]</para>
<para>Description [Prints to the manager&apos;s stdout the number of live nodes for each level of the DD heap that contains at least one live node. It also prints a summary containing: <itemizedlist>
<listitem>
<para>total number of tables; </para>
</listitem>
<listitem>
<para>number of tables with live nodes; </para>
</listitem>
<listitem>
<para>table with the largest number of live nodes; </para>
</listitem>
<listitem>
<para>number of nodes in that table. </para>
</listitem>
</itemizedlist>
If more than one table contains the maximum number of live nodes, only the one of lowest index is reported. Returns 1 in case of success and 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1035" column="12" bodyfile="lib/CUDD/cuddCheck.c" bodystart="641" bodyend="697" declfile="include/CUDD/cuddInt.h" declline="1035" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a8296e506da23c3270e75967f6950c499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddPrintNode</definition>
        <argsstring>(DdNode *f, FILE *fp)</argsstring>
        <name>cuddPrintNode</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Prints out information on a node.]</para>
<para>Description [Prints out information on a node.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1036" column="13" bodyfile="lib/CUDD/cuddCheck.c" bodystart="712" bodyend="723" declfile="include/CUDD/cuddInt.h" declline="1036" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2d3bb63f4ba1ba097c0f9775ddc1f830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddPrintVarGroups</definition>
        <argsstring>(DdManager *dd, MtrNode *root, int zdd, int silent)</argsstring>
        <name>cuddPrintVarGroups</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_mtr_node" kindref="compound">MtrNode</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>silent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Prints the variable groups as a parenthesized list.]</para>
<para>Description [Prints the variable groups as a parenthesized list. For each group the level range that it represents is printed. After each group, the group&apos;s flags are printed, preceded by a <lsquo/>|<rsquo/>. For each flag (except MTR_TERMINAL) a character is printed. <itemizedlist>
<listitem>
<para>F: MTR_FIXED </para>
</listitem>
<listitem>
<para>N: MTR_NEWNODE </para>
</listitem>
<listitem>
<para>S: MTR_SOFT </para>
</listitem>
</itemizedlist>
The second argument, silent, if different from 0, causes Cudd_PrintVarGroups to only check the syntax of the group tree.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1037" column="13" bodyfile="lib/CUDD/cuddCheck.c" bodystart="749" bodyend="792" declfile="include/CUDD/cuddInt.h" declline="1037" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aab8c61f9e7e9181b3a548da1a4267d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddClippingAnd</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, int maxDepth, int direction)</argsstring>
        <name>cuddBddClippingAnd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1038" column="16" declfile="include/CUDD/cuddInt.h" declline="1038" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a5f68b96ac9fa01c2e39e561a0a57a1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddClippingAndAbstract</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *cube, int maxDepth, int direction)</argsstring>
        <name>cuddBddClippingAndAbstract</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1039" column="16" declfile="include/CUDD/cuddInt.h" declline="1039" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a02d8e03ee77b6c219f4ed3daa95e36a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddGetBranches</definition>
        <argsstring>(DdNode *g, DdNode **g1, DdNode **g0)</argsstring>
        <name>cuddGetBranches</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>g1</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>g0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the children of g.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1040" column="13" bodyfile="lib/CUDD/cuddCof.c" bodystart="196" bodyend="210" declfile="include/CUDD/cuddInt.h" declline="1040" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a18cb115a0f1d45b085e71537119accec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCofactorRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddCofactorRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_Cofactor.]</para>
<para>Description [Performs the recursive step of Cudd_Cofactor. Returns a pointer to the cofactor if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_Cofactor] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1041" column="16" bodyfile="lib/CUDD/cuddCof.c" bodystart="226" bodyend="321" declfile="include/CUDD/cuddInt.h" declline="1041" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a133d2162f21001ffd87160c1ba9ee761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddComposeRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *proj)</argsstring>
        <name>cuddBddComposeRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>proj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1042" column="16" declfile="include/CUDD/cuddInt.h" declline="1042" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a13d26ec582df94635299038b44d4cb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddComposeRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *proj)</argsstring>
        <name>cuddAddComposeRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>proj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1043" column="16" declfile="include/CUDD/cuddInt.h" declline="1043" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aad1bbbe0b734963912f4af7c6884c654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddExact</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddExact</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Exact variable ordering algorithm.]</para>
<para>Description [Exact variable ordering algorithm. Finds an optimum order for the variables between lower and upper. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1044" column="12" bodyfile="lib/CUDD/cuddExact.c" bodystart="149" bodyend="337" declfile="include/CUDD/cuddInt.h" declline="1044" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6311f1cc598ee0f3681a76baec8c6d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddConstrainRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddBddConstrainRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1045" column="16" declfile="include/CUDD/cuddInt.h" declline="1045" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac7fd377dc8f0df6472ca0fe6df41ae48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddRestrictRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddBddRestrictRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1046" column="16" declfile="include/CUDD/cuddInt.h" declline="1046" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af5981d3853998e69b7dcfff261d3a4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddNPAndRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddBddNPAndRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1047" column="16" declfile="include/CUDD/cuddInt.h" declline="1047" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1abb45bdb200e1e4e975b20925130a6c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddConstrainRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddAddConstrainRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1048" column="16" declfile="include/CUDD/cuddInt.h" declline="1048" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a560239ea1d3da12ff14b214f0adf17a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAddRestrictRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddAddRestrictRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1049" column="16" declfile="include/CUDD/cuddInt.h" declline="1049" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6ac4647d91d277c68197d1860239dfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddLICompaction</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *c)</argsstring>
        <name>cuddBddLICompaction</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1050" column="16" declfile="include/CUDD/cuddInt.h" declline="1050" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a30cf6e35aee984f79054c81d8d994e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddGa</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddGa</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Genetic algorithm for DD reordering.]</para>
<para>Description [Genetic algorithm for DD reordering. The two children of a crossover will be stored in storedd[popsize] and storedd[popsize+1] <mdash/> the last two slots in the storedd array. (This will make comparisons and replacement easy.) Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1051" column="12" bodyfile="lib/CUDD/cuddGenetic.c" bodystart="188" bodyend="427" declfile="include/CUDD/cuddInt.h" declline="1051" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a66ff5219b538de2d580f832a4ddfc362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddTreeSifting</definition>
        <argsstring>(DdManager *table, Cudd_ReorderingType method)</argsstring>
        <name>cuddTreeSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>Cudd_ReorderingType</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Tree sifting algorithm.]</para>
<para>Description [Tree sifting algorithm. Assumes that a tree representing a group hierarchy is passed as a parameter. It then reorders each group in postorder fashion by calling ddTreeSiftingAux. Assumes that no dead nodes are present. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1052" column="12" bodyfile="lib/CUDD/cuddGroup.c" bodystart="271" bodyend="342" declfile="include/CUDD/cuddInt.h" declline="1052" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1abadd982c3d591b858a9a2369659e4528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddInitUniv</definition>
        <argsstring>(DdManager *zdd)</argsstring>
        <name>cuddZddInitUniv</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes the ZDD universe.]</para>
<para>Description [Initializes the ZDD universe. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddFreeUniv] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1053" column="12" bodyfile="lib/CUDD/cuddInit.c" bodystart="245" bodyend="279" declfile="include/CUDD/cuddInt.h" declline="1053" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab5e36f92c1b0f85b30c54984f6377032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddZddFreeUniv</definition>
        <argsstring>(DdManager *zdd)</argsstring>
        <name>cuddZddFreeUniv</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Frees the ZDD universe.]</para>
<para>Description [Frees the ZDD universe.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddInitUniv] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1054" column="13" bodyfile="lib/CUDD/cuddInit.c" bodystart="294" bodyend="302" declfile="include/CUDD/cuddInt.h" declline="1054" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a888f4a3339c8df41fa0eefd265657a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddSetInteract</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddSetInteract</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Set interaction matrix entries.]</para>
<para>Description [Given a pair of variables 0 &lt;= x &lt; y &lt; table-&gt;size, sets the corresponding bit of the interaction matrix to 1.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1055" column="13" bodyfile="lib/CUDD/cuddInteract.c" bodystart="153" bodyend="171" declfile="include/CUDD/cuddInt.h" declline="1055" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2cc583804f0963d4a76049be83d54d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddTestInteract</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddTestInteract</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Test interaction matrix entries.]</para>
<para>Description [Given a pair of variables 0 &lt;= x &lt; y &lt; table-&gt;size, tests whether the corresponding bit of the interaction matrix is 1. Returns the value of the bit.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1056" column="12" bodyfile="lib/CUDD/cuddInteract.c" bodystart="188" bodyend="212" declfile="include/CUDD/cuddInt.h" declline="1056" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aefe79f742e70f7e5523ed0604b7adfb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddInitInteract</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddInitInteract</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes the interaction matrix.]</para>
<para>Description [Initializes the interaction matrix. The interaction matrix is implemented as a bit vector storing the upper triangle of the symmetric interaction matrix. The bit vector is kept in an array of long integers. The computation is based on a series of depth-first searches, one for each root of the DAG. Two flags are needed: The local visited flag uses the LSB of the then pointer. The global visited flag uses the LSB of the next pointer. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1057" column="12" bodyfile="lib/CUDD/cuddInteract.c" bodystart="234" bodyend="293" declfile="include/CUDD/cuddInt.h" declline="1057" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a04039575e531729b0360e1f77e535ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
        <definition>DdLocalCache* cuddLocalCacheInit</definition>
        <argsstring>(DdManager *manager, unsigned int keySize, unsigned int cacheSize, unsigned int maxCacheSize)</argsstring>
        <name>cuddLocalCacheInit</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keySize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cacheSize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxCacheSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Initializes a local computed table.]</para>
<para>Description [Initializes a computed table. Returns a pointer the the new local cache in case of success; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddInitCache] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1058" column="22" bodyfile="lib/CUDD/cuddLCache.c" bodystart="202" bodyend="248" declfile="include/CUDD/cuddInt.h" declline="1058" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad16e373eb982f7c7858f392584ed9f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheQuit</definition>
        <argsstring>(DdLocalCache *cache)</argsstring>
        <name>cuddLocalCacheQuit</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a local computed table.]</para>
<para>Description [Initializes the computed table. It is called by Cudd_Init. Returns a pointer the the new local cache in case of success; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddLocalCacheInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1059" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="265" bodyend="276" declfile="include/CUDD/cuddInt.h" declline="1059" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1adf77dae50c8fe505edf8ab200a6c9f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheInsert</definition>
        <argsstring>(DdLocalCache *cache, DdNodePtr *key, DdNode *value)</argsstring>
        <name>cuddLocalCacheInsert</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts a result in a local cache.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1060" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="291" bodyend="308" declfile="include/CUDD/cuddInt.h" declline="1060" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aba758bb98f9976228aef74176af791fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddLocalCacheLookup</definition>
        <argsstring>(DdLocalCache *cache, DdNodePtr *key)</argsstring>
        <name>cuddLocalCacheLookup</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up in a local cache.]</para>
<para>Description [Looks up in a local cache. Returns the result if found; it returns NULL if no result is found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1061" column="16" bodyfile="lib/CUDD/cuddLCache.c" bodystart="324" bodyend="355" declfile="include/CUDD/cuddInt.h" declline="1061" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afcc9444fb15a2e92ec840a1fe3a18afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheClearDead</definition>
        <argsstring>(DdManager *manager)</argsstring>
        <name>cuddLocalCacheClearDead</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Clears the dead entries of the local caches of a manager.]</para>
<para>Description [Clears the dead entries of the local caches of a manager. Used during garbage collection.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1062" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="371" bodyend="407" declfile="include/CUDD/cuddInt.h" declline="1062" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a74e094b3f66fc64626102a922f60cffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddIsInDeathRow</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddIsInDeathRow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether a node is in the death row.]</para>
<para>Description [Checks whether a node is in the death row. Returns the position of the first occurrence if the node is present; -1 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_DelayedDerefBdd cuddClearDeathRow] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1063" column="12" bodyfile="lib/CUDD/cuddRef.c" bodystart="758" bodyend="774" declfile="include/CUDD/cuddInt.h" declline="1063" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a0bffbfed51e3a97a36361ee0d5660a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddTimesInDeathRow</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddTimesInDeathRow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Counts how many times a node is in the death row.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_DelayedDerefBdd cuddClearDeathRow cuddIsInDeathRow] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1064" column="12" bodyfile="lib/CUDD/cuddRef.c" bodystart="789" bodyend="804" declfile="include/CUDD/cuddInt.h" declline="1064" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a9b3e20543e022d0d3092591b73b7b939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheClearAll</definition>
        <argsstring>(DdManager *manager)</argsstring>
        <name>cuddLocalCacheClearAll</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Clears the local caches of a manager.]</para>
<para>Description [Clears the local caches of a manager. Used before reordering.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1065" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="423" bodyend="434" declfile="include/CUDD/cuddInt.h" declline="1065" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ae76427554fe01c4d539d7de58a9722be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
        <definition>DdHashTable* cuddHashTableInit</definition>
        <argsstring>(DdManager *manager, unsigned int keySize, unsigned int initSize)</argsstring>
        <name>cuddHashTableInit</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keySize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>initSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes a hash table.]</para>
<para>Description [Initializes a hash table. Returns a pointer to the new table if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableQuit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1069" column="21" bodyfile="lib/CUDD/cuddLCache.c" bodystart="557" bodyend="592" declfile="include/CUDD/cuddInt.h" declline="1069" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac48511fd185191433d7f180850e71e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddHashTableQuit</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableQuit</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a hash table.]</para>
<para>Description [Shuts down a hash table, dereferencing all the values.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1070" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="607" bodyend="636" declfile="include/CUDD/cuddInt.h" declline="1070" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad84d79b5775f36fbdeeeb4e8a6bcf159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddHashTableGenericQuit</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableGenericQuit</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a hash table.]</para>
<para>Description [Shuts down a hash table, when the values are not <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointers.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1071" column="13" bodyfile="lib/CUDD/cuddLCache.c" bodystart="652" bodyend="676" declfile="include/CUDD/cuddInt.h" declline="1071" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a9bf314654e2092980899575ffc3aeaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert</definition>
        <argsstring>(DdHashTable *hash, DdNodePtr *key, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key has more than three pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [[cuddHashTableInsert1 cuddHashTableInsert2 cuddHashTableInsert3 cuddHashTableLookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1072" column="12" bodyfile="lib/CUDD/cuddLCache.c" bodystart="693" bodyend="727" declfile="include/CUDD/cuddInt.h" declline="1072" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afd730a2140b0e0009f659f85af2efdfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup</definition>
        <argsstring>(DdHashTable *hash, DdNodePtr *key)</argsstring>
        <name>cuddHashTableLookup</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key in a hash table.]</para>
<para>Description [Looks up a key consisting of more than three pointers in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup1 cuddHashTableLookup2 cuddHashTableLookup3 cuddHashTableInsert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1073" column="16" bodyfile="lib/CUDD/cuddLCache.c" bodystart="748" bodyend="795" declfile="include/CUDD/cuddInt.h" declline="1073" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a33441f3cc9ba4dcc96433d23adf4b536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert1</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert1</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is one pointer. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert2 cuddHashTableInsert3 cuddHashTableLookup1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1074" column="12" bodyfile="lib/CUDD/cuddLCache.c" bodystart="812" bodyend="843" declfile="include/CUDD/cuddInt.h" declline="1074" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a10dc94baf12ac76234775b6ba0d04e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup1</definition>
        <argsstring>(DdHashTable *hash, DdNode *f)</argsstring>
        <name>cuddHashTableLookup1</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of one pointer in a hash table.]</para>
<para>Description [Looks up a key consisting of one pointer in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup2 cuddHashTableLookup3 cuddHashTableInsert1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1075" column="16" bodyfile="lib/CUDD/cuddLCache.c" bodystart="864" bodyend="902" declfile="include/CUDD/cuddInt.h" declline="1075" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a3bb782d3c2c4225e79f82706ee2bb755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert2</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert2</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is composed of two pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert1 cuddHashTableInsert3 cuddHashTableLookup2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1076" column="12" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1005" bodyend="1038" declfile="include/CUDD/cuddInt.h" declline="1076" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4a672d94fcbd1084a6164da71ece13d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup2</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g)</argsstring>
        <name>cuddHashTableLookup2</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of two pointers in a hash table.]</para>
<para>Description [Looks up a key consisting of two pointer in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup1 cuddHashTableLookup3 cuddHashTableInsert2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1077" column="16" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1059" bodyend="1098" declfile="include/CUDD/cuddInt.h" declline="1077" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a213d89cd581679e29763e8fb6b6ea4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert3</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert3</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is composed of three pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert1 cuddHashTableInsert2 cuddHashTableLookup3] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1078" column="12" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1115" bodyend="1150" declfile="include/CUDD/cuddInt.h" declline="1078" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a3e01ff980c57a850c2ac2e25ba79b3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup3</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddHashTableLookup3</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of three pointers in a hash table.]</para>
<para>Description [Looks up a key consisting of three pointers in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup1 cuddHashTableLookup2 cuddHashTableInsert3] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1079" column="16" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1171" bodyend="1211" declfile="include/CUDD/cuddInt.h" declline="1079" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6587958f56ab14444afd913155472ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableGenericInsert</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, void *value)</argsstring>
        <name>cuddHashTableGenericInsert</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is one pointer and the value is not a <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointer. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert1 cuddHashTableGenericLookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1080" column="12" bodyfile="lib/CUDD/cuddLCache.c" bodystart="919" bodyend="948" declfile="include/CUDD/cuddInt.h" declline="1080" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afd62abcd84b35b2762e184be503ae3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cuddHashTableGenericLookup</definition>
        <argsstring>(DdHashTable *hash, DdNode *f)</argsstring>
        <name>cuddHashTableGenericLookup</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of one pointer in a hash table.]</para>
<para>Description [Looks up a key consisting of one pointer in a hash table when the value is not a <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointer. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup1 cuddHashTableGenericInsert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1081" column="14" bodyfile="lib/CUDD/cuddLCache.c" bodystart="966" bodyend="988" declfile="include/CUDD/cuddInt.h" declline="1081" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab4989b8e89f97d3389b68295297ecdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref> *</type>
        <definition>DdLevelQueue* cuddLevelQueueInit</definition>
        <argsstring>(int levels, int itemSize, int numBuckets)</argsstring>
        <name>cuddLevelQueueInit</name>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>itemSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numBuckets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1082" column="22" declfile="include/CUDD/cuddInt.h" declline="1082" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aadd2bc9a7888e5141fd602acac8e36b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLevelQueueQuit</definition>
        <argsstring>(DdLevelQueue *queue)</argsstring>
        <name>cuddLevelQueueQuit</name>
        <param>
          <type><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1083" column="13" declfile="include/CUDD/cuddInt.h" declline="1083" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac6ed5d8eacd3ff7fa37b83a10551cab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cuddLevelQueueFirst</definition>
        <argsstring>(DdLevelQueue *queue, void *key, int level)</argsstring>
        <name>cuddLevelQueueFirst</name>
        <param>
          <type><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1084" column="14" declfile="include/CUDD/cuddInt.h" declline="1084" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a9d8eeb1c98a9ca4c998153185921af62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cuddLevelQueueEnqueue</definition>
        <argsstring>(DdLevelQueue *queue, void *key, int level)</argsstring>
        <name>cuddLevelQueueEnqueue</name>
        <param>
          <type><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1085" column="14" declfile="include/CUDD/cuddInt.h" declline="1085" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a7022506110f3a4e4e9dc4909b1492a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLevelQueueDequeue</definition>
        <argsstring>(DdLevelQueue *queue, int level)</argsstring>
        <name>cuddLevelQueueDequeue</name>
        <param>
          <type><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1086" column="13" declfile="include/CUDD/cuddInt.h" declline="1086" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6280eb698415f13868d44ada26f93d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddLinearAndSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddLinearAndSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [BDD reduction based on combination of sifting and linear transformations.]</para>
<para>Description [BDD reduction based on combination of sifting and linear transformations. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique table. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the DD heap. At each position, linear transformation of the two adjacent variables is tried and is accepted if it reduces the size of the DD. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1087" column="12" bodyfile="lib/CUDD/cuddLinear.c" bodystart="236" bodyend="338" declfile="include/CUDD/cuddInt.h" declline="1087" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a94afb04204cc16194cc7a920138bede7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddLinearInPlace</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddLinearInPlace</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Linearly combines two adjacent variables.]</para>
<para>Description [Linearly combines two adjacent variables. Specifically, replaces the top variable with the exclusive nor of the two variables. It assumes that no dead nodes are present on entry to this procedure. The procedure then guarantees that no dead nodes will be present when it terminates. cuddLinearInPlace assumes that x &lt; y. Returns the number of keys in the table if successful; 0 otherwise.]</para>
<para>SideEffects [The two subtables corrresponding to variables x and y are modified. The global counters of the unique table are also affected.]</para>
<para>SeeAlso [cuddSwapInPlace] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1088" column="12" bodyfile="lib/CUDD/cuddLinear.c" bodystart="360" bodyend="699" declfile="include/CUDD/cuddInt.h" declline="1088" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a73a2fde2f2e7ccf9c38312f2fe9e62ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddUpdateInteractionMatrix</definition>
        <argsstring>(DdManager *table, int xindex, int yindex)</argsstring>
        <name>cuddUpdateInteractionMatrix</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xindex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Updates the interaction matrix.]</para>
<para>Description []</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1089" column="13" bodyfile="lib/CUDD/cuddLinear.c" bodystart="714" bodyend="739" declfile="include/CUDD/cuddInt.h" declline="1089" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad92550d1a1e9f8d717102c00b7e7d839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddInitLinear</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddInitLinear</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes the linear transform matrix.]</para>
<para>Description [Initializes the linear transform matrix. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1090" column="12" bodyfile="lib/CUDD/cuddLinear.c" bodystart="755" bodyend="784" declfile="include/CUDD/cuddInt.h" declline="1090" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a952f869c6bd03fd89b1398a8c2149790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddResizeLinear</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddResizeLinear</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Resizes the linear transform matrix.]</para>
<para>Description [Resizes the linear transform matrix. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [none]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1091" column="12" bodyfile="lib/CUDD/cuddLinear.c" bodystart="800" bodyend="847" declfile="include/CUDD/cuddInt.h" declline="1091" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a683a4e8dae010244b6f2b187d4c81355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddLiteralSetIntersectionRecur</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddBddLiteralSetIntersectionRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1092" column="16" declfile="include/CUDD/cuddInt.h" declline="1092" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1abbfc086cc35079b4a02201161120cc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddCProjectionRecur</definition>
        <argsstring>(DdManager *dd, DdNode *R, DdNode *Y, DdNode *Ysupp)</argsstring>
        <name>cuddCProjectionRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Ysupp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1093" column="16" declfile="include/CUDD/cuddInt.h" declline="1093" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad1f22fc6f56d944082a1be489bd94b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddClosestCube</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, CUDD_VALUE_TYPE bound)</argsstring>
        <name>cuddBddClosestCube</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>CUDD_VALUE_TYPE</type>
          <declname>bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1094" column="16" declfile="include/CUDD/cuddInt.h" declline="1094" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1acc19dbda07ed77727cd149f7aeb2527b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddReclaim</definition>
        <argsstring>(DdManager *table, DdNode *n)</argsstring>
        <name>cuddReclaim</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Brings children of a dead node back.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddReclaimZdd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1095" column="13" bodyfile="lib/CUDD/cuddRef.c" bodystart="580" bodyend="619" declfile="include/CUDD/cuddInt.h" declline="1095" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1adc39ed6aca9e7c16f7370bb373ed694b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddReclaimZdd</definition>
        <argsstring>(DdManager *table, DdNode *n)</argsstring>
        <name>cuddReclaimZdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Brings children of a dead ZDD node back.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddReclaim] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1096" column="13" bodyfile="lib/CUDD/cuddRef.c" bodystart="634" bodyend="669" declfile="include/CUDD/cuddInt.h" declline="1096" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a3c9555970525d41f0515a2d44438ba8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddClearDeathRow</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddClearDeathRow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Clears the death row.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_DelayedDerefBdd Cudd_IterDerefBdd Cudd_CheckZeroRef cuddGarbageCollect] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1097" column="13" bodyfile="lib/CUDD/cuddRef.c" bodystart="722" bodyend="741" declfile="include/CUDD/cuddInt.h" declline="1097" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a68543f5aa10af3730f82919fdac4fd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddShrinkDeathRow</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddShrinkDeathRow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shrinks the death row.]</para>
<para>Description [Shrinks the death row by a factor of four.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddClearDeathRow] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1098" column="13" bodyfile="lib/CUDD/cuddRef.c" bodystart="684" bodyend="706" declfile="include/CUDD/cuddInt.h" declline="1098" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2ef0f60dfd6084809e4a645281450663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddDynamicAllocNode</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddDynamicAllocNode</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Dynamically allocates a Node.]</para>
<para>Description [Dynamically allocates a Node. This procedure is similar to cuddAllocNode in Cudd_Table.c, but it does not attempt garbage collection, because during reordering there are no dead nodes. Returns a pointer to a new node if successful; NULL is memory is full.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddAllocNode] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1099" column="16" bodyfile="lib/CUDD/cuddReorder.c" bodystart="405" bodyend="479" declfile="include/CUDD/cuddInt.h" declline="1099" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad379df946ff42f0241f8cc432ed5a61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implementation of Rudell&apos;s sifting algorithm.]</para>
<para>Description [Implementation of Rudell&apos;s sifting algorithm. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique table. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the DD heap. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1100" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="502" bodyend="582" declfile="include/CUDD/cuddInt.h" declline="1100" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4fcc58544702da24985351c6e63fcc04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSwapping</definition>
        <argsstring>(DdManager *table, int lower, int upper, Cudd_ReorderingType heuristic)</argsstring>
        <name>cuddSwapping</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>Cudd_ReorderingType</type>
          <declname>heuristic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reorders variables by a sequence of (non-adjacent) swaps.]</para>
<para>Description [Implementation of Plessier&apos;s algorithm that reorders variables by a sequence of (non-adjacent) swaps. <orderedlist>
<listitem>
<para>Select two variables (RANDOM or HEURISTIC). </para>
</listitem>
<listitem>
<para>Permute these variables. </para>
</listitem>
<listitem>
<para>If the nodes have decreased accept the permutation. </para>
</listitem>
<listitem>
<para>Otherwise reconstruct the original heap. </para>
</listitem>
<listitem>
<para>Loop. </para>
</listitem>
</orderedlist>
Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1101" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="604" bodyend="699" declfile="include/CUDD/cuddInt.h" declline="1101" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a1001b8075a1b90d0231d8967a0290186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddNextHigh</definition>
        <argsstring>(DdManager *table, int x)</argsstring>
        <name>cuddNextHigh</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Finds the next subtable with a larger index.]</para>
<para>Description [Finds the next subtable with a larger index. Returns the index.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddNextLow] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1102" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="715" bodyend="721" declfile="include/CUDD/cuddInt.h" declline="1102" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ace4f0137c821e3a72f1121ad072de8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddNextLow</definition>
        <argsstring>(DdManager *table, int x)</argsstring>
        <name>cuddNextLow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Finds the next subtable with a smaller index.]</para>
<para>Description [Finds the next subtable with a smaller index. Returns the index.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddNextHigh] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1103" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="737" bodyend="743" declfile="include/CUDD/cuddInt.h" declline="1103" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a02e55858557a72e60c2c2e81a53916d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSwapInPlace</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddSwapInPlace</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Swaps two adjacent variables.]</para>
<para>Description [Swaps two adjacent variables. It assumes that no dead nodes are present on entry to this procedure. The procedure then guarantees that no dead nodes will be present when it terminates. cuddSwapInPlace assumes that x &lt; y. Returns the number of keys in the table if successful; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1104" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="760" bodyend="1223" declfile="include/CUDD/cuddInt.h" declline="1104" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a76fe76c0bc706efc355dde4db43f8669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddBddAlignToZdd</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddBddAlignToZdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reorders BDD variables according to the order of the ZDD variables.]</para>
<para>Description [Reorders BDD variables according to the order of the ZDD variables. This function can be called at the end of ZDD reordering to insure that the order of the BDD variables is consistent with the order of the ZDD variables. The number of ZDD variables must be a multiple of the number of BDD variables. Let <computeroutput>M</computeroutput> be the ratio of the two numbers. cuddBddAlignToZdd then considers the ZDD variables from <computeroutput>M*i</computeroutput> to <computeroutput>(M+1)*i-1</computeroutput> as corresponding to BDD variable <computeroutput>i</computeroutput>. This function should be normally called from Cudd_zddReduceHeap, which clears the cache. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [Changes the BDD variable order for all diagrams and performs garbage collection of the BDD unique table.]</para>
<para>SeeAlso [Cudd_ShuffleHeap Cudd_zddReduceHeap] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1105" column="12" bodyfile="lib/CUDD/cuddReorder.c" bodystart="1250" bodyend="1302" declfile="include/CUDD/cuddInt.h" declline="1105" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aad1ef5892f9b1b85a2766956fca9761c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddMakePrime</definition>
        <argsstring>(DdManager *dd, DdNode *cube, DdNode *f)</argsstring>
        <name>cuddBddMakePrime</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>cube</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_bddMakePrime.]</para>
<para>Description [Performs the recursive step of Cudd_bddMakePrime. Returns the prime if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1106" column="16" bodyfile="lib/CUDD/cuddSat.c" bodystart="995" bodyend="1041" declfile="include/CUDD/cuddInt.h" declline="1106" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a75ba8e44100699569e08b481b44fe466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddSolveEqnRecur</definition>
        <argsstring>(DdManager *bdd, DdNode *F, DdNode *Y, DdNode **G, int n, int *yIndex, int i)</argsstring>
        <name>cuddSolveEqnRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>bdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>yIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1107" column="16" declfile="include/CUDD/cuddInt.h" declline="1107" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad1dde1ebcd9c605ee59146b7d68177c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddVerifySol</definition>
        <argsstring>(DdManager *bdd, DdNode *F, DdNode **G, int *yIndex, int n)</argsstring>
        <name>cuddVerifySol</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>bdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>yIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1108" column="16" declfile="include/CUDD/cuddInt.h" declline="1108" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af9e9a7811e6b27fd27f3ddda57dffb5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddSplitSetRecur</definition>
        <argsstring>(DdManager *manager, st_table *mtable, int *varSeen, DdNode *p, double n, double max, int index)</argsstring>
        <name>cuddSplitSetRecur</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>mtable</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>varSeen</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1110" column="15" declfile="include/CUDD/cuddInt.h" declline="1110" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2073c43a05383ffdeb39ecb7c4d1c395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddSubsetHeavyBranch</definition>
        <argsstring>(DdManager *dd, DdNode *f, int numVars, int threshold)</argsstring>
        <name>cuddSubsetHeavyBranch</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1112" column="16" declfile="include/CUDD/cuddInt.h" declline="1112" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ad1a6b03ccc8a73f27a6191af3f33d4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddSubsetShortPaths</definition>
        <argsstring>(DdManager *dd, DdNode *f, int numVars, int threshold, int hardlimit)</argsstring>
        <name>cuddSubsetShortPaths</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hardlimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1113" column="16" declfile="include/CUDD/cuddInt.h" declline="1113" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a23afa87c3a2b034ed77d613510958a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSymmCheck</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddSymmCheck</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks for symmetry of x and y.]</para>
<para>Description [Checks for symmetry of x and y. Ignores projection functions, unless they are isolated. Returns 1 in case of symmetry; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1114" column="12" bodyfile="lib/CUDD/cuddSymmetry.c" bodystart="188" bodyend="292" declfile="include/CUDD/cuddInt.h" declline="1114" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a8a7e7ba2e8fb65399112bd5b7fd71ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSymmSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddSymmSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Symmetric sifting algorithm.]</para>
<para>Description [Symmetric sifting algorithm. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique subtable. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the DD heap and grouping variables that are symmetric. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 plus the number of symmetric variables if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddSymmSiftingConv] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1115" column="12" bodyfile="lib/CUDD/cuddSymmetry.c" bodystart="318" bodyend="412" declfile="include/CUDD/cuddInt.h" declline="1115" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a26500cac5e214614917e48563a2fd133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddSymmSiftingConv</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddSymmSiftingConv</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Symmetric sifting to convergence algorithm.]</para>
<para>Description [Symmetric sifting to convergence algorithm. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique subtable. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the DD heap and grouping variables that are symmetric. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
<listitem>
<para>Repeat 1-4 until no further improvement. </para>
</listitem>
</orderedlist>
Returns 1 plus the number of symmetric variables if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddSymmSifting] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1116" column="12" bodyfile="lib/CUDD/cuddSymmetry.c" bodystart="439" bodyend="592" declfile="include/CUDD/cuddInt.h" declline="1116" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aeab770a8c957379ede9ec8edd1dd696a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddAllocNode</definition>
        <argsstring>(DdManager *unique)</argsstring>
        <name>cuddAllocNode</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Fast storage allocation for DdNodes in the table.]</para>
<para>Description [Fast storage allocation for DdNodes in the table. The first 4 bytes of a chunk contain a pointer to the next block; the rest contains DD_MEM_CHUNK spaces for DdNodes. Returns a pointer to a new node if successful; NULL is memory is full.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddDynamicAllocNode] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1117" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="266" bodyend="364" declfile="include/CUDD/cuddInt.h" declline="1117" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aac58f12de669eaac1d445054699e2a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
        <definition>DdManager* cuddInitTable</definition>
        <argsstring>(unsigned int numVars, unsigned int numVarsZ, unsigned int numSlots, unsigned int looseUpTo)</argsstring>
        <name>cuddInitTable</name>
        <param>
          <type>unsigned int</type>
          <declname>numVars</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>numVarsZ</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>numSlots</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>looseUpTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Creates and initializes the unique table.]</para>
<para>Description [Creates and initializes the unique table. Returns a pointer to the table if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_Init cuddFreeTable] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1118" column="19" bodyfile="lib/CUDD/cuddTable.c" bodystart="380" bodyend="677" declfile="include/CUDD/cuddInt.h" declline="1118" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a1c1bf08350088e17ef443273e2c8de6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddFreeTable</definition>
        <argsstring>(DdManager *unique)</argsstring>
        <name>cuddFreeTable</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Frees the resources associated to a unique table.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddInitTable] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1119" column="13" bodyfile="lib/CUDD/cuddTable.c" bodystart="692" bodyend="743" declfile="include/CUDD/cuddInt.h" declline="1119" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a67e9deab5db86e16734a413ad199719c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddGarbageCollect</definition>
        <argsstring>(DdManager *unique, int clearCache)</argsstring>
        <name>cuddGarbageCollect</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>clearCache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs garbage collection on the unique tables.]</para>
<para>Description [Performs garbage collection on the BDD and ZDD unique tables. If clearCache is 0, the cache is not cleared. This should only be specified if the cache has been cleared right before calling cuddGarbageCollect. (As in the case of dynamic reordering.) Returns the total number of deleted nodes.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1120" column="12" bodyfile="lib/CUDD/cuddTable.c" bodystart="762" bodyend="1033" declfile="include/CUDD/cuddInt.h" declline="1120" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af607cebd30fbd27bb9bd0fa125a1e1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddGetNode</definition>
        <argsstring>(DdManager *zdd, int id, DdNode *T, DdNode *E)</argsstring>
        <name>cuddZddGetNode</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Wrapper for cuddUniqueInterZdd.]</para>
<para>Description [Wrapper for cuddUniqueInterZdd, which applies the ZDD reduction rule. Returns a pointer to the result node under normal conditions; NULL if reordering occurred or memory was exhausted.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddUniqueInterZdd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1121" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1050" bodyend="1063" declfile="include/CUDD/cuddInt.h" declline="1121" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af19757ac3885d62886ce2a63ba409ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddGetNodeIVO</definition>
        <argsstring>(DdManager *dd, int index, DdNode *g, DdNode *h)</argsstring>
        <name>cuddZddGetNodeIVO</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Wrapper for cuddUniqueInterZdd that is independent of variable ordering.]</para>
<para>Description [Wrapper for cuddUniqueInterZdd that is independent of variable ordering (IVO). This function does not require parameter index to precede the indices of the top nodes of g and h in the variable order. Returns a pointer to the result node under normal conditions; NULL if reordering occurred or memory was exhausted.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddGetNode cuddZddIsop] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1122" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1083" bodyend="1116" declfile="include/CUDD/cuddInt.h" declline="1122" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a767e31fbbfdbddc623396dde86249497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddUniqueInter</definition>
        <argsstring>(DdManager *unique, int index, DdNode *T, DdNode *E)</argsstring>
        <name>cuddUniqueInter</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks the unique table for the existence of an internal node.]</para>
<para>Description [Checks the unique table for the existence of an internal node. If it does not exist, it creates a new one. Does not modify the reference count of whatever is returned. A newly created internal node comes back with a reference count 0. For a newly created node, increments the reference counts of what T and E point to. Returns a pointer to the new node if successful; NULL if memory is exhausted or if reordering took place.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddUniqueInterZdd] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1123" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1137" bodyend="1313" declfile="include/CUDD/cuddInt.h" declline="1123" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af46446c8dfbd689f5d68be71275816c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddUniqueInterIVO</definition>
        <argsstring>(DdManager *unique, int index, DdNode *T, DdNode *E)</argsstring>
        <name>cuddUniqueInterIVO</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Wrapper for cuddUniqueInter that is independent of variable ordering.]</para>
<para>Description [Wrapper for cuddUniqueInter that is independent of variable ordering (IVO). This function does not require parameter index to precede the indices of the top nodes of T and E in the variable order. Returns a pointer to the result node under normal conditions; NULL if reordering occurred or memory was exhausted.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddUniqueInter Cudd_MakeBddFromZddCover] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1124" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1333" bodyend="1350" declfile="include/CUDD/cuddInt.h" declline="1124" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a82d51c70097e5d4acddd5c8c4aef6d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddUniqueInterZdd</definition>
        <argsstring>(DdManager *unique, int index, DdNode *T, DdNode *E)</argsstring>
        <name>cuddUniqueInterZdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks the unique table for the existence of an internal ZDD node.]</para>
<para>Description [Checks the unique table for the existence of an internal ZDD node. If it does not exist, it creates a new one. Does not modify the reference count of whatever is returned. A newly created internal node comes back with a reference count 0. For a newly created node, increments the reference counts of what T and E point to. Returns a pointer to the new node if successful; NULL if memory is exhausted or if reordering took place.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddUniqueInter] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1125" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1372" bodyend="1462" declfile="include/CUDD/cuddInt.h" declline="1125" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4e44fedc71d81a76167dc441ca10cff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddUniqueConst</definition>
        <argsstring>(DdManager *unique, CUDD_VALUE_TYPE value)</argsstring>
        <name>cuddUniqueConst</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>CUDD_VALUE_TYPE</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks the unique table for the existence of a constant node.]</para>
<para>Description [Checks the unique table for the existence of a constant node. If it does not exist, it creates a new one. Does not modify the reference count of whatever is returned. A newly created internal node comes back with a reference count 0. Returns a pointer to the new node.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1126" column="16" bodyfile="lib/CUDD/cuddTable.c" bodystart="1479" bodyend="1543" declfile="include/CUDD/cuddInt.h" declline="1126" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a808cc83054e0925704d498f721605926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddRehash</definition>
        <argsstring>(DdManager *unique, int i)</argsstring>
        <name>cuddRehash</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Rehashes a unique subtable.]</para>
<para>Description [Doubles the size of a unique subtable and rehashes its contents.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1127" column="13" bodyfile="lib/CUDD/cuddTable.c" bodystart="1559" bodyend="1716" declfile="include/CUDD/cuddInt.h" declline="1127" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ae51edbd940e8da4366e46b1d36623c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddShrinkSubtable</definition>
        <argsstring>(DdManager *unique, int i)</argsstring>
        <name>cuddShrinkSubtable</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shrinks a subtable.]</para>
<para>Description [Shrinks a subtable.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddRehash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1128" column="13" bodyfile="lib/CUDD/cuddTable.c" bodystart="1731" bodyend="1807" declfile="include/CUDD/cuddInt.h" declline="1128" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a8f0377f8cc5d75cdd86514e46039efdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddInsertSubtables</definition>
        <argsstring>(DdManager *unique, int n, int level)</argsstring>
        <name>cuddInsertSubtables</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts n new subtables in a unique table at level.]</para>
<para>Description [Inserts n new subtables in a unique table at level. The number n should be positive, and level should be an existing level. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddDestroySubtables] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1129" column="12" bodyfile="lib/CUDD/cuddTable.c" bodystart="1824" bodyend="2118" declfile="include/CUDD/cuddInt.h" declline="1129" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac164deef3725e54db581378d0dafcdfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddDestroySubtables</definition>
        <argsstring>(DdManager *unique, int n)</argsstring>
        <name>cuddDestroySubtables</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Destroys the n most recently created subtables in a unique table.]</para>
<para>Description [Destroys the n most recently created subtables in a unique table. n should be positive. The subtables should not contain any live nodes, except the (isolated) projection function. The projection functions are freed. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [The variable map used for fast variable substitution is destroyed if it exists. In this case the cache is also cleared.]</para>
<para>SeeAlso [cuddInsertSubtables Cudd_SetVarMap] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1130" column="12" bodyfile="lib/CUDD/cuddTable.c" bodystart="2137" bodyend="2250" declfile="include/CUDD/cuddInt.h" declline="1130" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af9fabe670c27f42152573dbf713ec2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddResizeTableZdd</definition>
        <argsstring>(DdManager *unique, int index)</argsstring>
        <name>cuddResizeTableZdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Increases the number of ZDD subtables in a unique table so that it meets or exceeds index.]</para>
<para>Description [Increases the number of ZDD subtables in a unique table so that it meets or exceeds index. When new ZDD variables are created, it is possible to preserve the functions unchanged, or it is possible to preserve the covers unchanged, but not both. cuddResizeTableZdd preserves the covers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [ddResizeTable] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1131" column="12" bodyfile="lib/CUDD/cuddTable.c" bodystart="2270" bodyend="2399" declfile="include/CUDD/cuddInt.h" declline="1131" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a917f877ac725fc2d169102ab9d7aec97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddSlowTableGrowth</definition>
        <argsstring>(DdManager *unique)</argsstring>
        <name>cuddSlowTableGrowth</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>unique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Adjusts parameters of a table to slow down its growth.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1132" column="13" bodyfile="lib/CUDD/cuddTable.c" bodystart="2414" bodyend="2431" declfile="include/CUDD/cuddInt.h" declline="1132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4bbc595b0dac192924c21ee5fadc8383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddP</definition>
        <argsstring>(DdManager *dd, DdNode *f)</argsstring>
        <name>cuddP</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Prints a DD to the standard output. One line per node is printed.]</para>
<para>Description [Prints a DD to the standard output. One line per node is printed. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_PrintDebug] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1133" column="12" bodyfile="lib/CUDD/cuddUtil.c" bodystart="2874" bodyend="2888" declfile="include/CUDD/cuddInt.h" declline="1133" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa19f5abe781eca37ede28a3af994c48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum st_retval</type>
        <definition>enum st_retval cuddStCountfree</definition>
        <argsstring>(char *key, char *value, char *arg)</argsstring>
        <name>cuddStCountfree</name>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Frees the memory used to store the minterm counts recorded in the visited table.]</para>
<para>Description [Frees the memory used to store the minterm counts recorded in the visited table. Returns ST_CONTINUE.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1133" column="12" bodyfile="lib/CUDD/cuddUtil.c" bodystart="2903" bodyend="2914" declfile="include/CUDD/cuddInt.h" declline="1133" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2cf3fcfdf91a36cd66978d4f7201c468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddCollectNodes</definition>
        <argsstring>(DdNode *f, st_table *visited)</argsstring>
        <name>cuddCollectNodes</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>visited</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Recursively collects all the nodes of a DD in a symbol table.]</para>
<para>Description [Traverses the DD f and collects all its nodes in a symbol table. f is assumed to be a regular pointer and cuddCollectNodes guarantees this assumption in the recursive calls. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1136" column="12" bodyfile="lib/CUDD/cuddUtil.c" bodystart="2933" bodyend="2968" declfile="include/CUDD/cuddInt.h" declline="1136" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa089ce201a38140aa26db5fbe0347c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
        <definition>DdNodePtr* cuddNodeArray</definition>
        <argsstring>(DdNode *f, int *n)</argsstring>
        <name>cuddNodeArray</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Recursively collects all the nodes of a DD in an array.]</para>
<para>Description [Traverses the DD f and collects all its nodes in an array. The caller should free the array returned by cuddNodeArray. Returns a pointer to the array of nodes in case of success; NULL otherwise. The nodes are collected in reverse topological order, so that a node is always preceded in the array by all its descendants.]</para>
<para>SideEffects [The number of nodes is returned as a side effect.]</para>
<para>SeeAlso [Cudd_FirstNode] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1138" column="19" bodyfile="lib/CUDD/cuddUtil.c" bodystart="2987" bodyend="3007" declfile="include/CUDD/cuddInt.h" declline="1138" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a80cc91f0b3e9f6e5318534321c23c655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddWindowReorder</definition>
        <argsstring>(DdManager *table, int low, int high, Cudd_ReorderingType submethod)</argsstring>
        <name>cuddWindowReorder</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int</type>
          <declname>high</declname>
        </param>
        <param>
          <type>Cudd_ReorderingType</type>
          <declname>submethod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Reorders by applying the method of the sliding window.]</para>
<para>Description [Reorders by applying the method of the sliding window. Tries all possible permutations to the variables in a window that slides from low to high. The size of the window is determined by submethod. Assumes that no dead nodes are present. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1139" column="12" bodyfile="lib/CUDD/cuddWindow.c" bodystart="138" bodyend="190" declfile="include/CUDD/cuddInt.h" declline="1139" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a99b880cf40736e465e1cbf46cb13da40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddProduct</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddProduct</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddProduct.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddProduct] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1140" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="376" bodyend="598" declfile="include/CUDD/cuddInt.h" declline="1140" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1afea6d3e9ead2bc24cc71cf61524b38d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddUnateProduct</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddUnateProduct</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddUnateProduct.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddUnateProduct] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1141" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="613" bodyend="742" declfile="include/CUDD/cuddInt.h" declline="1141" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a86e1c6c9f20fb70fdd9579a4c63f448d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddWeakDiv</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddWeakDiv</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddWeakDiv.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddWeakDiv] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1142" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="757" bodyend="903" declfile="include/CUDD/cuddInt.h" declline="1142" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a24e2e6aa2dffe817f50ebed63f048db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddWeakDivF</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddWeakDivF</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddWeakDivF.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddWeakDivF] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1143" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="918" bodyend="1140" declfile="include/CUDD/cuddInt.h" declline="1143" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1adf85f81e2cabd23947220f77681a6b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddDivide</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddDivide</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddDivide.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddDivide] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1144" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1155" bodyend="1240" declfile="include/CUDD/cuddInt.h" declline="1144" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4ac974deda65b0071f01780d8132efca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddDivideF</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g)</argsstring>
        <name>cuddZddDivideF</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddDivideF.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddDivideF] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1145" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1255" bodyend="1340" declfile="include/CUDD/cuddInt.h" declline="1145" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a57eb6f354f1b6ed2cdd629162f46db82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetCofactors3</definition>
        <argsstring>(DdManager *dd, DdNode *f, int v, DdNode **f1, DdNode **f0, DdNode **fd)</argsstring>
        <name>cuddZddGetCofactors3</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the three-way decomposition of f w.r.t. v.]</para>
<para>Description [Computes the three-way decomposition of function f (represented by a ZDD) wit respect to variable v. Returns 0 if successful; 1 otherwise.]</para>
<para>SideEffects [The results are returned in f1, f0, and fd.]</para>
<para>SeeAlso [cuddZddGetCofactors2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1146" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1356" bodyend="1468" declfile="include/CUDD/cuddInt.h" declline="1146" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a0767c8eb1d5d87d76cec9bfa86e996d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetCofactors2</definition>
        <argsstring>(DdManager *dd, DdNode *f, int v, DdNode **f1, DdNode **f0)</argsstring>
        <name>cuddZddGetCofactors2</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the two-way decomposition of f w.r.t. v.]</para>
<para>Description []</para>
<para>SideEffects [The results are returned in f1 and f0.]</para>
<para>SeeAlso [cuddZddGetCofactors3] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1147" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1483" bodyend="1500" declfile="include/CUDD/cuddInt.h" declline="1147" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a83f563a2bf47531a70e0b34c3cdd504b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddComplement</definition>
        <argsstring>(DdManager *dd, DdNode *node)</argsstring>
        <name>cuddZddComplement</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes a complement of a ZDD node.]</para>
<para>Description [Computes the complement of a ZDD node. So far, since we couldn&apos;t find a direct way to get the complement of a ZDD cover, we first convert a ZDD cover to a BDD, then make the complement of the ZDD cover from the complement of the BDD node by using ISOP.]</para>
<para>SideEffects [The result depends on current variable order.]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1148" column="15" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1518" bodyend="1546" declfile="include/CUDD/cuddInt.h" declline="1148" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a4449045d422400ac577707490b4b1a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetPosVarIndex</definition>
        <argsstring>(DdManager *dd, int index)</argsstring>
        <name>cuddZddGetPosVarIndex</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the index of positive ZDD variable.]</para>
<para>Description [Returns the index of positive ZDD variable.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1149" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1561" bodyend="1567" declfile="include/CUDD/cuddInt.h" declline="1149" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa74e960c9595f499b6c55c35b76c38c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetNegVarIndex</definition>
        <argsstring>(DdManager *dd, int index)</argsstring>
        <name>cuddZddGetNegVarIndex</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the index of negative ZDD variable.]</para>
<para>Description [Returns the index of negative ZDD variable.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1150" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1582" bodyend="1588" declfile="include/CUDD/cuddInt.h" declline="1150" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1add2dde03c13e04eda9512dd54fef4278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetPosVarLevel</definition>
        <argsstring>(DdManager *dd, int index)</argsstring>
        <name>cuddZddGetPosVarLevel</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the level of positive ZDD variable.]</para>
<para>Description [Returns the level of positive ZDD variable.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1151" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1603" bodyend="1609" declfile="include/CUDD/cuddInt.h" declline="1151" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a17372914aa5d0e2b405e6b4db7b340ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddGetNegVarLevel</definition>
        <argsstring>(DdManager *dd, int index)</argsstring>
        <name>cuddZddGetNegVarLevel</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the level of negative ZDD variable.]</para>
<para>Description [Returns the level of negative ZDD variable.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1152" column="12" bodyfile="lib/CUDD/cuddZddFuncs.c" bodystart="1624" bodyend="1630" declfile="include/CUDD/cuddInt.h" declline="1152" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a502f13629f5546da11d81c81cae8cc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddTreeSifting</definition>
        <argsstring>(DdManager *table, Cudd_ReorderingType method)</argsstring>
        <name>cuddZddTreeSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>Cudd_ReorderingType</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Tree sifting algorithm for ZDDs.]</para>
<para>Description [Tree sifting algorithm for ZDDs. Assumes that a tree representing a group hierarchy is passed as a parameter. It then reorders each group in postorder fashion by calling zddTreeSiftingAux. Assumes that no dead nodes are present. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1153" column="12" bodyfile="lib/CUDD/cuddZddGroup.c" bodystart="228" bodyend="326" declfile="include/CUDD/cuddInt.h" declline="1153" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ada2ddff66ba0fabe1c39ac446f77fd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddIsop</definition>
        <argsstring>(DdManager *dd, DdNode *L, DdNode *U, DdNode **zdd_I)</argsstring>
        <name>cuddZddIsop</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>U</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> **</type>
          <declname>zdd_I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddIsop.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddIsop] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1154" column="15" bodyfile="lib/CUDD/cuddZddIsop.c" bodystart="231" bodyend="557" declfile="include/CUDD/cuddInt.h" declline="1154" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af63228ad50be517bfbdc8ddc6ca48af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddBddIsop</definition>
        <argsstring>(DdManager *dd, DdNode *L, DdNode *U)</argsstring>
        <name>cuddBddIsop</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>U</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_bddIsop.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_bddIsop] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1155" column="15" bodyfile="lib/CUDD/cuddZddIsop.c" bodystart="572" bodyend="774" declfile="include/CUDD/cuddInt.h" declline="1155" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab1a42f8ffa091f37d1aa152908a778bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddMakeBddFromZddCover</definition>
        <argsstring>(DdManager *dd, DdNode *node)</argsstring>
        <name>cuddMakeBddFromZddCover</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Converts a ZDD cover to a BDD.]</para>
<para>Description [Converts a ZDD cover to a BDD. If successful, it returns a BDD node, otherwise it returns NULL. It is a recursive algorithm that works as follows. First it computes 3 cofactors of a ZDD cover: f1, f0 and fd. Second, it compute BDDs (b1, b0 and bd) of f1, f0 and fd. Third, it computes T=b1+bd and E=b0+bd. Fourth, it computes ITE(v,T,E) where v is the variable which has the index of the top node of the ZDD cover. In this case, since the index of v can be larger than either the one of T or the one of E, cuddUniqueInterIVO is called, where IVO stands for independent from variable ordering.]</para>
<para>SideEffects []</para>
<para>SeeAlso [Cudd_MakeBddFromZddCover] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1156" column="15" bodyfile="lib/CUDD/cuddZddIsop.c" bodystart="797" bodyend="907" declfile="include/CUDD/cuddInt.h" declline="1156" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a03240bfcc17024895c43dfaf899ed46a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddLinearSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddZddLinearSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Implementation of the linear sifting algorithm for ZDDs.]</para>
<para>Description [Implementation of the linear sifting algorithm for ZDDs. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique table. </para>
</listitem>
<listitem>
<para>Sift the variable up and down and applies the XOR transformation, remembering each time the total size of the DD heap. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1157" column="12" bodyfile="lib/CUDD/cuddZddLin.c" bodystart="152" bodyend="231" declfile="include/CUDD/cuddInt.h" declline="1157" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ae994abd80d7d5b41c74a3a6016f52815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddAlignToBdd</definition>
        <argsstring>(DdManager *table)</argsstring>
        <name>cuddZddAlignToBdd</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reorders ZDD variables according to the order of the BDD variables.]</para>
<para>Description [Reorders ZDD variables according to the order of the BDD variables. This function can be called at the end of BDD reordering to insure that the order of the ZDD variables is consistent with the order of the BDD variables. The number of ZDD variables must be a multiple of the number of BDD variables. Let <computeroutput>M</computeroutput> be the ratio of the two numbers. cuddZddAlignToBdd then considers the ZDD variables from <computeroutput>M*i</computeroutput> to <computeroutput>(M+1)*i-1</computeroutput> as corresponding to BDD variable <computeroutput>i</computeroutput>. This function should be normally called from Cudd_ReduceHeap, which clears the cache. Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [Changes the ZDD variable order for all diagrams and performs garbage collection of the ZDD unique table.]</para>
<para>SeeAlso [Cudd_zddShuffleHeap Cudd_ReduceHeap] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1158" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="348" bodyend="393" declfile="include/CUDD/cuddInt.h" declline="1158" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a7b76a250d30e9522c9ee1551d38843d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddNextHigh</definition>
        <argsstring>(DdManager *table, int x)</argsstring>
        <name>cuddZddNextHigh</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Finds the next subtable with a larger index.]</para>
<para>Description [Finds the next subtable with a larger index. Returns the index.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1159" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="409" bodyend="415" declfile="include/CUDD/cuddInt.h" declline="1159" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a986286a0a4952cfbe5095afde9c69b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddNextLow</definition>
        <argsstring>(DdManager *table, int x)</argsstring>
        <name>cuddZddNextLow</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Finds the next subtable with a smaller index.]</para>
<para>Description [Finds the next subtable with a smaller index. Returns the index.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1160" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="431" bodyend="437" declfile="include/CUDD/cuddInt.h" declline="1160" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a5ff41c21e47b8bc8f6d1249de47bbd6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddUniqueCompare</definition>
        <argsstring>(int *ptr_x, int *ptr_y)</argsstring>
        <name>cuddZddUniqueCompare</name>
        <param>
          <type>int *</type>
          <declname>ptr_x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ptr_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Comparison function used by qsort.]</para>
<para>Description [Comparison function used by qsort to order the variables according to the number of keys in the subtables. Returns the difference in number of keys between the two variables being compared.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1161" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="455" bodyend="461" declfile="include/CUDD/cuddInt.h" declline="1161" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a89a9fd8d4d09048463a62256b8dab6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSwapInPlace</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddZddSwapInPlace</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Swaps two adjacent variables.]</para>
<para>Description [Swaps two adjacent variables. It assumes that no dead nodes are present on entry to this procedure. The procedure then guarantees that no dead nodes will be present when it terminates. cuddZddSwapInPlace assumes that x &lt; y. Returns the number of keys in the table if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1162" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="480" bodyend="718" declfile="include/CUDD/cuddInt.h" declline="1162" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a2fceb4892ce0dcc3f78e2558593e724b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSwapping</definition>
        <argsstring>(DdManager *table, int lower, int upper, Cudd_ReorderingType heuristic)</argsstring>
        <name>cuddZddSwapping</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>Cudd_ReorderingType</type>
          <declname>heuristic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reorders variables by a sequence of (non-adjacent) swaps.]</para>
<para>Description [Implementation of Plessier&apos;s algorithm that reorders variables by a sequence of (non-adjacent) swaps. <orderedlist>
<listitem>
<para>Select two variables (RANDOM or HEURISTIC). </para>
</listitem>
<listitem>
<para>Permute these variables. </para>
</listitem>
<listitem>
<para>If the nodes have decreased accept the permutation. </para>
</listitem>
<listitem>
<para>Otherwise reconstruct the original heap. </para>
</listitem>
<listitem>
<para>Loop. </para>
</listitem>
</orderedlist>
Returns 1 in case of success; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1163" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="742" bodyend="838" declfile="include/CUDD/cuddInt.h" declline="1163" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aaff66bd6a0344a5ece2fbd3c121a6f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddZddSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Implementation of Rudell&apos;s sifting algorithm.]</para>
<para>Description [Implementation of Rudell&apos;s sifting algorithm. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique table. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the DD heap. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1164" column="12" bodyfile="lib/CUDD/cuddZddReord.c" bodystart="863" bodyend="941" declfile="include/CUDD/cuddInt.h" declline="1164" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ab0441bafcc095a43788d491e762b790c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddIte</definition>
        <argsstring>(DdManager *dd, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddZddIte</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddIte.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1165" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="423" bodyend="534" declfile="include/CUDD/cuddInt.h" declline="1165" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1af13034436631370bd5c24e9f8e58e38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddUnion</definition>
        <argsstring>(DdManager *zdd, DdNode *P, DdNode *Q)</argsstring>
        <name>cuddZddUnion</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddUnion.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1166" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="549" bodyend="623" declfile="include/CUDD/cuddInt.h" declline="1166" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a985332f0d24772bc916a46f2b3465b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddIntersect</definition>
        <argsstring>(DdManager *zdd, DdNode *P, DdNode *Q)</argsstring>
        <name>cuddZddIntersect</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddIntersect.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1167" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="638" bodyend="698" declfile="include/CUDD/cuddInt.h" declline="1167" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6af3c223536b1c0cf632f4e3cd7e5e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddDiff</definition>
        <argsstring>(DdManager *zdd, DdNode *P, DdNode *Q)</argsstring>
        <name>cuddZddDiff</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddDiff.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1168" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="713" bodyend="780" declfile="include/CUDD/cuddInt.h" declline="1168" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aaca76fe4ed2c4316c53afcf996e6ae20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddChangeAux</definition>
        <argsstring>(DdManager *zdd, DdNode *P, DdNode *zvar)</argsstring>
        <name>cuddZddChangeAux</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>zvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Performs the recursive step of Cudd_zddChange.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1169" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="795" bodyend="849" declfile="include/CUDD/cuddInt.h" declline="1169" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a54688fe7f1014c1e871ab5966d9e948e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddSubset1</definition>
        <argsstring>(DdManager *dd, DdNode *P, int var)</argsstring>
        <name>cuddZddSubset1</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the positive cofactor of a ZDD w.r.t. a variable.]</para>
<para>Description [Computes the positive cofactor of a ZDD w.r.t. a variable. In terms of combinations, the result is the set of all combinations in which the variable is asserted. Returns a pointer to the result if successful; NULL otherwise. cuddZddSubset1 performs the same function as Cudd_zddSubset1, but does not restart if reordering has taken place. Therefore it can be called from within a recursive procedure.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddSubset0 Cudd_zddSubset1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1170" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="870" bodyend="898" declfile="include/CUDD/cuddInt.h" declline="1170" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a7f3e9b7302820781160c550d08667d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddSubset0</definition>
        <argsstring>(DdManager *dd, DdNode *P, int var)</argsstring>
        <name>cuddZddSubset0</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the negative cofactor of a ZDD w.r.t. a variable.]</para>
<para>Description [Computes the negative cofactor of a ZDD w.r.t. a variable. In terms of combinations, the result is the set of all combinations in which the variable is negated. Returns a pointer to the result if successful; NULL otherwise. cuddZddSubset0 performs the same function as Cudd_zddSubset0, but does not restart if reordering has taken place. Therefore it can be called from within a recursive procedure.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddSubset1 Cudd_zddSubset0] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1171" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="919" bodyend="947" declfile="include/CUDD/cuddInt.h" declline="1171" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aac8284fcb0a1c924bd9362ab90d194a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddZddChange</definition>
        <argsstring>(DdManager *dd, DdNode *P, int var)</argsstring>
        <name>cuddZddChange</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>dd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Substitutes a variable with its complement in a ZDD.]</para>
<para>Description [Substitutes a variable with its complement in a ZDD. returns a pointer to the result if successful; NULL otherwise. cuddZddChange performs the same function as Cudd_zddChange, but does not restart if reordering has taken place. Therefore it can be called from within a recursive procedure.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [Cudd_zddChange] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1172" column="16" bodyfile="lib/CUDD/cuddZddSetop.c" bodystart="967" bodyend="988" declfile="include/CUDD/cuddInt.h" declline="1172" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1aa370fba2ec1edad4d8c9c9d5f1516eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSymmCheck</definition>
        <argsstring>(DdManager *table, int x, int y)</argsstring>
        <name>cuddZddSymmCheck</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks for symmetry of x and y.]</para>
<para>Description [Checks for symmetry of x and y. Ignores projection functions, unless they are isolated. Returns 1 in case of symmetry; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1173" column="12" bodyfile="lib/CUDD/cuddZddSymm.c" bodystart="193" bodyend="272" declfile="include/CUDD/cuddInt.h" declline="1173" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a33b0811f3238900db5c9b07a3fb55f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSymmSifting</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddZddSymmSifting</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Symmetric sifting algorithm for ZDDs.]</para>
<para>Description [Symmetric sifting algorithm. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique subtable. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the ZDD heap and grouping variables that are symmetric. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
</orderedlist>
Returns 1 plus the number of symmetric variables if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddSymmSiftingConv] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1174" column="12" bodyfile="lib/CUDD/cuddZddSymm.c" bodystart="298" bodyend="396" declfile="include/CUDD/cuddInt.h" declline="1174" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1ac76928dd3d33600509504d53802c3000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddSymmSiftingConv</definition>
        <argsstring>(DdManager *table, int lower, int upper)</argsstring>
        <name>cuddZddSymmSiftingConv</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Symmetric sifting to convergence algorithm for ZDDs.]</para>
<para>Description [Symmetric sifting to convergence algorithm for ZDDs. Assumes that no dead nodes are present. <orderedlist>
<listitem>
<para>Order all the variables according to the number of entries in each unique subtable. </para>
</listitem>
<listitem>
<para>Sift the variable up and down, remembering each time the total size of the ZDD heap and grouping variables that are symmetric. </para>
</listitem>
<listitem>
<para>Select the best permutation. </para>
</listitem>
<listitem>
<para>Repeat 3 and 4 for all variables. </para>
</listitem>
<listitem>
<para>Repeat 1-4 until no further improvement. </para>
</listitem>
</orderedlist>
Returns 1 plus the number of symmetric variables if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddZddSymmSifting] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1175" column="12" bodyfile="lib/CUDD/cuddZddSymm.c" bodystart="423" bodyend="585" declfile="include/CUDD/cuddInt.h" declline="1175" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_int_8h_1a6e8a6b880ea63f99e8d52084468b0be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddZddP</definition>
        <argsstring>(DdManager *zdd, DdNode *f)</argsstring>
        <name>cuddZddP</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>zdd</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/cuddInt.h" line="1176" column="12" declfile="include/CUDD/cuddInt.h" declline="1176" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CUDDINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CUDDINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Nested<sp/>includes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_MIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;st.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;espresso.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;node.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;graph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;astg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cudd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;st.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DD_INLINE<sp/>__inline__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(__GNUC__<sp/>&gt;2<sp/>||<sp/>__GNUC_MINOR__<sp/>&gt;=7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>DD_UNUSED<sp/>__attribute__<sp/>((__unused__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>DD_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>DD_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>DD_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DD_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constant<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAXREF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((DdHalfWord)<sp/>~0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_DEFAULT_RESIZE<sp/><sp/><sp/>10<sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>extra<sp/>variables<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>be<sp/>added<sp/>when<sp/>resizing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MEM_CHUNK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1022</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>definitions<sp/>work<sp/>for<sp/>CUDD_VALUE_TYPE<sp/>==<sp/>double<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ONE_VAL<sp/><sp/><sp/><sp/><sp/><sp/>(1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ZERO_VAL<sp/><sp/><sp/><sp/><sp/>(0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_EPSILON<sp/><sp/><sp/><sp/><sp/><sp/>(1.0e-12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>definitions<sp/>of<sp/>+/-<sp/>infinity<sp/>in<sp/>terms<sp/>of<sp/>HUGE_VAL<sp/>work<sp/>on</highlight></codeline>
<codeline lineno="113"><highlight class="comment">**<sp/>the<sp/>DECstations<sp/>and<sp/>on<sp/>many<sp/>other<sp/>combinations<sp/>of<sp/>OS/compiler.</highlight></codeline>
<codeline lineno="114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_IEEE_754</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DD_PLUS_INF_VAL<sp/><sp/><sp/>(HUGE_VAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DD_PLUS_INF_VAL<sp/><sp/><sp/>(10e301)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DD_CRI_HI_MARK<sp/><sp/><sp/><sp/>(10e150)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DD_CRI_LO_MARK<sp/><sp/><sp/><sp/>(-(DD_CRI_HI_MARK))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MINUS_INF_VAL<sp/><sp/><sp/><sp/>(-(DD_PLUS_INF_VAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_NON_CONSTANT<sp/><sp/><sp/><sp/><sp/>((DdNode<sp/>*)<sp/>1)<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>Cudd_bddIteConstant<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unique<sp/>table<sp/>and<sp/>cache<sp/>management<sp/>constants.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_SUBTABLE_DENSITY<sp/>4<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tells<sp/>when<sp/>to<sp/>resize<sp/>a<sp/>subtable<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>gc<sp/>when<sp/>this<sp/>percent<sp/>are<sp/>dead<sp/>(measured<sp/>w.r.t.<sp/>slots,<sp/>not<sp/>keys)</highlight></codeline>
<codeline lineno="129"><highlight class="comment">**<sp/>The<sp/>first<sp/>limit<sp/>(LO)<sp/>applies<sp/>normally.<sp/>The<sp/>second<sp/>limit<sp/>applies<sp/>when</highlight></codeline>
<codeline lineno="130"><highlight class="comment">**<sp/>the<sp/>package<sp/>believes<sp/>more<sp/>space<sp/>for<sp/>the<sp/>unique<sp/>table<sp/>(i.e.,<sp/>more<sp/>dead</highlight></codeline>
<codeline lineno="131"><highlight class="comment">**<sp/>nodes)<sp/>would<sp/>improve<sp/>performance,<sp/>and<sp/>the<sp/>unique<sp/>table<sp/>is<sp/>not<sp/>already</highlight></codeline>
<codeline lineno="132"><highlight class="comment">**<sp/>too<sp/>large.<sp/>The<sp/>third<sp/>limit<sp/>applies<sp/>when<sp/>memory<sp/>is<sp/>low.</highlight></codeline>
<codeline lineno="133"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_GC_FRAC_LO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DD_MAX_SUBTABLE_DENSITY<sp/>*<sp/>0.25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_GC_FRAC_HI<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DD_MAX_SUBTABLE_DENSITY<sp/>*<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_GC_FRAC_MIN<sp/><sp/><sp/><sp/><sp/><sp/>0.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MIN_HIT<sp/><sp/><sp/><sp/><sp/><sp/>30<sp/><sp/></highlight><highlight class="comment">/*<sp/>resize<sp/>cache<sp/>when<sp/>hit<sp/>ratio</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>above<sp/>this<sp/>percentage<sp/>(default)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_LOOSE_FRACTION<sp/><sp/><sp/>5<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>/<sp/>(max<sp/>fraction<sp/>of<sp/>memory<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique<sp/>table<sp/>in<sp/>fast<sp/>growth<sp/>mode)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_CACHE_FRACTION<sp/><sp/><sp/>3<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>/<sp/>(max<sp/>fraction<sp/>of<sp/>memory<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computed<sp/>table<sp/>if<sp/>resizing<sp/>enabled)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_STASH_FRACTION<sp/><sp/><sp/>64<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>/<sp/>(fraction<sp/>of<sp/>memory<sp/>set</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aside<sp/>for<sp/>emergencies)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_CACHE_TO_SLOTS_RATIO<sp/>4<sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>limit<sp/>the<sp/>cache<sp/>size<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Variable<sp/>ordering<sp/>default<sp/>parameter<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_SIFT_MAX_VAR<sp/><sp/><sp/><sp/><sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_SIFT_MAX_SWAPS<sp/><sp/><sp/>2000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_DEFAULT_RECOMB<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_REORDER_GROWTH<sp/><sp/><sp/>1.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_FIRST_REORDER<sp/><sp/><sp/><sp/>4004<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>for<sp/>the<sp/>constants<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_DYN_RATIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>to<sp/>dynamically<sp/>reorder<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Primes<sp/>for<sp/>cache<sp/>hash<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_P1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12582917</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_P2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4256249</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_P3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>741457</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_P4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1618033999</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Cache<sp/>tags<sp/>for<sp/>3-operand<sp/>operators.<sp/><sp/>These<sp/>tags<sp/>are<sp/>stored<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="162"><highlight class="comment">**<sp/>least<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>cache<sp/>operand<sp/>pointers<sp/>according<sp/>to</highlight></codeline>
<codeline lineno="163"><highlight class="comment">**<sp/>the<sp/>following<sp/>scheme.<sp/><sp/>The<sp/>tag<sp/>consists<sp/>of<sp/>two<sp/>hex<sp/>digits.<sp/><sp/>Both<sp/>digits</highlight></codeline>
<codeline lineno="164"><highlight class="comment">**<sp/>must<sp/>be<sp/>even,<sp/>so<sp/>that<sp/>they<sp/>do<sp/>not<sp/>interfere<sp/>with<sp/>complementation<sp/>bits.</highlight></codeline>
<codeline lineno="165"><highlight class="comment">**<sp/>The<sp/>least<sp/>significant<sp/>one<sp/>is<sp/>stored<sp/>in<sp/>Bits<sp/>3:1<sp/>of<sp/>the<sp/>f<sp/>operand<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="166"><highlight class="comment">**<sp/>cache<sp/>entry.<sp/><sp/>Bit<sp/>1<sp/>is<sp/>always<sp/>1,<sp/>so<sp/>that<sp/>we<sp/>can<sp/>differentiate</highlight></codeline>
<codeline lineno="167"><highlight class="comment">**<sp/>three-operand<sp/>operations<sp/>from<sp/>one-<sp/>and<sp/>two-operand<sp/>operations.</highlight></codeline>
<codeline lineno="168"><highlight class="comment">**<sp/>Therefore,<sp/>the<sp/>least<sp/>significant<sp/>digit<sp/>is<sp/>one<sp/>of<sp/>{2,6,a,e}.<sp/><sp/>The<sp/>most</highlight></codeline>
<codeline lineno="169"><highlight class="comment">**<sp/>significant<sp/>digit<sp/>occupies<sp/>Bits<sp/>3:1<sp/>of<sp/>the<sp/>g<sp/>operand<sp/>in<sp/>the<sp/>cache</highlight></codeline>
<codeline lineno="170"><highlight class="comment">**<sp/>entry.<sp/><sp/>It<sp/>can<sp/>by<sp/>any<sp/>even<sp/>digit<sp/>between<sp/>0<sp/>and<sp/>e.<sp/><sp/>This<sp/>gives<sp/>a<sp/>total</highlight></codeline>
<codeline lineno="171"><highlight class="comment">**<sp/>of<sp/>5<sp/>bits<sp/>for<sp/>the<sp/>tag<sp/>proper,<sp/>which<sp/>means<sp/>a<sp/>maximum<sp/>of<sp/>32<sp/>three-operand</highlight></codeline>
<codeline lineno="172"><highlight class="comment">**<sp/>operations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_ITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_AND_ABSTRACT_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x06</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_XOR_EXIST_ABSTRACT_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_ITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_BDD_DO_INTERVAL_TAG<sp/><sp/><sp/><sp/><sp/><sp/>0x22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_CLIPPING_AND_ABSTRACT_UP_TAG<sp/>0x26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_CLIPPING_AND_ABSTRACT_DOWN_TAG<sp/><sp/><sp/>0x2a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_COMPOSE_RECUR_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_COMPOSE_RECUR_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x42</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_NON_SIM_COMPOSE_TAG<sp/><sp/><sp/><sp/><sp/><sp/>0x46</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_EQUIV_DC_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ZDD_ITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_ITE_CONSTANT_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x62</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_EVAL_CONST_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x66</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_ITE_CONSTANT_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_OUT_SUM_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_LEQ_UNLESS_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x82</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ADD_TRIANGLE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_BDD_MAX_EXP_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generator<sp/>constants.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_CUBES<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_PRIMES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_NODES<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_ZDD_PATHS<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_EMPTY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDD_GEN_NONEMPTY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="struct_dd_gen" refkind="compound"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stucture<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_gen" kindref="compound">DdGen</ref><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/><sp/><sp/>*manager;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>status;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cube;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDD_VALUE_TYPE<sp/>value;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>cubes;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cube;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/><sp/><sp/><sp/>*ub;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>primes;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>nodes;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>gen;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/>**stack;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>stack;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/>*node;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hooks<sp/>in<sp/>CUDD<sp/>are<sp/>functions<sp/>that<sp/>the<sp/>application<sp/>registers<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="236" refid="struct_dd_hook" refkind="compound"><highlight class="comment">**<sp/>manager<sp/>so<sp/>that<sp/>they<sp/>are<sp/>called<sp/>at<sp/>appropriate<sp/>times.<sp/>The<sp/>functions</highlight></codeline>
<codeline lineno="237"><highlight class="comment">**<sp/>are<sp/>passed<sp/>the<sp/>manager<sp/>as<sp/>argument;<sp/>they<sp/>should<sp/>return<sp/>1<sp/>if</highlight></codeline>
<codeline lineno="238"><highlight class="comment">**<sp/>successful<sp/>and<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="239"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hook<sp/>list<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>DD_HFP<sp/>f;<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>to<sp/>be<sp/>called<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>*next;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>element<sp/>in<sp/>the<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}<sp/><ref refid="struct_dd_hook" kindref="compound">DdHook</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ptrint;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ptruint;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptrint;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptruint;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="struct_dd_local_cache_item" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>local<sp/>cache<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrint<sp/>count;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="struct_dd_local_cache" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*key[1];</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}<sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysize;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slots;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lookUps;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minHit;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hits;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxslots;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager;</highlight></codeline>
<codeline lineno="276" refid="struct_dd_hash_item" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*next;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}<sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>hash<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*next;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrint<sp/>count;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value;</highlight></codeline>
<codeline lineno="284" refid="struct_dd_hash_table" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*key[1];</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysize;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**bucket;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*nextFree;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**memoryList;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBuckets;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="297" refid="struct_dd_cache" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}<sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_cache" kindref="compound">DdCache</ref><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,*g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DDs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>ptruint<sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>either<sp/>operator<sp/>or<sp/>DD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>already<sp/>constructed<sp/>DD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="struct_dd_subtable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrint<sp/>count;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><ref refid="struct_dd_cache" kindref="compound">DdCache</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>subtable<sp/>for<sp/>one<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**nodelist;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>for<sp/>hash<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slots;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keys;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>nodes<sp/>stored<sp/>in<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxKeys;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slots<sp/>*<sp/>DD_MAX_SUBTABLE_DENSITY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dead;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>dead<sp/>nodes<sp/>in<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>of<sp/>next<sp/>variable<sp/>in<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bindVar;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>to<sp/>bind<sp/>this<sp/>variable<sp/>to<sp/>its<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fields<sp/>for<sp/>lazy<sp/>sifting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_VariableType<sp/>varType;<sp/><sp/></highlight><highlight class="comment">/*<sp/>variable<sp/>type<sp/>(ps,<sp/>ns,<sp/>pi)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pairIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>corresponding<sp/>variable<sp/>index<sp/>(ps<sp/>&lt;-&gt;<sp/>ns)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="struct_dd_manager" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varHandled;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag:<sp/>1<sp/>means<sp/>variable<sp/>is<sp/>already<sp/>handled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_LazyGroupType<sp/>varToBeGrouped;<sp/></highlight><highlight class="comment">/*<sp/>tells<sp/>what<sp/>grouping<sp/>to<sp/>apply<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">}<sp/><ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>specialized<sp/>DD<sp/>symbol<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>sentinel;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>collision<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*one;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constant<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*zero;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constant<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*plusinfinity;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>plus<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*minusinfinity;<sp/><sp/></highlight><highlight class="comment">/*<sp/>minus<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*background;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>background<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Computed<sp/>Table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_cache" kindref="compound">DdCache</ref><sp/>*acache;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>address<sp/>of<sp/>allocated<sp/>memory<sp/>for<sp/>cache<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_cache" kindref="compound">DdCache</ref><sp/>*cache;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>cache-based<sp/>computed<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSlots;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>cache<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheShift;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>value<sp/>for<sp/>cache<sp/>hash<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cacheMisses;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>cache<sp/>misses<sp/>(since<sp/>resizing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cacheHits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>cache<sp/>hits<sp/>(since<sp/>resizing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minHit;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hit<sp/>percentage<sp/>above<sp/>which<sp/>to<sp/>resize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSlack;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slots<sp/>still<sp/>available<sp/>for<sp/>resizing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxCacheHard;<sp/><sp/></highlight><highlight class="comment">/*<sp/>hard<sp/>limit<sp/>for<sp/>cache<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unique<sp/>Table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>unique<sp/>subtables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ZDD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>number<sp/>of<sp/>subtables<sp/>before<sp/>resizing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSizeZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ZDD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref><sp/>*subtables;<sp/><sp/></highlight><highlight class="comment">/*<sp/>array<sp/>of<sp/>unique<sp/>subtables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref><sp/>*subtableZ;<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ZDD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_subtable" kindref="compound">DdSubtable</ref><sp/>constants;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unique<sp/>subtable<sp/>for<sp/>the<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slots;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>hash<sp/>buckets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keys;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>BDD<sp/>and<sp/>ADD<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysZ;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>ZDD<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dead;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>dead<sp/>BDD<sp/>and<sp/>ADD<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deadZ;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>dead<sp/>ZDD<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxLive;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>number<sp/>of<sp/>live<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDead;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>GC<sp/>if<sp/>fewer<sp/>than<sp/>these<sp/>dead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gcFrac;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>gc<sp/>when<sp/>this<sp/>fraction<sp/>is<sp/>dead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gcEnabled;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>gc<sp/>is<sp/>enabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>looseUpTo;<sp/></highlight><highlight class="comment">/*<sp/>slow<sp/>growth<sp/>beyond<sp/>this<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(measured<sp/>w.r.t.<sp/>slots,<sp/>not<sp/>keys)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initSlots;<sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>size<sp/>of<sp/>a<sp/>subtable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**stack;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stack<sp/>for<sp/>iterative<sp/>procedures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>allocated;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>nodes<sp/>allocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(not<sp/>during<sp/>reordering)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>reclaimed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>nodes<sp/>brought<sp/>back<sp/>from<sp/>the<sp/>dead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isolated;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>isolated<sp/>projection<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*perm;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>variable<sp/>perm.<sp/>(index<sp/>to<sp/>level)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*permZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ZDD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*invperm;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inv.<sp/>var.<sp/>perm.<sp/>(level<sp/>to<sp/>index)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*invpermZ;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ZDD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**vars;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>projection<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*map;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>variable<sp/>map<sp/>for<sp/>fast<sp/>swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**univ;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ZDD<sp/>1<sp/>for<sp/>each<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linearSize;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>rows<sp/>and<sp/>columns<sp/>of<sp/>linear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*interact;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interacting<sp/>variable<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*linear;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>linear<sp/>transform<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Memory<sp/>Management<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**memoryList;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>manager<sp/>for<sp/>symbol<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*nextFree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>free<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stash;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>reserve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DD_NO_DEATH_ROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**deathRow;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>queue<sp/>for<sp/>dereferencing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deathRowDepth;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>slots<sp/>in<sp/>the<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextDead;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>in<sp/>the<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deadMask;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>circular<sp/>index<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>General<sp/>Parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDD_VALUE_TYPE<sp/>epsilon;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tolerance<sp/>on<sp/>comparisons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dynamic<sp/>Reordering<sp/>Parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reordered;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>set<sp/>at<sp/>the<sp/>end<sp/>of<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reorderings;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>calls<sp/>to<sp/>Cudd_ReduceHeap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxReorderings;</highlight><highlight class="comment">/*<sp/>maximum<sp/>number<sp/>of<sp/>calls<sp/>to<sp/>Cudd_ReduceHeap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siftMaxVar;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>number<sp/>of<sp/>vars<sp/>sifted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>siftMaxSwap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>number<sp/>of<sp/>swaps<sp/>per<sp/>sifting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxGrowth;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>growth<sp/>during<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxGrowthAlt;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>alternate<sp/>maximum<sp/>growth<sp/>for<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reordCycle;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>often<sp/>to<sp/>apply<sp/>alternate<sp/>threshold<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>autoDyn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>automatic<sp/>dynamic<sp/>reordering<sp/>flag<sp/>(BDD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>autoDynZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>automatic<sp/>dynamic<sp/>reordering<sp/>flag<sp/>(ZDD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_ReorderingType<sp/>autoMethod;<sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>reordering<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_ReorderingType<sp/>autoMethodZ;<sp/></highlight><highlight class="comment">/*<sp/>default<sp/>reordering<sp/>method<sp/>(ZDD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>realign;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>realign<sp/>ZDD<sp/>order<sp/>after<sp/>BDD<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>realignZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>realign<sp/>BDD<sp/>order<sp/>after<sp/>ZDD<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextDyn;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reorder<sp/>if<sp/>this<sp/>size<sp/>is<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countDead;<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>0,<sp/>count<sp/>deads<sp/>to<sp/>trigger<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_mtr_node" kindref="compound">MtrNode</ref><sp/>*tree;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>variable<sp/>group<sp/>tree<sp/>(BDD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_mtr_node" kindref="compound">MtrNode</ref><sp/>*treeZ;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>variable<sp/>group<sp/>tree<sp/>(ZDD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_AggregationType<sp/>groupcheck;<sp/></highlight><highlight class="comment">/*<sp/>used<sp/>during<sp/>group<sp/>sifting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recomb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>during<sp/>group<sp/>sifting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symmviolation;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>during<sp/>group<sp/>sifting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arcviolation;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>during<sp/>group<sp/>sifting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>populationSize;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>population<sp/>size<sp/>for<sp/>GA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberXovers;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>crossovers<sp/>for<sp/>GA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randomizeOrder;<sp/></highlight><highlight class="comment">/*<sp/>perturb<sp/>the<sp/>next<sp/>reordering<sp/>threshold<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*localCaches;<sp/><sp/></highlight><highlight class="comment">/*<sp/>local<sp/>caches<sp/>currently<sp/>in<sp/>existence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hooks;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>application-specific<sp/>field<sp/>(used<sp/>by<sp/>vis)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>*preGCHook;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hooks<sp/>to<sp/>be<sp/>called<sp/>before<sp/>GC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>*postGCHook;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hooks<sp/>to<sp/>be<sp/>called<sp/>after<sp/>GC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>*preReorderingHook;<sp/><sp/></highlight><highlight class="comment">/*<sp/>hooks<sp/>to<sp/>be<sp/>called<sp/>before<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hook" kindref="compound">DdHook</ref><sp/>*postReorderingHook;<sp/></highlight><highlight class="comment">/*<sp/>hooks<sp/>to<sp/>be<sp/>called<sp/>after<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stdout<sp/>for<sp/>this<sp/>manager<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*err;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stderr<sp/>for<sp/>this<sp/>manager<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>Cudd_ErrorType<sp/>errorCode;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>info<sp/>on<sp/>last<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTime;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>time<sp/>in<sp/>milliseconds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeLimit;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>time<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Statistical<sp/>counters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>memused;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>manager<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxmem;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>target<sp/>maximum<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxmemhard;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hard<sp/>limit<sp/>for<sp/>maximum<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>garbageCollections;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>garbage<sp/>collections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>GCTime;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>time<sp/>spent<sp/>in<sp/>garbage<sp/>collection<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>reordTime;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>time<sp/>spent<sp/>in<sp/>reordering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totCachehits;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>cache<sp/>hits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totCacheMisses;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>cache<sp/>misses<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cachecollisions;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>cache<sp/>collisions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cacheinserts;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>cache<sp/>insertions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cacheLastInserts;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertions<sp/>at<sp/>the<sp/>last<sp/>cache<sp/>resizing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cachedeletions;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>deletions<sp/>during<sp/>garbage<sp/>coll.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nodesFreed;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>nodes<sp/>returned<sp/>to<sp/>the<sp/>free<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nodesDropped;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>nodes<sp/>killed<sp/>by<sp/>dereferencing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peakLiveNodes;<sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>number<sp/>of<sp/>live<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_UNIQUE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uniqueLookUps;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>unique<sp/>table<sp/>lookups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uniqueLinks;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>distance<sp/>traveled<sp/>in<sp/>coll.<sp/>chains<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>recursiveCalls;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>recursive<sp/>calls<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nextSample;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>to<sp/>write<sp/>next<sp/>line<sp/>of<sp/>stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>swapSteps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>elementary<sp/>reordering<sp/>steps<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_MIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mis/verif<sp/>compatibility<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>array_t<sp/>*iton;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maps<sp/>ids<sp/>in<sp/>ddNode<sp/>to<sp/>node_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>array_t<sp/>*order;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>of<sp/>order_list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>lsHandle<sp/>handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>where<sp/>it<sp/>is<sp/>in<sp/>network<sp/>BDD<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>network_t<sp/>*network;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*local_order;<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>local<sp/>BDDs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>variables<sp/>used<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="struct_move" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>pseudo<sp/>var<sp/>threshold<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_move" kindref="compound">Move</ref><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>DdHalfWord<sp/>x;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>DdHalfWord<sp/>y;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="474" refid="struct_dd_queue_item" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_move" kindref="compound">Move</ref><sp/>*next;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}<sp/><ref refid="struct_move" kindref="compound">Move</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>level<sp/>queue<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>*next;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>*cnext;</highlight></codeline>
<codeline lineno="481" refid="struct_dd_level_queue" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}<sp/><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Level<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*first;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>**last;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>*freelist;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_queue_item" kindref="compound">DdQueueItem</ref><sp/>**buckets;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsize;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBuckets;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}<sp/><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Variable<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddDeallocNode(unique,node)<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(node)-&gt;next<sp/>=<sp/>(unique)-&gt;nextFree;<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(unique)-&gt;nextFree<sp/>=<sp/>node;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddDeallocMove(unique,node)<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((DdNode<sp/>*)(node))-&gt;ref<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((DdNode<sp/>*)(node))-&gt;next<sp/>=<sp/>(unique)-&gt;nextFree;<sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(unique)-&gt;nextFree<sp/>=<sp/>(DdNode<sp/>*)(node);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddRef(n)<sp/>cuddSatInc(Cudd_Regular(n)-&gt;ref)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddDeref(n)<sp/>cuddSatDec(Cudd_Regular(n)-&gt;ref)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddIsConstant(node)<sp/>((node)-&gt;index<sp/>==<sp/>CUDD_CONST_INDEX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddT(node)<sp/>((node)-&gt;type.kids.T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddE(node)<sp/>((node)-&gt;type.kids.E)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddV(node)<sp/>((node)-&gt;type.value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddI(dd,index)<sp/>(((index)==CUDD_CONST_INDEX)?(int)(index):(dd)-&gt;perm[(index)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddIZ(dd,index)<sp/>(((index)==CUDD_CONST_INDEX)?(int)(index):(dd)-&gt;permZ[(index)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddHash(f,g,s)<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor">((((unsigned)(ptruint)(f)<sp/>*<sp/>DD_P1<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/>(unsigned)(ptruint)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddHash(f,g,s)<sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor">((((unsigned)(f)<sp/>*<sp/>DD_P1<sp/>+<sp/>(unsigned)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddCHash(o,f,g,h,s)<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor">((((((unsigned)(ptruint)(f)<sp/>+<sp/>(unsigned)(ptruint)(o))<sp/>*<sp/>DD_P1<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(unsigned)(ptruint)(g))<sp/>*<sp/>DD_P2<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"><sp/><sp/><sp/>(unsigned)(ptruint)(h))<sp/>*<sp/>DD_P3)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddCHash(o,f,g,h,s)<sp/>\</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor">((((((unsigned)(f)<sp/>+<sp/>(unsigned)(o))<sp/>*<sp/>DD_P1<sp/>+<sp/>(unsigned)(g))<sp/>*<sp/>DD_P2<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/><sp/>(unsigned)(h))<sp/>*<sp/>DD_P3)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddCHash2(o,f,g,s)<sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor">(((((unsigned)(ptruint)(f)<sp/>+<sp/>(unsigned)(ptruint)(o))<sp/>*<sp/>DD_P1<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/>(unsigned)(ptruint)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddCHash2(o,f,g,s)<sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor">(((((unsigned)(f)<sp/>+<sp/>(unsigned)(o))<sp/>*<sp/>DD_P1<sp/>+<sp/>(unsigned)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddClean(p)<sp/>((DdNode<sp/>*)((ptruint)(p)<sp/>&amp;<sp/>~0xf))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddMin(x,y)<sp/>(((y)<sp/>&lt;<sp/>(x))<sp/>?<sp/>(y)<sp/>:<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddMax(x,y)<sp/>(((y)<sp/>&gt;<sp/>(x))<sp/>?<sp/>(y)<sp/>:<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddAbs(x)<sp/>(((x)&lt;0)<sp/>?<sp/>-(x)<sp/>:<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddEqualVal(x,y,e)<sp/>(ddAbs((x)-(y))&lt;(e))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddSatInc(x)<sp/>((x)++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddSatInc(x)<sp/>((x)<sp/>+=<sp/>(x)<sp/>!=<sp/>(DdHalfWord)DD_MAXREF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddSatDec(x)<sp/>((x)--)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddSatDec(x)<sp/>((x)<sp/>-=<sp/>(x)<sp/>!=<sp/>(DdHalfWord)DD_MAXREF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ONE(dd)<sp/><sp/><sp/><sp/><sp/><sp/>((dd)-&gt;one)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_ZERO(dd)<sp/>((dd)-&gt;zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_PLUS_INFINITY(dd)<sp/>((dd)-&gt;plusinfinity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MINUS_INFINITY(dd)<sp/>((dd)-&gt;minusinfinity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_IEEE_754</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddAdjust(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cuddAdjust(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>=<sp/>((x)<sp/>&gt;=<sp/>DD_CRI_HI_MARK)<sp/>?<sp/>DD_PLUS_INF_VAL<sp/>:<sp/>(((x)<sp/>&lt;=<sp/>DD_CRI_LO_MARK)<sp/>?<sp/>DD_MINUS_INF_VAL<sp/>:<sp/>(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_LSDIGIT(x)<sp/><sp/><sp/>((x)<sp/>&amp;<sp/>DD_APA_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MSDIGIT(x)<sp/><sp/><sp/>((x)<sp/>&gt;&gt;<sp/>DD_APA_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>statLine(dd)<sp/>dd-&gt;recursiveCalls++;<sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor">if<sp/>(dd-&gt;recursiveCalls<sp/>==<sp/>dd-&gt;nextSample)<sp/>{(void)<sp/>fprintf(dd-&gt;err,<sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor">&quot;@%.0f:<sp/>%u<sp/>nodes<sp/>%u<sp/>live<sp/>%.0f<sp/>dropped<sp/>%.0f<sp/>reclaimed\n&quot;</highlight><highlight class="normal">,<sp/>dd-&gt;recursiveCalls,<sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="normal">dd-&gt;keys,<sp/>dd-&gt;keys<sp/>-<sp/>dd-&gt;dead,<sp/>dd-&gt;nodesDropped,<sp/>dd-&gt;reclaimed);<sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="normal">dd-&gt;nextSample<sp/>+=<sp/>250000;}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>statLine(dd)<sp/>dd-&gt;recursiveCalls++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>statLine(dd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddExistAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddUnivAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddOrAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddApplyRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddMonadicApplyRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*op)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddScalarInverseRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*epsilon);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddIteRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddCmplRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddNegateRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddRoundOffRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trunc);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddUnderApprox<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>safe,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quality);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddRemapUnderApprox<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quality);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBiasedUnderApprox<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quality1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quality0);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddAndAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddAnnealing<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddExistAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddXorExistAbstractRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddBooleanDiffRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*var);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddIteRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddIntersectRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddAndRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddXorRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddTransfer<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*ddS,<sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*ddD,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddBddDoPattern<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddInitCache<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxCacheSize);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddCacheInsert<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>ptruint<sp/>op,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*data);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddCacheInsert2<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*data);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddCacheInsert1<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*data);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookup<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>ptruint<sp/>op,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookupZdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>ptruint<sp/>op,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookup2<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookup1<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookup2Zdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCacheLookup1Zdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>(*)(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*),<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddConstantLookup<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>ptruint<sp/>op,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddCacheProfile<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>FILE<sp/>*fp);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddCacheResize<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddCacheFlush<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddComputeFloorLog2<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHeapProfile<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddPrintNode<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/>FILE<sp/>*fp);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddPrintVarGroups<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/><ref refid="struct_mtr_node" kindref="compound">MtrNode</ref><sp/>*<sp/>root,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zdd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>silent);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddClippingAnd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDepth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddClippingAndAbstract<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDepth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddGetBranches<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**g1,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**g0);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCofactorRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddComposeRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*proj);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddComposeRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*proj);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddExact<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddConstrainRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddRestrictRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddNPAndRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddConstrainRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAddRestrictRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddLICompaction<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*c);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddGa<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddTreeSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>Cudd_ReorderingType<sp/>method);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddInitUniv<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddZddFreeUniv<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddSetInteract<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddTestInteract<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddInitInteract<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cuddLocalCacheInit<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keySize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxCacheSize);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheQuit<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheInsert<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache,<sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddLocalCacheLookup<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache,<sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheClearDead<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddIsInDeathRow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddTimesInDeathRow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheClearAll<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddLocalCacheProfile<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>cuddHashTableInit<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keySize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initSize);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddHashTableQuit<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddHashTableGenericQuit<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableInsert<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value,<sp/>ptrint<sp/>count);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddHashTableLookup<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableInsert1<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value,<sp/>ptrint<sp/>count);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddHashTableLookup1<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableInsert2<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value,<sp/>ptrint<sp/>count);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddHashTableLookup2<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableInsert3<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value,<sp/>ptrint<sp/>count);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddHashTableLookup3<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableGenericInsert(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>cuddHashTableGenericLookup(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>*<sp/>cuddLevelQueueInit<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBuckets);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLevelQueueQuit<sp/>(<ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>*queue);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>cuddLevelQueueFirst(<ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>*<sp/>queue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>level);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>cuddLevelQueueEnqueue<sp/>(<ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>*queue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLevelQueueDequeue<sp/>(<ref refid="struct_dd_level_queue" kindref="compound">DdLevelQueue</ref><sp/>*queue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddLinearAndSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddLinearInPlace<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>y);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddUpdateInteractionMatrix<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>xindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>yindex);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddInitLinear<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddResizeLinear<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddLiteralSetIntersectionRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddCProjectionRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*R,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Y,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Ysupp);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddClosestCube<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/>CUDD_VALUE_TYPE<sp/>bound);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddReclaim<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*n);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddReclaimZdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*n);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddClearDeathRow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddShrinkDeathRow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddDynamicAllocNode<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSwapping<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper,<sp/>Cudd_ReorderingType<sp/>heuristic);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddNextHigh<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddNextLow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSwapInPlace<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddBddAlignToZdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddBddMakePrime<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*cube,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddSolveEqnRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*bdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*F,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Y,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**G,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yIndex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddVerifySol<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*bdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*F,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**G,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*yIndex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ST_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref>*<sp/>cuddSplitSetRecur<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager,<sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*mtable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*varSeen,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*p,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddSubsetHeavyBranch<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddSubsetShortPaths<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hardlimit);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSymmCheck<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSymmSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddSymmSiftingConv<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddAllocNode<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>cuddInitTable<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVars,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVarsZ,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSlots,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>looseUpTo);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddFreeTable<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddGarbageCollect<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clearCache);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddGetNode<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*T,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*E);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddGetNodeIVO<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddUniqueInter<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*T,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*E);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddUniqueInterIVO<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*T,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*E);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddUniqueInterZdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*T,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*E);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddUniqueConst<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/>CUDD_VALUE_TYPE<sp/>value);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddRehash<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddShrinkSubtable<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddInsertSubtables<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddDestroySubtables<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddResizeTableZdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddSlowTableGrowth<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*unique);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddP<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ST_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>st_retval<sp/>cuddStCountfree<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddCollectNodes<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*visited);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>cuddNodeArray<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddWindowReorder<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high,<sp/>Cudd_ReorderingType<sp/>submethod);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddProduct<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddUnateProduct<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddWeakDiv<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddWeakDivF<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddDivide<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddDivideF<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetCofactors3<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**f1,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**f0,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**fd);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetCofactors2<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**f1,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**f0);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddComplement<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetPosVarIndex(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetNegVarIndex(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetPosVarLevel(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddGetNegVarLevel(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>dd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddTreeSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/>Cudd_ReorderingType<sp/>method);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddZddIsop<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*L,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*U,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**zdd_I);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddBddIsop<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*L,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*U);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><sp/><sp/>*<sp/>cuddMakeBddFromZddCover<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddLinearSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddAlignToBdd<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddNextHigh<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddNextLow<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddUniqueCompare<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr_y);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSwapInPlace<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSwapping<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper,<sp/>Cudd_ReorderingType<sp/>heuristic);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddIte<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*g,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*h);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddUnion<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddIntersect<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddDiff<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddChangeAux<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*zvar);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddSubset1<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddSubset0<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>cuddZddChange<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSymmCheck<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSymmSifting<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddSymmSiftingConv<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddZddP<sp/>(<ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*zdd,<sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*f);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_CUDDINT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/CUDD/cuddInt.h"/>
  </compounddef>
</doxygen>
