<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_obj_type_info" kind="class" language="C++" prot="public">
    <compoundname>SVF::ObjTypeInfo</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_loc_obj_type_info" prot="public" virt="non-virtual">SVF::LocObjTypeInfo</derivedcompoundref>
    <includes refid="_mem_model_8h" local="no">MemModel.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830" prot="public" static="no" strong="no">
        <type></type>
        <name>MEMTYPE</name>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830af5f94b2a41dab25fa08c94a989fb9515" prot="public">
          <name>FUNCTION_OBJ</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830ad2ba0edfac1460f3fd89e7a6c4c4691b" prot="public">
          <name>GLOBVAR_OBJ</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a4e7606afe2dabdef9c9836ae798a9d98" prot="public">
          <name>STATIC_OBJ</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aad918042d1f04a5e3960817d55ccb5d5" prot="public">
          <name>STACK_OBJ</name>
          <initializer>= 0x8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a692b4b0df23bad19ea04d18b01bf445c" prot="public">
          <name>HEAP_OBJ</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aaf98981bd15b41f543fd99d0c6222f08" prot="public">
          <name>VAR_STRUCT_OBJ</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830adedc43e0fcaebf433120869aa9307b1c" prot="public">
          <name>VAR_ARRAY_OBJ</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a6443b9fadd2d34e00832b2215a120ebd" prot="public">
          <name>CONST_STRUCT_OBJ</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aff4142c0c411dea07b484a19af514047" prot="public">
          <name>CONST_ARRAY_OBJ</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830af11159d515b7cf1146b5342f64ee2da1" prot="public">
          <name>CONST_OBJ</name>
          <initializer>= 0x200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830ad17b2a35fb492561c4011dbe3880c6c9" prot="public">
          <name>HASPTR_OBJ</name>
          <initializer>= 0x400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="134" column="5" bodyfile="include/MemoryModel/MemModel.h" bodystart="135" bodyend="147"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_obj_type_info_1a6e7780d4e2639c089ff6c853d8d78a4d" prot="private" static="no" mutable="no">
        <type>const Type *</type>
        <definition>const Type* SVF::ObjTypeInfo::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>LLVM type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="151" column="16" bodyfile="include/MemoryModel/MemModel.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_obj_type_info_1ada56eaa1f91bf260b7b521adabc607fe" prot="private" static="no" mutable="no">
        <type>Size_t</type>
        <definition>Size_t SVF::ObjTypeInfo::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Type flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="153" column="12" bodyfile="include/MemoryModel/MemModel.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_obj_type_info_1a5ff63eb0654acd152f7d6c18618ee94a" prot="private" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::ObjTypeInfo::maxOffsetLimit</definition>
        <argsstring></argsstring>
        <name>maxOffsetLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max offset for flexible field sensitive analysis maximum number of field object can be created minimum number is 0 (field insensitive analysis) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="157" column="11" bodyfile="include/MemoryModel/MemModel.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a1a182e6a8710242f94729412d4683f8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::ObjTypeInfo::ObjTypeInfo</definition>
        <argsstring>(const Value *, const Type *t, u32_t max)</argsstring>
        <name>ObjTypeInfo</name>
        <param>
          <type>const Value *</type>
        </param>
        <param>
          <type>const Type *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Constructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="161" column="5" bodyfile="include/MemoryModel/MemModel.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1afa03172e8fe0af6b523e866d54235f3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::ObjTypeInfo::ObjTypeInfo</definition>
        <argsstring>(u32_t max, const Type *t)</argsstring>
        <name>ObjTypeInfo</name>
        <param>
          <type>u32_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="166" column="5" bodyfile="include/MemoryModel/MemModel.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1ace5fdb3701cb93df0f02aedc94e7e975" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::ObjTypeInfo::~ObjTypeInfo</definition>
        <argsstring>()</argsstring>
        <name>~ObjTypeInfo</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="171" column="13" bodyfile="include/MemoryModel/MemModel.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1aba198ceecd53d73ab0b0deb0133cda0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ObjTypeInfo::init</definition>
        <argsstring>(const Value *value)</argsstring>
        <name>init</name>
        <param>
          <type>const Value *</type>
          <declname>value</declname>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Initialize the object type. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the type info of an object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="176" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="121" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a9208f6856f2554a6d3a2745a2b7a366c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>u32_t</type>
        <definition>u32_t ObjTypeInfo::getObjSize</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>getObjSize</name>
        <reimplementedby refid="class_s_v_f_1_1_loc_obj_type_info_1a9c859cb40a6e02f0a7fd18d5c826b990">getObjSize</reimplementedby>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of this object, derived classes can override this to get more precise object size</para>
<para>Return size of this Object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="180" column="19" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="106" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1acc90d7a517c58ac86ef8109dcece3f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ObjTypeInfo::analyzeGlobalStackObjType</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>analyzeGlobalStackObjType</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Analyse types of gobal and stack objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Analyse types of all flattened fields of this object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="183" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="48" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a57ffe17476467619e844b27cb292149a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ObjTypeInfo::analyzeHeapStaticObjType</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>analyzeHeapStaticObjType</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Analyse types of heap and static objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Analyse types of heap and static objects </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="186" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a706cdc47e78732853252d5a4af85653a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type* SVF::ObjTypeInfo::getType</definition>
        <argsstring>() const</argsstring>
        <name>getType</name>
        <briefdescription>
<para>Get LLVM type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="189" column="23" bodyfile="include/MemoryModel/MemModel.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a81bc3d785062c7e527ecf8e564cd52a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::ObjTypeInfo::getMaxFieldOffsetLimit</definition>
        <argsstring>()</argsstring>
        <name>getMaxFieldOffsetLimit</name>
        <briefdescription>
<para>Get max field offset limit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="195" column="18" bodyfile="include/MemoryModel/MemModel.h" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a9fff869c63776c6ebeff78933e0f6092" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ObjTypeInfo::setMaxFieldOffsetLimit</definition>
        <argsstring>(u32_t limit)</argsstring>
        <name>setMaxFieldOffsetLimit</name>
        <param>
          <type>u32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get max field offset limit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="201" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1ad6fb2bfae3d4b73a6821a87106f65f49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ObjTypeInfo::setFlag</definition>
        <argsstring>(MEMTYPE mask)</argsstring>
        <name>setFlag</name>
        <param>
          <type>MEMTYPE</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Flag for this object type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="208" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a8e630eb30d05f665b998c6f9326d65cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::hasFlag</definition>
        <argsstring>(MEMTYPE mask)</argsstring>
        <name>hasFlag</name>
        <param>
          <type>MEMTYPE</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="212" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1ac99fa14fdf7bc0dd3e9ff36c7a3a351f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isFunction</definition>
        <argsstring>()</argsstring>
        <name>isFunction</name>
        <briefdescription>
<para>Object attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="220" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1aa2855b69150287e5f04a7a683dc4c91f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isGlobalObj</definition>
        <argsstring>()</argsstring>
        <name>isGlobalObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="224" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a3594dc1c1943dbac0ab72f2ff163c523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isStaticObj</definition>
        <argsstring>()</argsstring>
        <name>isStaticObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="228" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1aa568dc82decd28d2ef40785a4a647602" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isStack</definition>
        <argsstring>()</argsstring>
        <name>isStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="232" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a26c179394fbda9a9261d0bf3f52b619d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isHeap</definition>
        <argsstring>()</argsstring>
        <name>isHeap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="236" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a40d6703875b370aed2c6dc41c0594af5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isVarStruct</definition>
        <argsstring>()</argsstring>
        <name>isVarStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object attributes (noted that an object can be a nested compound types) e.g. both isStruct and isArray can return true </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="245" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a5d4afc5e1ba5cbcedf049467f75ef7c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isConstStruct</definition>
        <argsstring>()</argsstring>
        <name>isConstStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="249" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a06493939f797f122b70b90bbf22cad7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isStruct</definition>
        <argsstring>()</argsstring>
        <name>isStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="253" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1aca1e900f9b0a774684af77666cf033e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isVarArray</definition>
        <argsstring>()</argsstring>
        <name>isVarArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="257" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1ad90ea6a01cca9c370b7f17b408dcc5a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isConstArray</definition>
        <argsstring>()</argsstring>
        <name>isConstArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="261" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a0627e8b9dda2e13cc77c334eefab21e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isArray</definition>
        <argsstring>()</argsstring>
        <name>isArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="265" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a8c0ae8e177452b88b3a4ec81bf77c378" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::isConstant</definition>
        <argsstring>()</argsstring>
        <name>isConstant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="269" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1ac5bae1e7917f415193a805e8d2e29320" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ObjTypeInfo::hasPtrObj</definition>
        <argsstring>()</argsstring>
        <name>hasPtrObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="273" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_obj_type_info_1a3a58b1e0192b92dac5bbfad24adbcdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ObjTypeInfo::isNonPtrFieldObj</definition>
        <argsstring>(const LocationSet &amp;ls)</argsstring>
        <name>isNonPtrFieldObj</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a location set is a pointer type or not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="277" column="18" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="179" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Type Info of an abstract memory object </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::ObjTypeInfo</label>
        <link refid="class_s_v_f_1_1_obj_type_info"/>
      </node>
      <node id="2">
        <label>SVF::LocObjTypeInfo</label>
        <link refid="class_s_v_f_1_1_loc_obj_type_info"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/MemoryModel/MemModel.h" line="130" column="1" bodyfile="include/MemoryModel/MemModel.h" bodystart="131" bodyend="279"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_obj_type_info_1acc90d7a517c58ac86ef8109dcece3f10" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>analyzeGlobalStackObjType</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a57ffe17476467619e844b27cb292149a" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>analyzeHeapStaticObjType</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aff4142c0c411dea07b484a19af514047" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>CONST_ARRAY_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830af11159d515b7cf1146b5342f64ee2da1" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>CONST_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a6443b9fadd2d34e00832b2215a120ebd" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>CONST_STRUCT_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ada56eaa1f91bf260b7b521adabc607fe" prot="private" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>flags</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830af5f94b2a41dab25fa08c94a989fb9515" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>FUNCTION_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a81bc3d785062c7e527ecf8e564cd52a4" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>getMaxFieldOffsetLimit</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a9208f6856f2554a6d3a2745a2b7a366c" prot="public" virt="virtual"><scope>SVF::ObjTypeInfo</scope><name>getObjSize</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a706cdc47e78732853252d5a4af85653a" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830ad2ba0edfac1460f3fd89e7a6c4c4691b" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>GLOBVAR_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a8e630eb30d05f665b998c6f9326d65cb" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>hasFlag</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830ad17b2a35fb492561c4011dbe3880c6c9" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>HASPTR_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ac5bae1e7917f415193a805e8d2e29320" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>hasPtrObj</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a692b4b0df23bad19ea04d18b01bf445c" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>HEAP_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1aba198ceecd53d73ab0b0deb0133cda0d" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>init</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a0627e8b9dda2e13cc77c334eefab21e1" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isArray</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a8c0ae8e177452b88b3a4ec81bf77c378" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isConstant</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ad90ea6a01cca9c370b7f17b408dcc5a7" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isConstArray</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a5d4afc5e1ba5cbcedf049467f75ef7c4" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isConstStruct</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ac99fa14fdf7bc0dd3e9ff36c7a3a351f" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isFunction</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1aa2855b69150287e5f04a7a683dc4c91f" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isGlobalObj</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a26c179394fbda9a9261d0bf3f52b619d" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isHeap</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a3a58b1e0192b92dac5bbfad24adbcdac" prot="public" virt="virtual"><scope>SVF::ObjTypeInfo</scope><name>isNonPtrFieldObj</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1aa568dc82decd28d2ef40785a4a647602" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isStack</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a3594dc1c1943dbac0ab72f2ff163c523" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isStaticObj</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a06493939f797f122b70b90bbf22cad7a" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isStruct</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1aca1e900f9b0a774684af77666cf033e3" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isVarArray</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a40d6703875b370aed2c6dc41c0594af5" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>isVarStruct</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a5ff63eb0654acd152f7d6c18618ee94a" prot="private" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>maxOffsetLimit</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>MEMTYPE</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a1a182e6a8710242f94729412d4683f8d" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>ObjTypeInfo</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1afa03172e8fe0af6b523e866d54235f3a" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>ObjTypeInfo</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ad6fb2bfae3d4b73a6821a87106f65f49" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>setFlag</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a9fff869c63776c6ebeff78933e0f6092" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>setMaxFieldOffsetLimit</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aad918042d1f04a5e3960817d55ccb5d5" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>STACK_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830a4e7606afe2dabdef9c9836ae798a9d98" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>STATIC_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a6e7780d4e2639c089ff6c853d8d78a4d" prot="private" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>type</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830adedc43e0fcaebf433120869aa9307b1c" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>VAR_ARRAY_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1a91b41b7ade5871362b77a2ef566b2830aaf98981bd15b41f543fd99d0c6222f08" prot="public" virt="non-virtual"><scope>SVF::ObjTypeInfo</scope><name>VAR_STRUCT_OBJ</name></member>
      <member refid="class_s_v_f_1_1_obj_type_info_1ace5fdb3701cb93df0f02aedc94e7e975" prot="public" virt="virtual"><scope>SVF::ObjTypeInfo</scope><name>~ObjTypeInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
