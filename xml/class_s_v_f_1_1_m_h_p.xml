<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_m_h_p" kind="class" language="C++" prot="public">
    <compoundname>SVF::MHP</compoundname>
    <includes refid="_m_h_p_8h" local="no">MHP.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a0cacd62ca23e5f025dba503b0537c15a" prot="public" static="no">
        <type>Set&lt; const Function * &gt;</type>
        <definition>typedef Set&lt;const Function*&gt; SVF::MHP::FunSet</definition>
        <argsstring></argsstring>
        <name>FunSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="29" column="17" bodyfile="include/MTA/MHP.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1aa17ec09b08f8dc7927aa7fa00232dd2f" prot="public" static="no">
        <type>Set&lt; const Instruction * &gt;</type>
        <definition>typedef Set&lt;const Instruction*&gt; SVF::MHP::InstSet</definition>
        <argsstring></argsstring>
        <name>InstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="30" column="17" bodyfile="include/MTA/MHP.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a83643e264defbd0a985031f5e3b5b537" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const StmtSVFGNode*&gt; SVF::MHP::SVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="31" column="17" bodyfile="include/MTA/MHP.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a8fecc443c4d92a36a9c50ec6a4f5dea8" prot="public" static="no">
        <type>TCT::InstVec</type>
        <definition>typedef TCT::InstVec SVF::MHP::InstVec</definition>
        <argsstring></argsstring>
        <name>InstVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="32" column="26" bodyfile="include/MTA/MHP.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1aeba1145d32693ae7b642f483eeae94ef" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &gt;</type>
        <definition>typedef FIFOWorkList&lt;CxtThreadStmt&gt; SVF::MHP::CxtThreadStmtWorkList</definition>
        <argsstring></argsstring>
        <name>CxtThreadStmtWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="33" column="26" bodyfile="include/MTA/MHP.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a28031502c4f8f0d4012c0827c57efb32" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &gt;</type>
        <definition>typedef Set&lt;CxtThreadStmt&gt; SVF::MHP::CxtThreadStmtSet</definition>
        <argsstring></argsstring>
        <name>CxtThreadStmtSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="34" column="17" bodyfile="include/MTA/MHP.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a0726df05cc034b9961eb4da42a9515af" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref>, NodeBS &gt;</type>
        <definition>typedef Map&lt;const CxtThreadStmt,NodeBS&gt; SVF::MHP::ThreadStmtToThreadInterleav</definition>
        <argsstring></argsstring>
        <name>ThreadStmtToThreadInterleav</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="35" column="17" bodyfile="include/MTA/MHP.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1ae3e240893d0950354d3d775e87d4adf9" prot="public" static="no">
        <type>Map&lt; const Instruction *, CxtThreadStmtSet &gt;</type>
        <definition>typedef Map&lt;const Instruction*,CxtThreadStmtSet&gt; SVF::MHP::InstToThreadStmtSetMap</definition>
        <argsstring></argsstring>
        <name>InstToThreadStmtSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="36" column="17" bodyfile="include/MTA/MHP.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a08ba219ec02b07b1bbd91a88ebb4acd7" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &gt;</type>
        <definition>typedef Set&lt;CxtStmt&gt; SVF::MHP::LockSpan</definition>
        <argsstring></argsstring>
        <name>LockSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="38" column="17" bodyfile="include/MTA/MHP.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1a570f93674511a93cdf2afb96df4947b6" prot="public" static="no">
        <type>std::pair&lt; const Function *, const Function * &gt;</type>
        <definition>typedef std::pair&lt;const Function*,const Function*&gt; SVF::MHP::FuncPair</definition>
        <argsstring></argsstring>
        <name>FuncPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="40" column="23" bodyfile="include/MTA/MHP.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_h_p_1adff2785f9d46eb110ce5b429592b2a38" prot="public" static="no">
        <type>Map&lt; FuncPair, bool &gt;</type>
        <definition>typedef Map&lt;FuncPair, bool&gt; SVF::MHP::FuncPairToBool</definition>
        <argsstring></argsstring>
        <name>FuncPairToBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="41" column="17" bodyfile="include/MTA/MHP.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a4b73d112880ad940e078e801f8725799" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::MHP::tcg</definition>
        <argsstring></argsstring>
        <name>tcg</name>
        <briefdescription>
<para>TCG. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="242" column="21" bodyfile="include/MTA/MHP.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a176eefb65e4ba99ee70513c8add44176" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
        <definition>TCT* SVF::MHP::tct</definition>
        <argsstring></argsstring>
        <name>tct</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="243" column="9" bodyfile="include/MTA/MHP.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a98857a1837cef5519c938d07bb771a60" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_fork_join_analysis" kindref="compound">ForkJoinAnalysis</ref> *</type>
        <definition>ForkJoinAnalysis* SVF::MHP::fja</definition>
        <argsstring></argsstring>
        <name>fja</name>
        <briefdescription>
<para>ForJoin Analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="244" column="22" bodyfile="include/MTA/MHP.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a0300d46dd22ee7cc8c62fada694d3acb" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtThreadStmtWorkList</ref></type>
        <definition>CxtThreadStmtWorkList SVF::MHP::cxtStmtList</definition>
        <argsstring></argsstring>
        <name>cxtStmtList</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> worklist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="245" column="27" bodyfile="include/MTA/MHP.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1afcfc409e625b74cbefd240170627c541" prot="private" static="no" mutable="no">
        <type>ThreadStmtToThreadInterleav</type>
        <definition>ThreadStmtToThreadInterleav SVF::MHP::threadStmtToTheadInterLeav</definition>
        <argsstring></argsstring>
        <name>threadStmtToTheadInterLeav</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="246" column="33" bodyfile="include/MTA/MHP.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a6b238ee6342da990840162845bba547f" prot="private" static="no" mutable="no">
        <type>InstToThreadStmtSetMap</type>
        <definition>InstToThreadStmtSetMap SVF::MHP::instToTSMap</definition>
        <argsstring></argsstring>
        <name>instToTSMap</name>
        <briefdescription>
<para>Map a statement to its thread interleavings. </para>
        </briefdescription>
        <detaileddescription>
<para>Map an instruction to its ThreadStmtSet </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="247" column="28" bodyfile="include/MTA/MHP.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a1f057ef082484a1997cb02287e063f00" prot="private" static="no" mutable="no">
        <type>FuncPairToBool</type>
        <definition>FuncPairToBool SVF::MHP::nonCandidateFuncMHPRelMap</definition>
        <argsstring></argsstring>
        <name>nonCandidateFuncMHPRelMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="248" column="20" bodyfile="include/MTA/MHP.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1a26ae18993915d76b704232cded9811c2" prot="public" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::MHP::numOfTotalQueries</definition>
        <argsstring></argsstring>
        <name>numOfTotalQueries</name>
        <briefdescription>
<para>Total number of queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="252" column="11" bodyfile="include/MTA/MHP.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1ab8bd382e0c70b0feb2a291ecc4043106" prot="public" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::MHP::numOfMHPQueries</definition>
        <argsstring></argsstring>
        <name>numOfMHPQueries</name>
        <briefdescription>
<para>Number of queries are answered as may-happen-in-parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="253" column="11" bodyfile="include/MTA/MHP.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1aca306b97c6dcd47a8f407038436473a2" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double SVF::MHP::interleavingTime</definition>
        <argsstring></argsstring>
        <name>interleavingTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="254" column="12" bodyfile="include/MTA/MHP.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_h_p_1ab7d9fe837844197b7acdc0493a50aaa5" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double SVF::MHP::interleavingQueriesTime</definition>
        <argsstring></argsstring>
        <name>interleavingQueriesTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="255" column="12" bodyfile="include/MTA/MHP.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1abf1f5a7c365dfb95b42015b7b2ad6fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MHP::MHP</definition>
        <argsstring>(TCT *t)</argsstring>
        <name>MHP</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="44" column="5" bodyfile="lib/MTA/MHP.cpp" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6b7133f1767c3636ce253c5325be5053" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>MHP::~MHP</definition>
        <argsstring>()</argsstring>
        <name>~MHP</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="47" column="13" bodyfile="lib/MTA/MHP.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a02457fa6e3c85c897ec3b3d8db18cc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::analyze</definition>
        <argsstring>()</argsstring>
        <name>analyze</name>
        <briefdescription>
<para>Start analysis here. </para>
        </briefdescription>
        <detaileddescription>
<para>Start analysis here </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="50" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="101" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1adfd90a8d20d630bc3813f5ed71d3abf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::analyzeInterleaving</definition>
        <argsstring>()</argsstring>
        <name>analyzeInterleaving</name>
        <briefdescription>
<para>Analyze thread interleaving. </para>
        </briefdescription>
        <detaileddescription>
<para>Analyze thread interleaving </para>
        </detaileddescription>
        <inbodydescription>
<para>handle non-candidate function</para>
<para>handle candidate function</para>
<para>update non-candidate functions&apos; interleaving</para>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="53" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="116" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a20e740d4b96ef086b6b5778acd38ca88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::MHP::getThreadCallGraph</definition>
        <argsstring>() const</argsstring>
        <name>getThreadCallGraph</name>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="56" column="28" bodyfile="include/MTA/MHP.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a033936547612c54326a604f0ff1e39a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
        <definition>TCT* SVF::MHP::getTCT</definition>
        <argsstring>() const</argsstring>
        <name>getTCT</name>
        <briefdescription>
<para>Get Thread Creation Tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="62" column="16" bodyfile="include/MTA/MHP.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a1cfec64cc65abcbc5ba32695850bfb48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MHP::isConnectedfromMain</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>isConnectedfromMain</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Whether the function is connected from main function in thread call graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="69" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="542" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a9989f2d200cec6c387d63f452b8eac6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MHP::mayHappenInParallel</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>mayHappenInParallel</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Interface to query whether two instructions may happen-in-parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="82" column="18" bodyfile="lib/MTA/MHP.cpp" bodystart="637" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a9a4b6d5c57552b61a62a4dd180aef40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MHP::mayHappenInParallelCache</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>mayHappenInParallelCache</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="83" column="18" bodyfile="lib/MTA/MHP.cpp" bodystart="615" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a2faaa02abec3b8f8fca73e178cbdcb41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MHP::mayHappenInParallelInst</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>mayHappenInParallelInst</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Answer <ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> queries For a pair of ThreadStmts (t1,s1) = &lt;l1&gt; (t2,s2) = &lt;l2&gt; They may happen in parallel if (1) t1 == t2 and t1 inloop/incycle (2) t1!=t2 and t1 \in l2 and t2 \in l1 </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: Any instruction in dead function is assumed no <ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> with others</para>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="84" column="18" bodyfile="lib/MTA/MHP.cpp" bodystart="577" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1aab80f1bc5c359a7d3b03f249bafa1d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MHP::executedByTheSameThread</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>executedByTheSameThread</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="85" column="18" bodyfile="lib/MTA/MHP.cpp" bodystart="649" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a653460ed316804bea377eecdde412d36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const NodeBS &amp;</type>
        <definition>const NodeBS&amp; SVF::MHP::getInterleavingThreads</definition>
        <argsstring>(const CxtThreadStmt &amp;cts)</argsstring>
        <name>getInterleavingThreads</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Get interleaving thread for statement inst. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="89" column="25" bodyfile="include/MTA/MHP.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a3ba43bb0be55ffade3d70f8cbb95f88f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::hasInterleavingThreads</definition>
        <argsstring>(const CxtThreadStmt &amp;cts) const</argsstring>
        <name>hasInterleavingThreads</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="93" column="17" bodyfile="include/MTA/MHP.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a49504524c0d3e53c769cdbfd9ec1ccb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CxtThreadStmtSet &amp;</type>
        <definition>const CxtThreadStmtSet&amp; SVF::MHP::getThreadStmtSet</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>getThreadStmtSet</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get/has ThreadStmt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="101" column="35" bodyfile="include/MTA/MHP.h" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6841b147e2a681ea372bdddd53616294" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::hasThreadStmtSet</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>hasThreadStmtSet</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="107" column="17" bodyfile="include/MTA/MHP.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a22f7dc5043fed97f1b4b273b8b710415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::printInterleaving</definition>
        <argsstring>()</argsstring>
        <name>printInterleaving</name>
        <briefdescription>
<para>Print interleaving results. </para>
        </briefdescription>
        <detaileddescription>
<para>Print interleaving results </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="114" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="686" bodyend="698"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1abeb76ad63d9362ba8fa8f7088b0d942b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::updateNonCandidateFunInterleaving</definition>
        <argsstring>()</argsstring>
        <name>updateNonCandidateFunInterleaving</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update non-candidate functions&apos; interleaving. Copy interleaving threads of the entry inst to other insts.</para>
<para>Update non-candidate functions&apos; interleaving </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="119" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="186" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a2c1e4fac7b810021939ed26307d37816" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleNonCandidateFun</definition>
        <argsstring>(const CxtThreadStmt &amp;cts)</argsstring>
        <name>handleNonCandidateFun</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle non-candidate function. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle call instruction in the current thread scope (excluding any fork site) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="122" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="222" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a8a95f8ae419b66310ce6f572caea2ca5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleFork</definition>
        <argsstring>(const CxtThreadStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleFork</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle fork. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle fork </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="125" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="243" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a3a535274cd3349a05eeccf3c9231396a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleJoin</definition>
        <argsstring>(const CxtThreadStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleJoin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle join. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle join </para>
        </detaileddescription>
        <inbodydescription>
<para>for the join site in a loop loop which does not join the current thread we process the loop exit</para>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="128" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="270" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1af769afe6ba6baccda5a497df181c9fb0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleCall</definition>
        <argsstring>(const CxtThreadStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleCall</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle call. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle call instruction in the current thread scope (excluding any fork site) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="131" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="322" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a76ac9d388529f090ab6dad5829dd0753" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleRet</definition>
        <argsstring>(const CxtThreadStmt &amp;cts)</argsstring>
        <name>handleRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle return. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle return instruction in the current thread scope (excluding any join site) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="134" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="347" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1af4d6f0884ce18ea5caf0dfd9799d1aae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::handleIntra</definition>
        <argsstring>(const CxtThreadStmt &amp;cts)</argsstring>
        <name>handleIntra</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle intra. </para>
        </briefdescription>
        <detaileddescription>
<para>Handling intraprocedural statements (successive statements on the CFG ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="137" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="392" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6990ff8e3efe5af365c8205b7ced38ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::validateResults</definition>
        <argsstring>()</argsstring>
        <name>validateResults</name>
        <briefdescription>
<para>Use RCResultValidator to validate mhp results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="140" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="671" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6343dd11dd75d3730dc463321a11445e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MHP::addInterleavingThread</definition>
        <argsstring>(const CxtThreadStmt &amp;tgr, NodeID tid)</argsstring>
        <name>addInterleavingThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Add/Remove interleaving thread for statement inst. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="144" column="17" bodyfile="include/MTA/MHP.h" bodystart="144" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6c77349f168735888d0db4ac5b632da9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MHP::addInterleavingThread</definition>
        <argsstring>(const CxtThreadStmt &amp;tgr, const CxtThreadStmt &amp;src)</argsstring>
        <name>addInterleavingThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="152" column="17" bodyfile="include/MTA/MHP.h" bodystart="152" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a5546cb50ca769218a871cdda08a25d18" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MHP::rmInterleavingThread</definition>
        <argsstring>(const CxtThreadStmt &amp;tgr, const NodeBS &amp;tids, const Instruction *joinsite)</argsstring>
        <name>rmInterleavingThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type>const NodeBS &amp;</type>
          <declname>tids</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>joinsite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="161" column="17" bodyfile="include/MTA/MHP.h" bodystart="161" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1ae9423c868ba4d26337428b96db9fc77b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::updateAncestorThreads</definition>
        <argsstring>(NodeID tid)</argsstring>
        <name>updateAncestorThreads</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
          <defname>curTid</defname>
        </param>
        <briefdescription>
<para>Update Ancestor and sibling threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Update interleavings of ancestor threads according to <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="178" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="408" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a23ab5a03b7c00ba0ebac65568a83a5cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MHP::updateSiblingThreads</definition>
        <argsstring>(NodeID tid)</argsstring>
        <name>updateSiblingThreads</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
          <defname>curTid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update interleavings of sibling threads according to <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref></para>
<para>Exclude sibling thread that never happen in parallel based on <ref refid="class_s_v_f_1_1_fork_join_analysis" kindref="compound">ForkJoinAnalysis</ref></para>
<para>The interleaving of a thread t is not unnecessary to be updated if (1) t HB Sibling and t fully joins curTid recusively or (2) Sibling HB t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="179" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="443" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a0356a8ccc53999549fb369f67faad306" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MHP::isRecurFullJoin</definition>
        <argsstring>(NodeID parentTid, NodeID curTid)</argsstring>
        <name>isRecurFullJoin</name>
        <param>
          <type>NodeID</type>
          <declname>parentTid</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>curTid</declname>
        </param>
        <briefdescription>
<para>Thread curTid can be fully joined by parentTid recurively. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether curTid can be fully joined by parentTid recursively </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="183" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="472" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1acd5b010c22a6590f6ea1a5cedd8f43ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MHP::isMustJoin</definition>
        <argsstring>(const NodeID curTid, const Instruction *joinsite)</argsstring>
        <name>isMustJoin</name>
        <param>
          <type>const NodeID</type>
          <declname>curTid</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>joinsite</declname>
        </param>
        <briefdescription>
<para>Whether a join site must join a thread t. </para>
        </briefdescription>
        <detaileddescription>
<para>A join site must join t if (1) t is not a multiforked thread (2) the join site of t is not in recursion </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="186" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="508" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a041392f704690e89d8acf5ec68d8682c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::isMultiForkedThread</definition>
        <argsstring>(NodeID curTid)</argsstring>
        <name>isMultiForkedThread</name>
        <param>
          <type>NodeID</type>
          <declname>curTid</declname>
        </param>
        <briefdescription>
<para>A thread is a multiForked thread if it is in a loop or recursion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="189" column="17" bodyfile="include/MTA/MHP.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a04357a2827d22e4e727d488d32eb5cb5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MHP::getNextInsts</definition>
        <argsstring>(const Instruction *inst, InstVec &amp;instVec)</argsstring>
        <name>getNextInsts</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <param>
          <type>InstVec &amp;</type>
          <declname>instVec</declname>
        </param>
        <briefdescription>
<para>Get the next instructions following control flow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="195" column="17" bodyfile="include/MTA/MHP.h" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a67e2d43f0e35cc46eb7680ec66a4fe44" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MHP::pushCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>pushCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Push calling context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="200" column="17" bodyfile="include/MTA/MHP.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1afee99dd3ca2ff68789864423fc9358e0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::matchCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>matchCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Match context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="205" column="17" bodyfile="include/MTA/MHP.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1aed7f65ea3f046774eef36602cb41f178" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::pushToCTSWorkList</definition>
        <argsstring>(const CxtThreadStmt &amp;cs)</argsstring>
        <name>pushToCTSWorkList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>WorkList helper functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="212" column="17" bodyfile="include/MTA/MHP.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1ad8d3aa1a12fb1e8668eb4138fbe23b7d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref></type>
        <definition>CxtThreadStmt SVF::MHP::popFromCTSWorkList</definition>
        <argsstring>()</argsstring>
        <name>popFromCTSWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="216" column="26" bodyfile="include/MTA/MHP.h" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1aeabf2e9ec8b1ec874503c83cc65e1205" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::isTDFork</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDFork</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a fork site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="223" column="17" bodyfile="include/MTA/MHP.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1ab566508ffd73abd4d5ad047a1d7f9c27" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MHP::isTDJoin</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDJoin</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a join site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="228" column="17" bodyfile="include/MTA/MHP.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a9b89800fe8089fd7521ef3f415f6eb12" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS</type>
        <definition>NodeBS MHP::getDirAndIndJoinedTid</definition>
        <argsstring>(const CallStrCxt &amp;cxt, const Instruction *call)</argsstring>
        <name>getDirAndIndJoinedTid</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Return thread id(s) which are directly or indirectly joined at this join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Return thread id(s) which are directly or indirectly joined at this join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="234" column="12" bodyfile="lib/MTA/MHP.cpp" bodystart="517" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1afa0d341a2fb7b05522dc6e178eab7e8b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop * MHP::isJoinInSymmetricLoop</definition>
        <argsstring>(const CallStrCxt &amp;cxt, const Instruction *call) const</argsstring>
        <name>isJoinInSymmetricLoop</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether a context-sensitive join satisfies symmetric loop pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether a context-sensitive join satisfies symmetric loop pattern </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="237" column="16" bodyfile="lib/MTA/MHP.cpp" bodystart="526" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_h_p_1a6f07427b45991b2d8a3ff21582121d23" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MHP::isHBPair</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>isHBPair</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
<para>Whether thread t1 happens before t2 based on ForkJoin Analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether two thread t1 happens-fore t2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="240" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="535" bodyend="538"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class serves as a base may-happen in parallel analysis for multithreaded program Given a statement under an abstract thread, it tells which abstract threads may be alive at the same time (May-happen-in-parallel). </para>
    </detaileddescription>
    <location file="include/MTA/MHP.h" line="25" column="1" bodyfile="include/MTA/MHP.h" bodystart="26" bodyend="256"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_m_h_p_1a6343dd11dd75d3730dc463321a11445e" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>addInterleavingThread</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6c77349f168735888d0db4ac5b632da9" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>addInterleavingThread</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a02457fa6e3c85c897ec3b3d8db18cc4b" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1adfd90a8d20d630bc3813f5ed71d3abf7" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>analyzeInterleaving</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a0300d46dd22ee7cc8c62fada694d3acb" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>cxtStmtList</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a28031502c4f8f0d4012c0827c57efb32" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>CxtThreadStmtSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aeba1145d32693ae7b642f483eeae94ef" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>CxtThreadStmtWorkList</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aab80f1bc5c359a7d3b03f249bafa1d40" prot="public" virt="virtual"><scope>SVF::MHP</scope><name>executedByTheSameThread</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a98857a1837cef5519c938d07bb771a60" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>fja</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a570f93674511a93cdf2afb96df4947b6" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>FuncPair</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1adff2785f9d46eb110ce5b429592b2a38" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>FuncPairToBool</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a0cacd62ca23e5f025dba503b0537c15a" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>FunSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a9b89800fe8089fd7521ef3f415f6eb12" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>getDirAndIndJoinedTid</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a653460ed316804bea377eecdde412d36" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>getInterleavingThreads</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a04357a2827d22e4e727d488d32eb5cb5" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>getNextInsts</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a033936547612c54326a604f0ff1e39a6" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>getTCT</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a20e740d4b96ef086b6b5778acd38ca88" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>getThreadCallGraph</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a49504524c0d3e53c769cdbfd9ec1ccb0" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>getThreadStmtSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1af769afe6ba6baccda5a497df181c9fb0" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleCall</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a8a95f8ae419b66310ce6f572caea2ca5" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleFork</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1af4d6f0884ce18ea5caf0dfd9799d1aae" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleIntra</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a3a535274cd3349a05eeccf3c9231396a" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleJoin</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a2c1e4fac7b810021939ed26307d37816" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleNonCandidateFun</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a76ac9d388529f090ab6dad5829dd0753" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>handleRet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a3ba43bb0be55ffade3d70f8cbb95f88f" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>hasInterleavingThreads</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6841b147e2a681ea372bdddd53616294" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>hasThreadStmtSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aa17ec09b08f8dc7927aa7fa00232dd2f" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>InstSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ae3e240893d0950354d3d775e87d4adf9" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>InstToThreadStmtSetMap</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6b238ee6342da990840162845bba547f" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>instToTSMap</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a8fecc443c4d92a36a9c50ec6a4f5dea8" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>InstVec</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ab7d9fe837844197b7acdc0493a50aaa5" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>interleavingQueriesTime</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aca306b97c6dcd47a8f407038436473a2" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>interleavingTime</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a1cfec64cc65abcbc5ba32695850bfb48" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>isConnectedfromMain</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6f07427b45991b2d8a3ff21582121d23" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isHBPair</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1afa0d341a2fb7b05522dc6e178eab7e8b" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isJoinInSymmetricLoop</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a041392f704690e89d8acf5ec68d8682c" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isMultiForkedThread</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1acd5b010c22a6590f6ea1a5cedd8f43ba" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isMustJoin</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a0356a8ccc53999549fb369f67faad306" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isRecurFullJoin</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aeabf2e9ec8b1ec874503c83cc65e1205" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isTDFork</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ab566508ffd73abd4d5ad047a1d7f9c27" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>isTDJoin</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a08ba219ec02b07b1bbd91a88ebb4acd7" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>LockSpan</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1afee99dd3ca2ff68789864423fc9358e0" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>matchCxt</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a9989f2d200cec6c387d63f452b8eac6b" prot="public" virt="virtual"><scope>SVF::MHP</scope><name>mayHappenInParallel</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a9a4b6d5c57552b61a62a4dd180aef40c" prot="public" virt="virtual"><scope>SVF::MHP</scope><name>mayHappenInParallelCache</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a2faaa02abec3b8f8fca73e178cbdcb41" prot="public" virt="virtual"><scope>SVF::MHP</scope><name>mayHappenInParallelInst</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1abf1f5a7c365dfb95b42015b7b2ad6fbe" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>MHP</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a1f057ef082484a1997cb02287e063f00" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>nonCandidateFuncMHPRelMap</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ab8bd382e0c70b0feb2a291ecc4043106" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>numOfMHPQueries</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a26ae18993915d76b704232cded9811c2" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>numOfTotalQueries</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ad8d3aa1a12fb1e8668eb4138fbe23b7d" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>popFromCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a22f7dc5043fed97f1b4b273b8b710415" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>printInterleaving</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a67e2d43f0e35cc46eb7680ec66a4fe44" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>pushCxt</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1aed7f65ea3f046774eef36602cb41f178" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>pushToCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a5546cb50ca769218a871cdda08a25d18" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>rmInterleavingThread</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a83643e264defbd0a985031f5e3b5b537" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>SVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a4b73d112880ad940e078e801f8725799" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>tcg</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a176eefb65e4ba99ee70513c8add44176" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>tct</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1afcfc409e625b74cbefd240170627c541" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>threadStmtToTheadInterLeav</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a0726df05cc034b9961eb4da42a9515af" prot="public" virt="non-virtual"><scope>SVF::MHP</scope><name>ThreadStmtToThreadInterleav</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1ae9423c868ba4d26337428b96db9fc77b" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>updateAncestorThreads</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1abeb76ad63d9362ba8fa8f7088b0d942b" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>updateNonCandidateFunInterleaving</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a23ab5a03b7c00ba0ebac65568a83a5cc" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>updateSiblingThreads</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6990ff8e3efe5af365c8205b7ced38ed" prot="private" virt="non-virtual"><scope>SVF::MHP</scope><name>validateResults</name></member>
      <member refid="class_s_v_f_1_1_m_h_p_1a6b7133f1767c3636ce253c5325be5053" prot="public" virt="virtual"><scope>SVF::MHP</scope><name>~MHP</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
