<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_i_c_f_g" kind="class" language="C++" prot="public">
    <compoundname>SVF::ICFG</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_generic_graph" prot="public" virt="non-virtual">SVF::GenericGraph&lt; ICFGNode, ICFGEdge &gt;</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_i_c_f_g_printer" prot="public" virt="non-virtual">SVF::ICFGPrinter</derivedcompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1af1fe5708c6f67fd87fa1edaa6c73ff5d" prot="public" static="no">
        <type>Map&lt; NodeID, <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;NodeID, ICFGNode *&gt; SVF::ICFG::ICFGNodeIDToNodeMapTy</definition>
        <argsstring></argsstring>
        <name>ICFGNodeIDToNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="51" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a20ea3e37e9c3c7d3138ff593041a8e47" prot="public" static="no">
        <type>ICFGEdge::ICFGEdgeSetTy</type>
        <definition>typedef ICFGEdge::ICFGEdgeSetTy SVF::ICFG::ICFGEdgeSetTy</definition>
        <argsstring></argsstring>
        <name>ICFGEdgeSetTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="52" column="37" bodyfile="include/Graphs/ICFG.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a498f84068ef643a94970aeb171607e31" prot="public" static="no">
        <type>ICFGNodeIDToNodeMapTy::iterator</type>
        <definition>typedef ICFGNodeIDToNodeMapTy::iterator SVF::ICFG::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="53" column="45" bodyfile="include/Graphs/ICFG.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a94e4de04d8da10a19ab65c22e257b82b" prot="public" static="no">
        <type>ICFGNodeIDToNodeMapTy::const_iterator</type>
        <definition>typedef ICFGNodeIDToNodeMapTy::const_iterator SVF::ICFG::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="54" column="51" bodyfile="include/Graphs/ICFG.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a05067e577bfcdcd37b94198ee97e7eb7" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, <ref refid="class_s_v_f_1_1_fun_entry_block_node" kindref="compound">FunEntryBlockNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*, FunEntryBlockNode *&gt; SVF::ICFG::FunToFunEntryNodeMapTy</definition>
        <argsstring></argsstring>
        <name>FunToFunEntryNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="56" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a456ecdf6f28e6325613833ac07a9ca4d" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, <ref refid="class_s_v_f_1_1_fun_exit_block_node" kindref="compound">FunExitBlockNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*, FunExitBlockNode *&gt; SVF::ICFG::FunToFunExitNodeMapTy</definition>
        <argsstring></argsstring>
        <name>FunToFunExitNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="57" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a13694bd3990dd29ebce641a7c827a370" prot="public" static="no">
        <type>Map&lt; const Instruction *, <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const Instruction*, CallBlockNode *&gt; SVF::ICFG::CSToCallNodeMapTy</definition>
        <argsstring></argsstring>
        <name>CSToCallNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="58" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a3d519765c4bbc1479b64ef211f845edd" prot="public" static="no">
        <type>Map&lt; const Instruction *, <ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const Instruction*, RetBlockNode *&gt; SVF::ICFG::CSToRetNodeMapTy</definition>
        <argsstring></argsstring>
        <name>CSToRetNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="59" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_i_c_f_g_1a8be76aeee4701852f907b5c93a207c38" prot="public" static="no">
        <type>Map&lt; const Instruction *, <ref refid="class_s_v_f_1_1_intra_block_node" kindref="compound">IntraBlockNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const Instruction*, IntraBlockNode *&gt; SVF::ICFG::InstToBlockNodeMapTy</definition>
        <argsstring></argsstring>
        <name>InstToBlockNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="60" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1a5df6061b65d021cd73c66592ec79f052" prot="public" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::ICFG::totalICFGNode</definition>
        <argsstring></argsstring>
        <name>totalICFGNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="62" column="12" bodyfile="include/Graphs/ICFG.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1a69076849bd256fb0ca59711a59a7c092" prot="private" static="no" mutable="no">
        <type>FunToFunEntryNodeMapTy</type>
        <definition>FunToFunEntryNodeMapTy SVF::ICFG::FunToFunEntryNodeMap</definition>
        <argsstring></argsstring>
        <name>FunToFunEntryNodeMap</name>
        <briefdescription>
<para>map a function to its <ref refid="class_s_v_f_1_1_fun_exit_block_node" kindref="compound">FunExitBlockNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="65" column="28" bodyfile="include/Graphs/ICFG.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1ab87a90adae3e9db06da7ecc0bd9d920f" prot="private" static="no" mutable="no">
        <type>FunToFunExitNodeMapTy</type>
        <definition>FunToFunExitNodeMapTy SVF::ICFG::FunToFunExitNodeMap</definition>
        <argsstring></argsstring>
        <name>FunToFunExitNodeMap</name>
        <briefdescription>
<para>map a function to its <ref refid="class_s_v_f_1_1_fun_entry_block_node" kindref="compound">FunEntryBlockNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="66" column="27" bodyfile="include/Graphs/ICFG.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1af0434d6ffd247eeaf73b9294e659a3f9" prot="private" static="no" mutable="no">
        <type>CSToCallNodeMapTy</type>
        <definition>CSToCallNodeMapTy SVF::ICFG::CSToCallNodeMap</definition>
        <argsstring></argsstring>
        <name>CSToCallNodeMap</name>
        <briefdescription>
<para>map a callsite to its <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="67" column="23" bodyfile="include/Graphs/ICFG.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1a0e43308038663c10667177238b23ab3e" prot="private" static="no" mutable="no">
        <type>CSToRetNodeMapTy</type>
        <definition>CSToRetNodeMapTy SVF::ICFG::CSToRetNodeMap</definition>
        <argsstring></argsstring>
        <name>CSToRetNodeMap</name>
        <briefdescription>
<para>map a callsite to its <ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="68" column="22" bodyfile="include/Graphs/ICFG.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1a23f905d849553d7ad652e9a8f1bfacd1" prot="private" static="no" mutable="no">
        <type>InstToBlockNodeMapTy</type>
        <definition>InstToBlockNodeMapTy SVF::ICFG::InstToBlockNodeMap</definition>
        <argsstring></argsstring>
        <name>InstToBlockNodeMap</name>
        <briefdescription>
<para>map a basic block to its <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="69" column="26" bodyfile="include/Graphs/ICFG.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_i_c_f_g_1a37ec47cd95cf25b18720c4267a9fd40c" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_global_block_node" kindref="compound">GlobalBlockNode</ref> *</type>
        <definition>GlobalBlockNode* SVF::ICFG::globalBlockNode</definition>
        <argsstring></argsstring>
        <name>globalBlockNode</name>
        <briefdescription>
<para>unique basic block for all globals </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="70" column="21" bodyfile="include/Graphs/ICFG.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a683f33b8ad507a33809511954c7c1acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ICFG::ICFG</definition>
        <argsstring>()</argsstring>
        <name>ICFG</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor<itemizedlist>
<listitem><para>Build <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> 1) build <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> nodes statements for top level pointers (PAGEdges) 2) connect <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> edges between two statements (PAGEdges) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="74" column="5" bodyfile="lib/Graphs/ICFG.cpp" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ae02e30b2d9c2cd070ba326b782fa8520" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::ICFG::~ICFG</definition>
        <argsstring>()</argsstring>
        <name>~ICFG</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="77" column="13" bodyfile="include/Graphs/ICFG.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a5f2c0aaba07d6fdd63058da0fb60ca8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
        <definition>ICFGNode* SVF::ICFG::getICFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getICFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="82" column="21" bodyfile="include/Graphs/ICFG.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a16c2ed1f9e28c84669b14dc48fb3c01a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ICFG::hasICFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>hasICFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Whether has the <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="88" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1aa662baae5682ef6ec5084fa4147c9709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::hasIntraICFGEdge</definition>
        <argsstring>(ICFGNode *src, ICFGNode *dst, ICFGEdge::ICFGEdgeK kind)</argsstring>
        <name>hasIntraICFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdge::ICFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Whether we has a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an intra <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="95" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="247" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a86535e50d1feba706b19491d905baef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::hasInterICFGEdge</definition>
        <argsstring>(ICFGNode *src, ICFGNode *dst, ICFGEdge::ICFGEdgeK kind)</argsstring>
        <name>hasInterICFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdge::ICFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an inter <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="96" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="264" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a29fb70d6638765ce291c5a8a11fbea64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::hasThreadICFGEdge</definition>
        <argsstring>(ICFGNode *src, ICFGNode *dst, ICFGEdge::ICFGEdgeK kind)</argsstring>
        <name>hasThreadICFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdge::ICFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether we has an thread <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="97" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="281" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a5dd4ac55123501c47c628adcf27e2475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::getICFGEdge</definition>
        <argsstring>(const ICFGNode *src, const ICFGNode *dst, ICFGEdge::ICFGEdgeK kind)</argsstring>
        <name>getICFGEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge_1a395c34788e98950bc43e8cb44313e429" kindref="member">ICFGEdge::ICFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge according to src and dst. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the corresponding <ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="101" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="299" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a999956500bbd605326531480546db9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ICFG::dump</definition>
        <argsstring>(const std::string &amp;file, bool simple=false)</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dump graph into dot file. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="104" column="10" bodyfile="lib/Graphs/ICFG.cpp" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a5a00682b75726cacc1b4d88bbf40c824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ICFG::updateCallGraph</definition>
        <argsstring>(PTACallGraph *callgraph)</argsstring>
        <name>updateCallGraph</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
          <declname>callgraph</declname>
        </param>
        <briefdescription>
<para>update <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> for indirect calls </para>
        </briefdescription>
        <detaileddescription>
<para>Update <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> for indirect calls </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="107" column="10" bodyfile="lib/Graphs/ICFG.cpp" bodystart="402" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a534625b10673efe5b0f344bfebf9b3cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ICFG::removeICFGEdge</definition>
        <argsstring>(ICFGEdge *edge)</argsstring>
        <name>removeICFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="111" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a403cd10f7c01cc879d803a9759e729cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ICFG::removeICFGNode</definition>
        <argsstring>(ICFGNode *node)</argsstring>
        <name>removeICFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="118" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1adafd8bbb91507a9a78a3f16305812afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::addIntraEdge</definition>
        <argsstring>(ICFGNode *srcNode, ICFGNode *dstNode)</argsstring>
        <name>addIntraEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <briefdescription>
<para>Add control-flow edges for top level pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Add intraprocedural edges between two nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="125" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="321" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a8b038782880ae8950076e2c104bc4b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::addConditionalIntraEdge</definition>
        <argsstring>(ICFGNode *srcNode, ICFGNode *dstNode, const Value *condition, NodeID branchID)</argsstring>
        <name>addConditionalIntraEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>branchID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add conditional intraprocedural edges between two nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="126" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="339" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1abde033687317d47909ee45db7501723f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::addCallEdge</definition>
        <argsstring>(ICFGNode *srcNode, ICFGNode *dstNode, const Instruction *cs)</argsstring>
        <name>addCallEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add interprocedural call edges between two nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="127" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="359" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a4a44849b596c89ab14d2e5f18366e848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
        <definition>ICFGEdge * ICFG::addRetEdge</definition>
        <argsstring>(ICFGNode *srcNode, ICFGNode *dstNode, const Instruction *cs)</argsstring>
        <name>addRetEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add interprocedural return edges between two nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="128" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="376" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a70421a19a494eb6131a9ae72ef1a64d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ICFG::checkIntraEdgeParents</definition>
        <argsstring>(const ICFGNode *srcNode, const ICFGNode *dstNode)</argsstring>
        <name>checkIntraEdgeParents</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>srcNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>dstNode</declname>
        </param>
        <briefdescription>
<para>sanitize Intra edges, verify that both nodes belong to the same function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="132" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="132" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a462f590c2604184d69e4efe3d85a7b5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ICFG::addICFGEdge</definition>
        <argsstring>(ICFGEdge *edge)</argsstring>
        <name>addICFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_edge" kindref="compound">ICFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="143" column="17" bodyfile="include/Graphs/ICFG.h" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a15816a82d8c33a066009440dce6ee973" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::ICFG::addICFGNode</definition>
        <argsstring>(ICFGNode *node)</argsstring>
        <name>addICFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="152" column="25" bodyfile="include/Graphs/ICFG.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ab7b0b3088b46ad65451905cc4f567a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
        <definition>ICFGNode * ICFG::getBlockICFGNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getBlockICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get a basic block <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a basic block <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> TODO:: need to fix the assertions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="160" column="14" bodyfile="lib/Graphs/ICFG.cpp" bodystart="177" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a7d10e8a815c836a070d35850f817a18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>CallBlockNode * ICFG::getCallBlockNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getCallBlockNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="162" column="19" bodyfile="lib/Graphs/ICFG.cpp" bodystart="193" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a6d66c83cb1656d0f8ec8b8b65a9e9c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
        <definition>RetBlockNode * ICFG::getRetBlockNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getRetBlockNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="164" column="18" bodyfile="lib/Graphs/ICFG.cpp" bodystart="206" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a485fcd76a8a864c9b686e68a3ca66dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_intra_block_node" kindref="compound">IntraBlockNode</ref> *</type>
        <definition>IntraBlockNode * ICFG::getIntraBlockNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getIntraBlockNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="166" column="20" bodyfile="lib/Graphs/ICFG.cpp" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ae1ef14cdda27a2062c4c454750444108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_entry_block_node" kindref="compound">FunEntryBlockNode</ref> *</type>
        <definition>FunEntryBlockNode * ICFG::getFunEntryBlockNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFunEntryBlockNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Add a function entry node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="168" column="23" bodyfile="lib/Graphs/ICFG.cpp" bodystart="226" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1aa33426d57dc150956902945a17a29bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_exit_block_node" kindref="compound">FunExitBlockNode</ref> *</type>
        <definition>FunExitBlockNode * ICFG::getFunExitBlockNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFunExitBlockNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Add a function exit node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="170" column="22" bodyfile="lib/Graphs/ICFG.cpp" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ae3b8f1b45c75b5fc231da76d3a49ad57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_global_block_node" kindref="compound">GlobalBlockNode</ref> *</type>
        <definition>GlobalBlockNode* SVF::ICFG::getGlobalBlockNode</definition>
        <argsstring>() const</argsstring>
        <name>getGlobalBlockNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="172" column="21" bodyfile="include/Graphs/ICFG.h" bodystart="172" bodyend="175"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a5f03c3befe1df9fa62221fc6989d387a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_intra_block_node" kindref="compound">IntraBlockNode</ref> *</type>
        <definition>IntraBlockNode* SVF::ICFG::getIntraBlockICFGNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getIntraBlockICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get/Add IntraBlock <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="180" column="27" bodyfile="include/Graphs/ICFG.h" bodystart="180" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a9c9984f07859c7b0a4cc05ef7acf28af" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_intra_block_node" kindref="compound">IntraBlockNode</ref> *</type>
        <definition>IntraBlockNode* SVF::ICFG::addIntraBlockICFGNode</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>addIntraBlockICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="187" column="27" bodyfile="include/Graphs/ICFG.h" bodystart="187" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a5d75af18ed4228b89a4bb4e2b0b97925" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_entry_block_node" kindref="compound">FunEntryBlockNode</ref> *</type>
        <definition>FunEntryBlockNode* SVF::ICFG::getFunEntryICFGNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFunEntryICFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get/Add a function entry node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="196" column="30" bodyfile="include/Graphs/ICFG.h" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a37720720adf125ea4f8c12c4bdf41cdd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_entry_block_node" kindref="compound">FunEntryBlockNode</ref> *</type>
        <definition>FunEntryBlockNode* SVF::ICFG::addFunEntryICFGNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>addFunEntryICFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="203" column="30" bodyfile="include/Graphs/ICFG.h" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a63479291b885344630ebf024d537ac19" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_exit_block_node" kindref="compound">FunExitBlockNode</ref> *</type>
        <definition>FunExitBlockNode* SVF::ICFG::getFunExitICFGNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFunExitICFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get/Add a function exit node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="212" column="29" bodyfile="include/Graphs/ICFG.h" bodystart="212" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a7874a7a92beb17fd5a4a9575cb183975" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fun_exit_block_node" kindref="compound">FunExitBlockNode</ref> *</type>
        <definition>FunExitBlockNode* SVF::ICFG::addFunExitICFGNode</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>addFunExitICFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="219" column="29" bodyfile="include/Graphs/ICFG.h" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a288c5cc9fb6595d367f23d1c0c05a57a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>CallBlockNode* SVF::ICFG::getCallICFGNode</definition>
        <argsstring>(const Instruction *cs)</argsstring>
        <name>getCallICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get/Add a call node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="228" column="26" bodyfile="include/Graphs/ICFG.h" bodystart="228" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ac069357c3f5140fcb0d6163c944638fd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>CallBlockNode* SVF::ICFG::addCallICFGNode</definition>
        <argsstring>(const Instruction *cs)</argsstring>
        <name>addCallICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="235" column="26" bodyfile="include/Graphs/ICFG.h" bodystart="235" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1ae3bd3bf29b3dac286b93be22cbb60b2c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
        <definition>RetBlockNode* SVF::ICFG::getRetICFGNode</definition>
        <argsstring>(const Instruction *cs)</argsstring>
        <name>getRetICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get/Add a return node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="244" column="25" bodyfile="include/Graphs/ICFG.h" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_i_c_f_g_1a45891a968511d4779288a1a0aa089619" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
        <definition>RetBlockNode* SVF::ICFG::addRetICFGNode</definition>
        <argsstring>(const Instruction *cs)</argsstring>
        <name>addRetICFGNode</name>
        <param>
          <type>const Instruction *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ICFG.h" line="251" column="25" bodyfile="include/Graphs/ICFG.h" bodystart="251" bodyend="259"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::ICFGPrinter</label>
        <link refid="class_s_v_f_1_1_i_c_f_g_printer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/ICFG.h" line="46" column="1" bodyfile="include/Graphs/ICFG.h" bodystart="47" bodyend="261"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_i_c_f_g_1abde033687317d47909ee45db7501723f" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addCallEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ac069357c3f5140fcb0d6163c944638fd" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>addCallICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a8b038782880ae8950076e2c104bc4b18" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addConditionalIntraEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a37720720adf125ea4f8c12c4bdf41cdd" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>addFunEntryICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a7874a7a92beb17fd5a4a9575cb183975" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>addFunExitICFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a462f590c2604184d69e4efe3d85a7b5b" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a15816a82d8c33a066009440dce6ee973" prot="public" virt="virtual"><scope>SVF::ICFG</scope><name>addICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a9c9984f07859c7b0a4cc05ef7acf28af" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>addIntraBlockICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1adafd8bbb91507a9a78a3f16305812afc" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addIntraEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a4a44849b596c89ab14d2e5f18366e848" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>addRetEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a45891a968511d4779288a1a0aa089619" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>addRetICFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a70421a19a494eb6131a9ae72ef1a64d6" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>checkIntraEdgeParents</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a94e4de04d8da10a19ab65c22e257b82b" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1af0434d6ffd247eeaf73b9294e659a3f9" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>CSToCallNodeMap</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a13694bd3990dd29ebce641a7c827a370" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>CSToCallNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a0e43308038663c10667177238b23ab3e" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>CSToRetNodeMap</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a3d519765c4bbc1479b64ef211f845edd" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>CSToRetNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1adf0a205f4f62f33c5fa8f2d544aac633" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a999956500bbd605326531480546db9ba" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a69076849bd256fb0ca59711a59a7c092" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>FunToFunEntryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a05067e577bfcdcd37b94198ee97e7eb7" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>FunToFunEntryNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ab87a90adae3e9db06da7ecc0bd9d920f" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>FunToFunExitNodeMap</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a456ecdf6f28e6325613833ac07a9ca4d" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>FunToFunExitNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ab7b0b3088b46ad65451905cc4f567a7b" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getBlockICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a7d10e8a815c836a070d35850f817a18c" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getCallBlockNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a288c5cc9fb6595d367f23d1c0c05a57a" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>getCallICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ae1ef14cdda27a2062c4c454750444108" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getFunEntryBlockNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5d75af18ed4228b89a4bb4e2b0b97925" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>getFunEntryICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1aa33426d57dc150956902945a17a29bcb" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getFunExitBlockNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a63479291b885344630ebf024d537ac19" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>getFunExitICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ae3b8f1b45c75b5fc231da76d3a49ad57" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getGlobalBlockNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5dd4ac55123501c47c628adcf27e2475" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5f2c0aaba07d6fdd63058da0fb60ca8b" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5f03c3befe1df9fa62221fc6989d387a" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>getIntraBlockICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a485fcd76a8a864c9b686e68a3ca66dfc" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getIntraBlockNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a6d66c83cb1656d0f8ec8b8b65a9e9c41" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getRetBlockNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ae3bd3bf29b3dac286b93be22cbb60b2c" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>getRetICFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a37ec47cd95cf25b18720c4267a9fd40c" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>globalBlockNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a16c2ed1f9e28c84669b14dc48fb3c01a" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>hasICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a86535e50d1feba706b19491d905baef1" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>hasInterICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1aa662baae5682ef6ec5084fa4147c9709" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>hasIntraICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a29fb70d6638765ce291c5a8a11fbea64" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>hasThreadICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a683f33b8ad507a33809511954c7c1acb" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>ICFG</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a20ea3e37e9c3c7d3138ff593041a8e47" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>ICFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1af1fe5708c6f67fd87fa1edaa6c73ff5d" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>ICFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::ICFG</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a23f905d849553d7ad652e9a8f1bfacd1" prot="private" virt="non-virtual"><scope>SVF::ICFG</scope><name>InstToBlockNodeMap</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a8be76aeee4701852f907b5c93a207c38" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>InstToBlockNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a498f84068ef643a94970aeb171607e31" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a534625b10673efe5b0f344bfebf9b3cf" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>removeICFGEdge</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a403cd10f7c01cc879d803a9759e729cb" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>removeICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5df6061b65d021cd73c66592ec79f052" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>totalICFGNode</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1a5a00682b75726cacc1b4d88bbf40c824" prot="public" virt="non-virtual"><scope>SVF::ICFG</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::ICFG</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_i_c_f_g_1ae02e30b2d9c2cd070ba326b782fa8520" prot="public" virt="virtual"><scope>SVF::ICFG</scope><name>~ICFG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
