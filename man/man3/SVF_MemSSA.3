.TH "SVF::MemSSA" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::MemSSA
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBMemRegion::Condition\fP \fBCondition\fP"
.br
.RI "define condition here changes needed if we add new type "
.ti -1c
.RI "typedef \fBMSSAMU\fP< \fBCondition\fP > \fBMU\fP"
.br
.ti -1c
.RI "typedef \fBRetMU\fP< \fBCondition\fP > \fBRETMU\fP"
.br
.ti -1c
.RI "typedef \fBLoadMU\fP< \fBCondition\fP > \fBLOADMU\fP"
.br
.ti -1c
.RI "typedef \fBCallMU\fP< \fBCondition\fP > \fBCALLMU\fP"
.br
.ti -1c
.RI "typedef \fBMSSACHI\fP< \fBCondition\fP > \fBCHI\fP"
.br
.ti -1c
.RI "typedef \fBEntryCHI\fP< \fBCondition\fP > \fBENTRYCHI\fP"
.br
.ti -1c
.RI "typedef \fBStoreCHI\fP< \fBCondition\fP > \fBSTORECHI\fP"
.br
.ti -1c
.RI "typedef \fBCallCHI\fP< \fBCondition\fP > \fBCALLCHI\fP"
.br
.ti -1c
.RI "typedef \fBMSSAPHI\fP< \fBCondition\fP > \fBPHI\fP"
.br
.ti -1c
.RI "typedef \fBMSSADEF\fP \fBMDEF\fP"
.br
.ti -1c
.RI "typedef Set< \fBMU\fP * > \fBMUSet\fP"
.br
.ti -1c
.RI "typedef Set< \fBCHI\fP * > \fBCHISet\fP"
.br
.ti -1c
.RI "typedef Set< \fBPHI\fP * > \fBPHISet\fP"
.br
.ti -1c
.RI "typedef \fBMRGenerator::MRSet\fP \fBMRSet\fP"
.br
.RI "Define mem region set\&. "
.ti -1c
.RI "typedef std::vector< const \fBMemRegion\fP * > \fBMRVector\fP"
.br
.ti -1c
.RI "typedef Map< const \fBLoadPE\fP *, MUSet > \fBLoadToMUSetMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBStorePE\fP *, CHISet > \fBStoreToChiSetMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBCallBlockNode\fP *, MUSet > \fBCallSiteToMUSetMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBCallBlockNode\fP *, CHISet > \fBCallSiteToCHISetMap\fP"
.br
.ti -1c
.RI "typedef Map< const BasicBlock *, PHISet > \fBBBToPhiSetMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, CHISet > \fBFunToEntryChiSetMap\fP"
.br
.RI "Map from fun to its entry chi set and return mu set\&. "
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, MUSet > \fBFunToReturnMuSetMap\fP"
.br
.ti -1c
.RI "typedef std::vector< const BasicBlock * > \fBBBList\fP"
.br
.RI "For phi insertion\&. "
.ti -1c
.RI "typedef Map< const BasicBlock *, \fBMRSet\fP > \fBBBToMRSetMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBMemRegion\fP *, \fBBBList\fP > \fBMemRegToBBsMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBMemRegion\fP *, std::vector< \fBMRVer\fP * > > \fBMemRegToVerStackMap\fP"
.br
.RI "For SSA renaming\&. "
.ti -1c
.RI "typedef Map< const \fBMemRegion\fP *, MRVERSION > \fBMemRegToCounterMap\fP"
.br
.ti -1c
.RI "typedef PAG::PAGEdgeList \fBPAGEdgeList\fP"
.br
.RI "\fBPAG\fP edge list\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static double \fBtimeOfGeneratingMemRegions\fP = 0"
.br
.RI "Statistics\&. "
.ti -1c
.RI "static double \fBtimeOfCreateMUCHI\fP = 0"
.br
.RI "Time for generating mu/chi for load/store/calls\&. "
.ti -1c
.RI "static double \fBtimeOfInsertingPHI\fP = 0"
.br
.RI "Time for inserting phis\&. "
.ti -1c
.RI "static double \fBtimeOfSSARenaming\fP = 0"
.br
.RI "Time for SSA rename\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBcreateMUCHI\fP (const \fBSVFFunction\fP &fun)"
.br
.RI "Create mu chi for candidate regions in a function\&. "
.ti -1c
.RI "virtual void \fBinsertPHI\fP (const \fBSVFFunction\fP &fun)"
.br
.RI "Insert phi for candidate regions in a fucntion\&. "
.ti -1c
.RI "virtual void \fBSSARename\fP (const \fBSVFFunction\fP &fun)"
.br
.RI "SSA rename for a function\&. "
.ti -1c
.RI "virtual void \fBSSARenameBB\fP (const BasicBlock &bb)"
.br
.RI "SSA rename for a basic block\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBBVDataPTAImpl\fP * \fBpta\fP"
.br
.ti -1c
.RI "\fBMRGenerator\fP * \fBmrGen\fP"
.br
.ti -1c
.RI "\fBDominanceFrontier\fP * \fBdf\fP"
.br
.ti -1c
.RI "DominatorTree * \fBdt\fP"
.br
.ti -1c
.RI "\fBMemSSAStat\fP * \fBstat\fP"
.br
.in -1c
.in +1c
.ti -1c
.RI "\fBMemSSA\fP (\fBBVDataPTAImpl\fP *p, bool ptrOnlyMSSA)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~MemSSA\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBPAG\fP * \fBgetPAG\fP ()"
.br
.RI "Return \fBPAG\fP\&. "
.ti -1c
.RI "\fBBVDataPTAImpl\fP * \fBgetPTA\fP () const"
.br
.RI "Return PTA\&. "
.ti -1c
.RI "\fBMRGenerator\fP * \fBgetMRGenerator\fP ()"
.br
.RI "Return \fBMRGenerator\fP\&. "
.ti -1c
.RI "virtual void \fBbuildMemSSA\fP (const \fBSVFFunction\fP &fun, \fBDominanceFrontier\fP *, DominatorTree *)"
.br
.RI "We start from here\&. "
.ti -1c
.RI "void \fBperformStat\fP ()"
.br
.RI "Perform statistics\&. "
.ti -1c
.RI "bool \fBhasMU\fP (const \fBPAGEdge\fP *inst) const"
.br
.RI "Has mu/chi methods\&. "
.ti -1c
.RI "bool \fBhasCHI\fP (const \fBPAGEdge\fP *inst) const"
.br
.ti -1c
.RI "bool \fBhasMU\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "bool \fBhasCHI\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "bool \fBhasFuncEntryChi\fP (const \fBSVFFunction\fP *fun) const"
.br
.RI "Has function entry chi or return mu\&. "
.ti -1c
.RI "bool \fBhasReturnMu\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "CHISet & \fBgetFuncEntryChiSet\fP (const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "MUSet & \fBgetReturnMuSet\fP (const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "MUSet & \fBgetMUSet\fP (const \fBLoadPE\fP *ld)"
.br
.RI "Get methods of mu/chi/phi\&. "
.ti -1c
.RI "CHISet & \fBgetCHISet\fP (const \fBStorePE\fP *st)"
.br
.ti -1c
.RI "MUSet & \fBgetMUSet\fP (const \fBCallBlockNode\fP *cs)"
.br
.ti -1c
.RI "CHISet & \fBgetCHISet\fP (const \fBCallBlockNode\fP *cs)"
.br
.ti -1c
.RI "PHISet & \fBgetPHISet\fP (const BasicBlock *bb)"
.br
.ti -1c
.RI "bool \fBhasPHISet\fP (const BasicBlock *bb) const"
.br
.ti -1c
.RI "\fBLoadToMUSetMap\fP & \fBgetLoadToMUSetMap\fP ()"
.br
.ti -1c
.RI "StoreToChiSetMap & \fBgetStoreToChiSetMap\fP ()"
.br
.ti -1c
.RI "FunToReturnMuSetMap & \fBgetFunToRetMuSetMap\fP ()"
.br
.ti -1c
.RI "\fBFunToEntryChiSetMap\fP & \fBgetFunToEntryChiSetMap\fP ()"
.br
.ti -1c
.RI "CallSiteToMUSetMap & \fBgetCallSiteToMuSetMap\fP ()"
.br
.ti -1c
.RI "CallSiteToCHISetMap & \fBgetCallSiteToChiSetMap\fP ()"
.br
.ti -1c
.RI "BBToPhiSetMap & \fBgetBBToPhiSetMap\fP ()"
.br
.ti -1c
.RI "u32_t \fBgetLoadMuNum\fP () const"
.br
.RI "Stat methods\&. "
.ti -1c
.RI "u32_t \fBgetStoreChiNum\fP () const"
.br
.ti -1c
.RI "u32_t \fBgetFunEntryChiNum\fP () const"
.br
.ti -1c
.RI "u32_t \fBgetFunRetMuNum\fP () const"
.br
.ti -1c
.RI "u32_t \fBgetCallSiteMuNum\fP () const"
.br
.ti -1c
.RI "u32_t \fBgetCallSiteChiNum\fP () const"
.br
.ti -1c
.RI "u32_t \fBgetBBPhiNum\fP () const"
.br
.ti -1c
.RI "void \fBdumpMSSA\fP (\fBraw_ostream\fP &Out=SVFUtil::outs())"
.br
.RI "Print Memory SSA\&. "
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "typedef Map<const \fBLoadPE\fP*, MUSet> \fBSVF::MemSSA::LoadToMUSetMap\fP"
Map loads/stores to its mem regions, TODO:visitAtomicCmpXchgInst, visitAtomicRMWInst?? 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MemSSA::MemSSA (\fBBVDataPTAImpl\fP * p, bool ptrOnlyMSSA)"

.PP
Constructor\&. Constructor Generate whole program memory regions
.SH "Member Function Documentation"
.PP 
.SS "void MemSSA::buildMemSSA (const \fBSVFFunction\fP & fun, \fBDominanceFrontier\fP * f, DominatorTree * t)\fC [virtual]\fP"

.PP
We start from here\&. Start building memory SSA Create mus/chis for loads/stores/calls for memory regions
.PP
Insert PHI for memory regions
.PP
SSA rename for memory regions
.SS "void MemSSA::createMUCHI (const \fBSVFFunction\fP & fun)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Create mu chi for candidate regions in a function\&. Create mu/chi according to memory regions collect used mrs in usedRegs and construction map from region to BB for prune SSA phi insertion get all reachable basic blocks from function entry ignore dead basic blocks
.PP
if the function does not have a reachable return instruction from function entry then we won't create return mu for it
.SS "void MemSSA::dumpMSSA (\fBraw_ostream\fP & Out = \fCSVFUtil::outs()\fP)"

.PP
Print Memory SSA\&. Print SSA 
.SS "u32_t MemSSA::getBBPhiNum () const"
Get PHI numbers 
.SS "u32_t MemSSA::getCallSiteChiNum () const"
Get \fBCallCHI\fP numbers 
.SS "u32_t MemSSA::getCallSiteMuNum () const"
Get \fBCallMU\fP numbers 
.SS "u32_t MemSSA::getFunEntryChiNum () const"
Get \fBEntryCHI\fP numbers 
.SS "u32_t MemSSA::getFunRetMuNum () const"
Get \fBRetMU\fP numbers 
.SS "u32_t MemSSA::getLoadMuNum () const"

.PP
Stat methods\&. Get loadMU numbers 
.SS "u32_t MemSSA::getStoreChiNum () const"
Get \fBStoreCHI\fP numbers 
.SS "void MemSSA::performStat ()"

.PP
Perform statistics\&. Perform statistics 
.SS "void MemSSA::SSARename (const \fBSVFFunction\fP & fun)\fC [protected]\fP, \fC [virtual]\fP"

.PP
SSA rename for a function\&. SSA construction algorithm 
.SS "void MemSSA::SSARenameBB (const BasicBlock & bb)\fC [protected]\fP, \fC [virtual]\fP"

.PP
SSA rename for a basic block\&. Renaming for each memory regions See the renaming algorithm in book Engineering A Compiler (Figure 9\&.12) 
.SH "Member Data Documentation"
.PP 
.SS "double MemSSA::timeOfGeneratingMemRegions = 0\fC [static]\fP"

.PP
Statistics\&. Time for allocating regions\&.
.PP
Time for allocating regions 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
