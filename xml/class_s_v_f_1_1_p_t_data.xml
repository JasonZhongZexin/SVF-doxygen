<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_p_t_data" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::PTData</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_mutable_p_t_data" prot="public" virt="non-virtual">SVF::MutablePTData&lt; VersionedKey, Datum, Data &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_versioned_p_t_data" prot="public" virt="non-virtual">SVF::VersionedPTData&lt; NodeID, NodeID, PointsTo, VersionedVar &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_d_f_p_t_data" prot="public" virt="non-virtual">SVF::DFPTData&lt; Key, Datum, Data &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_diff_p_t_data" prot="public" virt="non-virtual">SVF::DiffPTData&lt; Key, Datum, Data &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_mutable_p_t_data" prot="public" virt="non-virtual">SVF::MutablePTData&lt; Key, Datum, Data &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_versioned_p_t_data" prot="public" virt="non-virtual">SVF::VersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</derivedcompoundref>
    <includes refid="_abstract_points_to_d_s_8h" local="no">AbstractPointsToDS.h</includes>
    <templateparamlist>
      <param>
        <type>typename Key</type>
      </param>
      <param>
        <type>typename Datum</type>
      </param>
      <param>
        <type>typename Data</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" prot="public" static="no" strong="no">
        <type></type>
        <name>PTDataTy</name>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a48ea0972c2495007d758a0674fd958a0" prot="public">
          <name>Base</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848ad89e3219f31ba0f1424c1a219565b7b0" prot="public">
          <name>MutBase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a12db671c6effedfcd48f3a390a3cea39" prot="public">
          <name>Diff</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a31e94f61c6e2166b4c205fe03a4e912d" prot="public">
          <name>MutDiff</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a9fd234f8ac4f0615ef1bc2f9c02e00ab" prot="public">
          <name>DataFlow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a13666448dbecfb781405aff71a674d4e" prot="public">
          <name>MutDataFlow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a85136c4ad93cefd1d2371cc92aa2423d" prot="public">
          <name>IncMutDataFlow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a4fcfbbd2f9f50444a49c4cc4065b0aeb" prot="public">
          <name>Versioned</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a97fea46c57fe00f026da2cd3f510e785" prot="public">
          <name>MutVersioned</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of a points-to data structures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="43" column="5" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_t_data_1ae53ed7301014b43bf1d215208a702a8b" prot="public" static="no">
        <type>Set&lt; Key &gt;</type>
        <definition>typedef Set&lt;Key&gt; SVF::PTData&lt; Key, Datum, Data &gt;::KeySet</definition>
        <argsstring></argsstring>
        <name>KeySet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="40" column="17" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_t_data_1aea15e71384244f3ad556e9924a1d0d21" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::PTData&lt; Key, Datum, Data &gt;::rev</definition>
        <argsstring></argsstring>
        <name>rev</name>
        <briefdescription>
<para>Whether we maintain reverse points-to sets or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="92" column="10" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_t_data_1a11120561456b00e1a6210e5105e8f718" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" kindref="member">PTDataTy</ref></type>
        <definition>PTDataTy SVF::PTData&lt; Key, Datum, Data &gt;::ptdTy</definition>
        <argsstring></argsstring>
        <name>ptdTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="93" column="14" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a4481e26740c77bd69239552badf85614" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::PTData&lt; Key, Datum, Data &gt;::PTData</definition>
        <argsstring>(bool reversePT=true, PTDataTy ty=PTDataTy::Base)</argsstring>
        <name>PTData</name>
        <param>
          <type>bool</type>
          <declname>reversePT</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" kindref="member">PTDataTy</ref></type>
          <declname>ty</declname>
          <defval>PTDataTy::Base</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="56" column="5" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a982153a8d2300d18549a7a6c4235c52d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::PTData&lt; Key, Datum, Data &gt;::~PTData</definition>
        <argsstring>()</argsstring>
        <name>~PTData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="58" column="13" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a22b25cb7e65dd9989dbb4c1819d68dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" kindref="member">PTDataTy</ref></type>
        <definition>PTDataTy SVF::PTData&lt; Key, Datum, Data &gt;::getPTDTY</definition>
        <argsstring>() const</argsstring>
        <name>getPTDTY</name>
        <briefdescription>
<para>Get the type of points-to data structure that this is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="61" column="21" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a3cdec1f0be962716508d3922dce058d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::PTData&lt; Key, Datum, Data &gt;::clear</definition>
        <argsstring>()=0</argsstring>
        <name>clear</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a1defaebec7aef83dbac6066259f7fe24">clear</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a1defaebec7aef83dbac6066259f7fe24">clear</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1ae7cb445b8076f9a92b0bd5800fdba841">clear</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a77f96a1d0f0e325de2c2da3fe4436025">clear</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1a3b7b4cf2be2c5c560c07fbf37eb7bbe2">clear</reimplementedby>
        <briefdescription>
<para>Clears all points-to sets as if nothing is stored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="67" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a86a93186b51b6ce9dccffecad8381281" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const Data &amp;</type>
        <definition>virtual const Data&amp; SVF::PTData&lt; Key, Datum, Data &gt;::getPts</definition>
        <argsstring>(const Key &amp;var)=0</argsstring>
        <name>getPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a9221ae9cf4e9f992b5a60637d64668c6">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1a4791b7872b0e4afdf30ba9a5014e0ba0">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a0628fe9394d3cec433c44cddad09a9f5">getPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1a1fc03ad41eed39e45073def0a5cc039f">getPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Get points-to set of var. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="70" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a5ac0805846fb6bac6c58c0fefb106c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const KeySet &amp;</type>
        <definition>virtual const KeySet&amp; SVF::PTData&lt; Key, Datum, Data &gt;::getRevPts</definition>
        <argsstring>(const Datum &amp;datum)=0</argsstring>
        <name>getRevPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1abd663d8229d8cb3bd011886777e6d51a">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1abd663d8229d8cb3bd011886777e6d51a">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1a0f85a784005e5315ed80368bf7478c6d">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1aa4195a2fb1bd66a23ebf3a98475436f3">getRevPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1a84556624efefac28863652a17a69cd4d">getRevPts</reimplementedby>
        <param>
          <type>const Datum &amp;</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
<para>Get reverse points-to set of datum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="72" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a1365146d19ee927f870a7384c0d1db6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::PTData&lt; Key, Datum, Data &gt;::addPts</definition>
        <argsstring>(const Key &amp;var, const Datum &amp;element)=0</argsstring>
        <name>addPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1ad5b17668c526e8db4f77cb5f3f3be5f1">addPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1ac13a2ee39d95c099bacc00a2c6de605c">addPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1af3baa17b1844ebfaf551cbf2c759c7fe">addPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const Datum &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Adds element to the points-to set associated with var. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="75" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a482eda0b2ea6a8e1326ee1a0c25c1fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::PTData&lt; Key, Datum, Data &gt;::unionPts</definition>
        <argsstring>(const Key &amp;dstVar, const Key &amp;srcVar)=0</argsstring>
        <name>unionPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a55a05edae50e365c1da8dee3bec2ea9b">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1a3f7cf2f9904f393d441e8e3fc372b794">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1ae62e6fb9f9d26a2b217d571f22cbaefa">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1a88fe993ecc80719d3c77dd81e721b324">unionPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <briefdescription>
<para>Performs pts(dstVar) = pts(dstVar) U pts(srcVar). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="78" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1ab378c0f2171f6de9b8aa076b43f88e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::PTData&lt; Key, Datum, Data &gt;::unionPts</definition>
        <argsstring>(const Key &amp;dstVar, const Data &amp;srcData)=0</argsstring>
        <name>unionPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a6a9c045a3b68d543c5066388ad3a2f86">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1ae0d340fdd8e5cf57eddad6f27a9651dc">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1ae54ae1abd4317922f59a212d835e2f5b">unionPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1a74ce39fc0ccd52e6d05da6f561c76e9c">unionPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <param>
          <type>const Data &amp;</type>
          <declname>srcData</declname>
        </param>
        <briefdescription>
<para>Performs pts(dstVar) = pts(dstVar) U srcData. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="80" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a2ee28cb51800a57a7646d72f1b92e6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::PTData&lt; Key, Datum, Data &gt;::clearPts</definition>
        <argsstring>(const Key &amp;var, const Datum &amp;element)=0</argsstring>
        <name>clearPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1af2259ec9cda00c8421d5a6fa26f526cb">clearPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1aaeb78d084ff0e9f1b418d47ad0e99cd3">clearPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1ae8541f1643aa9c4345119fdddd9e4b75">clearPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a23c1faea6b1f5f4a236d64d4ba721210">clearPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const Datum &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Clears element from the points-to set of var. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="83" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1a4a27923265487dac1eede5a57cc0c9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::PTData&lt; Key, Datum, Data &gt;::clearFullPts</definition>
        <argsstring>(const Key &amp;var)=0</argsstring>
        <name>clearFullPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1ab77bc3cc94a18e56bbc5091b53f1c946">clearFullPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1a7ac688a755ea2d9fdcd4369cd6564887">clearFullPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1ac00461122968505b7c308013e50bbb99">clearFullPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1aadc5ef1807dc08cbae610af022ab4440">clearFullPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Fully clears the points-to set of var. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="85" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_data_1affb0e613229679f926c52c37b3c141ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::PTData&lt; Key, Datum, Data &gt;::dumpPTData</definition>
        <argsstring>()=0</argsstring>
        <name>dumpPTData</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1ad9a85e50883a1d93e5d456046bd0812d">dumpPTData</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_p_t_data_1ad9a85e50883a1d93e5d456046bd0812d">dumpPTData</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_diff_p_t_data_1a60c31729615d24807d2ea817a68b208d">dumpPTData</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a1e485ecbd42ea54b91a4f243c98fe5f2">dumpPTData</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_versioned_p_t_data_1aea5eee3d5049a9c17675758f67a255d3">dumpPTData</reimplementedby>
        <briefdescription>
<para>Dump stored keys and points-to sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="88" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Basic points-to data structure Given a key (variable/condition variable), return its points-to data (pts/condition pts) It is designed flexible for different context, heap and path sensitive analysis Context Insensitive Key --&gt; Variable, Data --&gt; PointsTo Context sensitive: Key --&gt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref>, Data --&gt; PointsTo Heap sensitive: Key --&gt; Variable Data --&gt; <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref> Context and heap sensitive: Key --&gt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref>, Data --&gt; <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref></para>
<para>This class is abstract to allow for multiple methods of actually storing points-to sets. Key: &quot;owning&quot; variable of a points-to set. Datum: elements in points-to sets. Data: the points-to set; a collection of Datums. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>SVF::DFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_d_f_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_d_f_p_t_data"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::MutablePTData&lt; VersionedKey, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::IncMutableDFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::DiffPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_diff_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::MutablePTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::PTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_p_t_data"/>
      </node>
      <node id="8">
        <label>SVF::MutableDiffPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_diff_p_t_data"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_versioned_p_t_data"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SVF::VersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</label>
        <link refid="class_s_v_f_1_1_versioned_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::VersionedPTData&lt; NodeID, NodeID, PointsTo, VersionedVar &gt;</label>
        <link refid="class_s_v_f_1_1_versioned_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/MemoryModel/AbstractPointsToDS.h" line="37" column="1" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="38" bodyend="94"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_t_data_1a1365146d19ee927f870a7384c0d1db6b" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>addPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a48ea0972c2495007d758a0674fd958a0" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>Base</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a3cdec1f0be962716508d3922dce058d5" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>clear</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a4a27923265487dac1eede5a57cc0c9a5" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>clearFullPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a2ee28cb51800a57a7646d72f1b92e6ac" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a9fd234f8ac4f0615ef1bc2f9c02e00ab" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>DataFlow</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a12db671c6effedfcd48f3a390a3cea39" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>Diff</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1affb0e613229679f926c52c37b3c141ea" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>dumpPTData</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a22b25cb7e65dd9989dbb4c1819d68dee" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>getPTDTY</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a86a93186b51b6ce9dccffecad8381281" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a5ac0805846fb6bac6c58c0fefb106c5f" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a85136c4ad93cefd1d2371cc92aa2423d" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>IncMutDataFlow</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1ae53ed7301014b43bf1d215208a702a8b" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>KeySet</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848ad89e3219f31ba0f1424c1a219565b7b0" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>MutBase</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a13666448dbecfb781405aff71a674d4e" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>MutDataFlow</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a31e94f61c6e2166b4c205fe03a4e912d" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>MutDiff</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a97fea46c57fe00f026da2cd3f510e785" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>MutVersioned</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a4481e26740c77bd69239552badf85614" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>PTData</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>PTDataTy</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a11120561456b00e1a6210e5105e8f718" prot="protected" virt="non-virtual"><scope>SVF::PTData</scope><name>ptdTy</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1aea15e71384244f3ad556e9924a1d0d21" prot="protected" virt="non-virtual"><scope>SVF::PTData</scope><name>rev</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a482eda0b2ea6a8e1326ee1a0c25c1fdc" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1ab378c0f2171f6de9b8aa076b43f88e89" prot="public" virt="pure-virtual"><scope>SVF::PTData</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a4fcfbbd2f9f50444a49c4cc4065b0aeb" prot="public" virt="non-virtual"><scope>SVF::PTData</scope><name>Versioned</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a982153a8d2300d18549a7a6c4235c52d" prot="public" virt="virtual"><scope>SVF::PTData</scope><name>~PTData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
