<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_v_f_g_8h" kind="file" language="C++">
    <compoundname>VFG.h</compoundname>
    <includes refid="_v_f_g_node_8h" local="yes">Graphs/VFGNode.h</includes>
    <includes refid="_v_f_g_edge_8h" local="yes">Graphs/VFGEdge.h</includes>
    <includedby refid="_s_v_f_g_8h" local="yes">include/Graphs/SVFG.h</includedby>
    <includedby refid="_v_f_g_8cpp" local="yes">lib/Graphs/VFG.cpp</includedby>
    <includedby refid="_type_analysis_8cpp" local="yes">lib/WPA/TypeAnalysis.cpp</includedby>
    <incdepgraph>
      <node id="65">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>list</label>
      </node>
      <node id="61">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>system_error</label>
      </node>
      <node id="58">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="4">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="2">
        <label>Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="80">
        <label>assert.h</label>
      </node>
      <node id="38">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="41">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="12">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="11">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="72">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="78">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="44">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="83">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="74">
        <label>string</label>
      </node>
      <node id="85">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="94">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="45">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="17">
        <label>unordered_set</label>
      </node>
      <node id="93">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="73">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="10">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="95">
        <label>limits.h</label>
      </node>
      <node id="43">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="57">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="1">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="66">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="71">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="27">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="79">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stack</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="26">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="30">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="59">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="69">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="24">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="3">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>time.h</label>
      </node>
      <node id="86">
        <label>math.h</label>
      </node>
      <node id="99">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="76">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="54">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="81">
        <label>cstdlib</label>
      </node>
      <node id="60">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="53">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="21">
        <label>deque</label>
      </node>
      <node id="68">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="19">
        <label>unordered_map</label>
      </node>
      <node id="51">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="9">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="47">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="52">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="62">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="98">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="84">
        <label>stdio.h</label>
      </node>
      <node id="23">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="48">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="39">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="97">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>memory</label>
      </node>
      <node id="28">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="42">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="46">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="26">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="16">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="23">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="7">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="10">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="1">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="11">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="21">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="15">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="19">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="22">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_v_f_g" prot="public">SVF::VFG</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::VFGNode * &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4_01_4" prot="public">llvm::GraphTraits&lt; Inverse&lt; SVF::VFGNode * &gt; &gt;</innerclass>
    <innerclass refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_01_5_01_4" prot="public">llvm::GraphTraits&lt; SVF::VFG * &gt;</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <innernamespace refid="namespacellvm">llvm</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>VFG.h<sp/>----------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2018&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>VFG.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>18<sp/>Sep.<sp/>2018</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_UTIL_VFG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_UTIL_VFG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Graphs/VFGNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Graphs/VFGEdge.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PointerAnalysis;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VFGStat;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CallBlockNode;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="namespace_s_v_f_1ab4f1d8a6715e791c94970e6f87b18f8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_graph" kindref="compound">GenericGraph&lt;VFGNode,VFGEdge&gt;</ref><sp/><ref refid="namespace_s_v_f_1ab4f1d8a6715e791c94970e6f87b18f8f" kindref="member">GenericVFGTy</ref>;</highlight></codeline>
<codeline lineno="48" refid="class_s_v_f_1_1_v_f_g" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_v_f_g" kindref="compound">VFG</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_graph" kindref="compound">GenericVFGTy</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ORIGSVFGK,<sp/>PTRONLYSVFGK</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;NodeID,<sp/>VFGNode<sp/>*&gt;<sp/>VFGNodeIDToNodeMapTy;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;VFGNode*&gt;<sp/>VFGNodeSet;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>NodeID&gt;<sp/>PAGNodeToDefMapTy;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;std::pair&lt;NodeID,const<sp/>CallBlockNode*&gt;,<sp/><ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref><sp/>*&gt;<sp/>PAGNodeToActualParmMapTy;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>ActualRetVFGNode<sp/>*&gt;<sp/>PAGNodeToActualRetMapTy;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>FormalParmVFGNode<sp/>*&gt;<sp/>PAGNodeToFormalParmMapTy;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>FormalRetVFGNode<sp/>*&gt;<sp/>PAGNodeToFormalRetMapTy;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGEdge*,<sp/>StmtVFGNode*&gt;<sp/>PAGEdgeToStmtVFGNodeMapTy;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>IntraPHIVFGNode*&gt;<sp/>PAGNodeToPHIVFGNodeMapTy;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>BinaryOPVFGNode*&gt;<sp/>PAGNodeToBinaryOPVFGNodeMapTy;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>UnaryOPVFGNode*&gt;<sp/>PAGNodeToUnaryOPVFGNodeMapTy;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>PAGNode*,<sp/>CmpVFGNode*&gt;<sp/>PAGNodeToCmpVFGNodeMapTy;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>SVFFunction*,<sp/>VFGNodeSet<sp/>&gt;<sp/>FunToVFGNodesMapTy;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FormalParmVFGNode::CallPESet<sp/>CallPESet;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FormalRetVFGNode::RetPESet<sp/>RetPESet;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VFGEdge::VFGEdgeSetTy<sp/>VFGEdgeSetTy;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VFGEdge::SVFGEdgeSetTy<sp/>SVFGEdgeSetTy;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VFGEdge::VFGEdgeSetTy::iterator<sp/>VFGNodeIter;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VFGNodeIDToNodeMapTy::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VFGNodeIDToNodeMapTy::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PAG::PAGEdgeSet<sp/>PAGEdgeSet;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>VFGNode*&gt;<sp/>GlobalVFGNodeSet;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>PAGNode*&gt;<sp/>PAGNodeSet;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>totalVFGNode;</highlight></codeline>
<codeline lineno="86" refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToDefMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToActualParmMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" kindref="member">PAGNodeToActualParmMap</ref>;<sp/></highlight></codeline>
<codeline lineno="88" refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToActualRetMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" kindref="member">PAGNodeToActualRetMap</ref>;<sp/></highlight></codeline>
<codeline lineno="89" refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToFormalParmMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" kindref="member">PAGNodeToFormalParmMap</ref>;<sp/></highlight></codeline>
<codeline lineno="90" refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToFormalRetMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" kindref="member">PAGNodeToFormalRetMap</ref>;<sp/></highlight></codeline>
<codeline lineno="91" refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToPHIVFGNodeMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" kindref="member">PAGNodeToIntraPHIVFGNodeMap</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92" refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToBinaryOPVFGNodeMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" kindref="member">PAGNodeToBinaryOPVFGNodeMap</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToUnaryOPVFGNodeMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" kindref="member">PAGNodeToUnaryOPVFGNodeMap</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGNodeToCmpVFGNodeMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" kindref="member">PAGNodeToCmpVFGNodeMap</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGEdgeToStmtVFGNodeMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FunToVFGNodesMapTy<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>;<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalVFGNodeSet<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" kindref="member">globalVFGNodes</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref>*<sp/>callgraph;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref><sp/>kind;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dumpVFG;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69" kindref="member">destroy</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1" kindref="member">VFG</ref>(<ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref>*<sp/>callgraph,<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref><sp/>k<sp/>=<sp/>ORIGSVFGK);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" kindref="member">~VFG</ref>()</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1af5005136743913d760d7402bbd308c69" kindref="member">destroy</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" kindref="member">getKind</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="119"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kind;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" kindref="member">isPtrOnlySVFG</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kind<sp/>==<sp/>PTRONLYSVFGK;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" kindref="member">setDumpVFG</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpVFG<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" kindref="member">getDumpVFG</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="137"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumpVFG;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" kindref="member">getPAG</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="143"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pag;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" kindref="member">getCallGraph</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="149"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callgraph;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" kindref="member">getVFGNode</ref>(NodeID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" kindref="member">getGNode</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" kindref="member">hasVFGNode</ref>(NodeID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="161"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" kindref="member">hasGNode</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165" refid="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GlobalVFGNodeSet&amp;<sp/><ref refid="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" kindref="member">getGlobalVFGNodes</ref>()</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" kindref="member">globalVFGNodes</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48" kindref="member">getVFGEdge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>dst,<sp/><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref><sp/>kind);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aee3d0c4ed32bde425f33281f248b7dd2" kindref="member">dump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b" kindref="member">updateCallGraph</ref>(<ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab" kindref="member">connectCallerAndCallee</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>callee,<sp/>VFGEdgeSetTy&amp;<sp/>edges);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"></codeline>
<codeline lineno="184" refid="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CallSiteID<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" kindref="member">getCallSiteID</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>func)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="185"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callgraph-&gt;getCallSiteID(cs,<sp/>func);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>getCallSite(CallSiteID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="189"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callgraph-&gt;getCallSite(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"></codeline>
<codeline lineno="195" refid="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" kindref="member">getDefVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="196"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" kindref="member">getVFGNode</ref>(getDef(pagNode));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>VFG<sp/>node,<sp/>return<sp/>its<sp/>left<sp/>hand<sp/>side<sp/>top<sp/>level<sp/>pointer<sp/>(PAGnode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac" kindref="member">getLHSTopLevPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>node)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"></codeline>
<codeline lineno="205" refid="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" kindref="member">getStmtVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>pagEdge)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="206"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGEdgeToStmtVFGNodeMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>.find(pagEdge);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;StmtVFGNode<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_p_h_i_v_f_g_node" kindref="compound">IntraPHIVFGNode</ref>*<sp/>getIntraPHIVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="212"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToPHIVFGNodeMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" kindref="member">PAGNodeToIntraPHIVFGNodeMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" kindref="member">PAGNodeToIntraPHIVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;PHIVFGNode<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BinaryOPVFGNode*<sp/>getBinaryOPVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="218"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToBinaryOPVFGNodeMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" kindref="member">PAGNodeToBinaryOPVFGNodeMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" kindref="member">PAGNodeToBinaryOPVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;BinaryOPVFGNode<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryOPVFGNode*<sp/>getUnaryOPVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="224"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToUnaryOPVFGNodeMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" kindref="member">PAGNodeToUnaryOPVFGNodeMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" kindref="member">PAGNodeToUnaryOPVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;UnaryOPVFGNode<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CmpVFGNode*<sp/>getCmpVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="230"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToCmpVFGNodeMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" kindref="member">PAGNodeToCmpVFGNodeMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" kindref="member">PAGNodeToCmpVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;CmpVFGNode<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ActualParmVFGNode*<sp/>getActualParmVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>aparm,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="236"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToActualParmMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" kindref="member">PAGNodeToActualParmMap</ref>.find(std::make_pair(aparm-&gt;getId(),cs));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=<ref refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" kindref="member">PAGNodeToActualParmMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;acutal<sp/>parameter<sp/>VFG<sp/>node<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ActualRetVFGNode*<sp/>getActualRetVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>aret)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="242"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToActualRetMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" kindref="member">PAGNodeToActualRetMap</ref>.find(aret);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=<ref refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" kindref="member">PAGNodeToActualRetMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;actual<sp/>return<sp/>VFG<sp/>node<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FormalParmVFGNode*<sp/>getFormalParmVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>fparm)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="248"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToFormalParmMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" kindref="member">PAGNodeToFormalParmMap</ref>.find(fparm);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=<ref refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" kindref="member">PAGNodeToFormalParmMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;formal<sp/>parameter<sp/>VFG<sp/>node<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FormalRetVFGNode*<sp/>getFormalRetVFGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>fret)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="254"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToFormalRetMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" kindref="member">PAGNodeToFormalRetMap</ref>.find(fret);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=<ref refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" kindref="member">PAGNodeToFormalRetMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;formal<sp/>return<sp/>VFG<sp/>node<sp/>can<sp/>not<sp/>be<sp/>found??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab" kindref="member">isFunEntryVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VFGNode*<sp/>node)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" kindref="member">hasBlackHoleConstObjAddrAsDef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="266"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasDef(pagNode))</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>defNode<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" kindref="member">getVFGNode</ref>(getDef(pagNode));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_addr_v_f_g_node" kindref="compound">AddrVFGNode</ref>*<sp/>addr<sp/>=<sp/>SVFUtil::dyn_cast&lt;AddrVFGNode&gt;(defNode))</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_p_a_g_1ac8910c7330638bdf31c23d4cc03ba9c5" kindref="member">PAG::getPAG</ref>()-&gt;isBlkObjOrConstantObj(addr-&gt;getPAGEdge()-&gt;getSrcID()))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopyVFGNode</ref>*<sp/>copy<sp/>=<sp/>SVFUtil::dyn_cast&lt;CopyVFGNode&gt;(defNode))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_p_a_g_1ac8910c7330638bdf31c23d4cc03ba9c5" kindref="member">PAG::getPAG</ref>()-&gt;isNullPtr(copy-&gt;getPAGEdge()-&gt;getSrcID()))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VFGNodeSet&amp;<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" kindref="member">getVFGNodes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*fun)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>[fun];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasVFGNodes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*fun)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.find(fun)<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.end();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VFGNodes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*fun)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.find(fun)<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.end();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VFGNodeSet::const_iterator<sp/>getVFGNodeBegin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*fun)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunToVFGNodesMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.find(fun);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;this<sp/>function<sp/>does<sp/>not<sp/>have<sp/>any<sp/>VFGNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second.begin();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VFGNodeSet::const_iterator<sp/>getVFGNodeEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*fun)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunToVFGNodesMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.find(fun);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;this<sp/>function<sp/>does<sp/>not<sp/>have<sp/>any<sp/>VFGNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second.end();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>VFGEdge*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2" kindref="member">addIntraDirectVFEdge</ref>(NodeID<sp/>srcId,<sp/>NodeID<sp/>dstId);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>VFGEdge*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" kindref="member">addCallEdge</ref>(NodeID<sp/>srcId,<sp/>NodeID<sp/>dstId,<sp/>CallSiteID<sp/>csId);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>VFGEdge*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" kindref="member">addRetEdge</ref>(NodeID<sp/>srcId,<sp/>NodeID<sp/>dstId,<sp/>CallSiteID<sp/>csId);</highlight></codeline>
<codeline lineno="312"></codeline>
<codeline lineno="314" refid="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" kindref="member">removeVFGEdge</ref>(<ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/>edge)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;getDstNode()-&gt;removeIncomingEdge(edge);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;getSrcNode()-&gt;removeOutgoingEdge(edge);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321" refid="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" kindref="member">removeVFGNode</ref>(<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" kindref="member">removeGNode</ref>(node);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f" kindref="member">hasIntraVFGEdge</ref>(<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>src,<sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>dst,<sp/><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref><sp/>kind);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9" kindref="member">hasInterVFGEdge</ref>(<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>src,<sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>dst,<sp/><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref><sp/>kind,<sp/>CallSiteID<sp/>csId);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba" kindref="member">hasThreadVFGEdge</ref>(<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>src,<sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>dst,<sp/><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">VFGEdge::VFGEdgeK</ref><sp/>kind);</highlight></codeline>
<codeline lineno="332"></codeline>
<codeline lineno="334" refid="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" kindref="member">addVFGEdge</ref>(<ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/>edge)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>added1<sp/>=<sp/>edge-&gt;getDstNode()-&gt;addIncomingEdge(edge);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>added2<sp/>=<sp/>edge-&gt;getSrcNode()-&gt;addOutgoingEdge(edge);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(added1<sp/>&amp;&amp;<sp/>added2<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>not<sp/>added??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" kindref="member">checkIntraEdgeParents</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref><sp/>*srcNode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref><sp/>*dstNode)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*srcfun<sp/>=<sp/>srcNode-&gt;<ref refid="class_s_v_f_1_1_v_f_g_node_1ab98e74dfd4756e70e3e3c5b7d5e5ae27" kindref="member">getFun</ref>();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*dstfun<sp/>=<sp/>dstNode-&gt;<ref refid="class_s_v_f_1_1_v_f_g_node_1ab98e74dfd4756e70e3e3c5b7d5e5ae27" kindref="member">getFun</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srcfun<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dstfun<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((srcfun<sp/>==<sp/>dstfun)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;src<sp/>and<sp/>dst<sp/>nodes<sp/>of<sp/>an<sp/>intra<sp/>VFG<sp/>edge<sp/>are<sp/>not<sp/>in<sp/>the<sp/>same<sp/>function?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" kindref="member">addInterEdgeFromAPToFP</ref>(<ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref>*<sp/>src,<sp/><ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref>*<sp/>dst,<sp/>CallSiteID<sp/>csId)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" kindref="member">addCallEdge</ref>(src-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),dst-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),csId);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361" refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" kindref="member">addInterEdgeFromFRToAR</ref>(<ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref>*<sp/>src,<sp/><ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref>*<sp/>dst,<sp/>CallSiteID<sp/>csId)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" kindref="member">addRetEdge</ref>(src-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),dst-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),csId);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" kindref="member">addInterEdgeFromAPToFP</ref>(NodeID<sp/>src,<sp/>NodeID<sp/>dst,<sp/>CallSiteID<sp/>csId)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" kindref="member">addCallEdge</ref>(src,dst,csId);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372" refid="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" kindref="member">addInterEdgeFromFRToAR</ref>(NodeID<sp/>src,<sp/>NodeID<sp/>dst,<sp/>CallSiteID<sp/>csId)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" kindref="member">addRetEdge</ref>(src,dst,csId);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0" kindref="member">connectAParamAndFParam</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>csArg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>funArg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn,<sp/>CallSiteID<sp/>csId,<sp/>VFGEdgeSetTy&amp;<sp/>edges)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>actualParam<sp/>=<sp/>getActualParmVFGNode(csArg,<sp/>cbn)-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>formalParam<sp/>=<sp/>getFormalParmVFGNode(funArg)-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/>edge<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" kindref="member">addInterEdgeFromAPToFP</ref>(actualParam,<sp/>formalParam,csId);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.insert(edge);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389" refid="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b" kindref="member">connectFRetAndARet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>funReturn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>csReturn,<sp/>CallSiteID<sp/>csId,<sp/>VFGEdgeSetTy&amp;<sp/>edges)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>formalRet<sp/>=<sp/>getFormalRetVFGNode(funReturn)-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>actualRet<sp/>=<sp/>getActualRetVFGNode(csReturn)-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">VFGEdge</ref>*<sp/>edge<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" kindref="member">addInterEdgeFromFRToAR</ref>(formalRet,<sp/>actualRet,csId);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.insert(edge);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"></codeline>
<codeline lineno="400"></codeline>
<codeline lineno="401" refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToDefMapTy::iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.end())</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>[pagNode]<sp/>=<sp/>node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" kindref="member">hasVFGNode</ref>(node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>in<sp/>the<sp/>map!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((it-&gt;second<sp/>==<sp/>node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>())<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>PAG<sp/>node<sp/>can<sp/>only<sp/>have<sp/>unique<sp/>definition<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodeID<sp/>getDef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="415"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGNodeToDefMapTy::const_iterator<sp/>it<sp/>=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.find(pagNode);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=<ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;PAG<sp/>node<sp/>does<sp/>not<sp/>have<sp/>a<sp/>definition??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PAGNode*<sp/>pagNode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="421"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.find(pagNode)<sp/>!=<sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" kindref="member">PAGNodeToDefMap</ref>.end());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862" kindref="member">addVFGNodes</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/><ref refid="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" kindref="member">getPAGEdgeSet</ref>(<ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref><sp/>kind)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" kindref="member">isPtrOnlySVFG</ref>())</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ae5125dd33403e055078e1c9d6ce6d778" kindref="member">getPTAEdgeSet</ref>(kind);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" kindref="member">getEdgeSet</ref>(kind);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInterestedPAGNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="439"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" kindref="member">isPtrOnlySVFG</ref>())</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1afa5f1f6b3b7ffff2c417d58db7ef6bc2" kindref="member">isPointer</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0" kindref="member">connectDirectVFGEdges</ref>();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" kindref="member">addVFGInterEdges</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>callee);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPhiCopyEdge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>copy)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="453"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a9f33422f70dc4efeb741042564aac0ba" kindref="member">isPhiNode</ref>(copy-&gt;getDstNode());</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">VFGNode</ref>*<sp/>vfgNode,<sp/><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref>*<sp/>icfgNode)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" kindref="member">addGNode</ref>(vfgNode-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>vfgNode);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfgNode-&gt;<ref refid="class_s_v_f_1_1_v_f_g_node_1a9c95dd4f0e70ccc4a03282cdddba95de" kindref="member">setICFGNode</ref>(icfgNode);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icfgNode-&gt;<ref refid="class_s_v_f_1_1_i_c_f_g_node_1aff18898b9bbd85d08b00d64d48eea6a5" kindref="member">addVFGNode</ref>(vfgNode);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>fun<sp/>=<sp/>icfgNode-&gt;<ref refid="class_s_v_f_1_1_i_c_f_g_node_1ae526280cca2d6cbb2868c80461bc16da" kindref="member">getFun</ref>())</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" kindref="member">funToVFGNodesMap</ref>[fun].insert(vfgNode);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" kindref="member">globalVFGNodes</ref>.insert(vfgNode);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(<ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtVFGNode</ref>*<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>pagEdge)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>.find(pagEdge)==<ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>insert<sp/>twice!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" kindref="member">PAGEdgeToStmtVFGNodeMap</ref>[pagEdge]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(node,<sp/>pagEdge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479" refid="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" kindref="member">addNullPtrVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_null_ptr_v_f_g_node" kindref="compound">NullPtrVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_null_ptr_v_f_g_node" kindref="compound">NullPtrVFGNode</ref>(totalVFGNode++,pagNode);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>()-&gt;getGlobalBlockNode());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(pagNode,sNode);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486" refid="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" kindref="member">addAddrVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_addr_p_e" kindref="compound">AddrPE</ref>*<sp/>addr)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_addr_v_f_g_node" kindref="compound">AddrVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_addr_v_f_g_node" kindref="compound">AddrVFGNode</ref>(totalVFGNode++,addr);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(sNode,<sp/>addr);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(addr-&gt;getDstNode(),sNode);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493" refid="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" kindref="member">addCopyVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref>*<sp/>copy)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopyVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopyVFGNode</ref>(totalVFGNode++,copy);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(sNode,<sp/>copy);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(copy-&gt;getDstNode(),sNode);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500" refid="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" kindref="member">addGepVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_gep_p_e" kindref="compound">GepPE</ref>*<sp/>gep)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_gep_v_f_g_node" kindref="compound">GepVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_gep_v_f_g_node" kindref="compound">GepVFGNode</ref>(totalVFGNode++,gep);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(sNode,<sp/>gep);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(gep-&gt;getDstNode(),sNode);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507" refid="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" kindref="member">addLoadVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref>*<sp/>load)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_load_v_f_g_node" kindref="compound">LoadVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_v_f_g_node" kindref="compound">LoadVFGNode</ref>(totalVFGNode++,load);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(sNode,<sp/>load);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(load-&gt;getDstNode(),sNode);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515" refid="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" kindref="member">addStoreVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref>*<sp/>store)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_store_v_f_g_node" kindref="compound">StoreVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_v_f_g_node" kindref="compound">StoreVFGNode</ref>(totalVFGNode++,store);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" kindref="member">addStmtVFGNode</ref>(sNode,<sp/>store);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" kindref="member">addActualParmVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>aparm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cs)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref>(totalVFGNode++,aparm,cs);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>()-&gt;getCallBlockNode(cs-&gt;<ref refid="class_s_v_f_1_1_call_block_node_1ad3d50024efcfa94b1246c982b43aff2f" kindref="member">getCallSite</ref>()));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" kindref="member">PAGNodeToActualParmMap</ref>[std::make_pair(aparm-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),cs)]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532" refid="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" kindref="member">addFormalParmVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>fparm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>fun,<sp/>CallPESet&amp;<sp/>callPEs)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmVFGNode</ref>(totalVFGNode++,fparm,fun);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>()-&gt;<ref refid="class_s_v_f_1_1_i_c_f_g_1ae1ef14cdda27a2062c4c454750444108" kindref="member">getFunEntryBlockNode</ref>(fun));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(CallPESet::const_iterator<sp/>it<sp/>=<sp/>callPEs.begin(),<sp/>eit=callPEs.end();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;<ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node_1af0dfc7f8b58d5bc0e47c6ad17216cc1e" kindref="member">addCallPE</ref>(*it);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(fparm,sNode);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" kindref="member">PAGNodeToFormalParmMap</ref>[fparm]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546" refid="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" kindref="member">addFormalRetVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>uniqueFunRet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>*<sp/>fun,<sp/>RetPESet&amp;<sp/>retPEs)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref><sp/>*sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetVFGNode</ref>(totalVFGNode++,<sp/>uniqueFunRet,<sp/>fun);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>()-&gt;<ref refid="class_s_v_f_1_1_i_c_f_g_1aa33426d57dc150956902945a17a29bcb" kindref="member">getFunExitBlockNode</ref>(fun));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(RetPESet::const_iterator<sp/>it<sp/>=<sp/>retPEs.begin(),<sp/>eit<sp/>=<sp/>retPEs.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;<ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node_1a051f7dc0da465d7ce0dc733d9a8fae6a" kindref="member">addRetPE</ref>(*it);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" kindref="member">PAGNodeToFormalRetMap</ref>[uniqueFunRet]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a9f33422f70dc4efeb741042564aac0ba" kindref="member">isPhiNode</ref>(uniqueFunRet))</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(uniqueFunRet,<sp/>sNode);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560" refid="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" kindref="member">addActualRetVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>ret,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cs)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetVFGNode</ref>(totalVFGNode++,ret,cs);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>()-&gt;getRetBlockNode(cs-&gt;<ref refid="class_s_v_f_1_1_call_block_node_1ad3d50024efcfa94b1246c982b43aff2f" kindref="member">getCallSite</ref>()));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(ret,sNode);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" kindref="member">PAGNodeToActualRetMap</ref>[ret]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568" refid="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" kindref="member">addIntraPHIVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>phiResNode,<sp/>PAG::CopyPEList&amp;<sp/>oplist)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_intra_p_h_i_v_f_g_node" kindref="compound">IntraPHIVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_intra_p_h_i_v_f_g_node" kindref="compound">IntraPHIVFGNode</ref>(totalVFGNode++,phiResNode);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAG::CopyPEList::const_iterator<sp/>it<sp/>=<sp/>oplist.begin(),<sp/>eit=oplist.end();<sp/>it!=eit;<sp/>++it,++pos)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;setOpVerAndBB(pos,<sp/>edge-&gt;getSrcNode(),<sp/>edge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>not<sp/>found?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,edge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(phiResNode,sNode);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" kindref="member">PAGNodeToIntraPHIVFGNodeMap</ref>[phiResNode]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584" refid="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" kindref="member">addCmpVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>resNode,<sp/>PAG::CmpPEList&amp;<sp/>oplist)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_cmp_v_f_g_node" kindref="compound">CmpVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cmp_v_f_g_node" kindref="compound">CmpVFGNode</ref>(totalVFGNode++,<sp/>resNode);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAG::CmpPEList::const_iterator<sp/>it<sp/>=<sp/>oplist.begin(),<sp/>eit=oplist.end();<sp/>it!=eit;<sp/>++it,++pos)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;setOpVer(pos,<sp/>edge-&gt;getSrcNode());</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>not<sp/>found?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,edge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(resNode,sNode);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" kindref="member">PAGNodeToCmpVFGNodeMap</ref>[resNode]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600" refid="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" kindref="member">addBinaryOPVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>resNode,<sp/>PAG::BinaryOPList&amp;<sp/>oplist)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_binary_o_p_v_f_g_node" kindref="compound">BinaryOPVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_binary_o_p_v_f_g_node" kindref="compound">BinaryOPVFGNode</ref>(totalVFGNode++,<sp/>resNode);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAG::BinaryOPList::const_iterator<sp/>it<sp/>=<sp/>oplist.begin(),<sp/>eit=oplist.end();<sp/>it!=eit;<sp/>++it,++pos)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;setOpVer(pos,<sp/>(*it)-&gt;getSrcNode());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>not<sp/>found?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,edge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(resNode,sNode);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" kindref="member">PAGNodeToBinaryOPVFGNodeMap</ref>[resNode]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617" refid="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" kindref="member">addUnaryOPVFGNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>resNode,<sp/>PAG::UnaryOPList&amp;<sp/>oplist)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_unary_o_p_v_f_g_node" kindref="compound">UnaryOPVFGNode</ref>*<sp/>sNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_unary_o_p_v_f_g_node" kindref="compound">UnaryOPVFGNode</ref>(totalVFGNode++,<sp/>resNode);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAG::UnaryOPList::const_iterator<sp/>it<sp/>=<sp/>oplist.begin(),<sp/>eit=oplist.end();<sp/>it!=eit;<sp/>++it,++pos)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNode-&gt;setOpVer(pos,<sp/>(*it)-&gt;getSrcNode());</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>not<sp/>found?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" kindref="member">addVFGNode</ref>(sNode,edge-&gt;getICFGNode());</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1a1e0b8c7df55e05739775e8a1c50cf660" kindref="member">setDef</ref>(resNode,sNode);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" kindref="member">PAGNodeToUnaryOPVFGNodeMap</ref>[resNode]<sp/>=<sp/>sNode;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal">};</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacellvm" kindref="compound">llvm</ref></highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>!</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>GraphTraits<sp/>specializations<sp/>for<sp/>generic<sp/>graph<sp/>algorithms.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>Provide<sp/>graph<sp/>traits<sp/>for<sp/>traversing<sp/>from<sp/>a<sp/>constraint<sp/>node<sp/>using<sp/>standard<sp/>graph<sp/>traversals.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GraphTraits&lt;<ref refid="namespace_s_v_f" kindref="compound">SVF</ref>::VFGNode*&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>GraphTraits&lt;SVF::GenericNode&lt;SVF::VFGNode,SVF::VFGEdge&gt;*<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal">};</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="649" refid="structllvm_1_1_graph_traits_3_01_inverse_3_01_s_v_f_1_1_v_f_g_node_01_5_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GraphTraits&lt;Inverse&lt;<ref refid="namespace_s_v_f" kindref="compound">SVF</ref>::VFGNode<sp/>*&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>GraphTraits&lt;Inverse&lt;SVF::GenericNode&lt;SVF::VFGNode,SVF::VFGEdge&gt;*<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal">};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="structllvm_1_1_graph_traits_3_01_s_v_f_1_1_v_f_g_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GraphTraits&lt;<ref refid="namespace_s_v_f" kindref="compound">SVF</ref>::VFG*&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>GraphTraits&lt;SVF::GenericGraph&lt;SVF::VFGNode,SVF::VFGEdge&gt;*<sp/>&gt;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVF::VFGNode</ref><sp/>*<ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">NodeRef</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>llvm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_UTIL_VFG_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/Graphs/VFG.h"/>
  </compounddef>
</doxygen>
