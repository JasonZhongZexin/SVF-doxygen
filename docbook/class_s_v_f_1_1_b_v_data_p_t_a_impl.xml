<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl" xml:lang="en-US">
<title>SVF::BVDataPTAImpl Class Reference</title>
<indexterm><primary>SVF::BVDataPTAImpl</primary></indexterm>
<para>
<computeroutput>#include &lt;PointerAnalysisImpl.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::BVDataPTAImpl:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_b_v_data_p_t_a_impl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1addd6587f05704d15788d21fd09e1f33f"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">PTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aead9cb72160c66589183f846e42bc1f4"/>typedef <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">MutPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1abfe8dd0e3fceb96c3698cc13718108fe"/>typedef <link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">DiffPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1abe0d9d198f140ef89590e1b403a85c5d"/>typedef <link linkend="_class_s_v_f_1_1_mutable_diff_p_t_data">MutableDiffPTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">MutDiffPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1d82036ee76b86647b7623a249cde7ac"/>typedef <link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">DFPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae5354cb6f5f9a78075f306c109a0de68"/>typedef <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutableDFPTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">MutDFPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a67b0ccd84eb61cb0e3a076c9a7eda72a"/>typedef <link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data">IncMutableDFPTData</link>&lt; NodeID, NodeID, PointsTo &gt; <emphasis role="strong">IncMutDFPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1fd1285e201d6c98d3b2d00cf0163bd7"/>typedef <link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTData</link>&lt; NodeID, NodeID, PointsTo, VersionedVar &gt; <emphasis role="strong">VersionedPTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1acec222de13d274a8a0aabd508049162e"/>typedef <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">MutableVersionedPTData</link>&lt; NodeID, NodeID, PointsTo, VersionedVar &gt; <emphasis role="strong">MutVersionedPTDataTy</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aff20835f6fd320ccd2d2596db7945711">BVDataPTAImpl</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *<link linkend="_class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49">pag</link>, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PointerAnalysis::PTATY</link> type, bool alias_check=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a06f211184d3e75f0ca351a4b8092a478"/>virtual <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a06f211184d3e75f0ca351a4b8092a478">~BVDataPTAImpl</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1af783769050ab663ad4bb93f901f01a6d"/>void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1af783769050ab663ad4bb93f901f01a6d">destroy</link> ()</para>

<para>Release memory. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a6ba68138c10d1fbe5be6346c8dfeca74"/>static bool <emphasis role="strong">classof</emphasis> (const <link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> *pta)</para>
</listitem>
        </itemizedlist>
</simplesect>
        <itemizedlist>
            <listitem><para>virtual const PointsTo &amp; <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb">getPts</link> (NodeID id)</para>
</listitem>
            <listitem><para>virtual const NodeSet &amp; <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7">getRevPts</link> (NodeID nodeId)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4909696c946cf6aba12542ec51766b64"/>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4909696c946cf6aba12542ec51766b64">clearPts</link> (NodeID id, NodeID element)</para>

<para>Remove element from the points-to set of id. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1afdb10c2cce4935156566ea1c2daf9ea9"/>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1afdb10c2cce4935156566ea1c2daf9ea9">clearFullPts</link> (NodeID id)</para>

<para>Clear points-to set of id. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2">unionPts</link> (NodeID id, const PointsTo &amp;target)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad5e657b856681a534a8990df35ea08d0"/>virtual bool <emphasis role="strong">unionPts</emphasis> (NodeID id, NodeID ptd)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1af68485a2208553579f9c2e4b2cb20cff"/>virtual bool <emphasis role="strong">addPts</emphasis> (NodeID id, NodeID ptd)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4426df37aeabeb94d301373b55a53c20"/>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4426df37aeabeb94d301373b55a53c20">clearAllPts</link> ()</para>

<para>Clear all data. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721">expandFIObjs</link> (const PointsTo &amp;pts, PointsTo &amp;expandedPts)</para>

<para>Expand FI objects. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25c68f9d2b88437778e854ff0d741d1b">writeToFile</link> (const std::string &amp;filename)</para>

<para>Interface for analysis result storage on filesystem. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a290501006cb700db0e07dc577429c928">readFromFile</link> (const std::string &amp;filename)</para>
</listitem>
            <listitem><para>virtual AliasResult <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac">alias</link> (const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)</para>

<para>Interface expose to users of our pointer analysis, given Location infos. </para>
</listitem>
            <listitem><para>virtual AliasResult <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df">alias</link> (const Value *V1, const Value *V2)</para>

<para>Interface expose to users of our pointer analysis, given Value infos. </para>
</listitem>
            <listitem><para>virtual AliasResult <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687">alias</link> (NodeID node1, NodeID node2)</para>

<para>Interface expose to users of our pointer analysis, given PAGNodeID. </para>
</listitem>
            <listitem><para>virtual AliasResult <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25720f154731a8c745da10aa76ab8517">alias</link> (const PointsTo &amp;pts1, const PointsTo &amp;pts2)</para>

<para>Interface expose to users of our pointer analysis, given two pts. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93"/>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93">dumpCPts</link> ()</para>

<para>dump and debug, print out conditional pts </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752">dumpTopLevelPtsTo</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22">dumpAllPts</link> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aa534e475fa34fa322c567bc376a3da70"/>virtual bool <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aa534e475fa34fa322c567bc376a3da70">updateCallGraph</link> (const CallSiteToFunPtrMap &amp;)</para>

<para>Update callgraph. This should be implemented by its subclass. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae94cea78b71fb75837ee2a17b5ed0e81"/><link linkend="_class_s_v_f_1_1_p_t_data">PTDataTy</link> * <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae94cea78b71fb75837ee2a17b5ed0e81">getPTDataTy</link> () const</para>

<para>Get points-to data structure. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ab9c0bb439f98ae11dd178148109697ab"/><link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTDataTy</link> * <emphasis role="strong">getDiffPTDataTy</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a642613e98982259183d3f34a97f05502"/><link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTDataTy</link> * <emphasis role="strong">getDFPTDataTy</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1acbb979edee9427efa2a7c0dbd881c483"/><link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutDFPTDataTy</link> * <emphasis role="strong">getMutDFPTDataTy</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4859864a4c72d5e04c10305e4579e8ee"/><link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTDataTy</link> * <emphasis role="strong">getVersionedPTDataTy</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ac81e18d470067445f48add54c890e081"/>bool <emphasis role="strong">hasPtsMap</emphasis> (void) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4ff54c9b3e5aee923a0a0f7d879b878c"/>const MutPTDataTy::PtsMap &amp; <emphasis role="strong">getPtsMap</emphasis> () const</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a9830d4676fd424b633f8e4d918734296">onTheFlyCallGraphSolve</link> (const CallSiteToFunPtrMap &amp;callsites, CallEdgeMap &amp;newEdges)</para>

<para>On the fly call graph construction. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Pointer analysis implementation which uses bit vector based points-to data structure </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aff20835f6fd320ccd2d2596db7945711"/>    <section>
    <title>BVDataPTAImpl()</title>
<indexterm><primary>BVDataPTAImpl</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>BVDataPTAImpl</secondary></indexterm>
<para><computeroutput>BVDataPTAImpl::BVDataPTAImpl (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * p, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PointerAnalysis::PTATY</link> type, bool alias_check = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac"/>    <section>
    <title>alias()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>alias</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>alias</secondary></indexterm>
<para><computeroutput>AliasResult BVDataPTAImpl::alias (const MemoryLocation &amp; LocA, const MemoryLocation &amp; LocB)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Interface expose to users of our pointer analysis, given Location infos. </para>
</para>

<para>Return alias results based on our points-to/alias analysis </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1">SVF::PointerAnalysis</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25720f154731a8c745da10aa76ab8517"/>    <section>
    <title>alias()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>alias</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>alias</secondary></indexterm>
<para><computeroutput>AliasResult BVDataPTAImpl::alias (const PointsTo &amp; p1, const PointsTo &amp; p2)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Interface expose to users of our pointer analysis, given two pts. </para>
</para>

<para>Return alias results based on our points-to/alias analysis </para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df"/>    <section>
    <title>alias()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>alias</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>alias</secondary></indexterm>
<para><computeroutput>AliasResult BVDataPTAImpl::alias (const Value * V1, const Value * V2)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Interface expose to users of our pointer analysis, given Value infos. </para>
</para>

<para>Return alias results based on our points-to/alias analysis </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8">SVF::PointerAnalysis</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687"/>    <section>
    <title>alias()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>alias</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>alias</secondary></indexterm>
<para><computeroutput>AliasResult BVDataPTAImpl::alias (NodeID node1, NodeID node2)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Interface expose to users of our pointer analysis, given PAGNodeID. </para>
</para>

<para>Return alias results based on our points-to/alias analysis </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf">SVF::PointerAnalysis</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22"/>    <section>
    <title>dumpAllPts()</title>
<indexterm><primary>dumpAllPts</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>dumpAllPts</secondary></indexterm>
<para><computeroutput>void BVDataPTAImpl::dumpAllPts ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Dump all points-to including top-level (<link linkend="_class_s_v_f_1_1_val_p_n">ValPN</link>) and address-taken (<link linkend="_class_s_v_f_1_1_obj_p_n">ObjPN</link>) variables </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_pointer_analysis">SVF::PointerAnalysis</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752"/>    <section>
    <title>dumpTopLevelPtsTo()</title>
<indexterm><primary>dumpTopLevelPtsTo</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>dumpTopLevelPtsTo</secondary></indexterm>
<para><computeroutput>void BVDataPTAImpl::dumpTopLevelPtsTo ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Dump points-to of each pag node </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_pointer_analysis">SVF::PointerAnalysis</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_andersen_1a43858bd242c7f2c5f33c3c0f6445376a">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721"/>    <section>
    <title>expandFIObjs()</title>
<indexterm><primary>expandFIObjs</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>expandFIObjs</secondary></indexterm>
<para><computeroutput>void BVDataPTAImpl::expandFIObjs (const PointsTo &amp; pts, PointsTo &amp; expandedPts)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Expand FI objects. </para>
</para>

<para>Expand all fields of an aggregate in all points-to sets </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3af0297eb75ac4009433be44bb286d30">SVF::FlowSensitiveTBHC</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb"/>    <section>
    <title>getPts()</title>
<indexterm><primary>getPts</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>getPts</secondary></indexterm>
<para><computeroutput>virtual const PointsTo&amp; SVF::BVDataPTAImpl::getPts (NodeID id)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Get points-to and reverse points-to </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec">SVF::PointerAnalysis</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_steensgaard_1adbcb9af660ab9bb0202bd32342280486">SVF::Steensgaard</link>, and <link linkend="_class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7"/>    <section>
    <title>getRevPts()</title>
<indexterm><primary>getRevPts</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>getRevPts</secondary></indexterm>
<para><computeroutput>virtual const NodeSet&amp; SVF::BVDataPTAImpl::getRevPts (NodeID nodeId)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Given an object, get all the nodes having whose pointsto contains the object. Similar to getPts, this also needs to be implemented in child classes. </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280">SVF::PointerAnalysis</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a9830d4676fd424b633f8e4d918734296"/>    <section>
    <title>onTheFlyCallGraphSolve()</title>
<indexterm><primary>onTheFlyCallGraphSolve</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>onTheFlyCallGraphSolve</secondary></indexterm>
<para><computeroutput>void BVDataPTAImpl::onTheFlyCallGraphSolve (const CallSiteToFunPtrMap &amp; callsites, CallEdgeMap &amp; newEdges)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>On the fly call graph construction. </para>
</para>

<para>On the fly call graph construction callsites is candidate indirect callsites need to be analyzed based on points-to results newEdges is the new indirect call edges discovered </para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a290501006cb700db0e07dc577429c928"/>    <section>
    <title>readFromFile()</title>
<indexterm><primary>readFromFile</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>readFromFile</secondary></indexterm>
<para><computeroutput>bool BVDataPTAImpl::readFromFile (const std::string &amp; filename)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Load pointer analysis result form a file. It populates <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> with the points-to data, and updates <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> with the <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> offset nodes created during <link linkend="_class_s_v_f_1_1_andersen">Andersen</link>&apos;s solving stage. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2"/>    <section>
    <title>unionPts()</title>
<indexterm><primary>unionPts</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>unionPts</secondary></indexterm>
<para><computeroutput>virtual bool SVF::BVDataPTAImpl::unionPts (NodeID id, const PointsTo &amp; target)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Union/add points-to. Add the reverse points-to for node collapse purpose To be noted that adding reverse pts might incur 10% total overhead during solving </para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_steensgaard_1a61524c5a3521939b1546c78c68730c20">SVF::Steensgaard</link>, and <link linkend="_class_s_v_f_1_1_andersen_1ab7dadfd4d810be4863f03ed996b3b3c4">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25c68f9d2b88437778e854ff0d741d1b"/>    <section>
    <title>writeToFile()</title>
<indexterm><primary>writeToFile</primary><secondary>SVF::BVDataPTAImpl</secondary></indexterm>
<indexterm><primary>SVF::BVDataPTAImpl</primary><secondary>writeToFile</secondary></indexterm>
<para><computeroutput>void BVDataPTAImpl::writeToFile (const std::string &amp; filename)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Interface for analysis result storage on filesystem. </para>
</para>

<para>Store pointer analysis result into a file. It includes the points-to relations, and all <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> nodes including those created when solving <link linkend="_class_s_v_f_1_1_andersen">Andersen</link>&apos;s constraints. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MemoryModel/PointerAnalysisImpl.hlib/MemoryModel/PointerAnalysisImpl.cpp</section>
</section>
