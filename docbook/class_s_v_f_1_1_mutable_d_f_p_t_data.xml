<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data" xml:lang="en-US">
<title>SVF::MutableDFPTData&lt; Key, Datum, Data &gt; Class Template Reference</title>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary></indexterm>
<para>Inheritance diagram for SVF::MutableDFPTData&lt; Key, Datum, Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_mutable_d_f_p_t_data.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ab0b4be5588e3a0a065a13acd6fabd3b8"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; <emphasis role="strong">BasePTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a3d35314489da7db19305bf83a876e98d"/>typedef <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt; Key, Datum, Data &gt; <emphasis role="strong">BaseMutPTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aaa7fd9e24e8579f6ce64f1372f9c19ae"/>typedef <link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTData</link>&lt; Key, Datum, Data &gt; <emphasis role="strong">BaseDFPTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ab5711ac8c7eddbed1564f298d2be3dac"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">BasePTData::PTDataTy</link> <emphasis role="strong">PTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a2026071aad165913e9e112c8e208471c"/>typedef BasePTData::KeySet <emphasis role="strong">KeySet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ad552fbabd608ddded3d20c32a93c5de6"/>typedef BaseDFPTData::LocID <emphasis role="strong">LocID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a20b13b56728becc70e3e2b0e0bdd6192"/>typedef BaseMutPTData::PtsMap <emphasis role="strong">PtsMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a21445ff2320cad2907fb8e32be6b22ca"/>typedef BaseMutPTData::PtsMapConstIter <emphasis role="strong">PtsMapConstIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4"/>typedef Map&lt; LocID, PtsMap &gt; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4">DFPtsMap</link></para>

<para>Data-flow point-to map. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a2f5d5632580a1ab1e3f2d3b4d94e513e"/>typedef DFPtsMap::iterator <emphasis role="strong">DFPtsMapIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1adc5973bc01ba8875bb2efa1e0fe0a178"/>typedef DFPtsMap::const_iterator <emphasis role="strong">DFPtsMapconstIter</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a4c8ddcc2d81ee6a3c8a506bf9d675b7b"/><link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a4c8ddcc2d81ee6a3c8a506bf9d675b7b">MutableDFPTData</link> (bool reversePT=true, <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">PTDataTy</link> ty=BaseDFPTData::MutDataFlow)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a446b1eae4a238b9e665eb86311c86e3c"/>virtual const PtsMap &amp; <emphasis role="strong">getPtsMap</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a77f96a1d0f0e325de2c2da3fe4436025"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a77f96a1d0f0e325de2c2da3fe4436025">clear</link> () override</para>

<para>Clears all points-to sets as if nothing is stored. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0628fe9394d3cec433c44cddad09a9f5"/>virtual const Data &amp; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0628fe9394d3cec433c44cddad09a9f5">getPts</link> (const Key &amp;var) override</para>

<para>Get points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aa4195a2fb1bd66a23ebf3a98475436f3"/>virtual const KeySet &amp; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aa4195a2fb1bd66a23ebf3a98475436f3">getRevPts</link> (const Datum &amp;datum) override</para>

<para>Get reverse points-to set of datum. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a564a0b873d4491a6dabccc599c4f82c7">hasDFInSet</link> (LocID loc) const override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a16995ae975870c7c842259a86389fc54"/>virtual bool <emphasis role="strong">hasDFOutSet</emphasis> (LocID loc) const override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a3c603150d9b115bd3ea72dbd21fc47e0"/>virtual bool <emphasis role="strong">hasDFInSet</emphasis> (LocID loc, const Key &amp;var) const override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a7920b327d1662b48f32d6b4a2c085d8e">hasDFOutSet</link> (LocID loc, const Key &amp;var) const override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a013a9eb81d5e7b7a776248a9668e3d9d"/>virtual Data &amp; <emphasis role="strong">getDFInPtsSet</emphasis> (LocID loc, const Key &amp;var) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a333876ce361848881e7ead4f78c0189b"/>virtual Data &amp; <emphasis role="strong">getDFOutPtsSet</emphasis> (LocID loc, const Key &amp;var) override</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a11faecf2d217edd3d6c1aac03788e9e7">updateDFInFromIn</link> (LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0663e86966f0581364f91a14333a906f"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0663e86966f0581364f91a14333a906f">updateDFInFromOut</link> (LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>

<para>Union (IN[dstLoc:dstVar], OUT[srcLoc:srcVar]). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a6fcafe4e1a1e4dc356f0e49b783bb1c2"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a6fcafe4e1a1e4dc356f0e49b783bb1c2">updateDFOutFromIn</link> (LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>

<para>Union (OUT[dstLoc:dstVar], IN[srcLoc:srcVar]). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a1d9ef43bd762ea251a73bdf64d98a260"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a1d9ef43bd762ea251a73bdf64d98a260">updateAllDFInFromOut</link> (LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>

<para>Union (IN[dstLoc::dstVar], OUT[srcLoc:srcVar]. There is no flag check, unlike the above. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0db60bc13df08f906e55ec8830954e28"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a0db60bc13df08f906e55ec8830954e28">updateAllDFInFromIn</link> (LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>

<para>Union (IN[dstLoc::dstVar], IN[srcLoc:srcVar]. There is no flag check, unlike the above. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a780b6307f9994997243f8a7261815c1d">updateAllDFOutFromIn</link> (LocID loc, const Key &amp;singleton, bool strongUpdates) override</para>

<para>For each variable var in IN at loc, do updateDFOutFromIn(loc, var, loc, var). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a7e5431ec33bbcb509260e1f6cc8b20df"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a7e5431ec33bbcb509260e1f6cc8b20df">updateTLVPts</link> (LocID srcLoc, const Key &amp;srcVar, const Key &amp;dstVar) override</para>

<para>Update points-to set of top-level pointers with IN[srcLoc:srcVar]. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a39db820c23fc8bda511457056e81766a"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a39db820c23fc8bda511457056e81766a">updateATVPts</link> (const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar) override</para>

<para>Update address-taken variables OUT[dstLoc:dstVar] with points-to of top-level pointers. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a2ed188e0896403687b8374c40568f666"/>virtual void <emphasis role="strong">clearAllDFOutUpdatedVar</emphasis> (LocID) override</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>const PtsMap &amp; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a568a7a5db13b1ae5b2c7ef84904ae761">getDFInPtsMap</link> (LocID loc)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ac66a43ea8b8cd6c47cb5042f84207669"/>const PtsMap &amp; <emphasis role="strong">getDFOutPtsMap</emphasis> (LocID loc)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a9ea741eb5f1cd10c887633fe6f4c7405"/>const <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4">DFPtsMap</link> &amp; <emphasis role="strong">getDFIn</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aafbb54c099035733f69cb1668b811189"/>const <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4">DFPtsMap</link> &amp; <emphasis role="strong">getDFOut</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a4042cbb54fd15014845263d3875e5b39">addPts</link> (const Key &amp;dstKey, const Key &amp;srcKey) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ae62e6fb9f9d26a2b217d571f22cbaefa"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ae62e6fb9f9d26a2b217d571f22cbaefa">unionPts</link> (const Key &amp;dstKey, const Key &amp;srcKey) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U pts(srcVar). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ae54ae1abd4317922f59a212d835e2f5b"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ae54ae1abd4317922f59a212d835e2f5b">unionPts</link> (const Key &amp;dstKey, const Data &amp;srcData) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U srcData. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a23c1faea6b1f5f4a236d64d4ba721210"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a23c1faea6b1f5f4a236d64d4ba721210">clearPts</link> (const Key &amp;var, const Datum &amp;element) override</para>

<para>Clears element from the points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aadc5ef1807dc08cbae610af022ab4440"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aadc5ef1807dc08cbae610af022ab4440">clearFullPts</link> (const Key &amp;var) override</para>

<para>Fully clears the points-to set of var. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a1e485ecbd42ea54b91a4f243c98fe5f2">dumpPTData</link> () override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a743710f11d13897bb4cd354c22b90e89"/>virtual void <emphasis role="strong">dumpPts</emphasis> (const PtsMap &amp;ptsSet, <link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;O=SVFUtil::outs()) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ad061606c8b0660a1fd59caf1748a0a5c">classof</link> (const <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutableDFPTData</link>&lt; Key, Datum, Data &gt; *)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aba46d41578c6033b4845738918e43b70"/>static bool <emphasis role="strong">classof</emphasis> (const <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; *ptd)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a314ba4379d92075b5e069f8509575521">unionPts</link> (Data &amp;dstData, const Data &amp;srcData)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a65cfc6c3c718e5f0cbc73663797a80c5"/>bool <emphasis role="strong">addPts</emphasis> (Data &amp;d, const Datum &amp;e)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a15f5e0f3e07be534387dd73ec61e7450"/><link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4">DFPtsMap</link> <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a15f5e0f3e07be534387dd73ec61e7450">dfInPtsMap</link></para>

<para>Data-flow IN set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1af5c46ec2b1d99441479dd68a97c07b45"/><link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1accdcfd0e05c36f1df08c884b85e00be4">DFPtsMap</link> <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1af5c46ec2b1d99441479dd68a97c07b45">dfOutPtsMap</link></para>

<para>Data-flow OUT set. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt; Key, Datum, Data &gt; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aeb069ef3767c1942510a58c7ef6993ea">mutPTData</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a4042cbb54fd15014845263d3875e5b39"/>    <section>
    <title>addPts()</title>
<indexterm><primary>addPts</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>addPts</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::addPts (const Key &amp; dstKey, const Key &amp; srcKey)<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Override the methods defined in <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>. Union/add points-to without adding reverse points-to, used internally </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1ad061606c8b0660a1fd59caf1748a0a5c"/>    <section>
    <title>classof()</title>
<indexterm><primary>classof</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>classof</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>static bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::classof (const <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutableDFPTData</link>&lt; Key, Datum, Data &gt; * )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Methods to support type inquiry through isa, cast, and dyn_cast: </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a1e485ecbd42ea54b91a4f243c98fe5f2"/>    <section>
    <title>dumpPTData()</title>
<indexterm><primary>dumpPTData</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>dumpPTData</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::dumpPTData ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Dump the DF IN/OUT set information for debugging purpose </para>

<para>dump points-to of top-level pointers</para>

<para>dump points-to of address-taken variables</para>
<para>
Implements <link linkend="_class_s_v_f_1_1_p_t_data_1affb0e613229679f926c52c37b3c141ea">SVF::PTData&lt; Key, Datum, Data &gt;</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a568a7a5db13b1ae5b2c7ef84904ae761"/>    <section>
    <title>getDFInPtsMap()</title>
<indexterm><primary>getDFInPtsMap</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>getDFInPtsMap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>const PtsMap&amp; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::getDFInPtsMap (LocID loc)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Get internal flow-sensitive data structures. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a564a0b873d4491a6dabccc599c4f82c7"/>    <section>
    <title>hasDFInSet()</title>
<indexterm><primary>hasDFInSet</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>hasDFInSet</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::hasDFInSet (LocID loc) const<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Determine whether the DF IN/OUT sets have points-to sets. </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_d_f_p_t_data_1a12e2de05a6ece6e9e486c37b3083e534">SVF::DFPTData&lt; Key, Datum, Data &gt;</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a7920b327d1662b48f32d6b4a2c085d8e"/>    <section>
    <title>hasDFOutSet()</title>
<indexterm><primary>hasDFOutSet</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>hasDFOutSet</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::hasDFOutSet (LocID loc, const Key &amp; var) const<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Access points-to set from data-flow IN/OUT set. </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_d_f_p_t_data_1a329824d15a4b5d2f8a1371fc98c4ab76">SVF::DFPTData&lt; Key, Datum, Data &gt;</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a314ba4379d92075b5e069f8509575521"/>    <section>
    <title>unionPts()</title>
<indexterm><primary>unionPts</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>unionPts</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::unionPts (Data &amp; dstData, const Data &amp; srcData)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Internal union/add points-to helper methods. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a780b6307f9994997243f8a7261815c1d"/>    <section>
    <title>updateAllDFOutFromIn()</title>
<indexterm><primary>updateAllDFOutFromIn</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>updateAllDFOutFromIn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::updateAllDFOutFromIn (LocID loc, const Key &amp; singleton, bool strongUpdates)<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>For each variable var in IN at loc, do updateDFOutFromIn(loc, var, loc, var). </para>
</para>

<para>Only variables has new pts from IN set need to be updated.</para>

<para>Enable strong updates if it is required to do so</para>
<para>
Implements <link linkend="_class_s_v_f_1_1_d_f_p_t_data_1a616c798289eb8af5eb529f5a56c2557b">SVF::DFPTData&lt; Key, Datum, Data &gt;</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a7fc76812496101c36283d8aaff3164bc">SVF::IncMutableDFPTData&lt; Key, Datum, Data &gt;</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1a11faecf2d217edd3d6c1aac03788e9e7"/>    <section>
    <title>updateDFInFromIn()</title>
<indexterm><primary>updateDFInFromIn</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>updateDFInFromIn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::updateDFInFromIn (LocID srcLoc, const Key &amp; srcVar, LocID dstLoc, const Key &amp; dstVar)<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Update points-to for IN/OUT set IN[loc:var] represents the points-to of variable var in the IN set of location loc. union(ptsDst, ptsSrc) represents ptsDst = ptsDst U ptsSrc.</para>

<para>Union (IN[dstLoc:dstVar], IN[srcLoc:srcVar]). </para>
<para>
Implements <link linkend="_class_s_v_f_1_1_d_f_p_t_data_1a4c2a88efa302a5857e78fa32c4271c08">SVF::DFPTData&lt; Key, Datum, Data &gt;</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a65c7e3eb77a92e9a0f2b5f72ca80d9d6">SVF::IncMutableDFPTData&lt; Key, Datum, Data &gt;</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mutable_d_f_p_t_data_1aeb069ef3767c1942510a58c7ef6993ea"/>    <section>
    <title>mutPTData</title>
<indexterm><primary>mutPTData</primary><secondary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</primary><secondary>mutPTData</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput><link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt;Key, Datum, Data&gt; <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">SVF::MutableDFPTData</link>&lt; Key, Datum, Data &gt;::mutPTData<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Backing to implement the basic <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> methods which are not overridden. This allows us to avoid multiple-inheritance. </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/MutablePointsToDS.h</section>
</section>
