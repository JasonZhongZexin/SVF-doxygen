<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_p_a_g" kind="class" language="C++" prot="public">
    <compoundname>SVF::PAG</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_generic_graph" prot="public" virt="non-virtual">SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</basecompoundref>
    <includes refid="_p_a_g_8h" local="no">PAG.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1af34fb84e6a39ff6b23aa5e9381c7c80c" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const CallBlockNode*&gt; SVF::PAG::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="51" column="17" bodyfile="include/Graphs/PAG.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a52d16d0b3547a61b174424b91670e2ff" prot="public" static="no">
        <type>OrderedMap&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, NodeID &gt;</type>
        <definition>typedef OrderedMap&lt;const CallBlockNode*,NodeID&gt; SVF::PAG::CallSiteToFunPtrMap</definition>
        <argsstring></argsstring>
        <name>CallSiteToFunPtrMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="52" column="24" bodyfile="include/Graphs/PAG.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1ac24bbcc45a1c868705dac9204ff17316" prot="public" static="no">
        <type>Map&lt; NodeID, CallSiteSet &gt;</type>
        <definition>typedef Map&lt;NodeID,CallSiteSet&gt; SVF::PAG::FunPtrToCallSitesMap</definition>
        <argsstring></argsstring>
        <name>FunPtrToCallSitesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="53" column="17" bodyfile="include/Graphs/PAG.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a49da7e7d6273a0d8798166f95ce6bb16" prot="public" static="no">
        <type>Map&lt; NodeID, NodeBS &gt;</type>
        <definition>typedef Map&lt;NodeID,NodeBS&gt; SVF::PAG::MemObjToFieldsMap</definition>
        <argsstring></argsstring>
        <name>MemObjToFieldsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="54" column="17" bodyfile="include/Graphs/PAG.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1ab18ceda2810981f4d4bb47ac88705577" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> * &gt;</type>
        <definition>typedef Set&lt;const PAGEdge*&gt; SVF::PAG::PAGEdgeSet</definition>
        <argsstring></argsstring>
        <name>PAGEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="55" column="17" bodyfile="include/Graphs/PAG.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a3b70f1f3b785d735243962e83e210652" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const PAGEdge*&gt; SVF::PAG::PAGEdgeList</definition>
        <argsstring></argsstring>
        <name>PAGEdgeList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="56" column="25" bodyfile="include/Graphs/PAG.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a1aedb70211aa31a4741615e611d64397" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const PAGNode*&gt; SVF::PAG::PAGNodeList</definition>
        <argsstring></argsstring>
        <name>PAGNodeList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="57" column="25" bodyfile="include/Graphs/PAG.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a7bdc824c927d79b624e93c1135ab98a6" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const CopyPE*&gt; SVF::PAG::CopyPEList</definition>
        <argsstring></argsstring>
        <name>CopyPEList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="58" column="25" bodyfile="include/Graphs/PAG.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a22595c35a89f82adf447c6924dbbb8b2" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_binary_o_p_p_e" kindref="compound">BinaryOPPE</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const BinaryOPPE*&gt; SVF::PAG::BinaryOPList</definition>
        <argsstring></argsstring>
        <name>BinaryOPList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="59" column="25" bodyfile="include/Graphs/PAG.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a6b8c71339e37338402b82734145898b6" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_unary_o_p_p_e" kindref="compound">UnaryOPPE</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const UnaryOPPE*&gt; SVF::PAG::UnaryOPList</definition>
        <argsstring></argsstring>
        <name>UnaryOPList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="60" column="25" bodyfile="include/Graphs/PAG.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1ab33607f8f36bf0a47e91ac510872a60e" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_cmp_p_e" kindref="compound">CmpPE</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const CmpPE*&gt; SVF::PAG::CmpPEList</definition>
        <argsstring></argsstring>
        <name>CmpPEList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="61" column="25" bodyfile="include/Graphs/PAG.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1aaf91fa0a5807355e276eeaeee0638aea" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, CopyPEList &gt;</type>
        <definition>typedef Map&lt;const PAGNode*,CopyPEList&gt; SVF::PAG::PHINodeMap</definition>
        <argsstring></argsstring>
        <name>PHINodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="62" column="17" bodyfile="include/Graphs/PAG.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1aa9479778e9fe166b17bb765a7a1668a2" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, BinaryOPList &gt;</type>
        <definition>typedef Map&lt;const PAGNode*,BinaryOPList&gt; SVF::PAG::BinaryNodeMap</definition>
        <argsstring></argsstring>
        <name>BinaryNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="63" column="17" bodyfile="include/Graphs/PAG.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a471804c7fbdfacd90915c3a9cec7fccd" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, UnaryOPList &gt;</type>
        <definition>typedef Map&lt;const PAGNode*,UnaryOPList&gt; SVF::PAG::UnaryNodeMap</definition>
        <argsstring></argsstring>
        <name>UnaryNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="64" column="17" bodyfile="include/Graphs/PAG.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a373335a3c28622cfc0aeb1ef7ae8ccf7" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, CmpPEList &gt;</type>
        <definition>typedef Map&lt;const PAGNode*,CmpPEList&gt; SVF::PAG::CmpNodeMap</definition>
        <argsstring></argsstring>
        <name>CmpNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="65" column="17" bodyfile="include/Graphs/PAG.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a11b3e5d1aacf8a199b4ad35ce8cbca04" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, PAGNodeList &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*,PAGNodeList&gt; SVF::PAG::FunToArgsListMap</definition>
        <argsstring></argsstring>
        <name>FunToArgsListMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="66" column="17" bodyfile="include/Graphs/PAG.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1aeb293a1fc183c51053bdeb749d094e5a" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, PAGNodeList &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*,PAGNodeList&gt; SVF::PAG::CSToArgsListMap</definition>
        <argsstring></argsstring>
        <name>CSToArgsListMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="67" column="17" bodyfile="include/Graphs/PAG.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a7b983e115709d3461be9f24395c87ab4" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *, const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const RetBlockNode*,const PAGNode*&gt; SVF::PAG::CSToRetMap</definition>
        <argsstring></argsstring>
        <name>CSToRetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="68" column="17" bodyfile="include/Graphs/PAG.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a46ce928b6bfa06c0b4a08cd3c282f696" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*,const PAGNode*&gt; SVF::PAG::FunToRetMap</definition>
        <argsstring></argsstring>
        <name>FunToRetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="69" column="17" bodyfile="include/Graphs/PAG.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a369ea2832e74716757a7d4afa7cb5d60" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, PAGEdgeSet &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*,PAGEdgeSet&gt; SVF::PAG::FunToPAGEdgeSetMap</definition>
        <argsstring></argsstring>
        <name>FunToPAGEdgeSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="70" column="17" bodyfile="include/Graphs/PAG.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a8fb39e9156bb5cf07dc2329bfcfcd6f7" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *, PAGEdgeList &gt;</type>
        <definition>typedef Map&lt;const ICFGNode*,PAGEdgeList&gt; SVF::PAG::Inst2PAGEdgesMap</definition>
        <argsstring></argsstring>
        <name>Inst2PAGEdgesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="71" column="17" bodyfile="include/Graphs/PAG.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a8974543192816d31127076f5f7292825" prot="public" static="no">
        <type>Map&lt; NodeID, NodeID &gt;</type>
        <definition>typedef Map&lt;NodeID, NodeID&gt; SVF::PAG::NodeToNodeMap</definition>
        <argsstring></argsstring>
        <name>NodeToNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="72" column="17" bodyfile="include/Graphs/PAG.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1ab17a2bedce0f05951ff19934c317460e" prot="public" static="no">
        <type>std::pair&lt; NodeID, Size_t &gt;</type>
        <definition>typedef std::pair&lt;NodeID, Size_t&gt; SVF::PAG::NodeOffset</definition>
        <argsstring></argsstring>
        <name>NodeOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="73" column="23" bodyfile="include/Graphs/PAG.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a3aea90fd18662381bb601779b7c63275" prot="public" static="no">
        <type>std::pair&lt; NodeID, <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &gt;</type>
        <definition>typedef std::pair&lt;NodeID, LocationSet&gt; SVF::PAG::NodeLocationSet</definition>
        <argsstring></argsstring>
        <name>NodeLocationSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="74" column="23" bodyfile="include/Graphs/PAG.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1afc24739cd11b6a85e1e62b8a409a2e56" prot="public" static="no">
        <type>Map&lt; NodeOffset, NodeID &gt;</type>
        <definition>typedef Map&lt;NodeOffset,NodeID&gt; SVF::PAG::NodeOffsetMap</definition>
        <argsstring></argsstring>
        <name>NodeOffsetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="75" column="17" bodyfile="include/Graphs/PAG.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a80b31ccc3263c7d5d93aa1247eea0853" prot="public" static="no">
        <type>Map&lt; NodeLocationSet, NodeID &gt;</type>
        <definition>typedef Map&lt;NodeLocationSet,NodeID&gt; SVF::PAG::NodeLocationSetMap</definition>
        <argsstring></argsstring>
        <name>NodeLocationSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="76" column="17" bodyfile="include/Graphs/PAG.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1a213d27e032e81e61a72be710e5f0de74" prot="public" static="no">
        <type>Map&lt; const Value *, NodeLocationSetMap &gt;</type>
        <definition>typedef Map&lt;const Value*, NodeLocationSetMap&gt; SVF::PAG::GepValPNMap</definition>
        <argsstring></argsstring>
        <name>GepValPNMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="77" column="17" bodyfile="include/Graphs/PAG.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_a_g_1af77e6ff9106bcb2502ceb7ce885d11a6" prot="public" static="no">
        <type>Map&lt; NodePair, NodeID &gt;</type>
        <definition>typedef Map&lt;NodePair,NodeID&gt; SVF::PAG::NodePairSetMap</definition>
        <argsstring></argsstring>
        <name>NodePairSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="78" column="17" bodyfile="include/Graphs/PAG.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1acebd1174f9bbeeb35ccfdf87a8f0998a" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info" kindref="compound">SymbolTableInfo</ref> *</type>
        <definition>SymbolTableInfo* SVF::PAG::symInfo</definition>
        <argsstring></argsstring>
        <name>symInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="81" column="21" bodyfile="include/Graphs/PAG.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a32c107e02c73642ff4afd08b6cf22232" prot="private" static="no" mutable="no">
        <type>PAGEdge::PAGKindToEdgeSetMapTy</type>
        <definition>PAGEdge::PAGKindToEdgeSetMapTy SVF::PAG::PAGEdgeKindToSetMap</definition>
        <argsstring></argsstring>
        <name>PAGEdgeKindToSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ValueNodes - This map indicates the Node that a particular Value* is represented by. This contains entries for all pointers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="84" column="36" bodyfile="include/Graphs/PAG.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1ae297792b6cf9e7782ef4268f48c01748" prot="private" static="no" mutable="no">
        <type>PAGEdge::PAGKindToEdgeSetMapTy</type>
        <definition>PAGEdge::PAGKindToEdgeSetMapTy SVF::PAG::PTAPAGEdgeKindToSetMap</definition>
        <argsstring></argsstring>
        <name>PTAPAGEdgeKindToSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="85" column="36" bodyfile="include/Graphs/PAG.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1ace643a606d59eb972d0f55590745bd5f" prot="private" static="no" mutable="no">
        <type>Inst2PAGEdgesMap</type>
        <definition>Inst2PAGEdgesMap SVF::PAG::inst2PAGEdgesMap</definition>
        <argsstring></argsstring>
        <name>inst2PAGEdgesMap</name>
        <briefdescription>
<para>Map a instruction to its PAGEdges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="86" column="22" bodyfile="include/Graphs/PAG.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a925ccfc7169d5c03bffbe945dedc90b6" prot="private" static="no" mutable="no">
        <type>Inst2PAGEdgesMap</type>
        <definition>Inst2PAGEdgesMap SVF::PAG::inst2PTAPAGEdgesMap</definition>
        <argsstring></argsstring>
        <name>inst2PTAPAGEdgesMap</name>
        <briefdescription>
<para>Map a instruction to its <ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> related PAGEdges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="87" column="22" bodyfile="include/Graphs/PAG.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1afe6d92c90401918b58644a575928012c" prot="private" static="no" mutable="no">
        <type>GepValPNMap</type>
        <definition>GepValPNMap SVF::PAG::GepValNodeMap</definition>
        <argsstring></argsstring>
        <name>GepValNodeMap</name>
        <briefdescription>
<para>Map a pair&lt;base,off&gt; to a gep value node id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="88" column="17" bodyfile="include/Graphs/PAG.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1aac2a1bfebed4b363e9477a3745184a2a" prot="private" static="no" mutable="no">
        <type>NodeLocationSetMap</type>
        <definition>NodeLocationSetMap SVF::PAG::GepObjNodeMap</definition>
        <argsstring></argsstring>
        <name>GepObjNodeMap</name>
        <briefdescription>
<para>Map a pair&lt;base,off&gt; to a gep obj node id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="89" column="24" bodyfile="include/Graphs/PAG.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1abe896f8fd3c8adc60bbb1a23862da8df" prot="private" static="no" mutable="no">
        <type>MemObjToFieldsMap</type>
        <definition>MemObjToFieldsMap SVF::PAG::memToFieldsMap</definition>
        <argsstring></argsstring>
        <name>memToFieldsMap</name>
        <briefdescription>
<para>Map a mem object id to all its fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="90" column="23" bodyfile="include/Graphs/PAG.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a1235a44b3fed25e3d3bcfc868948822f" prot="private" static="no" mutable="no">
        <type>PAGEdgeSet</type>
        <definition>PAGEdgeSet SVF::PAG::globPAGEdgesSet</definition>
        <argsstring></argsstring>
        <name>globPAGEdgesSet</name>
        <briefdescription>
<para>Global PAGEdges without control flow information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="91" column="16" bodyfile="include/Graphs/PAG.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1af3158e346a519beca6aebf6c9092efc0" prot="private" static="no" mutable="no">
        <type>PHINodeMap</type>
        <definition>PHINodeMap SVF::PAG::phiNodeMap</definition>
        <argsstring></argsstring>
        <name>phiNodeMap</name>
        <briefdescription>
<para>A set of phi copy edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="92" column="16" bodyfile="include/Graphs/PAG.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1ac312c15d6c41f4c97e1a5f66b0036c06" prot="private" static="no" mutable="no">
        <type>BinaryNodeMap</type>
        <definition>BinaryNodeMap SVF::PAG::binaryNodeMap</definition>
        <argsstring></argsstring>
        <name>binaryNodeMap</name>
        <briefdescription>
<para>A set of binary edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="93" column="19" bodyfile="include/Graphs/PAG.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a5c450f3a87983c66a477081acd97a49f" prot="private" static="no" mutable="no">
        <type>UnaryNodeMap</type>
        <definition>UnaryNodeMap SVF::PAG::unaryNodeMap</definition>
        <argsstring></argsstring>
        <name>unaryNodeMap</name>
        <briefdescription>
<para>A set of unary edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="94" column="18" bodyfile="include/Graphs/PAG.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1ab51dc1fa314705f66d3319ea95adfc68" prot="private" static="no" mutable="no">
        <type>CmpNodeMap</type>
        <definition>CmpNodeMap SVF::PAG::cmpNodeMap</definition>
        <argsstring></argsstring>
        <name>cmpNodeMap</name>
        <briefdescription>
<para>A set of comparision edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="95" column="16" bodyfile="include/Graphs/PAG.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1aab9fa0c0f7f83055f7335fe7cf607f97" prot="private" static="no" mutable="no">
        <type>FunToArgsListMap</type>
        <definition>FunToArgsListMap SVF::PAG::funArgsListMap</definition>
        <argsstring></argsstring>
        <name>funArgsListMap</name>
        <briefdescription>
<para>Map a function to a list of all its formal parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="96" column="22" bodyfile="include/Graphs/PAG.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1acc5e6a8469badb11c8f56738be4deb63" prot="private" static="no" mutable="no">
        <type>CSToArgsListMap</type>
        <definition>CSToArgsListMap SVF::PAG::callSiteArgsListMap</definition>
        <argsstring></argsstring>
        <name>callSiteArgsListMap</name>
        <briefdescription>
<para>Map a callsite to a list of all its actual parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="97" column="21" bodyfile="include/Graphs/PAG.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1af63c417d121e37fd0427aa25ef5b15da" prot="private" static="no" mutable="no">
        <type>CSToRetMap</type>
        <definition>CSToRetMap SVF::PAG::callSiteRetMap</definition>
        <argsstring></argsstring>
        <name>callSiteRetMap</name>
        <briefdescription>
<para>Map a callsite to its callsite returns PAGNodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="98" column="16" bodyfile="include/Graphs/PAG.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a2742d22cfc819f0c8f7e6880c0cfbaf4" prot="private" static="no" mutable="no">
        <type>FunToRetMap</type>
        <definition>FunToRetMap SVF::PAG::funRetMap</definition>
        <argsstring></argsstring>
        <name>funRetMap</name>
        <briefdescription>
<para>Map a function to its unique function return PAGNodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="99" column="17" bodyfile="include/Graphs/PAG.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a704bbd07934ac14c08ab891946292c04" prot="private" static="no" mutable="no">
        <type>CallSiteToFunPtrMap</type>
        <definition>CallSiteToFunPtrMap SVF::PAG::indCallSiteToFunPtrMap</definition>
        <argsstring></argsstring>
        <name>indCallSiteToFunPtrMap</name>
        <briefdescription>
<para>Map an indirect callsite to its function pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="101" column="25" bodyfile="include/Graphs/PAG.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a6cf9a9e75749e898d39026cb8c225c92" prot="private" static="no" mutable="no">
        <type>FunPtrToCallSitesMap</type>
        <definition>FunPtrToCallSitesMap SVF::PAG::funPtrToCallSitesMap</definition>
        <argsstring></argsstring>
        <name>funPtrToCallSitesMap</name>
        <briefdescription>
<para>Map a function pointer to the callsites where it is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="102" column="26" bodyfile="include/Graphs/PAG.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a682355bd8e695faedbe5546f98636ee0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::PAG::fromFile</definition>
        <argsstring></argsstring>
        <name>fromFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> is built according to user specified data from a txt file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="103" column="10" bodyfile="include/Graphs/PAG.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1aada10ac92c40951586031271478248c2" prot="private" static="no" mutable="no">
        <type>OrderedNodeSet</type>
        <definition>OrderedNodeSet SVF::PAG::candidatePointers</definition>
        <argsstring></argsstring>
        <name>candidatePointers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid pointers for pointer analysis resolution connected by <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edges (constraints) this set of candidate pointers can change during pointer resolution (e.g. adding new object nodes) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="106" column="20" bodyfile="include/Graphs/PAG.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a911d401c9572219d08552ea96635e081" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::nodeNumAfterPAGBuild</definition>
        <argsstring></argsstring>
        <name>nodeNumAfterPAGBuild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="107" column="12" bodyfile="include/Graphs/PAG.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1aa26d3c84f970deaa76ae404597abf960" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> *</type>
        <definition>ICFG* SVF::PAG::icfg</definition>
        <argsstring></argsstring>
        <name>icfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="108" column="10" bodyfile="include/Graphs/PAG.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a52e4a8cfefcde7d0acc8ae94135105a8" prot="private" static="no" mutable="no">
        <type>CallSiteSet</type>
        <definition>CallSiteSet SVF::PAG::callSiteSet</definition>
        <argsstring></argsstring>
        <name>callSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="109" column="17" bodyfile="include/Graphs/PAG.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a50d0968c6a467ab224ebc73d8beff852" prot="private" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG * PAG::pag</definition>
        <argsstring></argsstring>
        <name>pag</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Singleton pattern here to enable instance of <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> can only be created once. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="100" column="16" bodyfile="include/Graphs/PAG.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_a_g_1a7bd46d36d58cc8ec70d8a42e5eb93683" prot="public" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::PAG::totalPTAPAGEdge</definition>
        <argsstring></argsstring>
        <name>totalPTAPAGEdge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="118" column="11" bodyfile="include/Graphs/PAG.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0a417d229823991031eda0b97148481c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PAG::PAG</definition>
        <argsstring>(bool buildFromFile)</argsstring>
        <name>PAG</name>
        <param>
          <type>bool</type>
          <declname>buildFromFile</declname>
        </param>
        <briefdescription>
<para>all the callsites of a program </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="112" column="5" bodyfile="lib/Graphs/PAG.cpp" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a5a6278a7244c926022288243007da790" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAG::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Clean up memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="115" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="804" bodyend="818"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> *</type>
        <definition>ICFG* SVF::PAG::getICFG</definition>
        <argsstring>()</argsstring>
        <name>getICFG</name>
        <briefdescription>
<para>Return <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="121" column="17" bodyfile="include/Graphs/PAG.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af771436bf36e2831d9c945c4dbc0be16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OrderedNodeSet &amp;</type>
        <definition>OrderedNodeSet&amp; SVF::PAG::getAllValidPtrs</definition>
        <argsstring>()</argsstring>
        <name>getAllValidPtrs</name>
        <briefdescription>
<para>Return valid pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="127" column="27" bodyfile="include/Graphs/PAG.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af4e69fb580bc8eec1064ac967f4f7cb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::initialiseCandidatePointers</definition>
        <argsstring>()</argsstring>
        <name>initialiseCandidatePointers</name>
        <briefdescription>
<para>Initialize candidate pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="132" column="17" bodyfile="include/Graphs/PAG.h" bodystart="132" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a79b6cf7f3c13a96513b33670ef2c8df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::PAG::~PAG</definition>
        <argsstring>()</argsstring>
        <name>~PAG</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="165" column="13" bodyfile="include/Graphs/PAG.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa814a179b4e96ef9f6c8e00fb063eb0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isBuiltFromFile</definition>
        <argsstring>()</argsstring>
        <name>isBuiltFromFile</name>
        <briefdescription>
<para>Whether this <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> built from a txt file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="171" column="17" bodyfile="include/Graphs/PAG.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a74f9e22acb40bf952c00168a221c0b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::PAG::getModule</definition>
        <argsstring>()</argsstring>
        <name>getModule</name>
        <briefdescription>
<para>Get LLVM Module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="181" column="22" bodyfile="include/Graphs/PAG.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a3767933efc81430ecd242879552f8a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addCallSite</definition>
        <argsstring>(const CallBlockNode *call)</argsstring>
        <name>addCallSite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="185" column="17" bodyfile="include/Graphs/PAG.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4309ced29efb4f351dafb867206bb38b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallSiteSet &amp;</type>
        <definition>const CallSiteSet&amp; SVF::PAG::getCallSiteSet</definition>
        <argsstring>() const</argsstring>
        <name>getCallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="189" column="30" bodyfile="include/Graphs/PAG.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PAGEdge::PAGEdgeSetTy &amp;</type>
        <definition>PAGEdge::PAGEdgeSetTy&amp; SVF::PAG::getEdgeSet</definition>
        <argsstring>(PAGEdge::PEDGEK kind)</argsstring>
        <name>getEdgeSet</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get/set methods to get control flow information of a <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Get edges set according to its kind </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="196" column="34" bodyfile="include/Graphs/PAG.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae5125dd33403e055078e1c9d6ce6d778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PAGEdge::PAGEdgeSetTy &amp;</type>
        <definition>PAGEdge::PAGEdgeSetTy&amp; SVF::PAG::getPTAEdgeSet</definition>
        <argsstring>(PAGEdge::PEDGEK kind)</argsstring>
        <name>getPTAEdgeSet</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get PTA edges set according to its kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="201" column="34" bodyfile="include/Graphs/PAG.h" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a8b498249185812b2bd1e9bd2aac50e4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::hasPAGEdgeList</definition>
        <argsstring>(const ICFGNode *inst) const</argsstring>
        <name>hasPAGEdgeList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Whether this instruction has <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> Edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="206" column="17" bodyfile="include/Graphs/PAG.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad6d3a47e27f3aa9f3729fd9097da27d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::hasPTAPAGEdgeList</definition>
        <argsstring>(const ICFGNode *inst) const</argsstring>
        <name>hasPTAPAGEdgeList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="210" column="17" bodyfile="include/Graphs/PAG.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0f59371e012da5b8e030d11d84e7154b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PAGEdgeList &amp;</type>
        <definition>PAGEdgeList&amp; SVF::PAG::getInstPAGEdgeList</definition>
        <argsstring>(const ICFGNode *inst)</argsstring>
        <name>getInstPAGEdgeList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Given an instruction, get all its PAGEdges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="215" column="24" bodyfile="include/Graphs/PAG.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a05751b2d055ea53b8a3452ead8380813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PAGEdgeList &amp;</type>
        <definition>PAGEdgeList&amp; SVF::PAG::getInstPTAPAGEdgeList</definition>
        <argsstring>(const ICFGNode *inst)</argsstring>
        <name>getInstPTAPAGEdgeList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Given an instruction, get all its PTA PAGEdges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="220" column="24" bodyfile="include/Graphs/PAG.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a13028887a4b608ace787c683cbd01209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addToInstPAGEdgeList</definition>
        <argsstring>(ICFGNode *inst, PAGEdge *edge)</argsstring>
        <name>addToInstPAGEdgeList</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>inst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> into instruction map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="225" column="17" bodyfile="include/Graphs/PAG.h" bodystart="225" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adfd70b02bb37f3e17cb7d2edda2cf047" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addGlobalPAGEdge</definition>
        <argsstring>(const PAGEdge *edge)</argsstring>
        <name>addGlobalPAGEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Get global PAGEdges (not in a procedure) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="233" column="17" bodyfile="include/Graphs/PAG.h" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1acb2c9f92f0ed39f1cd823876c37510d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PAGEdgeSet &amp;</type>
        <definition>PAGEdgeSet&amp; SVF::PAG::getGlobalPAGEdgeSet</definition>
        <argsstring>()</argsstring>
        <name>getGlobalPAGEdgeSet</name>
        <briefdescription>
<para>Get global PAGEdges (not in a procedure) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="238" column="23" bodyfile="include/Graphs/PAG.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad117554c86d9e1ed90231032c96504b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addPhiNode</definition>
        <argsstring>(const PAGNode *res, const CopyPE *edge)</argsstring>
        <name>addPhiNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add phi node information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="243" column="17" bodyfile="include/Graphs/PAG.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a9f33422f70dc4efeb741042564aac0ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isPhiNode</definition>
        <argsstring>(const PAGNode *node) const</argsstring>
        <name>isPhiNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> is a result operand a of phi node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="248" column="17" bodyfile="include/Graphs/PAG.h" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad81e9de87891387c6fc860d964316d4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PHINodeMap &amp;</type>
        <definition>PHINodeMap&amp; SVF::PAG::getPhiNodeMap</definition>
        <argsstring>()</argsstring>
        <name>getPhiNodeMap</name>
        <briefdescription>
<para>Get all phi copy edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="253" column="23" bodyfile="include/Graphs/PAG.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad7b5d745134fa564934aa892f38a6990" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addBinaryNode</definition>
        <argsstring>(const PAGNode *res, const BinaryOPPE *edge)</argsstring>
        <name>addBinaryNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_binary_o_p_p_e" kindref="compound">BinaryOPPE</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add phi node information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="258" column="17" bodyfile="include/Graphs/PAG.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab5292b85206dfa622cff12146755d616" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isBinaryNode</definition>
        <argsstring>(const PAGNode *node) const</argsstring>
        <name>isBinaryNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> is a result operand a of phi node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="263" column="17" bodyfile="include/Graphs/PAG.h" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6931eafe066036139d2538340ef9b95b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BinaryNodeMap &amp;</type>
        <definition>BinaryNodeMap&amp; SVF::PAG::getBinaryNodeMap</definition>
        <argsstring>()</argsstring>
        <name>getBinaryNodeMap</name>
        <briefdescription>
<para>Get all phi copy edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="268" column="26" bodyfile="include/Graphs/PAG.h" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6b0f6fd131875d60b51d6c29577b8f29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addUnaryNode</definition>
        <argsstring>(const PAGNode *res, const UnaryOPPE *edge)</argsstring>
        <name>addUnaryNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_unary_o_p_p_e" kindref="compound">UnaryOPPE</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add unary node information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="273" column="17" bodyfile="include/Graphs/PAG.h" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac0e8f9b3b7255479b70aecb97e9f8f00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isUnaryNode</definition>
        <argsstring>(const PAGNode *node) const</argsstring>
        <name>isUnaryNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> is an unary node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="278" column="17" bodyfile="include/Graphs/PAG.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a71a4647b6ac6a67d69ba580b3f5cac6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UnaryNodeMap &amp;</type>
        <definition>UnaryNodeMap&amp; SVF::PAG::getUnaryNodeMap</definition>
        <argsstring>()</argsstring>
        <name>getUnaryNodeMap</name>
        <briefdescription>
<para>Get all unary edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="283" column="25" bodyfile="include/Graphs/PAG.h" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a8485560177f2e3a4098b4b7d5ba3282c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addCmpNode</definition>
        <argsstring>(const PAGNode *res, const CmpPE *edge)</argsstring>
        <name>addCmpNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cmp_p_e" kindref="compound">CmpPE</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add phi node information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="288" column="17" bodyfile="include/Graphs/PAG.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab10f10221807584aa4547a612cb40a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isCmpNode</definition>
        <argsstring>(const PAGNode *node) const</argsstring>
        <name>isCmpNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> is a result operand a of phi node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="293" column="17" bodyfile="include/Graphs/PAG.h" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a667b240e083d720b486a47308e36ae55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CmpNodeMap &amp;</type>
        <definition>CmpNodeMap&amp; SVF::PAG::getCmpNodeMap</definition>
        <argsstring>()</argsstring>
        <name>getCmpNodeMap</name>
        <briefdescription>
<para>Get all phi copy edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="298" column="23" bodyfile="include/Graphs/PAG.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac74bc9bfdba81862977b6148dba5becc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addFunArgs</definition>
        <argsstring>(const SVFFunction *fun, const PAGNode *arg)</argsstring>
        <name>addFunArgs</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Get/set method for function/callsite arguments and returns. </para>
        </briefdescription>
        <detaileddescription>
<para>Add function arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="307" column="17" bodyfile="include/Graphs/PAG.h" bodystart="307" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae99451bef14af36312dbf45e3447bb22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addFunRet</definition>
        <argsstring>(const SVFFunction *fun, const PAGNode *ret)</argsstring>
        <name>addFunRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Add function returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="314" column="17" bodyfile="include/Graphs/PAG.h" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa7cdda6d4397975f27dfa524ce7cfc80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addCallSiteArgs</definition>
        <argsstring>(CallBlockNode *callBlockNode, const PAGNode *arg)</argsstring>
        <name>addCallSiteArgs</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>callBlockNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Add callsite arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="321" column="17" bodyfile="include/Graphs/PAG.h" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af10b739e5d4459cbf954e7edfd5dc268" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addCallSiteRets</definition>
        <argsstring>(RetBlockNode *retBlockNode, const PAGNode *arg)</argsstring>
        <name>addCallSiteRets</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
          <declname>retBlockNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Add callsite returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="327" column="17" bodyfile="include/Graphs/PAG.h" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1abfb24b0a57ffe59f345a7490ce64e63d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::hasFunArgsList</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>hasFunArgsList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Function has arguments list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="333" column="17" bodyfile="include/Graphs/PAG.h" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab6779cc646bc50965722984f1a708811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FunToArgsListMap &amp;</type>
        <definition>FunToArgsListMap&amp; SVF::PAG::getFunArgsMap</definition>
        <argsstring>()</argsstring>
        <name>getFunArgsMap</name>
        <briefdescription>
<para>Get function arguments list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="338" column="29" bodyfile="include/Graphs/PAG.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad2ff2e50f8e5234979ba9cacc6a6268c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const PAGNodeList &amp;</type>
        <definition>const PAGNodeList&amp; SVF::PAG::getFunArgsList</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>getFunArgsList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Get function arguments list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="343" column="30" bodyfile="include/Graphs/PAG.h" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a157df68295822a17ad07a850a230bae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::hasCallSiteArgsMap</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasCallSiteArgsMap</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Callsite has argument list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="350" column="17" bodyfile="include/Graphs/PAG.h" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae0151d49c9199a2899d8b872dc1ebcfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CSToArgsListMap &amp;</type>
        <definition>CSToArgsListMap&amp; SVF::PAG::getCallSiteArgsMap</definition>
        <argsstring>()</argsstring>
        <name>getCallSiteArgsMap</name>
        <briefdescription>
<para>Get callsite argument list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="355" column="28" bodyfile="include/Graphs/PAG.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4dac2dc4756bf3f84e6fa034a8b906da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const PAGNodeList &amp;</type>
        <definition>const PAGNodeList&amp; SVF::PAG::getCallSiteArgsList</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getCallSiteArgsList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get callsite argument list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="360" column="30" bodyfile="include/Graphs/PAG.h" bodystart="360" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af46a20842683fbbc52ac554c0777fbdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CSToRetMap &amp;</type>
        <definition>CSToRetMap&amp; SVF::PAG::getCallSiteRets</definition>
        <argsstring>()</argsstring>
        <name>getCallSiteRets</name>
        <briefdescription>
<para>Get callsite return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="367" column="23" bodyfile="include/Graphs/PAG.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae455de4db007a5bebffd3a9c16e0b107" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
        <definition>const PAGNode* SVF::PAG::getCallSiteRet</definition>
        <argsstring>(const RetBlockNode *cs) const</argsstring>
        <name>getCallSiteRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get callsite return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="372" column="26" bodyfile="include/Graphs/PAG.h" bodystart="372" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0ed3da89d9cba90888e04969dc43f5a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::callsiteHasRet</definition>
        <argsstring>(const RetBlockNode *cs) const</argsstring>
        <name>callsiteHasRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_ret_block_node" kindref="compound">RetBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="378" column="17" bodyfile="include/Graphs/PAG.h" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac0835eaa3f23a53eb56a122bebe2ac6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FunToRetMap &amp;</type>
        <definition>FunToRetMap&amp; SVF::PAG::getFunRets</definition>
        <argsstring>()</argsstring>
        <name>getFunRets</name>
        <briefdescription>
<para>Get function return list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="383" column="24" bodyfile="include/Graphs/PAG.h" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a838a9fa42e68b5f32853f73fa05a7c09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
        <definition>const PAGNode* SVF::PAG::getFunRet</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>getFunRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Get function return list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="388" column="26" bodyfile="include/Graphs/PAG.h" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a08f1b7f68a267b6cc5ad9cb3f1efede0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::funHasRet</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>funHasRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="394" column="17" bodyfile="include/Graphs/PAG.h" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a42a7abab6a762d75455b0954097dddc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getPAGNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getPAGNodeNum</name>
        <briefdescription>
<para>Node and edge statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="402" column="19" bodyfile="include/Graphs/PAG.h" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a74de66edb19a534fe85d4621085021ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getPAGEdgeNum</definition>
        <argsstring>() const</argsstring>
        <name>getPAGEdgeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="406" column="19" bodyfile="include/Graphs/PAG.h" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad8c9f6134aa97d310f8eebbd7bf9bc8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getValueNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getValueNodeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="410" column="19" bodyfile="include/Graphs/PAG.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1afe02872115f15623178cb1ed8f737992" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getObjectNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getObjectNodeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="414" column="19" bodyfile="include/Graphs/PAG.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a815b0acd760c050c7b352b2000675fc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getFieldValNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getFieldValNodeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="418" column="19" bodyfile="include/Graphs/PAG.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1acde529dcb2054bf50a0793d8aa51bb07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::PAG::getFieldObjNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getFieldObjNodeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="422" column="19" bodyfile="include/Graphs/PAG.h" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac2e844bdb316b2ab4bc780fbf8f48914" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getGepValNode</definition>
        <argsstring>(const Value *curInst, NodeID base, const LocationSet &amp;ls) const</argsstring>
        <name>getGepValNode</name>
        <param>
          <type>const Value *</type>
          <declname>curInst</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Due to constaint expression, curInst is used to distinguish different instructions (e.g., memorycpy) when creating <ref refid="class_s_v_f_1_1_gep_val_p_n" kindref="compound">GepValPN</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="429" column="19" bodyfile="include/Graphs/PAG.h" bodystart="429" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6a468180bff1e8f6143587546a2e7742" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallSiteToFunPtrMap &amp;</type>
        <definition>const CallSiteToFunPtrMap&amp; SVF::PAG::getIndirectCallsites</definition>
        <argsstring>() const</argsstring>
        <name>getIndirectCallsites</name>
        <briefdescription>
<para>Add/get indirect callsites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="446" column="38" bodyfile="include/Graphs/PAG.h" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae5d8ac3f715f0afdee0aa6194ad4a14a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::addIndirectCallsites</definition>
        <argsstring>(const CallBlockNode *cs, NodeID funPtr)</argsstring>
        <name>addIndirectCallsites</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>funPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="450" column="17" bodyfile="include/Graphs/PAG.h" bodystart="450" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae4bfb3e30a81cd8ece36f59a60f0f0ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getFunPtr</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getFunPtr</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="456" column="19" bodyfile="include/Graphs/PAG.h" bodystart="456" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a63a8131c082052fc4a8c61430ce196af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallSiteSet &amp;</type>
        <definition>const CallSiteSet&amp; SVF::PAG::getIndCallSites</definition>
        <argsstring>(NodeID funPtr) const</argsstring>
        <name>getIndCallSites</name>
        <param>
          <type>NodeID</type>
          <declname>funPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="462" column="30" bodyfile="include/Graphs/PAG.h" bodystart="462" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1abe123c69769f8edb29acb32aaef1449d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isIndirectCallSites</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>isIndirectCallSites</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="468" column="17" bodyfile="include/Graphs/PAG.h" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a20e9df3a6397153dc3741ad5b370dc94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isFunPtr</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isFunPtr</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="472" column="17" bodyfile="include/Graphs/PAG.h" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a8ea029c95a38473b1611ce7323818fe5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::findPAGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>findPAGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a pag node according to its ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="479" column="17" bodyfile="include/Graphs/PAG.h" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0398b47429454e019884f0867262430a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge* SVF::PAG::getIntraPAGEdge</definition>
        <argsstring>(NodeID src, NodeID dst, PAGEdge::PEDGEK kind)</argsstring>
        <name>getIntraPAGEdge</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get an edge according to src, dst and kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="486" column="20" bodyfile="include/Graphs/PAG.h" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae73900fac2a97736976bfad011c3cdb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge* SVF::PAG::getIntraPAGEdge</definition>
        <argsstring>(PAGNode *src, PAGNode *dst, PAGEdge::PEDGEK kind)</argsstring>
        <name>getIntraPAGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="490" column="20" bodyfile="include/Graphs/PAG.h" bodystart="490" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
        <definition>PAGNode* SVF::PAG::getPAGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getPAGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="501" column="20" bodyfile="include/Graphs/PAG.h" bodystart="501" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a5f49b7da110a626ed6605d1f108dfa25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getValueNode</definition>
        <argsstring>(const Value *V)</argsstring>
        <name>getValueNode</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> Node according to LLVM value. </para>
        </briefdescription>
        <detaileddescription>
<para>getNode - Return the node corresponding to the specified pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="509" column="19" bodyfile="include/Graphs/PAG.h" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae3cdf8c2139ba043595b420624f25427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::hasValueNode</definition>
        <argsstring>(const Value *V)</argsstring>
        <name>hasValueNode</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="513" column="17" bodyfile="include/Graphs/PAG.h" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a9e35f1d6a30c6200fb3c0c43ba4f36cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getObjectNode</definition>
        <argsstring>(const Value *V)</argsstring>
        <name>getObjectNode</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getObject - Return the obj node id refer to the memory object for the specified global, heap or alloca instruction according to llvm value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="519" column="19" bodyfile="include/Graphs/PAG.h" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a12be35fbe2d830fb23fd0173eb66c108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getObjectNode</definition>
        <argsstring>(const MemObj *mem)</argsstring>
        <name>getObjectNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>getObject - return mem object id </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="524" column="19" bodyfile="include/Graphs/PAG.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a2b288fce8efa1b0b1b620efec2c96eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::getObject</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getObject</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get memory object - Return memory object according to pag node id return whole allocated memory object if this node is a gep obj node return NULL is this node is not a <ref refid="class_s_v_f_1_1_obj_p_n" kindref="compound">ObjPN</ref> type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="532" column="24" bodyfile="include/Graphs/PAG.h" bodystart="532" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a45017000af4946b27878bd1fbf58050f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::getObject</definition>
        <argsstring>(const ObjPN *node) const</argsstring>
        <name>getObject</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_obj_p_n" kindref="compound">ObjPN</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="540" column="24" bodyfile="include/Graphs/PAG.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4419b16246ed90e275a7be38d683d36d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getReturnNode</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>getReturnNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>GetReturnNode - Return the unique node representing the return value of a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="547" column="19" bodyfile="include/Graphs/PAG.h" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa7b2e9e0b3386e27af8413be4c36f519" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getVarargNode</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>getVarargNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>getVarargNode - Return the unique node representing the variadic argument of a variadic function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="552" column="19" bodyfile="include/Graphs/PAG.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aad5fc74d2a9baf3630ba6546a74053e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::getGepObjNode</definition>
        <argsstring>(const MemObj *obj, const LocationSet &amp;ls)</argsstring>
        <name>getGepObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Get a field <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> Object node according to base mem obj and offset. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a field obj <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node according to base mem obj and offset To support flexible field sensitive analysis with regard to MaxFieldOffset offset = offset % obj-&gt;getMaxFieldOffsetLimit() to create limited number of mem objects maximum number of field object creation is obj-&gt;getMaxFieldOffsetLimit() </para>
        </detaileddescription>
        <inbodydescription>
<para>if this obj is field-insensitive, just return the field-insensitive node.</para>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="557" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="609" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac1dd6570b74bec2a0f2ffd7d2ee064b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::getGepObjNode</definition>
        <argsstring>(NodeID id, const LocationSet &amp;ls)</argsstring>
        <name>getGepObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Get a field obj <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node according to a mem obj and a given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>Given an object node, find its field object node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="559" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="587" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1afc69b91408401d2a92d68c3414f3402d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getFIObjNode</definition>
        <argsstring>(const MemObj *obj) const</argsstring>
        <name>getFIObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get a field-insensitive obj <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node according to a mem obj. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="562" column="19" bodyfile="include/Graphs/PAG.h" bodystart="562" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1afc4c57a4d200296cc8f7e2a8aa62fcb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getFIObjNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getFIObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="566" column="19" bodyfile="include/Graphs/PAG.h" bodystart="566" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adc2f52d5c95c6b8718fe3f899d19cc2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getBlackHoleNode</definition>
        <argsstring>() const</argsstring>
        <name>getBlackHoleNode</name>
        <briefdescription>
<para>Get black hole and constant id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="577" column="19" bodyfile="include/Graphs/PAG.h" bodystart="577" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ad1f9568cf8b514d1fe86fa3473836580" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getConstantNode</definition>
        <argsstring>() const</argsstring>
        <name>getConstantNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="581" column="19" bodyfile="include/Graphs/PAG.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a67dc43e25a29ff81f3e12c7b70061261" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getBlkPtr</definition>
        <argsstring>() const</argsstring>
        <name>getBlkPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="585" column="19" bodyfile="include/Graphs/PAG.h" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a745eddbb75d513d9cbf76709e3d7057e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getNullPtr</definition>
        <argsstring>() const</argsstring>
        <name>getNullPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="589" column="19" bodyfile="include/Graphs/PAG.h" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a45573c6019303fc731875df31636b059" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isBlkPtr</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isBlkPtr</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="593" column="17" bodyfile="include/Graphs/PAG.h" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1abad086cfecdab2d71033574456eb4eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isNullPtr</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isNullPtr</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="597" column="17" bodyfile="include/Graphs/PAG.h" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa9b2a2aa2e0f34c659b4728e7b0fe1ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isBlkObjOrConstantObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isBlkObjOrConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="601" column="17" bodyfile="include/Graphs/PAG.h" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a34ac3687d4f4cec9df4cd450c0019c6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isBlkObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isBlkObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="605" column="17" bodyfile="include/Graphs/PAG.h" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a5382518f3bc9c3bbb3148b9499ae5ae2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isConstantObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="609" column="17" bodyfile="include/Graphs/PAG.h" bodystart="609" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a2bd0a705705138be2bbc7e0b6ef3bf0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PAG::isNonPointerObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>isNonPointerObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="615" column="17" bodyfile="include/Graphs/PAG.h" bodystart="615" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a536287335ff3d05ff94b163b5334d935" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::getBlackHoleObj</definition>
        <argsstring>() const</argsstring>
        <name>getBlackHoleObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="636" column="25" bodyfile="include/Graphs/PAG.h" bodystart="636" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adbc0b23c24bc25f96540f011a08d02f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::getConstantObj</definition>
        <argsstring>() const</argsstring>
        <name>getConstantObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="640" column="25" bodyfile="include/Graphs/PAG.h" bodystart="640" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a941d6160fe0081816616f7369126ed21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::PAG::getNodeNumAfterPAGBuild</definition>
        <argsstring>() const</argsstring>
        <name>getNodeNumAfterPAGBuild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="646" column="18" bodyfile="include/Graphs/PAG.h" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a703bb4b820a92c72e17d3290e68a39d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PAG::setNodeNumAfterPAGBuild</definition>
        <argsstring>(u32_t num)</argsstring>
        <name>setNodeNumAfterPAGBuild</name>
        <param>
          <type>u32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="650" column="17" bodyfile="include/Graphs/PAG.h" bodystart="650" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1afc1e86e9690bb30138c9927368069f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::getBaseValNode</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>getBaseValNode</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
<para>Base and Offset methods for Value and Object node. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a base pointer node given a field pointer</para>
<para>Get a base pointer given a pointer Return the source node of its connected gep edge if this pointer has Otherwise return the node id itself </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="658" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="756" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a7cd89e53bb857f6b8ee09e291f5aad3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref></type>
        <definition>LocationSet PAG::getLocationSetFromBaseNode</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>getLocationSetFromBaseNode</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a base <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> given a pointer Return the source node of its connected normal gep edge Otherwise return the node id itself Size_t offset : gep offset </para>
        </detaileddescription>
        <inbodydescription>
<para>if this node is already a base node</para>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="659" column="17" bodyfile="lib/Graphs/PAG.cpp" bodystart="785" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae1e22e620954e3e9ede3f2bf0ac90c36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::getBaseObjNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getBaseObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="660" column="19" bodyfile="include/Graphs/PAG.h" bodystart="660" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a459e2ef671d002ef6edf25cf0bfb7924" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::getBaseObj</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getBaseObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="664" column="25" bodyfile="include/Graphs/PAG.h" bodystart="664" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a049069cb76eada008e65b71e08ccdf46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS &amp;</type>
        <definition>NodeBS &amp; PAG::getAllFieldsObjNode</definition>
        <argsstring>(const MemObj *obj)</argsstring>
        <name>getAllFieldsObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get all fields of an object. </para>
        </briefdescription>
        <detaileddescription>
<para>Get all fields object nodes of an object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="675" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="714" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a1eb0e444364673333ff6b97f14e70a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS &amp;</type>
        <definition>NodeBS &amp; PAG::getAllFieldsObjNode</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getAllFieldsObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all fields object nodes of an object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="676" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="723" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a19c4e63ab6129d4e7aeae8b280bb057b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS</type>
        <definition>NodeBS PAG::getFieldsAfterCollapse</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getFieldsAfterCollapse</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all fields object nodes of an object If this object is collapsed into one field insensitive object Then only return this field insensitive object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="677" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="736" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af97b7459e24b23498acece32fafd82ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addNode</definition>
        <argsstring>(PAGNode *node, NodeID i)</argsstring>
        <name>addNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>add node into <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Add a <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node into Node map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="683" column="19" bodyfile="include/Graphs/PAG.h" bodystart="683" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a7a7929598197f300b97393ecdffd81f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addValNode</definition>
        <argsstring>(const Value *val, NodeID i)</argsstring>
        <name>addValNode</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a value (pointer) node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="689" column="19" bodyfile="include/Graphs/PAG.h" bodystart="689" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab867cf7056089872daf2b27eb7ff1a8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addObjNode</definition>
        <argsstring>(const Value *val, NodeID i)</argsstring>
        <name>addObjNode</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a memory obj node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="695" column="19" bodyfile="include/Graphs/PAG.h" bodystart="695" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a51f03f1d0fdc9ccb0e0f150877e01eb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addRetNode</definition>
        <argsstring>(const SVFFunction *val, NodeID i)</argsstring>
        <name>addRetNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a unique return node for a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="702" column="19" bodyfile="include/Graphs/PAG.h" bodystart="702" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a86e660bbb9764bce241bdb5c91a6705c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addVarargNode</definition>
        <argsstring>(const SVFFunction *val, NodeID i)</argsstring>
        <name>addVarargNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a unique vararg node for a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="708" column="19" bodyfile="include/Graphs/PAG.h" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4f4cd384fe1b4bead9bfadb386e3f328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::addGepValNode</definition>
        <argsstring>(const Value *curInst, const Value *val, const LocationSet &amp;ls, NodeID i, const Type *type, u32_t fieldidx)</argsstring>
        <name>addGepValNode</name>
        <param>
          <type>const Value *</type>
          <declname>curInst</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
          <defname>gepVal</defname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>fieldidx</declname>
        </param>
        <briefdescription>
<para>Add a temp field value node, this method can only invoked by getGepValNode. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a temp field value node, this method can only invoked by getGepValNode due to constaint expression, curInst is used to distinguish different instructions (e.g., memorycpy) when creating <ref refid="class_s_v_f_1_1_gep_val_p_n" kindref="compound">GepValPN</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="715" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="573" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a39028e2fb42dec9e0b25a48400948d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::addGepObjNode</definition>
        <argsstring>(const MemObj *obj, const LocationSet &amp;ls)</argsstring>
        <name>addGepObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Add a field obj node, this method can only invoked by getGepObjNode. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a field obj node, this method can only invoked by getGepObjNode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="717" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="633" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ae3ae274db4f5a4f86a0579cb47530f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID PAG::addFIObjNode</definition>
        <argsstring>(const MemObj *obj)</argsstring>
        <name>addFIObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Add a field-insensitive node, this method can only invoked by getFIGepObjNode. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a field-insensitive node, this method can only invoked by getFIGepObjNode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="719" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="650" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a98b4beb7f17585173072f3bbea20eeb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addDummyValNode</definition>
        <argsstring>()</argsstring>
        <name>addDummyValNode</name>
        <briefdescription>
<para>Add a dummy value/object node according to node ID (llvm value is null) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="724" column="19" bodyfile="include/Graphs/PAG.h" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a279f9a8361c4fb438879713674455b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addDummyValNode</definition>
        <argsstring>(NodeID i)</argsstring>
        <name>addDummyValNode</name>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="728" column="19" bodyfile="include/Graphs/PAG.h" bodystart="728" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a37163a408fec4c43131efa79314f0fea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addDummyObjNode</definition>
        <argsstring>(const Type *type=NULL)</argsstring>
        <name>addDummyObjNode</name>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="732" column="19" bodyfile="include/Graphs/PAG.h" bodystart="732" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6d2c4132c03661348cf61aa62f35e25b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addDummyObjNode</definition>
        <argsstring>(NodeID i, const Type *type)</argsstring>
        <name>addDummyObjNode</name>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="736" column="19" bodyfile="include/Graphs/PAG.h" bodystart="736" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a2e17a208081f29c33180a5de2b4dd0e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::PAG::addDummyMemObj</definition>
        <argsstring>(NodeID i, const Type *type)</argsstring>
        <name>addDummyMemObj</name>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="741" column="25" bodyfile="include/Graphs/PAG.h" bodystart="741" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6b017ac98185865180d1442881278667" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addBlackholeObjNode</definition>
        <argsstring>()</argsstring>
        <name>addBlackholeObjNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="745" column="19" bodyfile="include/Graphs/PAG.h" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adb2e3171f5c5fe98093c8a27c43e068c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addConstantObjNode</definition>
        <argsstring>()</argsstring>
        <name>addConstantObjNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="749" column="19" bodyfile="include/Graphs/PAG.h" bodystart="749" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1afdd76ad274ec1ebe31587c459c6254aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addBlackholePtrNode</definition>
        <argsstring>()</argsstring>
        <name>addBlackholePtrNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="753" column="19" bodyfile="include/Graphs/PAG.h" bodystart="753" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a20fef02062c6047810907f0f8973ba2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addValNode</definition>
        <argsstring>(const Value *, PAGNode *node, NodeID i)</argsstring>
        <name>addValNode</name>
        <param>
          <type>const Value *</type>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a value (pointer) node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="760" column="19" bodyfile="include/Graphs/PAG.h" bodystart="760" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adfb70002cc08313c43c403c1203bf091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addObjNode</definition>
        <argsstring>(const Value *, PAGNode *node, NodeID i)</argsstring>
        <name>addObjNode</name>
        <param>
          <type>const Value *</type>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a memory obj node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="766" column="19" bodyfile="include/Graphs/PAG.h" bodystart="766" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af520c7fb9b396d8f159f7254b3828f31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addRetNode</definition>
        <argsstring>(const SVFFunction *, PAGNode *node, NodeID i)</argsstring>
        <name>addRetNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a unique return node for a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="772" column="19" bodyfile="include/Graphs/PAG.h" bodystart="772" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a10e33feca283850034891af28d7da43f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::PAG::addVarargNode</definition>
        <argsstring>(const SVFFunction *, PAGNode *node, NodeID i)</argsstring>
        <name>addVarargNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add a unique vararg node for a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="777" column="19" bodyfile="include/Graphs/PAG.h" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a277706ab8f62e6f95c660be9cb825a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PAG::addEdge</definition>
        <argsstring>(PAGNode *src, PAGNode *dst, PAGEdge *edge)</argsstring>
        <name>addEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add an edge into <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edge</para>
<para>Add a <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> edge into edge map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="785" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="692" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0c7cea14374ff762a9933b803853286e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge * PAG::hasNonlabeledEdge</definition>
        <argsstring>(PAGNode *src, PAGNode *dst, PAGEdge::PEDGEK kind)</argsstring>
        <name>hasNonlabeledEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if it is an intra-procedural edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="788" column="13" bodyfile="lib/Graphs/PAG.cpp" bodystart="663" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab2a0e681184accace607464278525cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge * PAG::hasLabeledEdge</definition>
        <argsstring>(PAGNode *src, PAGNode *dst, PAGEdge::PEDGEK kind, const ICFGNode *cs)</argsstring>
        <name>hasLabeledEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6" kindref="member">PAGEdge::PEDGEK</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>cs</declname>
          <defname>callInst</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this labeled edge exits, including store, call and load two store edge can have same dst and src but located in different basic blocks, thus flags are needed to distinguish them</para>
<para>Return true if it is an inter-procedural edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="791" column="13" bodyfile="lib/Graphs/PAG.cpp" bodystart="677" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a6ac3b5eb1f34ac2257d0ba2556ed52c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_addr_p_e" kindref="compound">AddrPE</ref> *</type>
        <definition>AddrPE * PAG::addAddrPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addAddrPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Address edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Address edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="794" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="311" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa50bf9fbf8ff2dff0392bff0319be622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_copy_p_e" kindref="compound">CopyPE</ref> *</type>
        <definition>CopyPE * PAG::addCopyPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addCopyPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Copy edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="796" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="328" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1af88ceecaac4e20ac1dd85908b3d190c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cmp_p_e" kindref="compound">CmpPE</ref> *</type>
        <definition>CmpPE * PAG::addCmpPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addCmpPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Compare edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="798" column="11" bodyfile="lib/Graphs/PAG.cpp" bodystart="345" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1acf01961e2d9f3eba91c6e44c1f0137af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_binary_o_p_p_e" kindref="compound">BinaryOPPE</ref> *</type>
        <definition>BinaryOPPE * PAG::addBinaryOPPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addBinaryOPPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Copy edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Compare edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="800" column="16" bodyfile="lib/Graphs/PAG.cpp" bodystart="363" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a44e671995575a58c4a92dc892b0b7239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_unary_o_p_p_e" kindref="compound">UnaryOPPE</ref> *</type>
        <definition>UnaryOPPE * PAG::addUnaryOPPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addUnaryOPPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Unary edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Unary edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="802" column="15" bodyfile="lib/Graphs/PAG.cpp" bodystart="380" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a0dc823946e0b86027b6093fe7c907543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref> *</type>
        <definition>LoadPE * PAG::addLoadPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addLoadPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Load edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Load edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="804" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="397" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1adbe031ff60dbcd981ff68e30a2e677ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref> *</type>
        <definition>StorePE * PAG::addStorePE</definition>
        <argsstring>(NodeID src, NodeID dst, const IntraBlockNode *val)</argsstring>
        <name>addStorePE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_intra_block_node" kindref="compound">IntraBlockNode</ref> *</type>
          <declname>val</declname>
          <defname>curVal</defname>
        </param>
        <briefdescription>
<para>Add Store edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Store edge Note that two store instructions may share the same Store <ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="806" column="13" bodyfile="lib/Graphs/PAG.cpp" bodystart="415" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa8bb3b659b70041e82aee15e8a595afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_call_p_e" kindref="compound">CallPE</ref> *</type>
        <definition>CallPE * PAG::addCallPE</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addCallPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Call edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Call edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="808" column="12" bodyfile="lib/Graphs/PAG.cpp" bodystart="432" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a2887310a7757f92063c5598ea694edbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_ret_p_e" kindref="compound">RetPE</ref> *</type>
        <definition>RetPE * PAG::addRetPE</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addRetPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Return edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Return edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="810" column="11" bodyfile="lib/Graphs/PAG.cpp" bodystart="449" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a49d8956f5723957509cbc620c3e12d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_gep_p_e" kindref="compound">GepPE</ref> *</type>
        <definition>GepPE * PAG::addGepPE</definition>
        <argsstring>(NodeID src, NodeID dst, const LocationSet &amp;ls, bool constGep)</argsstring>
        <name>addGepPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>constGep</declname>
        </param>
        <briefdescription>
<para>Add Gep edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Offset(Gep) edge Find the base node id of src and connect base node to dst node Create gep offset: (offset + baseOff &lt;nested struct gep size&gt;) </para>
        </detaileddescription>
        <inbodydescription>
<para>Since the offset from base to src is variant, the new gep edge being created is also a <ref refid="class_s_v_f_1_1_variant_gep_p_e" kindref="compound">VariantGepPE</ref> edge.</para>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="812" column="11" bodyfile="lib/Graphs/PAG.cpp" bodystart="514" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a4606d6ff072f5ac5974719035676792e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_normal_gep_p_e" kindref="compound">NormalGepPE</ref> *</type>
        <definition>NormalGepPE * PAG::addNormalGepPE</definition>
        <argsstring>(NodeID src, NodeID dst, const LocationSet &amp;ls)</argsstring>
        <name>addNormalGepPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Add Offset(Gep) edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add normal (Gep) edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="814" column="17" bodyfile="lib/Graphs/PAG.cpp" bodystart="533" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a9d575070ab5234078590f9e8bf80bbf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_variant_gep_p_e" kindref="compound">VariantGepPE</ref> *</type>
        <definition>VariantGepPE * PAG::addVariantGepPE</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addVariantGepPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add Variant(Gep) edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add variant(Gep) edge Find the base node id of src and connect base node to dst node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="816" column="18" bodyfile="lib/Graphs/PAG.cpp" bodystart="552" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a806249f7589b55d57a62a5473bebc2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_d_fork_p_e" kindref="compound">TDForkPE</ref> *</type>
        <definition>TDForkPE * PAG::addThreadForkPE</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addThreadForkPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Thread fork edge for parameter passing. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Thread fork edge for parameter passing from a spawner to its spawnees </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="818" column="14" bodyfile="lib/Graphs/PAG.cpp" bodystart="477" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a37c31f1829f540fb0a4b57b7de3e7bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_d_join_p_e" kindref="compound">TDJoinPE</ref> *</type>
        <definition>TDJoinPE * PAG::addThreadJoinPE</definition>
        <argsstring>(NodeID src, NodeID dst, const CallBlockNode *cs)</argsstring>
        <name>addThreadJoinPE</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add Thread join edge for parameter passing. </para>
        </briefdescription>
        <detaileddescription>
<para>Add Thread fork edge for parameter passing from a spawnee back to its spawners </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="820" column="14" bodyfile="lib/Graphs/PAG.cpp" bodystart="494" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1addb513f5571acf2854adc878e58cf523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref> *</type>
        <definition>PAGEdge * PAG::addBlackHoleAddrPE</definition>
        <argsstring>(NodeID node)</argsstring>
        <name>addBlackHoleAddrPE</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Set a pointer points-to black hole (e.g. int2ptr) </para>
        </briefdescription>
        <detaileddescription>
<para>Add blackhole/constant edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="824" column="13" bodyfile="lib/Graphs/PAG.cpp" bodystart="466" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a17fab82554f5a81c22c037b5813999e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PAG::isValidPointer</definition>
        <argsstring>(NodeID nodeId) const</argsstring>
        <name>isValidPointer</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
<para>Whether a node is a valid pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="828" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="914" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1a107c329c9524b2c029ff3fd8088dab67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PAG::isValidTopLevelPtr</definition>
        <argsstring>(const PAGNode *node)</argsstring>
        <name>isValidTopLevelPtr</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="830" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="922" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa18a51570a397eabffdd613fdb15b4ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::PAG::getGraphName</definition>
        <argsstring>() const</argsstring>
        <name>getGraphName</name>
        <briefdescription>
<para>Return graph name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="834" column="24" bodyfile="include/Graphs/PAG.h" bodystart="834" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1aa432bbc7c4e83abecdc8706972a9635b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAG::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
<para>Print <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Print this <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> graph including its nodes and edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="840" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="823" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab4326448a536de1c8c1513fcf6d45aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAG::dump</definition>
        <argsstring>(std::string name)</argsstring>
        <name>dump</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump this <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="843" column="10" bodyfile="lib/Graphs/PAG.cpp" bodystart="1007" bodyend="1010"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac8910c7330638bdf31c23d4cc03ba9c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>static PAG* SVF::PAG::getPAG</definition>
        <argsstring>(bool buildFromFile=false)</argsstring>
        <name>getPAG</name>
        <param>
          <type>bool</type>
          <declname>buildFromFile</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Singleton design here to make sure we only have one instance during any analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="148" column="23" bodyfile="include/Graphs/PAG.h" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ac606fa72b7f1d0b4901519f6bba02fc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void SVF::PAG::releasePAG</definition>
        <argsstring>()</argsstring>
        <name>releasePAG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="156" column="17" bodyfile="include/Graphs/PAG.h" bodystart="156" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_a_g_1ab6f0bc584f351839c9dba440e8d382a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PAG::handleBlackHole</definition>
        <argsstring>(bool b)</argsstring>
        <name>handleBlackHole</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> build configurations. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether to handle blackhole edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/PAG.h" line="178" column="17" bodyfile="lib/Graphs/PAG.cpp" bodystart="1016" bodyend="1019"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Program Assignment Graph for pointer analysis SymID and NodeID are equal here (same numbering). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/PAG.h" line="47" column="1" bodyfile="include/Graphs/PAG.h" bodystart="48" bodyend="845"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_a_g_1a6ac3b5eb1f34ac2257d0ba2556ed52c0" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addAddrPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad7b5d745134fa564934aa892f38a6990" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addBinaryNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1acf01961e2d9f3eba91c6e44c1f0137af" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addBinaryOPPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1addb513f5571acf2854adc878e58cf523" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addBlackHoleAddrPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6b017ac98185865180d1442881278667" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addBlackholeObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afdd76ad274ec1ebe31587c459c6254aa" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addBlackholePtrNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa8bb3b659b70041e82aee15e8a595afb" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCallPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a3767933efc81430ecd242879552f8a18" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa7cdda6d4397975f27dfa524ce7cfc80" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCallSiteArgs</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af10b739e5d4459cbf954e7edfd5dc268" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCallSiteRets</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a8485560177f2e3a4098b4b7d5ba3282c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCmpNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af88ceecaac4e20ac1dd85908b3d190c8" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCmpPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adb2e3171f5c5fe98093c8a27c43e068c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addConstantObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa50bf9fbf8ff2dff0392bff0319be622" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addCopyPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a2e17a208081f29c33180a5de2b4dd0e9" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addDummyMemObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a37163a408fec4c43131efa79314f0fea" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addDummyObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6d2c4132c03661348cf61aa62f35e25b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addDummyObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a98b4beb7f17585173072f3bbea20eeb6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addDummyValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a279f9a8361c4fb438879713674455b35" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addDummyValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a277706ab8f62e6f95c660be9cb825a27" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae3ae274db4f5a4f86a0579cb47530f8c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac74bc9bfdba81862977b6148dba5becc" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addFunArgs</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae99451bef14af36312dbf45e3447bb22" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addFunRet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a39028e2fb42dec9e0b25a48400948d48" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a49d8956f5723957509cbc620c3e12d2e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addGepPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4f4cd384fe1b4bead9bfadb386e3f328" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addGepValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adfd70b02bb37f3e17cb7d2edda2cf047" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addGlobalPAGEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae5d8ac3f715f0afdee0aa6194ad4a14a" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0dc823946e0b86027b6093fe7c907543" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addLoadPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af97b7459e24b23498acece32fafd82ef" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4606d6ff072f5ac5974719035676792e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addNormalGepPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab867cf7056089872daf2b27eb7ff1a8a" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adfb70002cc08313c43c403c1203bf091" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad117554c86d9e1ed90231032c96504b0" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addPhiNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a51f03f1d0fdc9ccb0e0f150877e01eb1" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addRetNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af520c7fb9b396d8f159f7254b3828f31" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addRetNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a2887310a7757f92063c5598ea694edbb" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addRetPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adbe031ff60dbcd981ff68e30a2e677ef" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addStorePE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a806249f7589b55d57a62a5473bebc2e4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addThreadForkPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a37c31f1829f540fb0a4b57b7de3e7bca" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addThreadJoinPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a13028887a4b608ace787c683cbd01209" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addToInstPAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6b0f6fd131875d60b51d6c29577b8f29" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addUnaryNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a44e671995575a58c4a92dc892b0b7239" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addUnaryOPPE</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a7a7929598197f300b97393ecdffd81f1" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a20fef02062c6047810907f0f8973ba2b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a86e660bbb9764bce241bdb5c91a6705c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addVarargNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a10e33feca283850034891af28d7da43f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addVarargNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a9d575070ab5234078590f9e8bf80bbf4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>addVariantGepPE</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac312c15d6c41f4c97e1a5f66b0036c06" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>binaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa9479778e9fe166b17bb765a7a1668a2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>BinaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a22595c35a89f82adf447c6924dbbb8b2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>BinaryOPList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1acc5e6a8469badb11c8f56738be4deb63" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>callSiteArgsListMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0ed3da89d9cba90888e04969dc43f5a3" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>callsiteHasRet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af63c417d121e37fd0427aa25ef5b15da" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>callSiteRetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a52e4a8cfefcde7d0acc8ae94135105a8" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>callSiteSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af34fb84e6a39ff6b23aa5e9381c7c80c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a52d16d0b3547a61b174424b91670e2ff" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aada10ac92c40951586031271478248c2" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>candidatePointers</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab51dc1fa314705f66d3319ea95adfc68" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>cmpNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a373335a3c28622cfc0aeb1ef7ae8ccf7" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CmpNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab33607f8f36bf0a47e91ac510872a60e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CmpPEList</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a5dfa3f178d4abf37177d0d74ff4c6a97" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a7bdc824c927d79b624e93c1135ab98a6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CopyPEList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aeb293a1fc183c51053bdeb749d094e5a" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CSToArgsListMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a7b983e115709d3461be9f24395c87ab4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>CSToRetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a5a6278a7244c926022288243007da790" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab4326448a536de1c8c1513fcf6d45aa2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a8ea029c95a38473b1611ce7323818fe5" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>findPAGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a682355bd8e695faedbe5546f98636ee0" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>fromFile</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aab9fa0c0f7f83055f7335fe7cf607f97" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>funArgsListMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a08f1b7f68a267b6cc5ad9cb3f1efede0" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>funHasRet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac24bbcc45a1c868705dac9204ff17316" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>FunPtrToCallSitesMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6cf9a9e75749e898d39026cb8c225c92" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>funPtrToCallSitesMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a2742d22cfc819f0c8f7e6880c0cfbaf4" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>funRetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a11b3e5d1aacf8a199b4ad35ce8cbca04" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>FunToArgsListMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a369ea2832e74716757a7d4afa7cb5d60" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>FunToPAGEdgeSetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a46ce928b6bfa06c0b4a08cd3c282f696" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>FunToRetMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aac2a1bfebed4b363e9477a3745184a2a" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>GepObjNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afe6d92c90401918b58644a575928012c" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>GepValNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a213d27e032e81e61a72be710e5f0de74" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>GepValPNMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a049069cb76eada008e65b71e08ccdf46" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a1eb0e444364673333ff6b97f14e70a17" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af771436bf36e2831d9c945c4dbc0be16" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getAllValidPtrs</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a459e2ef671d002ef6edf25cf0bfb7924" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBaseObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae1e22e620954e3e9ede3f2bf0ac90c36" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBaseObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afc1e86e9690bb30138c9927368069f11" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBaseValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6931eafe066036139d2538340ef9b95b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBinaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adc2f52d5c95c6b8718fe3f899d19cc2f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a536287335ff3d05ff94b163b5334d935" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBlackHoleObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a67dc43e25a29ff81f3e12c7b70061261" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getBlkPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4dac2dc4756bf3f84e6fa034a8b906da" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCallSiteArgsList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae0151d49c9199a2899d8b872dc1ebcfc" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCallSiteArgsMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae455de4db007a5bebffd3a9c16e0b107" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCallSiteRet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af46a20842683fbbc52ac554c0777fbdc" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCallSiteRets</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4309ced29efb4f351dafb867206bb38b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a667b240e083d720b486a47308e36ae55" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getCmpNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad1f9568cf8b514d1fe86fa3473836580" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getConstantNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1adbc0b23c24bc25f96540f011a08d02f2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getConstantObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1acde529dcb2054bf50a0793d8aa51bb07" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFieldObjNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a19c4e63ab6129d4e7aeae8b280bb057b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFieldsAfterCollapse</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a815b0acd760c050c7b352b2000675fc5" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFieldValNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afc69b91408401d2a92d68c3414f3402d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afc4c57a4d200296cc8f7e2a8aa62fcb4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad2ff2e50f8e5234979ba9cacc6a6268c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFunArgsList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab6779cc646bc50965722984f1a708811" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFunArgsMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae4bfb3e30a81cd8ece36f59a60f0f0ca" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFunPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a838a9fa42e68b5f32853f73fa05a7c09" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFunRet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac0835eaa3f23a53eb56a122bebe2ac6c" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getFunRets</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aad5fc74d2a9baf3630ba6546a74053e7" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac1dd6570b74bec2a0f2ffd7d2ee064b6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac2e844bdb316b2ab4bc780fbf8f48914" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGepValNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1acb2c9f92f0ed39f1cd823876c37510d3" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGlobalPAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa18a51570a397eabffdd613fdb15b4ac" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getGraphName</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getICFG</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a63a8131c082052fc4a8c61430ce196af" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getIndCallSites</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6a468180bff1e8f6143587546a2e7742" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0f59371e012da5b8e030d11d84e7154b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getInstPAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a05751b2d055ea53b8a3452ead8380813" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getInstPTAPAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0398b47429454e019884f0867262430a" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getIntraPAGEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae73900fac2a97736976bfad011c3cdb5" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getIntraPAGEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a7cd89e53bb857f6b8ee09e291f5aad3f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getLocationSetFromBaseNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a74f9e22acb40bf952c00168a221c0b00" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a941d6160fe0081816616f7369126ed21" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getNodeNumAfterPAGBuild</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a745eddbb75d513d9cbf76709e3d7057e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getNullPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a2b288fce8efa1b0b1b620efec2c96eb6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getObject</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a45017000af4946b27878bd1fbf58050f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getObject</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a9e35f1d6a30c6200fb3c0c43ba4f36cb" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getObjectNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a12be35fbe2d830fb23fd0173eb66c108" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getObjectNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afe02872115f15623178cb1ed8f737992" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getObjectNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac8910c7330638bdf31c23d4cc03ba9c5" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a74de66edb19a534fe85d4621085021ec" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPAGEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPAGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a42a7abab6a762d75455b0954097dddc4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPAGNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad81e9de87891387c6fc860d964316d4f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPhiNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae5125dd33403e055078e1c9d6ce6d778" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getPTAEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a4419b16246ed90e275a7be38d683d36d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getReturnNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a71a4647b6ac6a67d69ba580b3f5cac6a" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getUnaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a5f49b7da110a626ed6605d1f108dfa25" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getValueNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad8c9f6134aa97d310f8eebbd7bf9bc8f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getValueNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa7b2e9e0b3386e27af8413be4c36f519" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>getVarargNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a1235a44b3fed25e3d3bcfc868948822f" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>globPAGEdgesSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab6f0bc584f351839c9dba440e8d382a0" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>handleBlackHole</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a157df68295822a17ad07a850a230bae1" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasCallSiteArgsMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1abfb24b0a57ffe59f345a7490ce64e63d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasFunArgsList</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab2a0e681184accace607464278525cba" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasLabeledEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0c7cea14374ff762a9933b803853286e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasNonlabeledEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a8b498249185812b2bd1e9bd2aac50e4e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasPAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ad6d3a47e27f3aa9f3729fd9097da27d4" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasPTAPAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae3cdf8c2139ba043595b420624f25427" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>hasValueNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa26d3c84f970deaa76ae404597abf960" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>icfg</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::PAG</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a704bbd07934ac14c08ab891946292c04" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>indCallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af4e69fb580bc8eec1064ac967f4f7cb2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>initialiseCandidatePointers</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ace643a606d59eb972d0f55590745bd5f" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>inst2PAGEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a8fb39e9156bb5cf07dc2329bfcfcd6f7" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>Inst2PAGEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a925ccfc7169d5c03bffbe945dedc90b6" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>inst2PTAPAGEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab5292b85206dfa622cff12146755d616" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isBinaryNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a34ac3687d4f4cec9df4cd450c0019c6d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isBlkObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa9b2a2aa2e0f34c659b4728e7b0fe1ba" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a45573c6019303fc731875df31636b059" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isBlkPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa814a179b4e96ef9f6c8e00fb063eb0b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isBuiltFromFile</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab10f10221807584aa4547a612cb40a8b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isCmpNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a5382518f3bc9c3bbb3148b9499ae5ae2" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isConstantObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a20e9df3a6397153dc3741ad5b370dc94" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isFunPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1abe123c69769f8edb29acb32aaef1449d" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isIndirectCallSites</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a2bd0a705705138be2bbc7e0b6ef3bf0f" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isNonPointerObj</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1abad086cfecdab2d71033574456eb4eb6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isNullPtr</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a9f33422f70dc4efeb741042564aac0ba" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isPhiNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac0e8f9b3b7255479b70aecb97e9f8f00" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isUnaryNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a17fab82554f5a81c22c037b5813999e3" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isValidPointer</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a107c329c9524b2c029ff3fd8088dab67" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>isValidTopLevelPtr</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a49da7e7d6273a0d8798166f95ce6bb16" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>MemObjToFieldsMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1abe896f8fd3c8adc60bbb1a23862da8df" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>memToFieldsMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a3aea90fd18662381bb601779b7c63275" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeLocationSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a80b31ccc3263c7d5d93aa1247eea0853" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeLocationSetMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a911d401c9572219d08552ea96635e081" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>nodeNumAfterPAGBuild</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab17a2bedce0f05951ff19934c317460e" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeOffset</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1afc24739cd11b6a85e1e62b8a409a2e56" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeOffsetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af77e6ff9106bcb2502ceb7ce885d11a6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodePairSetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a8974543192816d31127076f5f7292825" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a0a417d229823991031eda0b97148481c" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>PAG</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a50d0968c6a467ab224ebc73d8beff852" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a32c107e02c73642ff4afd08b6cf22232" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>PAGEdgeKindToSetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a3b70f1f3b785d735243962e83e210652" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>PAGEdgeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ab18ceda2810981f4d4bb47ac88705577" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>PAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a1aedb70211aa31a4741615e611d64397" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>PAGNodeList</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1af3158e346a519beca6aebf6c9092efc0" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>phiNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aaf91fa0a5807355e276eeaeee0638aea" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>PHINodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1aa432bbc7c4e83abecdc8706972a9635b" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>print</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ae297792b6cf9e7782ef4268f48c01748" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>PTAPAGEdgeKindToSetMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1ac606fa72b7f1d0b4901519f6bba02fc7" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>releasePAG</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a703bb4b820a92c72e17d3290e68a39d8" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>setNodeNumAfterPAGBuild</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1acebd1174f9bbeeb35ccfdf87a8f0998a" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>symInfo</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a7bd46d36d58cc8ec70d8a42e5eb93683" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>totalPTAPAGEdge</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a5c450f3a87983c66a477081acd97a49f" prot="private" virt="non-virtual"><scope>SVF::PAG</scope><name>unaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a471804c7fbdfacd90915c3a9cec7fccd" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>UnaryNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a6b8c71339e37338402b82734145898b6" prot="public" virt="non-virtual"><scope>SVF::PAG</scope><name>UnaryOPList</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::PAG</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_p_a_g_1a79b6cf7f3c13a96513b33670ef2c8df1" prot="public" virt="virtual"><scope>SVF::PAG</scope><name>~PAG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
