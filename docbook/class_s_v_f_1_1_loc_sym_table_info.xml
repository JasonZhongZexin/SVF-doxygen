<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_loc_sym_table_info" xml:lang="en-US">
<title>SVF::LocSymTableInfo Class Reference</title>
<indexterm><primary>SVF::LocSymTableInfo</primary></indexterm>
<para>
<computeroutput>#include &lt;SymbolTableInfo.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::LocSymTableInfo:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_loc_sym_table_info.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1a6ae1ada9c99ceb53fb41f3b59696423e"/><link linkend="_class_s_v_f_1_1_loc_sym_table_info_1a6ae1ada9c99ceb53fb41f3b59696423e">LocSymTableInfo</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1ae1789cb25f50fbce3fc44a14a2cf124d"/>virtual <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1ae1789cb25f50fbce3fc44a14a2cf124d">~LocSymTableInfo</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1a4aa6bf984692e879ad12806d35a6d2be">computeGepOffset</link> (const User *V, <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;ls)</para>

<para>Compute gep offset. </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1a81763320f531da09014b4f5019dc8144">getModulusOffset</link> (const <link linkend="_class_s_v_f_1_1_mem_obj">MemObj</link> *obj, const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;ls)</para>

<para>Given an offset from a Gep Instruction, return it modulus offset by considering memory layout. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1a1b4b45547634b0c68c363ce21870e610">verifyStructSize</link> (<link linkend="_class_s_v_f_1_1_st_info">StInfo</link> *stInfo, u32_t structSize)</para>

<para>Verify struct size construction. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1aedca0dbfb8641cefe68d547e3f4d62e8"/>virtual void <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1aedca0dbfb8641cefe68d547e3f4d62e8">collectStructInfo</link> (const <link linkend="_namespace_s_v_f_1a2bf58575ac7d068e0f1a4cf953b9e6cb">StructType</link> *T)</para>

<para>Collect the struct info. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_loc_sym_table_info_1a45b52cb8f8634ecf8bfb33f8e71bb82f">collectArrayInfo</link> (const ArrayType *T)</para>

<para>Collect the array info. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Bytes/bits-level modeling of memory locations to handle weakly type languages. (declared with one type but accessed as another) Abstract memory objects are created according to the static allocated size. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1a45b52cb8f8634ecf8bfb33f8e71bb82f"/>    <section>
    <title>collectArrayInfo()</title>
<indexterm><primary>collectArrayInfo</primary><secondary>SVF::LocSymTableInfo</secondary></indexterm>
<indexterm><primary>SVF::LocSymTableInfo</primary><secondary>collectArrayInfo</secondary></indexterm>
<para><computeroutput>void LocSymTableInfo::collectArrayInfo (const ArrayType * T)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Collect the array info. </para>
</para>

<para>Collect array information </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_symbol_table_info_1aea1c4ec32c307feb5da455a41cc51b5e">SVF::SymbolTableInfo</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1a4aa6bf984692e879ad12806d35a6d2be"/>    <section>
    <title>computeGepOffset()</title>
<indexterm><primary>computeGepOffset</primary><secondary>SVF::LocSymTableInfo</secondary></indexterm>
<indexterm><primary>SVF::LocSymTableInfo</primary><secondary>computeGepOffset</secondary></indexterm>
<para><computeroutput>bool LocSymTableInfo::computeGepOffset (const User * V, <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp; ls)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Compute gep offset. </para>
</para>

<para>Compute gep offset </para>

<para>variant offset</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_symbol_table_info_1a86b742ca197b3505b3246d6bed2484db">SVF::SymbolTableInfo</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1a81763320f531da09014b4f5019dc8144"/>    <section>
    <title>getModulusOffset()</title>
<indexterm><primary>getModulusOffset</primary><secondary>SVF::LocSymTableInfo</secondary></indexterm>
<indexterm><primary>SVF::LocSymTableInfo</primary><secondary>getModulusOffset</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> LocSymTableInfo::getModulusOffset (const <link linkend="_class_s_v_f_1_1_mem_obj">MemObj</link> * obj, const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp; ls)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Given an offset from a Gep Instruction, return it modulus offset by considering memory layout. </para>
</para>

<para>Given <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> from a Gep Instruction, return a new <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> which matches the field information of this <link linkend="_class_s_v_f_1_1_obj_type_info">ObjTypeInfo</link> by considering memory layout </para>

<para>Find an appropriate field for this <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link></para>

<para>This location set represent one object</para>

<para>if the offset is negative, it&apos;s possible that we&apos;re looking for an obj node out of range of current struct. Make the offset positive so we can still get a node within current struct to represent this obj.</para>

<para>This location set represents multiple objects</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_symbol_table_info_1a480a7565dcb5d9a94f4b0ffb44b127ee">SVF::SymbolTableInfo</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_loc_sym_table_info_1a1b4b45547634b0c68c363ce21870e610"/>    <section>
    <title>verifyStructSize()</title>
<indexterm><primary>verifyStructSize</primary><secondary>SVF::LocSymTableInfo</secondary></indexterm>
<indexterm><primary>SVF::LocSymTableInfo</primary><secondary>verifyStructSize</secondary></indexterm>
<para><computeroutput>void LocSymTableInfo::verifyStructSize (<link linkend="_class_s_v_f_1_1_st_info">StInfo</link> * stinfo, u32_t structSize)</computeroutput></para><para>

<para>Verify struct size construction. </para>
</para>

<para>Verify struct size </para>

<para>Please note this verify may not be complete as different machine has different alignment mechanism</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/SVF-FE/SymbolTableInfo.hlib/MemoryModel/MemModel.cpp</section>
</section>
