<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_mem_obj" kind="class" language="C++" prot="public">
    <compoundname>SVF::MemObj</compoundname>
    <includes refid="_mem_model_8h" local="no">MemModel.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_mem_obj_1a011f324448f2796acaff6d2e388582e9" prot="private" static="no" mutable="no">
        <type>const Value *</type>
        <definition>const Value* SVF::MemObj::refVal</definition>
        <argsstring></argsstring>
        <name>refVal</name>
        <briefdescription>
<para>The unique pointer value refer this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="289" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_mem_obj_1a93ab11a1150b015bd7f88f70d4c80054" prot="private" static="no" mutable="no">
        <type>SymID</type>
        <definition>SymID SVF::MemObj::GSymID</definition>
        <argsstring></argsstring>
        <name>GSymID</name>
        <briefdescription>
<para>The unique id in the graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="291" column="11" bodyfile="include/MemoryModel/MemModel.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_mem_obj_1a750770ea992d39b22c8b2dda9aff2eaf" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_obj_type_info" kindref="compound">ObjTypeInfo</ref> *</type>
        <definition>ObjTypeInfo* SVF::MemObj::typeInfo</definition>
        <argsstring></argsstring>
        <name>typeInfo</name>
        <briefdescription>
<para>Type information of this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="293" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ab22373574ae9dff2f8ffbef16d5b339c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MemObj::MemObj</definition>
        <argsstring>(const Value *val, SymID id)</argsstring>
        <name>MemObj</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SymID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor of a memory object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="298" column="5" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ac5d2dcf38bd4ba539b10c9b4838c4d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MemObj::MemObj</definition>
        <argsstring>(SymID id, const Type *type=NULL)</argsstring>
        <name>MemObj</name>
        <param>
          <type>SymID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor for black hole and constant obj. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor of a memory object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="301" column="5" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ad56f353dde7462dd54297e1b51e6eb05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::MemObj::~MemObj</definition>
        <argsstring>()</argsstring>
        <name>~MemObj</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="304" column="5" bodyfile="include/MemoryModel/MemModel.h" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a768e82826964c68673af7db3b5702442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MemObj::init</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>init</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Initialize the object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="310" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="64" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a581e1d4f060a0fe5a7cac1c05508caa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MemObj::init</definition>
        <argsstring>(const Type *type)</argsstring>
        <name>init</name>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initialize black hole and constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="313" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="243" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1aa4fa7a1b86d66692ffffeaee0e187216" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const llvm::Type *</type>
        <definition>const Type * MemObj::getType</definition>
        <argsstring>() const</argsstring>
        <name>getType</name>
        <briefdescription>
<para>Get obj type. </para>
        </briefdescription>
        <detaileddescription>
<para>Get obj type info. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="316" column="22" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="278" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a7d029aa6ac6d1427831ed8bc166ba22f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::MemObj::getMaxFieldOffsetLimit</definition>
        <argsstring>() const</argsstring>
        <name>getMaxFieldOffsetLimit</name>
        <briefdescription>
<para>Get max field offset limit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="319" column="19" bodyfile="include/MemoryModel/MemModel.h" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ae952c8b6b92c6cbef9494a83b411a60f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::MemObj::getRefVal</definition>
        <argsstring>() const</argsstring>
        <name>getRefVal</name>
        <briefdescription>
<para>Get the reference value to this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="325" column="24" bodyfile="include/MemoryModel/MemModel.h" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ad7f7de744715c3acaf3d48822865c87b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::MemObj::getSymId</definition>
        <argsstring>() const</argsstring>
        <name>getSymId</name>
        <briefdescription>
<para>Get the memory object id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="331" column="18" bodyfile="include/MemoryModel/MemModel.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a9d50a00ff608df21f50b3b2823128901" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isFieldInsensitive</definition>
        <argsstring>() const</argsstring>
        <name>isFieldInsensitive</name>
        <briefdescription>
<para>Return true if its field limit is 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="337" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1af2546305536df79576fe02a1aa1fffaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MemObj::setFieldInsensitive</definition>
        <argsstring>()</argsstring>
        <name>setFieldInsensitive</name>
        <briefdescription>
<para>Set the memory object to be field insensitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="343" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a981b7424901ef74467f725ffc9fec0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MemObj::setFieldSensitive</definition>
        <argsstring>()</argsstring>
        <name>setFieldSensitive</name>
        <briefdescription>
<para>Set the memory object to be field sensitive (up to max field limit) </para>
        </briefdescription>
        <detaileddescription>
<para>Set mem object to be field sensitive (up to maximum field limit) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="349" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a7b890ca9e93b1c61cc6437b7e6a82a8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MemObj::isBlackHoleObj</definition>
        <argsstring>() const</argsstring>
        <name>isBlackHoleObj</name>
        <briefdescription>
<para>Whether it is a black hole object. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether it is a black hole object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="352" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a0da6483089b2d80778535929426c1540" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isFunction</definition>
        <argsstring>() const</argsstring>
        <name>isFunction</name>
        <briefdescription>
<para>object attributes methods </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="356" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1aa513ca5bd3927c9f697b504a70e57013" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isGlobalObj</definition>
        <argsstring>() const</argsstring>
        <name>isGlobalObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="360" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1abd776509d1ae281a246acfb168efe2ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isStaticObj</definition>
        <argsstring>() const</argsstring>
        <name>isStaticObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="364" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a65735220b56354f7b6c7ce6753f84e4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isStack</definition>
        <argsstring>() const</argsstring>
        <name>isStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="368" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1af8f4f85cfbcb09615fb04ca63d634138" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isHeap</definition>
        <argsstring>() const</argsstring>
        <name>isHeap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="372" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a88ce05dfb3c16598fe5a8968ee56c100" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isStruct</definition>
        <argsstring>() const</argsstring>
        <name>isStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="377" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a5796d7fec7f0fc2260e8a36493409eab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isArray</definition>
        <argsstring>() const</argsstring>
        <name>isArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="381" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a5a6887b8ae47b21ba82324daced74ac0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isVarStruct</definition>
        <argsstring>() const</argsstring>
        <name>isVarStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="385" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a167ed4be108aa7833aa267470d256766" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isVarArray</definition>
        <argsstring>() const</argsstring>
        <name>isVarArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="389" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a846fafa3f005531525856df4581e33fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isConstStruct</definition>
        <argsstring>() const</argsstring>
        <name>isConstStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="393" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a347eacc3e472c706600c25d7bd46bed6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isConstArray</definition>
        <argsstring>() const</argsstring>
        <name>isConstArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="397" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1ad67bc82cb51d0eb23c92c2ff9456c636" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isConstant</definition>
        <argsstring>() const</argsstring>
        <name>isConstant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="401" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a1ecb652416c602e1c5e3d9e7be580c3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::hasPtrObj</definition>
        <argsstring>() const</argsstring>
        <name>hasPtrObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="405" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1af903baaf5f0b72fb7faed3041c2743c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::isNonPtrFieldObj</definition>
        <argsstring>(const LocationSet &amp;ls) const</argsstring>
        <name>isNonPtrFieldObj</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="409" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a1a8601b72b6e6df211db1fffdd54c48b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::MemObj::operator==</definition>
        <argsstring>(const MemObj &amp;mem) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> &amp;</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Operator overloading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="416" column="17" bodyfile="include/MemoryModel/MemModel.h" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_mem_obj_1a1e6ff4c2b04b07c5f71e5e7a6a0d7735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MemObj::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/MemModel.h" line="422" column="10" bodyfile="lib/MemoryModel/MemModel.cpp" bodystart="295" bodyend="299"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Memory Object </para>
    </detaileddescription>
    <location file="include/MemoryModel/MemModel.h" line="284" column="1" bodyfile="include/MemoryModel/MemModel.h" bodystart="285" bodyend="423"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_mem_obj_1a1e6ff4c2b04b07c5f71e5e7a6a0d7735" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a7d029aa6ac6d1427831ed8bc166ba22f" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>getMaxFieldOffsetLimit</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ae952c8b6b92c6cbef9494a83b411a60f" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>getRefVal</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ad7f7de744715c3acaf3d48822865c87b" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>getSymId</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1aa4fa7a1b86d66692ffffeaee0e187216" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a93ab11a1150b015bd7f88f70d4c80054" prot="private" virt="non-virtual"><scope>SVF::MemObj</scope><name>GSymID</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a1ecb652416c602e1c5e3d9e7be580c3c" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>hasPtrObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a768e82826964c68673af7db3b5702442" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>init</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a581e1d4f060a0fe5a7cac1c05508caa6" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>init</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a5796d7fec7f0fc2260e8a36493409eab" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isArray</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a7b890ca9e93b1c61cc6437b7e6a82a8c" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isBlackHoleObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ad67bc82cb51d0eb23c92c2ff9456c636" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isConstant</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a347eacc3e472c706600c25d7bd46bed6" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isConstArray</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a846fafa3f005531525856df4581e33fd" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isConstStruct</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a9d50a00ff608df21f50b3b2823128901" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a0da6483089b2d80778535929426c1540" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isFunction</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1aa513ca5bd3927c9f697b504a70e57013" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isGlobalObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1af8f4f85cfbcb09615fb04ca63d634138" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isHeap</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1af903baaf5f0b72fb7faed3041c2743c9" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isNonPtrFieldObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a65735220b56354f7b6c7ce6753f84e4b" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isStack</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1abd776509d1ae281a246acfb168efe2ea" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isStaticObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a88ce05dfb3c16598fe5a8968ee56c100" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isStruct</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a167ed4be108aa7833aa267470d256766" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isVarArray</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a5a6887b8ae47b21ba82324daced74ac0" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>isVarStruct</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ab22373574ae9dff2f8ffbef16d5b339c" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>MemObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ac5d2dcf38bd4ba539b10c9b4838c4d23" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>MemObj</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a1a8601b72b6e6df211db1fffdd54c48b" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a011f324448f2796acaff6d2e388582e9" prot="private" virt="non-virtual"><scope>SVF::MemObj</scope><name>refVal</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1af2546305536df79576fe02a1aa1fffaf" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>setFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a981b7424901ef74467f725ffc9fec0ca" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>setFieldSensitive</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1a750770ea992d39b22c8b2dda9aff2eaf" prot="private" virt="non-virtual"><scope>SVF::MemObj</scope><name>typeInfo</name></member>
      <member refid="class_s_v_f_1_1_mem_obj_1ad56f353dde7462dd54297e1b51e6eb05" prot="public" virt="non-virtual"><scope>SVF::MemObj</scope><name>~MemObj</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
