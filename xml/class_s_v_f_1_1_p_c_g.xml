<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_p_c_g" kind="class" language="C++" prot="public">
    <compoundname>SVF::PCG</compoundname>
    <includes refid="_p_c_g_8h" local="no">PCG.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_c_g_1a0dea1e31042fa960f7a259949e142bcf" prot="public" static="no">
        <type>Set&lt; const Function * &gt;</type>
        <definition>typedef Set&lt;const Function*&gt; SVF::PCG::FunSet</definition>
        <argsstring></argsstring>
        <name>FunSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="32" column="17" bodyfile="include/MTA/PCG.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_c_g_1aca2efdefda1f95a6450eca4a781cbefa" prot="public" static="no">
        <type>std::vector&lt; const Function * &gt;</type>
        <definition>typedef std::vector&lt;const Function*&gt; SVF::PCG::FunVec</definition>
        <argsstring></argsstring>
        <name>FunVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="33" column="25" bodyfile="include/MTA/PCG.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_c_g_1a866cab5d550f60984d66068474755e2d" prot="public" static="no">
        <type>Set&lt; const Instruction * &gt;</type>
        <definition>typedef Set&lt;const Instruction*&gt; SVF::PCG::CallInstSet</definition>
        <argsstring></argsstring>
        <name>CallInstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="34" column="17" bodyfile="include/MTA/PCG.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_c_g_1a19fea9790fffea9861c0dc7817b60a3e" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; const Function * &gt;</type>
        <definition>typedef FIFOWorkList&lt;const Function*&gt; SVF::PCG::FunWorkList</definition>
        <argsstring></argsstring>
        <name>FunWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="35" column="26" bodyfile="include/MTA/PCG.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_p_c_g_1a05759205f1362b6d72041cf669cf028d" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; const BasicBlock * &gt;</type>
        <definition>typedef FIFOWorkList&lt;const BasicBlock*&gt; SVF::PCG::BBWorkList</definition>
        <argsstring></argsstring>
        <name>BBWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="36" column="26" bodyfile="include/MTA/PCG.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a3f7f0c7aaa768f7e834b4763b18d8223" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::PCG::spawners</definition>
        <argsstring></argsstring>
        <name>spawners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="39" column="12" bodyfile="include/MTA/PCG.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a7191718edabfd8ce2df5bfbea683c1fa" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::PCG::spawnees</definition>
        <argsstring></argsstring>
        <name>spawnees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="40" column="12" bodyfile="include/MTA/PCG.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1ab3a3d18bac6e1f833583d41fa562caea" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::PCG::followers</definition>
        <argsstring></argsstring>
        <name>followers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="41" column="12" bodyfile="include/MTA/PCG.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a96f91b051a8035b614e015bf4d5081e0" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::PCG::mhpfuns</definition>
        <argsstring></argsstring>
        <name>mhpfuns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="42" column="12" bodyfile="include/MTA/PCG.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1ae9026f717c442198ffa90ff66f482c92" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::PCG::callgraph</definition>
        <argsstring></argsstring>
        <name>callgraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="43" column="18" bodyfile="include/MTA/PCG.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a985b0c790c582d15e6242950ac66f574" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::PCG::mod</definition>
        <argsstring></argsstring>
        <name>mod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="44" column="15" bodyfile="include/MTA/PCG.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1adb917fc3adc3b0c3aedd57e9c77eae05" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::PCG::pta</definition>
        <argsstring></argsstring>
        <name>pta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="45" column="21" bodyfile="include/MTA/PCG.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a8215dc3643d1c4fb3d489e80cd3db336" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_thread_a_p_i" kindref="compound">ThreadAPI</ref> *</type>
        <definition>ThreadAPI* SVF::PCG::tdAPI</definition>
        <argsstring></argsstring>
        <name>tdAPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="46" column="15" bodyfile="include/MTA/PCG.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_p_c_g_1a859545671beab2a85c721ce98b785452" prot="private" static="no" mutable="no">
        <type>CallInstSet</type>
        <definition>CallInstSet SVF::PCG::spawnCallSites</definition>
        <argsstring></argsstring>
        <name>spawnCallSites</name>
        <briefdescription>
<para>Callsites direct or Indirect call a function which spawn a thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="49" column="17" bodyfile="include/MTA/PCG.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a13bfb66d3c02157cd3bebad1f829d704" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::isSpawnerFun</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>isSpawnerFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Add/Get methods for thread properties of a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="53" column="17" bodyfile="include/MTA/PCG.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a4196d5ffc1542288fd7df5daffaca894" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::isSpawneeFun</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>isSpawneeFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="57" column="17" bodyfile="include/MTA/PCG.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a7531d638b4f8aca4f0a3af82391001d9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::isFollowerFun</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>isFollowerFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="61" column="17" bodyfile="include/MTA/PCG.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a11c45407138211987e5143d81ccceb95" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::addSpawnerFun</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>addSpawnerFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="65" column="17" bodyfile="include/MTA/PCG.h" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1acc48f65798275f5443b34b84e4bb6eae" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::addSpawneeFun</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>addSpawneeFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="71" column="17" bodyfile="include/MTA/PCG.h" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a53e95f74121cd6e35b73f345139f6b00" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::addFollowerFun</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>addFollowerFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="77" column="17" bodyfile="include/MTA/PCG.h" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a1d946482cce92f7b1718a2a8c178be0b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::addSpawnsite</definition>
        <argsstring>(const Instruction *callInst)</argsstring>
        <name>addSpawnsite</name>
        <param>
          <type>const Instruction *</type>
          <declname>callInst</declname>
        </param>
        <briefdescription>
<para>Add/search spawn sites which directly or indirectly create a thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="87" column="17" bodyfile="include/MTA/PCG.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1ad7fa3ac0bd5820df718295f66dbf1edc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PCG::isSpawnsite</definition>
        <argsstring>(const Instruction *callInst)</argsstring>
        <name>isSpawnsite</name>
        <param>
          <type>const Instruction *</type>
          <declname>callInst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="91" column="17" bodyfile="include/MTA/PCG.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a24ef8314d00dadf8f29457d059e2a64b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallInstSet::iterator</type>
        <definition>CallInstSet::iterator SVF::PCG::spawnSitesBegin</definition>
        <argsstring>() const</argsstring>
        <name>spawnSitesBegin</name>
        <briefdescription>
<para>Spawn sites iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="98" column="34" bodyfile="include/MTA/PCG.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1abda3481828c0d55d3ca0d4b9339daeae" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallInstSet::iterator</type>
        <definition>CallInstSet::iterator SVF::PCG::spawnSitesEnd</definition>
        <argsstring>() const</argsstring>
        <name>spawnSitesEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="102" column="34" bodyfile="include/MTA/PCG.h" bodystart="102" bodyend="105"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a482925e80c66f258e0fb863ee6948081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::PCG::PCG</definition>
        <argsstring>(PointerAnalysis *an)</argsstring>
        <name>PCG</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>an</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="111" column="5" bodyfile="include/MTA/PCG.h" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a50b677ec622247a464cee7f0f45c5a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PCG::analyze</definition>
        <argsstring>()</argsstring>
        <name>analyze</name>
        <briefdescription>
<para>We start the pass here. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether two functions may happen in parallel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="119" column="18" bodyfile="lib/MTA/PCG.cpp" bodystart="20" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a3986717a8a3e1515747c3ab2c3e93ca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::PCG::~PCG</definition>
        <argsstring>()</argsstring>
        <name>~PCG</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="122" column="13" bodyfile="include/MTA/PCG.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a0a1d0abba4f0775a5d1e9b13aad2f2d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PCG::mayHappenInParallel</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2) const</argsstring>
        <name>mayHappenInParallel</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Interface to query whether two function may happen-in-parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="127" column="18" bodyfile="lib/MTA/PCG.cpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a4cab54d7273424c8b26376d8daf15e06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PCG::mayHappenInParallelBetweenFunctions</definition>
        <argsstring>(const Function *fun1, const Function *fun2) const</argsstring>
        <name>mayHappenInParallelBetweenFunctions</name>
        <param>
          <type>const Function *</type>
          <declname>fun1</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>fun2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="128" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a3106e03b7df8b34f50c769e1417f341c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::PCG::getMHPFunctions</definition>
        <argsstring>() const</argsstring>
        <name>getMHPFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="130" column="25" bodyfile="include/MTA/PCG.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a23752f0a9fe4f01698808d0a50ccc896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::initFromThreadAPI</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>initFromThreadAPI</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Initialize spawner and spawnee sets with threadAPI. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize thread spawners and spawnees from threadAPI functions a procedure is a spawner if it creates a thread and the created thread is still existent on its return a procedure is a spawnee if it is created by fork call </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: handle indirect call here for the fork Fun</para>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="136" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="67" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1adff1702e1b0a902de7ded742846fe137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::inferFromCallGraph</definition>
        <argsstring>()</argsstring>
        <name>inferFromCallGraph</name>
        <briefdescription>
<para>Infer spawner spawnee and followers sets by traversing on callGraph. </para>
        </briefdescription>
        <detaileddescription>
<para>Infer spawners and spawnees from call graph. The inference are recursively done spawners: procedures may create a thread and return with the created thread still running spawnees: procedures may be executed as a spawned thread followers: procedures may be invoked by a thread after the thread returns from a spawner (procedure may be called after pthread_creat is called). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="140" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1aef06745128e4e99c8e3bab226a337041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::collectSpawners</definition>
        <argsstring>()</argsstring>
        <name>collectSpawners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>spawner: given a spawner, all its callers on callgraph are spawners </para>
        </detaileddescription>
        <inbodydescription>
<para>find all the spawners recursively on call graph</para>
<para>add all the callsites from callers to callee (spawner) as a spawn site.</para>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="141" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="116" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a8cff88e2a6cee5f655e491f9f2967460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::collectSpawnees</definition>
        <argsstring>()</argsstring>
        <name>collectSpawnees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>spawnee: given a spawnee, all its callees on callgraph are spawnees </para>
        </detaileddescription>
        <inbodydescription>
<para>find all the spawnees recursively on call graph</para>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="142" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="157" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a075370a557f111219530e166df745c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::collectFollowers</definition>
        <argsstring>()</argsstring>
        <name>collectFollowers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>collect follower procedures which may be called after pthread_create is invoked directly or indirectly a procedure which is called from a follower is also a follower. </para>
        </detaileddescription>
        <inbodydescription>
<para>identify initial followers</para>
<para>find all the followers recursively on call graph</para>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="143" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="235" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1ae5ee8cf8cfe42854407190f30f3b6c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::identifyFollowers</definition>
        <argsstring>()</argsstring>
        <name>identifyFollowers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify initial followers a procedure whose callsite lies in a control flow path that starts just after a spawner&apos;s callsite </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="144" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="187" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a6efd56a0a1810cf9036dd9203ea5e71e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::PCG::getSpawners</definition>
        <argsstring>() const</argsstring>
        <name>getSpawners</name>
        <briefdescription>
<para>Get spawners/spawnees/followers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="149" column="25" bodyfile="include/MTA/PCG.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a4aee985ede8e6ed6dd92574494101df9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::PCG::getSpawnees</definition>
        <argsstring>() const</argsstring>
        <name>getSpawnees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="153" column="25" bodyfile="include/MTA/PCG.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a1312d734609f82230d3c00a99b189db9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::PCG::getFollowers</definition>
        <argsstring>() const</argsstring>
        <name>getFollowers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="157" column="25" bodyfile="include/MTA/PCG.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a927e1e778e3ff04309575e9ddcf16838" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::spawnersBegin</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>spawnersBegin</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Iterators for thread properties of a procedure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="165" column="29" bodyfile="include/MTA/PCG.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1ab65dabef051a679798afe3b2fd8f2cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::spawnersEnd</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>spawnersEnd</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="169" column="29" bodyfile="include/MTA/PCG.h" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a52ca6555ed9c9b3e96de908124608cb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::spawneesBegin</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>spawneesBegin</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="173" column="29" bodyfile="include/MTA/PCG.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a8a246ccebd77a07a2b05fab308639def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::spawneesEnd</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>spawneesEnd</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="177" column="29" bodyfile="include/MTA/PCG.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a563c10fdc1563df64db830f9df6c29a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::followersBegin</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>followersBegin</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="181" column="29" bodyfile="include/MTA/PCG.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a861bfe225847dbe7ffc88f53677363aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FunSet::iterator</type>
        <definition>FunSet::iterator SVF::PCG::followersEnd</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>followersEnd</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="185" column="29" bodyfile="include/MTA/PCG.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1a057887f3d5fd3b9b414e573b3f9f4548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::interferenceAnalysis</definition>
        <argsstring>()</argsstring>
        <name>interferenceAnalysis</name>
        <briefdescription>
<para>Thread interferenceAnalysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Thread interference analysis, Suppose we have a undirected graph G = {F,E,I} F denotes procedure, E represents interference edge (x,y) \in E, x \in F, y \in F means execution of x in one thread may overlap execution of y in another thread I(x,y) is a set of memory locations for this interference edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="192" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="272" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1ab8a16eb34da91f2b7cd5a456653b1da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::printResults</definition>
        <argsstring>()</argsstring>
        <name>printResults</name>
        <briefdescription>
<para>Print analysis results. </para>
        </briefdescription>
        <detaileddescription>
<para>Print analysis results </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="195" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_c_g_1af8af0a2a2159261bf05abe226c43006e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PCG::printTDFuns</definition>
        <argsstring>()</argsstring>
        <name>printTDFuns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print Thread sensitive properties for each function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/PCG.h" line="199" column="10" bodyfile="lib/MTA/PCG.cpp" bodystart="320" bodyend="334"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class serves as a base may-happen in parallel analysis for multithreaded program It distinguish thread spawner, spawnee, follower in procedure level by modeling pthread_create, pthread_join, pthread_exit, pthread_cancel synchronization operations </para>
    </detaileddescription>
    <location file="include/MTA/PCG.h" line="28" column="1" bodyfile="include/MTA/PCG.h" bodystart="29" bodyend="200"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_c_g_1a53e95f74121cd6e35b73f345139f6b00" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>addFollowerFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1acc48f65798275f5443b34b84e4bb6eae" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>addSpawneeFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a11c45407138211987e5143d81ccceb95" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>addSpawnerFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a1d946482cce92f7b1718a2a8c178be0b" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>addSpawnsite</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a50b677ec622247a464cee7f0f45c5a53" prot="public" virt="virtual"><scope>SVF::PCG</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a05759205f1362b6d72041cf669cf028d" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>BBWorkList</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ae9026f717c442198ffa90ff66f482c92" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>callgraph</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a866cab5d550f60984d66068474755e2d" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>CallInstSet</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a075370a557f111219530e166df745c15" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>collectFollowers</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a8cff88e2a6cee5f655e491f9f2967460" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>collectSpawnees</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1aef06745128e4e99c8e3bab226a337041" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>collectSpawners</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ab3a3d18bac6e1f833583d41fa562caea" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>followers</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a563c10fdc1563df64db830f9df6c29a4" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>followersBegin</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a861bfe225847dbe7ffc88f53677363aa" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>followersEnd</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a0dea1e31042fa960f7a259949e142bcf" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>FunSet</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1aca2efdefda1f95a6450eca4a781cbefa" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>FunVec</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a19fea9790fffea9861c0dc7817b60a3e" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>FunWorkList</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a1312d734609f82230d3c00a99b189db9" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>getFollowers</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a3106e03b7df8b34f50c769e1417f341c" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>getMHPFunctions</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a4aee985ede8e6ed6dd92574494101df9" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>getSpawnees</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a6efd56a0a1810cf9036dd9203ea5e71e" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>getSpawners</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ae5ee8cf8cfe42854407190f30f3b6c1b" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>identifyFollowers</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1adff1702e1b0a902de7ded742846fe137" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>inferFromCallGraph</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a23752f0a9fe4f01698808d0a50ccc896" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>initFromThreadAPI</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a057887f3d5fd3b9b414e573b3f9f4548" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>interferenceAnalysis</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a7531d638b4f8aca4f0a3af82391001d9" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>isFollowerFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a4196d5ffc1542288fd7df5daffaca894" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>isSpawneeFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a13bfb66d3c02157cd3bebad1f829d704" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>isSpawnerFun</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ad7fa3ac0bd5820df718295f66dbf1edc" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>isSpawnsite</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a0a1d0abba4f0775a5d1e9b13aad2f2d0" prot="public" virt="virtual"><scope>SVF::PCG</scope><name>mayHappenInParallel</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a4cab54d7273424c8b26376d8daf15e06" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>mayHappenInParallelBetweenFunctions</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a96f91b051a8035b614e015bf4d5081e0" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>mhpfuns</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a985b0c790c582d15e6242950ac66f574" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>mod</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a482925e80c66f258e0fb863ee6948081" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>PCG</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ab8a16eb34da91f2b7cd5a456653b1da0" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>printResults</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1af8af0a2a2159261bf05abe226c43006e" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>printTDFuns</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1adb917fc3adc3b0c3aedd57e9c77eae05" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>pta</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a859545671beab2a85c721ce98b785452" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnCallSites</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a7191718edabfd8ce2df5bfbea683c1fa" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnees</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a52ca6555ed9c9b3e96de908124608cb4" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>spawneesBegin</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a8a246ccebd77a07a2b05fab308639def" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>spawneesEnd</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a3f7f0c7aaa768f7e834b4763b18d8223" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>spawners</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a927e1e778e3ff04309575e9ddcf16838" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnersBegin</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1ab65dabef051a679798afe3b2fd8f2cdc" prot="public" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnersEnd</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a24ef8314d00dadf8f29457d059e2a64b" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnSitesBegin</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1abda3481828c0d55d3ca0d4b9339daeae" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>spawnSitesEnd</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a8215dc3643d1c4fb3d489e80cd3db336" prot="private" virt="non-virtual"><scope>SVF::PCG</scope><name>tdAPI</name></member>
      <member refid="class_s_v_f_1_1_p_c_g_1a3986717a8a3e1515747c3ab2c3e93ca7" prot="public" virt="virtual"><scope>SVF::PCG</scope><name>~PCG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
