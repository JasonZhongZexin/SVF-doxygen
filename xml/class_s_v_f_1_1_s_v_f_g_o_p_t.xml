<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_s_v_f_g_o_p_t" kind="class" language="C++" prot="public">
    <compoundname>SVF::SVFGOPT</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_s_v_f_g" prot="public" virt="non-virtual">SVF::SVFG</basecompoundref>
    <includes refid="_s_v_f_g_o_p_t_8h" local="no">SVFGOPT.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a490695ab536cd455c531fbdc57499cac" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::setActualINDef</definition>
        <argsstring>(NodeID ai, NodeID def)</argsstring>
        <name>setActualINDef</name>
        <param>
          <type>NodeID</type>
          <declname>ai</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set def-site of actual-in/formal-out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="262" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a3e2b811dd939c93bcf9fb94e91d553b1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::setFormalOUTDef</definition>
        <argsstring>(NodeID fo, NodeID def)</argsstring>
        <name>setFormalOUTDef</name>
        <param>
          <type>NodeID</type>
          <declname>fo</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="269" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="269" bodyend="275"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a07874e1a77bcd5ff593757d202a4edd6" prot="private" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;SVFGNode*&gt; SVF::SVFGOPT::SVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="58" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a581349a9fc0066945ca4ce9706a81646" prot="private" static="no">
        <type>Map&lt; NodeID, NodeID &gt;</type>
        <definition>typedef Map&lt;NodeID, NodeID&gt; SVF::SVFGOPT::NodeIDToNodeIDMap</definition>
        <argsstring></argsstring>
        <name>NodeIDToNodeIDMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="59" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a3ee399dc45e90a512be7575642855f40" prot="private" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; const <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i_s_v_f_g_node" kindref="compound">MSSAPHISVFGNode</ref> * &gt;</type>
        <definition>typedef FIFOWorkList&lt;const MSSAPHISVFGNode*&gt; SVF::SVFGOPT::WorkList</definition>
        <argsstring></argsstring>
        <name>WorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="60" column="26" bodyfile="include/Graphs/SVFGOPT.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a9741514d915bf7f14787cc346b9d7c98" prot="private" static="no" mutable="no">
        <type>NodeIDToNodeIDMap</type>
        <definition>NodeIDToNodeIDMap SVF::SVFGOPT::actualInToDefMap</definition>
        <argsstring></argsstring>
        <name>actualInToDefMap</name>
        <briefdescription>
<para>map actual-in to its def-site node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="342" column="23" bodyfile="include/Graphs/SVFGOPT.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1abbd6ac28826b9cc4c4981271393c8b19" prot="private" static="no" mutable="no">
        <type>NodeIDToNodeIDMap</type>
        <definition>NodeIDToNodeIDMap SVF::SVFGOPT::formalOutToDefMap</definition>
        <argsstring></argsstring>
        <name>formalOutToDefMap</name>
        <briefdescription>
<para>map formal-out to its def-site node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="343" column="23" bodyfile="include/Graphs/SVFGOPT.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1abd524dca72261bbcc7ebb1103b693a2b" prot="private" static="no" mutable="no">
        <type>NodeBS</type>
        <definition>NodeBS SVF::SVFGOPT::defNodes</definition>
        <argsstring></argsstring>
        <name>defNodes</name>
        <briefdescription>
<para>preserved def nodes of formal-in/actual-out </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="344" column="12" bodyfile="include/Graphs/SVFGOPT.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a925f39665e13b18dfe66c2dded44c194" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">WorkList</ref></type>
        <definition>WorkList SVF::SVFGOPT::worklist</definition>
        <argsstring></argsstring>
        <name>worklist</name>
        <briefdescription>
<para>storing <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> nodes which may be removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="346" column="14" bodyfile="include/Graphs/SVFGOPT.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a7e57ca56a587a5b59543b5bab7fe794d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::keepActualOutFormalIn</definition>
        <argsstring></argsstring>
        <name>keepActualOutFormalIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="348" column="10" bodyfile="include/Graphs/SVFGOPT.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a65bba62d9b62bf2bdbbda69540eeb38d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::keepAllSelfCycle</definition>
        <argsstring></argsstring>
        <name>keepAllSelfCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="349" column="10" bodyfile="include/Graphs/SVFGOPT.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac68a53c567929ba8b69c00e3e8d9d30f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::keepContextSelfCycle</definition>
        <argsstring></argsstring>
        <name>keepContextSelfCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="350" column="10" bodyfile="include/Graphs/SVFGOPT.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a239475c15b39d54c632427307b8e9350" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SVFGOPT::SVFGOPT</definition>
        <argsstring>(MemSSA *_mssa, VFGK kind)</argsstring>
        <name>SVFGOPT</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_mem_s_s_a" kindref="compound">MemSSA</ref> *</type>
          <declname>_mssa</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="64" column="5" bodyfile="include/Graphs/SVFGOPT.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af45feec9a906f9df86e244bb62f603b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::SVFGOPT::~SVFGOPT</definition>
        <argsstring>()</argsstring>
        <name>~SVFGOPT</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="69" column="13" bodyfile="include/Graphs/SVFGOPT.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af0c1bb4055d3c4b7f5c6133c433144ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::setTokeepActualOutFormalIn</definition>
        <argsstring>()</argsstring>
        <name>setTokeepActualOutFormalIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="71" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a99cce24804a9116f9bf4e773b2f28e85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::setTokeepAllSelfCycle</definition>
        <argsstring>()</argsstring>
        <name>setTokeepAllSelfCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="75" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1abe2392e0971f6c46537727f001fa44de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::setTokeepContextSelfCycle</definition>
        <argsstring>()</argsstring>
        <name>setTokeepContextSelfCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="79" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="79" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af4d2c6d2e3b316b256f860801fe3b178" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SVFGOPT::buildSVFG</definition>
        <argsstring>()</argsstring>
        <name>buildSVFG</name>
        <reimplements refid="class_s_v_f_1_1_s_v_f_g_1a0920e9f9896531959d74ae61013d96d6">buildSVFG</reimplements>
        <briefdescription>
<para>Start building <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Build <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> 1) build <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes a) statements for top level pointers (PAGEdges) b) operators of address-taken variables (<ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> and <ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MSSACHI</ref>) 2) connect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges a) between two statements (PAGEdges) b) between two memory SSA operators (<ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> <ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MSSAMU</ref> and <ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MSSACHI</ref>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="85" column="18" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFGOPT::connectAParamAndFParam</definition>
        <argsstring>(const PAGNode *cs_arg, const PAGNode *fun_arg, const CallBlockNode *, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectAParamAndFParam</name>
        <reimplements refid="class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0">connectAParamAndFParam</reimplements>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>cs_arg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fun_arg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes between caller and callee for indirect call sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="89" column="25" bodyfile="include/Graphs/SVFGOPT.h" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1aad3217fa932738ab8ba09e1e9f48ac56" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFGOPT::connectFRetAndARet</definition>
        <argsstring>(const PAGNode *fun_ret, const PAGNode *cs_ret, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectFRetAndARet</name>
        <reimplements refid="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b">connectFRetAndARet</reimplements>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fun_ret</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>cs_ret</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect formal-ret and actual ret. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="101" column="25" bodyfile="include/Graphs/SVFGOPT.h" bodystart="101" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1aa39900e11f5689f8bd70f3ec45865225" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFGOPT::connectAInAndFIn</definition>
        <argsstring>(const ActualINSVFGNode *actualIn, const FormalINSVFGNode *formalIn, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectAInAndFIn</name>
        <reimplements refid="class_s_v_f_1_1_s_v_f_g_1ac9ab2a95cd7a09bbe4b4aa3e6fafaf62">connectAInAndFIn</reimplements>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref> *</type>
          <declname>actualIn</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_i_n_s_v_f_g_node" kindref="compound">FormalINSVFGNode</ref> *</type>
          <declname>formalIn</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect actual-in and formal-in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="113" column="25" bodyfile="include/Graphs/SVFGOPT.h" bodystart="113" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a79ace9bac7f2e075c27209ea56fc6032" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFGOPT::connectFOutAndAOut</definition>
        <argsstring>(const FormalOUTSVFGNode *formalOut, const ActualOUTSVFGNode *actualOut, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectFOutAndAOut</name>
        <reimplements refid="class_s_v_f_1_1_s_v_f_g_1a402dfe93b8692be453c4f76d048b690a">connectFOutAndAOut</reimplements>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node" kindref="compound">FormalOUTSVFGNode</ref> *</type>
          <declname>formalOut</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node" kindref="compound">ActualOUTSVFGNode</ref> *</type>
          <declname>actualOut</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect formal-out and actual-out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="126" column="25" bodyfile="include/Graphs/SVFGOPT.h" bodystart="126" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a550f93b640a6fd68773fbafd2944d7df" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::SVFGOPT::getActualINDef</definition>
        <argsstring>(NodeID ai) const</argsstring>
        <name>getActualINDef</name>
        <param>
          <type>NodeID</type>
          <declname>ai</declname>
        </param>
        <briefdescription>
<para>Get def-site of actual-in/formal-out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="142" column="19" bodyfile="include/Graphs/SVFGOPT.h" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a8d0b44ba9f3e6f9344a10d085d7be2b4" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::SVFGOPT::getFormalOUTDef</definition>
        <argsstring>(NodeID fo) const</argsstring>
        <name>getFormalOUTDef</name>
        <param>
          <type>NodeID</type>
          <declname>fo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="148" column="19" bodyfile="include/Graphs/SVFGOPT.h" bodystart="148" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac3b14bf191cadb832e3a34affd7e569d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::parseSelfCycleHandleOption</definition>
        <argsstring>()</argsstring>
        <name>parseSelfCycleHandleOption</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="157" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="381" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af5f61cab0e65b58a40a049b66ad0ac2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFGOPT::addCallIndirectSVFGEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, CallSiteID csid, const PointsTo &amp;cpts)</argsstring>
        <name>addCallIndirectSVFGEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csid</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Add inter-procedural value flow edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Add indirect call edge from src to dst with one call site ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="162" column="14" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1abb062ba96797e106a12abc6199e2ad6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFGOPT::addRetIndirectSVFGEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, CallSiteID csid, const PointsTo &amp;cpts)</argsstring>
        <name>addRetIndirectSVFGEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csid</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Add indirect ret edge from src to dst with one call site ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="164" column="14" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a4c698184cc23730fb44904d4048958da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::handleInterValueFlow</definition>
        <argsstring>()</argsstring>
        <name>handleInterValueFlow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem><para>Convert FormalParmSVFGNode into PHISVFGNode and add all ActualParmSVFGNoe which may propagate pts to it as phi&apos;s operands.</para>
</listitem><listitem><para>Do the same thing for ActualRetSVFGNode and FormalRetSVFGNode.</para>
</listitem><listitem><para>Record def site of <ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref>. Remove all its edges and connect its predecessors and successors.</para>
</listitem><listitem><para>Do the same thing for <ref refid="class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node" kindref="compound">FormalOUTSVFGNode</ref> as 3.</para>
</listitem><listitem><para>Remove ActualINSVFGNode/FormalINSVFGNode/ActualOUTSVFGNode/FormalOUTSVFGNode if they will not be used when updating call graph. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>reset def of address-taken variable</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="175" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="97" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a1fd6d26203d7d574b5664b8fcae54c1a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::replaceFParamARetWithPHI</definition>
        <argsstring>(PHISVFGNode *phi, SVFGNode *svfgNode)</argsstring>
        <name>replaceFParamARetWithPHI</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_h_i_v_f_g_node" kindref="compound">PHISVFGNode</ref> *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>svfgNode</declname>
        </param>
        <briefdescription>
<para>Replace FormalParam/ActualRet node with PHI node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>create a new PHISVFGNode.</para>
<para>migrate formal-param&apos;s edges to phi node.</para>
<para>add actual-param/formal-ret into phi&apos;s operand list</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="179" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="159" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1abefe3efa0232106f1843351ff6dd1063" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::retargetEdgesOfAInFOut</definition>
        <argsstring>(SVFGNode *node)</argsstring>
        <name>retargetEdgesOfAInFOut</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Retarget edges related to actual-in/-out and formal-in/-out. </para>
        </briefdescription>
        <detaileddescription>
<para>Record def sites of actual-in/formal-out and connect from those def-sites to formal-in/actual-out directly if they exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="186" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="212" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a2285d20f7c4d128a8ede2e7f4f41f798" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::retargetEdgesOfAOutFIn</definition>
        <argsstring>(SVFGNode *node)</argsstring>
        <name>retargetEdgesOfAOutFIn</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Connect actual-out/formal-in&apos;s predecessors to their successors directly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="188" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="258" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a21429d8c3fba209d9cdc22e3623c5573" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::handleIntraValueFlow</definition>
        <argsstring>()</argsstring>
        <name>handleIntraValueFlow</name>
        <briefdescription>
<para>Remove <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes. </para>
        </detaileddescription>
        <inbodydescription>
<para>Skip nodes which have self cycle</para>
<para>remove node&apos;s edges if it only has incoming or outgoing edges.</para>
<para>remove all the incoming edges;</para>
<para>remove all the outgoing edges;</para>
<para>remove this node if it has no edges</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="192" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="400" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ae825e01893d3304379f72380d314f09c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::initialWorkList</definition>
        <argsstring>()</argsstring>
        <name>initialWorkList</name>
        <briefdescription>
<para>Initial work list with <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> nodes which may be removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="195" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a72c573ecbc12c44e6ce1d67527f888a8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::addIntoWorklist</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addIntoWorklist</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> node which satisfy following conditions will be removed:<orderedlist>
<listitem><para>it&apos;s not def-site of actual-in/formal-out;</para>
</listitem><listitem><para>it doesn&apos;t have incoming and outgoing call/ret at the same time. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="204" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a4f3890f637ffe03c2a1981e75e3d2e16" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFGOPT::bypassMSSAPHINode</definition>
        <argsstring>(const MSSAPHISVFGNode *node)</argsstring>
        <name>bypassMSSAPHINode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i_s_v_f_g_node" kindref="compound">MSSAPHISVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> node if possible. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> node if possible </para>
        </detaileddescription>
        <inbodydescription>
<para>add new edges from predecessor to all successors.</para>
<para>if no new edge is added, the number of dst node&apos;s incoming edges may be decreased. try to analyze it again.</para>
<para>if no new edge is added, the number of src node&apos;s outgoing edges may be decreased. try to analyze it again.</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="215" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="489" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1afb068fd46dfbf993decd7d6c8ca2c9ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVFGOPT::checkSelfCycleEdges</definition>
        <argsstring>(const MSSAPHISVFGNode *node)</argsstring>
        <name>checkSelfCycleEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i_s_v_f_g_node" kindref="compound">MSSAPHISVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove self cycle edges if needed. Return TRUE if some self cycle edges remained. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove self cycle edges according to specified options:<orderedlist>
<listitem><para>keepAllSelfCycle = TRUE: all self cycle edges are kept;</para>
</listitem><listitem><para>keepContextSelfCycle = TRUE: all self cycle edges related-to context are kept;</para>
</listitem><listitem><para>Otherwise, all self cycle edges are NOT kept. Return TRUE if some self cycle edges remaine in this node. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>There&apos;s no need to check other edge if we do not remove self cycle</para>
<para>Continue checking and remove other self cycle which are NOT context-related</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="218" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="451" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6aeeb727f1d9d917ff6cffbb88350b7a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVFGOPT::addNewSVFGEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, const SVFGEdge *preEdge, const SVFGEdge *succEdge)</argsstring>
        <name>addNewSVFGEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>preEdge</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>succEdge</declname>
        </param>
        <briefdescription>
<para>Add new <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge from src to dst. </para>
        </briefdescription>
        <detaileddescription>
<para>Add new <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge from src to dst. The edge&apos;s kind depends on preEdge and succEdge. Self-cycle edges may be added here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="221" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="532" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6d5cdb3b78e4ed482b0da4c64323b463" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::bothInterEdges</definition>
        <argsstring>(const SVFGEdge *edge1, const SVFGEdge *edge2) const</argsstring>
        <name>bothInterEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge2</declname>
        </param>
        <briefdescription>
<para>Return TRUE if both edges are indirect call/ret edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="224" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a30a4165300d0b7ac9b31d9f9c496d943" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::addInterPHIOperands</definition>
        <argsstring>(PHISVFGNode *phi, const PAGNode *operand)</argsstring>
        <name>addInterPHIOperands</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_h_i_v_f_g_node" kindref="compound">PHISVFGNode</ref> *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="231" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a374a31b9500ceda00477b03e9702d0a8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_inter_p_h_i_v_f_g_node" kindref="compound">InterPHISVFGNode</ref> *</type>
        <definition>InterPHISVFGNode* SVF::SVFGOPT::addInterPHIForFP</definition>
        <argsstring>(const FormalParmSVFGNode *fp)</argsstring>
        <name>addInterPHIForFP</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_parm_v_f_g_node" kindref="compound">FormalParmSVFGNode</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Add inter PHI <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node for formal parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="237" column="29" bodyfile="include/Graphs/SVFGOPT.h" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ad4203fa8afbf0c0a5d6775be937c6e1d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_inter_p_h_i_v_f_g_node" kindref="compound">InterPHISVFGNode</ref> *</type>
        <definition>InterPHISVFGNode* SVF::SVFGOPT::addInterPHIForAR</definition>
        <argsstring>(const ActualRetSVFGNode *ar)</argsstring>
        <name>addInterPHIForAR</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_ret_v_f_g_node" kindref="compound">ActualRetSVFGNode</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
<para>Add inter PHI <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node for actual return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="245" column="29" bodyfile="include/Graphs/SVFGOPT.h" bodystart="245" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af504407e6cd42cfe2ea27165ff15df40" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::resetDef</definition>
        <argsstring>(const PAGNode *pagNode, const SVFGNode *node)</argsstring>
        <name>resetDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="253" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a0e78edc04f5e8bfcca7a3f04f7568665" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::isDefOfAInFOut</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>isDefOfAInFOut</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="278" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1af6fa424cd7518b330a6017839a789bf6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::actualInOfIndCS</definition>
        <argsstring>(const ActualINSVFGNode *ai) const</argsstring>
        <name>actualInOfIndCS</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref> *</type>
          <declname>ai</declname>
        </param>
        <briefdescription>
<para>Check if actual-in/actual-out exist at indirect call site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="285" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a79c435e456474b41e4402c2c9c269fc9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::actualOutOfIndCS</definition>
        <argsstring>(const ActualOUTSVFGNode *ao) const</argsstring>
        <name>actualOutOfIndCS</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node" kindref="compound">ActualOUTSVFGNode</ref> *</type>
          <declname>ao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="289" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6eeec9fa475316f52689728a1af7bd05" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::formalInOfAddressTakenFunc</definition>
        <argsstring>(const FormalINSVFGNode *fi) const</argsstring>
        <name>formalInOfAddressTakenFunc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_i_n_s_v_f_g_node" kindref="compound">FormalINSVFGNode</ref> *</type>
          <declname>fi</declname>
        </param>
        <briefdescription>
<para>Check if formal-in/formal-out reside in address-taken function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="297" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a86cb63258b49077587d44ba45d023f02" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFGOPT::formalOutOfAddressTakenFunc</definition>
        <argsstring>(const FormalOUTSVFGNode *fo) const</argsstring>
        <name>formalOutOfAddressTakenFunc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node" kindref="compound">FormalOUTSVFGNode</ref> *</type>
          <declname>fo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="301" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1aa23c967a8fcadbaf47e93a5b3610c84d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVFGOPT::isConnectingTwoCallSites</definition>
        <argsstring>(const SVFGNode *node) const</argsstring>
        <name>isConnectingTwoCallSites</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Return TRUE if this node has both incoming call/ret and outgoing call/ret edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="308" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="300" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ab72ce28409a440bbf5b84a68e5f82b85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVFGOPT::canBeRemoved</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>canBeRemoved</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if this SVFGNode can be removed. Nodes can be removed if it is:<orderedlist>
<listitem><para>ActualParam/FormalParam/ActualRet/FormalRet</para>
</listitem><listitem><para>ActualIN if it doesn&apos;t reside at indirect call site</para>
</listitem><listitem><para>FormalIN if it doesn&apos;t reside at the entry of address-taken function and it&apos;s not definition site of ActualIN</para>
</listitem><listitem><para>ActualOUT if it doesn&apos;t reside at indirect call site and it&apos;s not definition site of FormalOUT</para>
</listitem><listitem><para>FormalOUT if it doesn&apos;t reside at the exit of address-taken function </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Now each <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge can only be associated with one call site id, so if this node has both incoming call/ret and outgoting call/ret edges, we don&apos;t remove this node.</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="319" column="10" bodyfile="lib/Graphs/SVFGOPT.cpp" bodystart="342" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac15b3c2cb127b17ebad3a30fc04b6f40" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::removeAllEdges</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>removeAllEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove edges of a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="323" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1a5a2fe12411de408dfb57e910e413957f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::removeInEdges</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>removeInEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>remove incoming edges</para>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="328" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_o_p_t_1ae85391a5f0828362c61d55e162eef04d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFGOPT::removeOutEdges</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>removeOutEdges</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFGOPT.h" line="334" column="17" bodyfile="include/Graphs/SVFGOPT.h" bodystart="334" bodyend="338"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Optimised <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>.<orderedlist>
<listitem><para>FormalParam/ActualRet is converted into Phi. ActualParam/FormalRet becomes the operands of Phi nodes created at callee/caller&apos;s entry/callsite.</para>
</listitem><listitem><para>ActualIns/ActualOuts resides at direct call sites id removed. Sources of its incoming edges are connected with the destinations of its outgoing edges directly.</para>
</listitem><listitem><para>FormalIns/FormalOuts reside at the entry/exit of non-address-taken functions is removed as ActualIn/ActualOuts.</para>
</listitem><listitem><para><ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> nodes are removed if it have no self cycle. Otherwise depends on user option. </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::SVFGOPT</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_o_p_t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>SVF::MRGenerator</label>
        <link refid="class_s_v_f_1_1_m_r_generator"/>
      </node>
      <node id="15">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="6">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="7">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="1">
        <label>SVF::SVFGOPT</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_o_p_t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="16">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="18">
        <label>SVF::MemSSA</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a"/>
        <childnode refid="19" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>mrGen</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mssa</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>SVF::MemSSAStat</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a_stat"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="13">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="9">
        <label>SVF::SVFGStat</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_stat"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="3">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="11">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="12" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/SVFGOPT.h" line="56" column="1" bodyfile="include/Graphs/SVFGOPT.h" bodystart="57" bodyend="351"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af6fa424cd7518b330a6017839a789bf6" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>actualInOfIndCS</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa9f520779475e4783eccc45c460e346a" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>ActualINSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a9741514d915bf7f14787cc346b9d7c98" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>actualInToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a79c435e456474b41e4402c2c9c269fc9" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>actualOutOfIndCS</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2f6ed8a9f14657abc1e2a89247a84b99" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>ActualOUTSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aeb28ef81c525e96113a9d25417660bfd" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addActualINSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7c9675943c20c2ca42779f1cf91cb06d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addActualOUTSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addAddrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addCallEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af5f61cab0e65b58a40a049b66ad0ac2e" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addCallIndirectSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1484cd0bf03fc336d678d71d045d44c2" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addCallIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addCopyVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5936a637df12548f1f7e5f1ecfb5cd0d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addFormalINSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a56111524c2dd12c260e6efc11c463886" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addFormalOUTSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addGepVFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a57629591037e16e57a0178d102a405f2" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterIndirectVFCallEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac9666ae7266cf1a9c0a5f7d28b39d1e9" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterIndirectVFRetEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ad4203fa8afbf0c0a5d6775be937c6e1d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterPHIForAR</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a374a31b9500ceda00477b03e9702d0a8" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterPHIForFP</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a30a4165300d0b7ac9b31d9f9c496d943" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addInterPHIOperands</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a72c573ecbc12c44e6ce1d67527f888a8" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addIntoWorklist</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addIntraDirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa6e855dc13d0e2db44982722409a9d1d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addIntraIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a57f191467850d66c71e1b9768e11fb57" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addIntraMSSAPHISVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addLoadVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6aeeb727f1d9d917ff6cffbb88350b7a" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addNewSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addNullPtrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addRetEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1abb062ba96797e106a12abc6199e2ad6d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addRetIndirectSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a4578b49f6f59367738c3aa57bdaa61c1" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addRetIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addStoreVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a67750c461e3543f6b75d2dd510d67297" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a88e1f6f77421c5274ceeb14928bdcb43" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>addSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abddfc95cf644d0729ee29eccf95699f1" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addSVFGNodesForAddrTakenVars</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab8b57187140a36077d9a3dd6d0b25858" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addThreadMHPIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addVFGInterEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>addVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>addVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6d5cdb3b78e4ed482b0da4c64323b463" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>bothInterEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af4d2c6d2e3b316b256f860801fe3b178" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>buildSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a4f3890f637ffe03c2a1981e75e3d2e16" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>bypassMSSAPHINode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5f3e0fbf83621cc661d2c59800756727" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CALLCHI</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c8cf98b652b5eb97d22e2636576f92f" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>callgraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acd9fd6597e5dedf3c14a430830c7dd08" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CALLMU</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade3f735b3c7b1a53cab3d67cd9f7b874" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CallPESet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af9313ebec4a52fd887169b7c6373a7d4" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>callSiteToActualINMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9ccf41f90af56c89f2acb59a6ca9b0dc" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CallSiteToActualINsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a39873b954b6e0eb0641f56ca4cd06ef9" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>callSiteToActualOUTMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8c7dea646606e723e6cf5055611e43c8" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CallSiteToActualOUTsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ab72ce28409a440bbf5b84a68e5f82b85" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>canBeRemoved</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>checkIntraEdgeParents</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1afb068fd46dfbf993decd7d6c8ca2c9ba" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>checkSelfCycleEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a60df52c14b303562ff5d73c7836e3495" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8843ab4a4608f7f5f46f68ad31314c07" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>CHISet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aeba803e60699f9d9422596d161d44241" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>clearMSSA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1aa39900e11f5689f8bd70f3ec45865225" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>connectAInAndFIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>connectAParamAndFParam</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a0cebc2ba5ae81a6d45b224a4f94fc8b4" prot="public" virt="virtual"><scope>SVF::SVFGOPT</scope><name>connectCallerAndCallee</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>connectDirectVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a79ace9bac7f2e075c27209ea56fc6032" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>connectFOutAndAOut</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1aad3217fa932738ab8ba09e1e9f48ac56" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>connectFRetAndARet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5921483cd5e1bf77b1b2bc8fb3250612" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>connectFromGlobalToProgEntry</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a164a3df08fc24bacc0b97aee8b6eec38" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>connectIndirectSVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a225a91c04afac6a8fe198e9860890a52" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1abd524dca72261bbcc7ebb1103b693a2b" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>defNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a82a93d9b7fcf1938e3090a0826a1ca7e" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5fdaddc52e7342b834d76d64c1a1e498" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ae92915ff0535e22f9239fc2a0c7f0265" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>dumpVFG</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a101c5a8b31baf5c5613144f6e277abe9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>ENTRYCHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a6eeec9fa475316f52689728a1af7bd05" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>formalInOfAddressTakenFunc</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8859409373454b6b3d1252776e169cf5" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>FormalINSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a86cb63258b49077587d44ba45d023f02" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>formalOutOfAddressTakenFunc</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acb7262c3b9161c77eb1b491048152fb0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>FormalOUTSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1abbd6ac28826b9cc4c4981271393c8b19" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>formalOutToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2b4850c833564916c7fce46d55672038" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>FunctionToFormalINsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac4c65501e9beba5495a57dd469f78e5b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>FunctionToFormalOUTsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ae51cd0493e4e767848b96b69045762fd" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>funToFormalINMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7d58f9fe97071ec9936174689cb99301" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>funToFormalOUTMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>funToVFGNodesMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63218978f65ab91ae21bc24c882a716" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>FunToVFGNodesMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a550f93b640a6fd68773fbafd2944d7df" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getActualINDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab767c329e7fccf9efe16818515199d65" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getActualINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af0c86a9e83a1f2427dd8e80287be37ed" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getActualOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a01b8694a5ab7acf8df0213225550791b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b072e8e45899b89da0a466140563c38" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27bd4d5ba75d65056d77882869b0c64d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af04068b6f6beff961f815cc6eae7f5b0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getCallSite</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getCallSiteID</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9215c1d7f1152967f0731057a085e793" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abd917826bf50ed409a307ce00562c97d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a55a26b88ffe786b04184a29ae72575e7" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8e7a945f4266e8dc7dcfff2ad6494bfb" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getDefSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getDefVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9d0714075d6071c26d26cf16c4dec7c5" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getFormalINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a8d0b44ba9f3e6f9344a10d085d7be2b4" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getFormalOUTDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a287c337697eed7d92889bca0a0e370d7" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getFormalOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a75eb519e4f89a116db98fccb263af4d6" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab7ba9d179504165f277d347a7cb9f5d8" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getGlobalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afbaf925e1e165f75161999229fa5f782" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>getInterVFEdgeAtIndCSFromAInToFIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9b133773dae3e7c613516ba16cfdfa2c" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>getInterVFEdgeAtIndCSFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7a88391e0c2cf8a57238dec32c2474a3" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>getInterVFEdgeAtIndCSFromFOutToAOut</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab2b969b7d5922427622dd875e6b8fe14" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>getInterVFEdgeAtIndCSFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af3bb18f904512cd6f450853666810229" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getInterVFEdgesForIndirectCallSite</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a688c0cc4a67c7cd9afbef2f0c264c85b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getLHSTopLevPtr</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getMSSA</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>getPAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab6c337637ccc9bbf0bcc7153b427f7ca" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getPTA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8ba934714a7f2caf2e041002fdb66137" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a60271ab47e0736f515a2267fd5c38b09" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7ace06b6c893b31f7dec2abe54e33e11" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac965abfbe9bdc872f98b36a171a7b5aa" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getSVFGNodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1ba67eb17437a1a47c230614c1e3d9fd" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a5166be2c1231a93c9b9ce5f272797b94" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getVFGNodeBegin</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28f2bdcbbc0bab00e93df62ea11647a2" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getVFGNodeEnd</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>getVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>globalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a113185086912213257b04daa4590bf13" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>GlobalVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a4c698184cc23730fb44904d4048958da" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>handleInterValueFlow</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a21429d8c3fba209d9cdc22e3623c5573" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>handleIntraValueFlow</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afec2a195b5e367ec0d3f292168d10811" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasActualINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abc41243e27c4543ad50b6649839a940c" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasActualOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasBlackHoleConstObjAddrAsDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1027dcf25e914377e02885b786d00edc" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasCallSiteChi</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afca91771a622290586bfa941132c322e" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasCallSiteMu</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a926c79813d5cfbd16201832024b95190" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a65f28035e0fa5bebf76d28612b2f8ba8" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasFormalINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1f8c60ad57bf473e0186b794d666b5c2" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasFormalOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a23ca21b90feca5e7d00c9ba9f489374a" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasFuncEntryChi</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a32378226c18a0b1e22271a2338a635f6" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasFuncRetMu</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasInterVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasIntraVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1b9d1ad76785ae0eb07979aa75325640" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasThreadVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a76af43e28630eb56a1aa5971f516d43d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>hasVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ae825e01893d3304379f72380d314f09c" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>initialWorkList</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac75b83bdf3bcfecaae579716ab33dd61" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isCallSiteRetSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1aa23c967a8fcadbaf47e93a5b3610c84d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isConnectingTwoCallSites</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a0e78edc04f5e8bfcca7a3f04f7568665" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isDefOfAInFOut</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ae2cff3c963136f474fac0a66aa8cff7b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isFunEntrySVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isFunEntryVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b71873131a63eb6ee47ed2f66e3154a" prot="protected" virt="virtual"><scope>SVF::SVFGOPT</scope><name>isInterestedPAGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8ddf15d89a1b11a7f7720b671f4f0295" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isPhiCopyEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>isPtrOnlySVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a241d0489bf0315460e2b07db87e7847c" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a7e57ca56a587a5b59543b5bab7fe794d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>keepActualOutFormalIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a65bba62d9b62bf2bdbbda69540eeb38d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>keepAllSelfCycle</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac68a53c567929ba8b69c00e3e8d9d30f" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>keepContextSelfCycle</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3867c591a231bad0aa2e6ab7c095a42f" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>kind</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a86d4a41a881a3d2e5def103d7ba8bb2f" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>LOADMU</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a6f07410ee34e4bf1079e3b5902c81d28" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>mssa</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aafa1b445bd3578daaba8f82e517745f1" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>MSSAVarToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac84d3749671f177b14749a825e36efe3" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>MSSAVarToDefMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7f4deffe7e13352b8c13eab110c834cc" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>MU</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acdbe1c510273107b708935061b6c4127" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>MUSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a581349a9fc0066945ca4ce9706a81646" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>NodeIDToNodeIDMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad49dfa7d8b1abaa2efebfdcf461a36b0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>ORIGSVFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad4f5debd234a444516c3a406c464795c" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade9d05bb026081e9a2c839dd2c56eab9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGEdgeToStmtVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab37b067a59b52c472a284eabbeba43ff" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGEdgeToStmtVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab12de81e2912f06551ca7a6693f5046b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToActualParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abec730a1ec61532cd164f3d42aa107b0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToActualParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToActualRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a999654aa377639db5c1e40f603e655a7" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToActualRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToBinaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7cefa553955e208d6eb4fcd01ed3c383" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToBinaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToCmpVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9c2446f54d3738b6c0e65632a1200ba0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToCmpVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2590182f3b28c7fc8b2b53c09ec4305c" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToDefMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToFormalParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6eb72d2fe080def018d09604fe3affcf" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToFormalParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToFormalRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a52dac90d700a2377b657ec34d3ad2241" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToFormalRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToIntraPHIVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeed3eca629b10554f40b1d2b478580d4" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToPHIVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToUnaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acfcd84ac6bedde4e7e74abdeb9233474" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PAGNodeToUnaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac3b14bf191cadb832e3a34affd7e569d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>parseSelfCycleHandleOption</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1adc9fbb4553472b238d6c3bb5062279cb" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>performStat</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aef7ee9d802934d51b3761663bdaf0c05" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PHISet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a0d6cfa496e6885fe31b6b7a651fa01a8" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>pta</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad803e81268c1464f74da7add938e0aef" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>PTRONLYSVFGK</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ac15b3c2cb127b17ebad3a30fc04b6f40" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeAllEdges</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a5a2fe12411de408dfb57e910e413957f" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeInEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1ae85391a5f0828362c61d55e162eef04d" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeOutEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a931d8b82e10a54d68c68cf6bd80264be" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a700c5fc6c1cb4136e55196fe3d393b8b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>removeVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a1fd6d26203d7d574b5664b8fcae54c1a" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>replaceFParamARetWithPHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af504407e6cd42cfe2ea27165ff15df40" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>resetDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1abefe3efa0232106f1843351ff6dd1063" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>retargetEdgesOfAInFOut</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a2285d20f7c4d128a8ede2e7f4f41f798" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>retargetEdgesOfAOutFIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a047573d70182da351b9e3bbf66ca0056" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>RETMU</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abf966182c28f0521dcd161aa299e453d" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>RetPESet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a490695ab536cd455c531fbdc57499cac" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setActualINDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1accd1cbd26c9b194971f3107a57a0ab2e" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa3ebc066d376e7ed508d2bce49fa864d" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setDef</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a3e2b811dd939c93bcf9fb94e91d553b1" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setFormalOUTDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af0c1bb4055d3c4b7f5c6133c433144ad" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setTokeepActualOutFormalIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a99cce24804a9116f9bf4e773b2f28e85" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setTokeepAllSelfCycle</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1abe2392e0971f6c46537727f001fa44de" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>setTokeepContextSelfCycle</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ad5c1415f488ec4412d5457262269eff3" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ad14cdbb3f1df1f716aa03b4d39f4e52b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>STORECHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a68965c5a9cc5136aa0b593851c60ff12" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>SVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac97ef8c479556f9ca2c40cd4d8a18694" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>SVFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a3d04ce1429b1edf90c9c0833e3b5a4a9" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>SVFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a07874e1a77bcd5ff593757d202a4edd6" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>SVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a239475c15b39d54c632427307b8e9350" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>SVFGOPT</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acb181d4f9faa40578c80e2018e2742b8" prot="protected" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>totalVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0bdac7337a393ad2e21a33ec1978ca3f" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab2abe2ba4ac9e3e1d326d042d35acbc0" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3037ca34a555ebdb4fbf0e86291dc4ea" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGNodeIter</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43f4002b0beb00ed2026f7edd9ebbb1c" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a03d388eec513f713f5e0d06f920168db" prot="public" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>VFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a925f39665e13b18dfe66c2dded44c194" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>worklist</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a3ee399dc45e90a512be7575642855f40" prot="private" virt="non-virtual"><scope>SVF::SVFGOPT</scope><name>WorkList</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::SVFGOPT</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a710a36fc3f4ad15010c4469abcd032e5" prot="public" virt="virtual"><scope>SVF::SVFGOPT</scope><name>~SVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af45feec9a906f9df86e244bb62f603b8" prot="public" virt="virtual"><scope>SVF::SVFGOPT</scope><name>~SVFGOPT</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" prot="public" virt="virtual"><scope>SVF::SVFGOPT</scope><name>~VFG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
