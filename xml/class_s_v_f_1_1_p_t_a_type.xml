<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_p_t_a_type" kind="class" language="C++" prot="public">
    <compoundname>SVF::PTAType</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_p_t_a_type_1a748b82b463001ba95f08a7ec229c412b" prot="private" static="no" mutable="no">
        <type>const Type *</type>
        <definition>const Type* SVF::PTAType::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="85" column="16" bodyfile="include/MemoryModel/PTAType.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1a2c4257200d48cad0bda92b4298879827" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::PTAType::PTAType</definition>
        <argsstring>(const Type *ty)</argsstring>
        <name>PTAType</name>
        <param>
          <type>const Type *</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="47" column="5" bodyfile="include/MemoryModel/PTAType.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1a03fa0db591fb5b93e6701e835ade9dcf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type* SVF::PTAType::getLLVMType</definition>
        <argsstring>() const</argsstring>
        <name>getLLVMType</name>
        <briefdescription>
<para>Get the contained llvm type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="50" column="23" bodyfile="include/MemoryModel/PTAType.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1a7d8ebd45e3db3b3574a8a35375f5aab7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PTAType::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump the type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="56" column="17" bodyfile="include/MemoryModel/PTAType.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1ae4f7f5c5980914d13cc97f3db249def6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PTAType::operator==</definition>
        <argsstring>(const PTAType &amp;ty) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_type" kindref="compound">PTAType</ref> &amp;</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
<para>Operator overloading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="63" column="17" bodyfile="include/MemoryModel/PTAType.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1a705267b70cb6f29d14c0308da1d77b82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PTAType::operator!=</definition>
        <argsstring>(const PTAType &amp;ty) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_type" kindref="compound">PTAType</ref> &amp;</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="68" column="17" bodyfile="include/MemoryModel/PTAType.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1aedec4c8e6cbb1ce4583d8e065ddcab6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PTAType::operator&lt;</definition>
        <argsstring>(const PTAType &amp;ty) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_type" kindref="compound">PTAType</ref> &amp;</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="73" column="12" bodyfile="include/MemoryModel/PTAType.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_p_t_a_type_1a62d5423de98721dfa56705824c53c3b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PTAType::operator&gt;</definition>
        <argsstring>(const PTAType &amp;ty) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_type" kindref="compound">PTAType</ref> &amp;</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PTAType.h" line="78" column="17" bodyfile="include/MemoryModel/PTAType.h" bodystart="78" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/MemoryModel/PTAType.h" line="43" column="1" bodyfile="include/MemoryModel/PTAType.h" bodystart="44" bodyend="86"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a7d8ebd45e3db3b3574a8a35375f5aab7" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a03fa0db591fb5b93e6701e835ade9dcf" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>getLLVMType</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a705267b70cb6f29d14c0308da1d77b82" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1aedec4c8e6cbb1ce4583d8e065ddcab6a" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1ae4f7f5c5980914d13cc97f3db249def6" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a62d5423de98721dfa56705824c53c3b6" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>operator&gt;</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a2c4257200d48cad0bda92b4298879827" prot="public" virt="non-virtual"><scope>SVF::PTAType</scope><name>PTAType</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_type_1a748b82b463001ba95f08a7ec229c412b" prot="private" virt="non-virtual"><scope>SVF::PTAType</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
