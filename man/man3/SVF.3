.TH "SVF" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF \- for isBitcode  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBContextDDA\fP"
.br
.ti -1c
.RI "class \fBDDAClient\fP"
.br
.ti -1c
.RI "class \fBFunptrDDAClient\fP"
.br
.ti -1c
.RI "class \fBAliasDDAClient\fP"
.br
.ti -1c
.RI "class \fBDDAPass\fP"
.br
.ti -1c
.RI "class \fBDDAStat\fP"
.br
.ti -1c
.RI "class \fBDDAVFSolver\fP"
.br
.ti -1c
.RI "class \fBFlowDDA\fP"
.br
.ti -1c
.RI "class \fBConstraintGraph\fP"
.br
.ti -1c
.RI "class \fBConstraintEdge\fP"
.br
.ti -1c
.RI "class \fBAddrCGEdge\fP"
.br
.ti -1c
.RI "class \fBCopyCGEdge\fP"
.br
.ti -1c
.RI "class \fBStoreCGEdge\fP"
.br
.ti -1c
.RI "class \fBLoadCGEdge\fP"
.br
.ti -1c
.RI "class \fBGepCGEdge\fP"
.br
.ti -1c
.RI "class \fBNormalGepCGEdge\fP"
.br
.ti -1c
.RI "class \fBVariantGepCGEdge\fP"
.br
.ti -1c
.RI "class \fBConstraintNode\fP"
.br
.ti -1c
.RI "class \fBExternalPAG\fP"
.br
.ti -1c
.RI "class \fBGenericEdge\fP"
.br
.ti -1c
.RI "class \fBGenericNode\fP"
.br
.ti -1c
.RI "class \fBGenericGraph\fP"
.br
.ti -1c
.RI "class \fBICFG\fP"
.br
.ti -1c
.RI "class \fBICFGEdge\fP"
.br
.ti -1c
.RI "class \fBIntraCFGEdge\fP"
.br
.ti -1c
.RI "class \fBCallCFGEdge\fP"
.br
.ti -1c
.RI "class \fBRetCFGEdge\fP"
.br
.ti -1c
.RI "class \fBICFGNode\fP"
.br
.ti -1c
.RI "class \fBGlobalBlockNode\fP"
.br
.ti -1c
.RI "class \fBIntraBlockNode\fP"
.br
.ti -1c
.RI "class \fBInterBlockNode\fP"
.br
.ti -1c
.RI "class \fBFunEntryBlockNode\fP"
.br
.ti -1c
.RI "class \fBFunExitBlockNode\fP"
.br
.ti -1c
.RI "class \fBCallBlockNode\fP"
.br
.ti -1c
.RI "class \fBRetBlockNode\fP"
.br
.ti -1c
.RI "class \fBICFGStat\fP"
.br
.ti -1c
.RI "class \fBOfflineConsG\fP"
.br
.ti -1c
.RI "class \fBPAG\fP"
.br
.ti -1c
.RI "class \fBPAGEdge\fP"
.br
.ti -1c
.RI "class \fBAddrPE\fP"
.br
.ti -1c
.RI "class \fBCopyPE\fP"
.br
.ti -1c
.RI "class \fBCmpPE\fP"
.br
.ti -1c
.RI "class \fBBinaryOPPE\fP"
.br
.ti -1c
.RI "class \fBUnaryOPPE\fP"
.br
.ti -1c
.RI "class \fBStorePE\fP"
.br
.ti -1c
.RI "class \fBLoadPE\fP"
.br
.ti -1c
.RI "class \fBGepPE\fP"
.br
.ti -1c
.RI "class \fBNormalGepPE\fP"
.br
.ti -1c
.RI "class \fBVariantGepPE\fP"
.br
.ti -1c
.RI "class \fBCallPE\fP"
.br
.ti -1c
.RI "class \fBRetPE\fP"
.br
.ti -1c
.RI "class \fBTDForkPE\fP"
.br
.ti -1c
.RI "class \fBTDJoinPE\fP"
.br
.ti -1c
.RI "class \fBPAGNode\fP"
.br
.ti -1c
.RI "class \fBValPN\fP"
.br
.ti -1c
.RI "class \fBObjPN\fP"
.br
.ti -1c
.RI "class \fBGepValPN\fP"
.br
.ti -1c
.RI "class \fBGepObjPN\fP"
.br
.ti -1c
.RI "class \fBFIObjPN\fP"
.br
.ti -1c
.RI "class \fBRetPN\fP"
.br
.ti -1c
.RI "class \fBVarArgPN\fP"
.br
.ti -1c
.RI "class \fBDummyValPN\fP"
.br
.ti -1c
.RI "class \fBDummyObjPN\fP"
.br
.ti -1c
.RI "class \fBCloneDummyObjPN\fP"
.br
.ti -1c
.RI "class \fBCloneGepObjPN\fP"
.br
.ti -1c
.RI "class \fBCloneFIObjPN\fP"
.br
.ti -1c
.RI "class \fBPTACallGraphEdge\fP"
.br
.ti -1c
.RI "class \fBPTACallGraphNode\fP"
.br
.ti -1c
.RI "class \fBPTACallGraph\fP"
.br
.ti -1c
.RI "class \fBSVFG\fP"
.br
.ti -1c
.RI "class \fBIndirectSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBIntraIndSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBCallIndSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBRetIndSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBThreadMHPIndSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBMRSVFGNode\fP"
.br
.ti -1c
.RI "class \fBFormalINSVFGNode\fP"
.br
.ti -1c
.RI "class \fBFormalOUTSVFGNode\fP"
.br
.ti -1c
.RI "class \fBActualINSVFGNode\fP"
.br
.ti -1c
.RI "class \fBActualOUTSVFGNode\fP"
.br
.ti -1c
.RI "class \fBMSSAPHISVFGNode\fP"
.br
.ti -1c
.RI "class \fBIntraMSSAPHISVFGNode\fP"
.br
.ti -1c
.RI "class \fBInterMSSAPHISVFGNode\fP"
.br
.ti -1c
.RI "class \fBSVFGOPT\fP"
.br
.ti -1c
.RI "class \fBMemSSAStat\fP"
.br
.ti -1c
.RI "class \fBSVFGStat\fP"
.br
.ti -1c
.RI "class \fBThreadForkEdge\fP"
.br
.ti -1c
.RI "class \fBThreadJoinEdge\fP"
.br
.ti -1c
.RI "class \fBHareParForEdge\fP"
.br
.ti -1c
.RI "class \fBThreadCallGraph\fP"
.br
.ti -1c
.RI "class \fBVFG\fP"
.br
.ti -1c
.RI "class \fBVFGEdge\fP"
.br
.ti -1c
.RI "class \fBDirectSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBIntraDirSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBCallDirSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBRetDirSVFGEdge\fP"
.br
.ti -1c
.RI "class \fBVFGNode\fP"
.br
.ti -1c
.RI "class \fBStmtVFGNode\fP"
.br
.ti -1c
.RI "class \fBLoadVFGNode\fP"
.br
.ti -1c
.RI "class \fBStoreVFGNode\fP"
.br
.ti -1c
.RI "class \fBCopyVFGNode\fP"
.br
.ti -1c
.RI "class \fBCmpVFGNode\fP"
.br
.ti -1c
.RI "class \fBBinaryOPVFGNode\fP"
.br
.ti -1c
.RI "class \fBUnaryOPVFGNode\fP"
.br
.ti -1c
.RI "class \fBGepVFGNode\fP"
.br
.ti -1c
.RI "class \fBPHIVFGNode\fP"
.br
.ti -1c
.RI "class \fBIntraPHIVFGNode\fP"
.br
.ti -1c
.RI "class \fBAddrVFGNode\fP"
.br
.ti -1c
.RI "class \fBArgumentVFGNode\fP"
.br
.ti -1c
.RI "class \fBActualParmVFGNode\fP"
.br
.ti -1c
.RI "class \fBFormalParmVFGNode\fP"
.br
.ti -1c
.RI "class \fBActualRetVFGNode\fP"
.br
.ti -1c
.RI "class \fBFormalRetVFGNode\fP"
.br
.ti -1c
.RI "class \fBInterPHIVFGNode\fP"
.br
.ti -1c
.RI "class \fBNullPtrVFGNode\fP"
.br
.ti -1c
.RI "class \fBPTData\fP"
.br
.ti -1c
.RI "class \fBDiffPTData\fP"
.br
.ti -1c
.RI "class \fBDFPTData\fP"
.br
.ti -1c
.RI "class \fBVersionedPTData\fP"
.br
.ti -1c
.RI "class \fBCondVar\fP"
.br
.ti -1c
.RI "class \fBCondStdSet\fP"
.br
.ti -1c
.RI "class \fBCondPointsToSet\fP"
.br
.ti -1c
.RI "class \fBFieldInfo\fP"
.br
.ti -1c
.RI "class \fBLocationSet\fP"
.br
.ti -1c
.RI "class \fBStInfo\fP"
.br
.ti -1c
.RI "class \fBObjTypeInfo\fP"
.br
.ti -1c
.RI "class \fBMemObj\fP"
.br
.ti -1c
.RI "class \fBMutableDFPTData\fP"
.br
.ti -1c
.RI "class \fBMutablePTData\fP"
.br
.RI "\fBPTData\fP implemented using points-to sets which are created once and updated continuously\&. "
.ti -1c
.RI "class \fBMutableDiffPTData\fP"
.br
.RI "\fBDiffPTData\fP implemented with points-to sets which are updated continuously\&. "
.ti -1c
.RI "class \fBIncMutableDFPTData\fP"
.br
.RI "Incremental version of the mutable data-flow points-to data structure\&. "
.ti -1c
.RI "class \fBMutableVersionedPTData\fP"
.br
.ti -1c
.RI "class \fBPAGBuilderFromFile\fP"
.br
.ti -1c
.RI "class \fBPointerAnalysis\fP"
.br
.ti -1c
.RI "class \fBBVDataPTAImpl\fP"
.br
.ti -1c
.RI "class \fBCondPTAImpl\fP"
.br
.ti -1c
.RI "class \fBPTAStat\fP"
.br
.ti -1c
.RI "class \fBPTAType\fP"
.br
.ti -1c
.RI "class \fBTypeSet\fP"
.br
.ti -1c
.RI "class \fBTypeSystem\fP"
.br
.ti -1c
.RI "class \fBDistinctMRG\fP"
.br
.ti -1c
.RI "class \fBIntraDisjointMRG\fP"
.br
.ti -1c
.RI "class \fBInterDisjointMRG\fP"
.br
.ti -1c
.RI "class \fBMemRegion\fP"
.br
.RI "Memory Region class\&. "
.ti -1c
.RI "class \fBMRGenerator\fP"
.br
.ti -1c
.RI "class \fBMemSSA\fP"
.br
.ti -1c
.RI "class \fBMRVer\fP"
.br
.ti -1c
.RI "class \fBMSSAMU\fP"
.br
.ti -1c
.RI "class \fBLoadMU\fP"
.br
.ti -1c
.RI "class \fBCallMU\fP"
.br
.ti -1c
.RI "class \fBRetMU\fP"
.br
.ti -1c
.RI "class \fBMSSADEF\fP"
.br
.ti -1c
.RI "class \fBMSSACHI\fP"
.br
.ti -1c
.RI "class \fBStoreCHI\fP"
.br
.ti -1c
.RI "class \fBCallCHI\fP"
.br
.ti -1c
.RI "class \fBEntryCHI\fP"
.br
.ti -1c
.RI "class \fBMSSAPHI\fP"
.br
.ti -1c
.RI "class \fBMemSSADF\fP"
.br
.ti -1c
.RI "class \fBSVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBMTASVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBFSMPTA\fP"
.br
.ti -1c
.RI "class \fBLockAnalysis\fP"
.br
.ti -1c
.RI "class \fBMHP\fP"
.br
.ti -1c
.RI "class \fBForkJoinAnalysis\fP"
.br
.ti -1c
.RI "class \fBMTA\fP"
.br
.ti -1c
.RI "class \fBMTAAnnotator\fP"
.br
.ti -1c
.RI "class \fBMTAStat\fP"
.br
.ti -1c
.RI "class \fBPCG\fP"
.br
.ti -1c
.RI "class \fBTCTEdge\fP"
.br
.ti -1c
.RI "class \fBTCTNode\fP"
.br
.ti -1c
.RI "class \fBTCT\fP"
.br
.ti -1c
.RI "class \fBDoubleFreeChecker\fP"
.br
.ti -1c
.RI "class \fBFileChecker\fP"
.br
.ti -1c
.RI "class \fBLeakChecker\fP"
.br
.ti -1c
.RI "class \fBProgSlice\fP"
.br
.ti -1c
.RI "class \fBSaberAnnotator\fP"
.br
.ti -1c
.RI "class \fBSaberCheckerAPI\fP"
.br
.ti -1c
.RI "class \fBSaberSVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBSrcSnkDDA\fP"
.br
.ti -1c
.RI "class \fBBreakConstantGEPs\fP"
.br
.ti -1c
.RI "class \fBMergeFunctionRets\fP"
.br
.ti -1c
.RI "class \fBCallGraphBuilder\fP"
.br
.ti -1c
.RI "class \fBThreadCallGraphBuilder\fP"
.br
.ti -1c
.RI "class \fBCHEdge\fP"
.br
.ti -1c
.RI "class \fBCHNode\fP"
.br
.ti -1c
.RI "class \fBCHGraph\fP"
.br
.ti -1c
.RI "class \fBCommonCHGraph\fP"
.br
.RI "Common base for class hierarchy graph\&. Only implements what \fBPointerAnalysis\fP needs\&. "
.ti -1c
.RI "class \fBPTASCEV\fP"
.br
.ti -1c
.RI "class \fBPTACFInfoBuilder\fP"
.br
.ti -1c
.RI "class \fBIteratedDominanceFrontier\fP"
.br
.ti -1c
.RI "class \fBDCHEdge\fP"
.br
.ti -1c
.RI "class \fBDCHNode\fP"
.br
.ti -1c
.RI "class \fBDCHGraph\fP"
.br
.RI "Dwarf based CHG\&. "
.ti -1c
.RI "class \fBICFGPrinter\fP"
.br
.ti -1c
.RI "class \fBICFGBuilder\fP"
.br
.ti -1c
.RI "class \fBLLVMModuleSet\fP"
.br
.ti -1c
.RI "class \fBPAGBuilder\fP"
.br
.ti -1c
.RI "class \fBSymbolTableInfo\fP"
.br
.ti -1c
.RI "class \fBLocSymTableInfo\fP"
.br
.ti -1c
.RI "class \fBLocObjTypeInfo\fP"
.br
.ti -1c
.RI "class \fBAnnotator\fP"
.br
.ti -1c
.RI "class \fBSVFFunction\fP"
.br
.ti -1c
.RI "class \fBSVFGlobal\fP"
.br
.ti -1c
.RI "class \fBSVFBasicBlock\fP"
.br
.ti -1c
.RI "class \fBSVFInstruction\fP"
.br
.ti -1c
.RI "class \fBCFLSolver\fP"
.br
.ti -1c
.RI "class \fBBddCondManager\fP"
.br
.ti -1c
.RI "class \fBCxtStmt\fP"
.br
.ti -1c
.RI "class \fBCxtThreadStmt\fP"
.br
.ti -1c
.RI "class \fBCxtThread\fP"
.br
.ti -1c
.RI "class \fBCxtProc\fP"
.br
.ti -1c
.RI "class \fBCxtThreadProc\fP"
.br
.ti -1c
.RI "class \fBDPItem\fP"
.br
.ti -1c
.RI "class \fBStmtDPItem\fP"
.br
.ti -1c
.RI "class \fBContextCond\fP"
.br
.ti -1c
.RI "class \fBCxtStmtDPItem\fP"
.br
.ti -1c
.RI "class \fBVFPathCond\fP"
.br
.ti -1c
.RI "class \fBPathStmtDPItem\fP"
.br
.ti -1c
.RI "class \fBCxtDPItem\fP"
.br
.ti -1c
.RI "class \fBExtAPI\fP"
.br
.ti -1c
.RI "class \fBNodeIDAllocator\fP"
.br
.ti -1c
.RI "class \fBPathCondAllocator\fP"
.br
.ti -1c
.RI "class \fBSCCDetection\fP"
.br
.ti -1c
.RI "class \fBSVFValue\fP"
.br
.ti -1c
.RI "class \fBSVFModule\fP"
.br
.ti -1c
.RI "class \fBThreadAPI\fP"
.br
.ti -1c
.RI "class \fBTypeBasedHeapCloning\fP"
.br
.ti -1c
.RI "class \fBList\fP"
.br
.ti -1c
.RI "class \fBFIFOWorkList\fP"
.br
.ti -1c
.RI "class \fBFILOWorkList\fP"
.br
.ti -1c
.RI "class \fBAndersenBase\fP"
.br
.ti -1c
.RI "class \fBAndersen\fP"
.br
.ti -1c
.RI "class \fBAndersenWaveDiff\fP"
.br
.ti -1c
.RI "class \fBAndersenWaveDiffWithType\fP"
.br
.ti -1c
.RI "class \fBAndersenLCD\fP"
.br
.ti -1c
.RI "class \fBAndersenHCD\fP"
.br
.ti -1c
.RI "class \fBAndersenHLCD\fP"
.br
.ti -1c
.RI "class \fBAndersenSCD\fP"
.br
.ti -1c
.RI "class \fBAndersenSFR\fP"
.br
.ti -1c
.RI "class \fBCSC\fP"
.br
.ti -1c
.RI "class \fBFlowSensitive\fP"
.br
.ti -1c
.RI "class \fBFlowSensitiveTBHC\fP"
.br
.ti -1c
.RI "class \fBSteensgaard\fP"
.br
.ti -1c
.RI "class \fBTypeAnalysis\fP"
.br
.ti -1c
.RI "class \fBVersionedFlowSensitive\fP"
.br
.ti -1c
.RI "class \fBWPAFSSolver\fP"
.br
.ti -1c
.RI "class \fBWPASCCSolver\fP"
.br
.ti -1c
.RI "class \fBWPAMinimumSolver\fP"
.br
.ti -1c
.RI "class \fBWPAPass\fP"
.br
.ti -1c
.RI "class \fBWPASolver\fP"
.br
.ti -1c
.RI "class \fBAndersenStat\fP"
.br
.ti -1c
.RI "class \fBFlowSensitiveStat\fP"
.br
.ti -1c
.RI "class \fBVersionedFlowSensitiveStat\fP"
.br
.ti -1c
.RI "class \fBLockValidator\fP"
.br
.ti -1c
.RI "class \fBMHPValidator\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBCxtStmtDPItem\fP< \fBSVFGNode\fP > \fBCxtLocDPItem\fP"
.br
.ti -1c
.RI "typedef \fBStmtDPItem\fP< \fBSVFGNode\fP > \fBLocDPItem\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBConstraintNode\fP > \fBGenericConsEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBConstraintNode\fP, \fBConstraintEdge\fP > \fBGenericConsNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericGraph\fP< \fBICFGNode\fP, \fBICFGEdge\fP > \fBGenericICFGTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBICFGNode\fP > \fBGenericICFGEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBICFGNode\fP, \fBICFGEdge\fP > \fBGenericICFGNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBPAGNode\fP > \fBGenericPAGEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBPAGNode\fP, \fBPAGEdge\fP > \fBGenericPAGNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBPTACallGraphNode\fP > \fBGenericCallGraphEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBPTACallGraphNode\fP, \fBPTACallGraphEdge\fP > \fBGenericCallGraphNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericGraph\fP< \fBPTACallGraphNode\fP, \fBPTACallGraphEdge\fP > \fBGenericCallGraphTy\fP"
.br
.ti -1c
.RI "typedef \fBVFGEdge\fP \fBSVFGEdge\fP"
.br
.ti -1c
.RI "typedef \fBVFGNode\fP \fBSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBActualParmVFGNode\fP \fBActualParmSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBActualRetVFGNode\fP \fBActualRetSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBFormalParmVFGNode\fP \fBFormalParmSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBFormalRetVFGNode\fP \fBFormalRetSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBNullPtrVFGNode\fP \fBNullPtrSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBStmtVFGNode\fP \fBStmtSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBAddrVFGNode\fP \fBAddrSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBCopyVFGNode\fP \fBCopySVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBStoreVFGNode\fP \fBStoreSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBLoadVFGNode\fP \fBLoadSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBGepVFGNode\fP \fBGepSVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBPHIVFGNode\fP \fBPHISVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBIntraPHIVFGNode\fP \fBIntraPHISVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBInterPHIVFGNode\fP \fBInterPHISVFGNode\fP"
.br
.ti -1c
.RI "typedef \fBGenericGraph\fP< \fBVFGNode\fP, \fBVFGEdge\fP > \fBGenericVFGTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBVFGNode\fP > \fBGenericVFGEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBVFGNode\fP, \fBVFGEdge\fP > \fBGenericVFGNodeTy\fP"
.br
.ti -1c
.RI "typedef NodeID \fBMRID\fP"
.br
.ti -1c
.RI "typedef NodeID \fBMRVERID\fP"
.br
.ti -1c
.RI "typedef NodeID \fBMRVERSION\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBTCTNode\fP > \fBGenericTCTEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBTCTNode\fP, \fBTCTEdge\fP > \fBGenericTCTNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericGraph\fP< \fBTCTNode\fP, \fBTCTEdge\fP > \fBGenericThreadCreateTreeTy\fP"
.br
.ti -1c
.RI "typedef \fBCFLSolver\fP< \fBSVFG\fP *, \fBCxtDPItem\fP > \fBCFLSrcSnkSolver\fP"
.br
.ti -1c
.RI "typedef \fBGenericEdge\fP< \fBCHNode\fP > \fBGenericCHEdgeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericNode\fP< \fBCHNode\fP, \fBCHEdge\fP > \fBGenericCHNodeTy\fP"
.br
.ti -1c
.RI "typedef \fBGenericGraph\fP< \fBCHNode\fP, \fBCHEdge\fP > \fBGenericCHGraphTy\fP"
.br
.RI "class hierarchy graph "
.ti -1c
.RI "typedef Set< const GlobalValue * > \fBVTableSet\fP"
.br
.ti -1c
.RI "typedef Set< const \fBSVFFunction\fP * > \fBVFunSet\fP"
.br
.ti -1c
.RI "typedef llvm::SMDiagnostic \fBSMDiagnostic\fP"
.br
.RI "LLVM Basic classes\&. "
.ti -1c
.RI "typedef llvm::LLVMContext \fBLLVMContext\fP"
.br
.ti -1c
.RI "typedef llvm::Type \fBType\fP"
.br
.ti -1c
.RI "typedef llvm::Function \fBFunction\fP"
.br
.ti -1c
.RI "typedef llvm::BasicBlock \fBBasicBlock\fP"
.br
.ti -1c
.RI "typedef llvm::Value \fBValue\fP"
.br
.ti -1c
.RI "typedef llvm::Instruction \fBInstruction\fP"
.br
.ti -1c
.RI "typedef llvm::CallSite \fBCallSite\fP"
.br
.ti -1c
.RI "typedef llvm::GlobalObject \fBGlobalObject\fP"
.br
.ti -1c
.RI "typedef llvm::GlobalValue \fBGlobalValue\fP"
.br
.ti -1c
.RI "typedef llvm::GlobalVariable \fBGlobalVariable\fP"
.br
.ti -1c
.RI "typedef llvm::Module \fBModule\fP"
.br
.ti -1c
.RI "typedef llvm::CallGraph \fBLLVMCallGraph\fP"
.br
.ti -1c
.RI "typedef llvm::User \fBUser\fP"
.br
.ti -1c
.RI "typedef llvm::Use \fBUse\fP"
.br
.ti -1c
.RI "typedef llvm::Loop \fBLoop\fP"
.br
.ti -1c
.RI "typedef llvm::LoopInfo \fBLoopInfo\fP"
.br
.ti -1c
.RI "typedef llvm::UnifyFunctionExitNodes \fBUnifyFunctionExitNodes\fP"
.br
.ti -1c
.RI "typedef llvm::ModulePass \fBModulePass\fP"
.br
.ti -1c
.RI "typedef llvm::AnalysisUsage \fBAnalysisUsage\fP"
.br
.ti -1c
.RI "typedef llvm::raw_ostream \fBraw_ostream\fP"
.br
.RI "LLVM outputs\&. "
.ti -1c
.RI "typedef llvm::raw_string_ostream \fBraw_string_ostream\fP"
.br
.ti -1c
.RI "typedef llvm::raw_fd_ostream \fBraw_fd_ostream\fP"
.br
.ti -1c
.RI "typedef llvm::StringRef \fBStringRef\fP"
.br
.ti -1c
.RI "typedef llvm::ToolOutputFile \fBToolOutputFile\fP"
.br
.ti -1c
.RI "typedef llvm::StructType \fBStructType\fP"
.br
.RI "LLVM types\&. "
.ti -1c
.RI "typedef llvm::ArrayType \fBArrayType\fP"
.br
.ti -1c
.RI "typedef llvm::PointerType \fBPointerType\fP"
.br
.ti -1c
.RI "typedef llvm::FunctionType \fBFunctionType\fP"
.br
.ti -1c
.RI "typedef llvm::VectorType \fBVectorType\fP"
.br
.ti -1c
.RI "typedef llvm::MetadataAsValue \fBMetadataAsValue\fP"
.br
.ti -1c
.RI "typedef llvm::BlockAddress \fBBlockAddress\fP"
.br
.ti -1c
.RI "typedef llvm::DataLayout \fBDataLayout\fP"
.br
.RI "LLVM data layout\&. "
.ti -1c
.RI "typedef llvm::StructLayout \fBStructLayout\fP"
.br
.ti -1c
.RI "typedef llvm::SmallVector< BasicBlock *, 8 > \fBSmallBBVector\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantStruct \fBConstantStruct\fP"
.br
.ti -1c
.RI "typedef llvm::MemoryLocation \fBMemoryLocation\fP"
.br
.ti -1c
.RI "typedef llvm::Argument \fBArgument\fP"
.br
.RI "LLVM Aliases and constants\&. "
.ti -1c
.RI "typedef llvm::Constant \fBConstant\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantData \fBConstantData\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantExpr \fBConstantExpr\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantAggregate \fBConstantAggregate\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantPointerNull \fBConstantPointerNull\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantArray \fBConstantArray\fP"
.br
.ti -1c
.RI "typedef llvm::GlobalAlias \fBGlobalAlias\fP"
.br
.ti -1c
.RI "typedef llvm::AliasResult \fBAliasResult\fP"
.br
.ti -1c
.RI "typedef llvm::ModRefInfo \fBModRefInfo\fP"
.br
.ti -1c
.RI "typedef llvm::AnalysisID \fBAnalysisID\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantDataArray \fBConstantDataArray\fP"
.br
.ti -1c
.RI "typedef llvm::NamedMDNode \fBNamedMDNode\fP"
.br
.RI "LLVM metadata\&. "
.ti -1c
.RI "typedef llvm::MDString \fBMDString\fP"
.br
.ti -1c
.RI "typedef llvm::MDNode \fBMDNode\fP"
.br
.ti -1c
.RI "typedef llvm::AllocaInst \fBAllocaInst\fP"
.br
.RI "LLVM Instructions\&. "
.ti -1c
.RI "typedef llvm::CallInst \fBCallInst\fP"
.br
.ti -1c
.RI "typedef llvm::InvokeInst \fBInvokeInst\fP"
.br
.ti -1c
.RI "typedef llvm::CallBrInst \fBCallBrInst\fP"
.br
.ti -1c
.RI "typedef llvm::StoreInst \fBStoreInst\fP"
.br
.ti -1c
.RI "typedef llvm::LoadInst \fBLoadInst\fP"
.br
.ti -1c
.RI "typedef llvm::PHINode \fBPHINode\fP"
.br
.ti -1c
.RI "typedef llvm::GetElementPtrInst \fBGetElementPtrInst\fP"
.br
.ti -1c
.RI "typedef llvm::CastInst \fBCastInst\fP"
.br
.ti -1c
.RI "typedef llvm::BitCastInst \fBBitCastInst\fP"
.br
.ti -1c
.RI "typedef llvm::ReturnInst \fBReturnInst\fP"
.br
.ti -1c
.RI "typedef llvm::ConstantInt \fBConstantInt\fP"
.br
.ti -1c
.RI "typedef llvm::SelectInst \fBSelectInst\fP"
.br
.ti -1c
.RI "typedef llvm::IntToPtrInst \fBIntToPtrInst\fP"
.br
.ti -1c
.RI "typedef llvm::CmpInst \fBCmpInst\fP"
.br
.ti -1c
.RI "typedef llvm::BranchInst \fBBranchInst\fP"
.br
.ti -1c
.RI "typedef llvm::SwitchInst \fBSwitchInst\fP"
.br
.ti -1c
.RI "typedef llvm::ExtractValueInst \fBExtractValueInst\fP"
.br
.ti -1c
.RI "typedef llvm::InsertValueInst \fBInsertValueInst\fP"
.br
.ti -1c
.RI "typedef llvm::BinaryOperator \fBBinaryOperator\fP"
.br
.ti -1c
.RI "typedef llvm::UnaryOperator \fBUnaryOperator\fP"
.br
.ti -1c
.RI "typedef llvm::PtrToIntInst \fBPtrToIntInst\fP"
.br
.ti -1c
.RI "typedef llvm::VAArgInst \fBVAArgInst\fP"
.br
.ti -1c
.RI "typedef llvm::ExtractElementInst \fBExtractElementInst\fP"
.br
.ti -1c
.RI "typedef llvm::InsertElementInst \fBInsertElementInst\fP"
.br
.ti -1c
.RI "typedef llvm::ShuffleVectorInst \fBShuffleVectorInst\fP"
.br
.ti -1c
.RI "typedef llvm::LandingPadInst \fBLandingPadInst\fP"
.br
.ti -1c
.RI "typedef llvm::ResumeInst \fBResumeInst\fP"
.br
.ti -1c
.RI "typedef llvm::UnreachableInst \fBUnreachableInst\fP"
.br
.ti -1c
.RI "typedef llvm::FenceInst \fBFenceInst\fP"
.br
.ti -1c
.RI "typedef llvm::AtomicCmpXchgInst \fBAtomicCmpXchgInst\fP"
.br
.ti -1c
.RI "typedef llvm::AtomicRMWInst \fBAtomicRMWInst\fP"
.br
.ti -1c
.RI "typedef llvm::UndefValue \fBUndefValue\fP"
.br
.ti -1c
.RI "typedef llvm::ScalarEvolutionWrapperPass \fBScalarEvolutionWrapperPass\fP"
.br
.RI "LLVM scalar evolution\&. "
.ti -1c
.RI "typedef llvm::ScalarEvolution \fBScalarEvolution\fP"
.br
.ti -1c
.RI "typedef llvm::SCEVAddRecExpr \fBSCEVAddRecExpr\fP"
.br
.ti -1c
.RI "typedef llvm::SCEVConstant \fBSCEVConstant\fP"
.br
.ti -1c
.RI "typedef llvm::SCEV \fBSCEV\fP"
.br
.ti -1c
.RI "typedef llvm::DominanceFrontier \fBDominanceFrontier\fP"
.br
.RI "LLVM Dominators\&. "
.ti -1c
.RI "typedef llvm::DominatorTree \fBDominatorTree\fP"
.br
.ti -1c
.RI "typedef llvm::PostDominatorTree \fBPostDominatorTree\fP"
.br
.ti -1c
.RI "typedef llvm::DomTreeNode \fBDomTreeNode\fP"
.br
.ti -1c
.RI "typedef llvm::DominanceFrontierBase< BasicBlock, false > \fBDominanceFrontierBase\fP"
.br
.ti -1c
.RI "typedef llvm::PostDominatorTreeWrapperPass \fBPostDominatorTreeWrapperPass\fP"
.br
.ti -1c
.RI "typedef llvm::LoopInfoWrapperPass \fBLoopInfoWrapperPass\fP"
.br
.ti -1c
.RI "typedef llvm::inst_iterator \fBinst_iterator\fP"
.br
.RI "LLVM Iterators\&. "
.ti -1c
.RI "typedef llvm::succ_const_iterator \fBsucc_const_iterator\fP"
.br
.ti -1c
.RI "typedef llvm::const_inst_iterator \fBconst_inst_iterator\fP"
.br
.ti -1c
.RI "typedef llvm::const_pred_iterator \fBconst_pred_iterator\fP"
.br
.ti -1c
.RI "typedef llvm::gep_type_iterator \fBgep_type_iterator\fP"
.br
.ti -1c
.RI "typedef \fBllvm::bridge_gep_iterator\fP \fBbridge_gep_iterator\fP"
.br
.ti -1c
.RI "typedef \fBllvm::GraphPrinter\fP \fBGraphPrinter\fP"
.br
.ti -1c
.RI "typedef llvm::IRBuilder \fBIRBuilder\fP"
.br
.ti -1c
.RI "typedef llvm::IntegerType \fBIntegerType\fP"
.br
.ti -1c
.RI "typedef llvm::DebugInfoFinder \fBDebugInfoFinder\fP"
.br
.RI "LLVM debug information\&. "
.ti -1c
.RI "typedef llvm::DIType \fBDIType\fP"
.br
.ti -1c
.RI "typedef llvm::DIBasicType \fBDIBasicType\fP"
.br
.ti -1c
.RI "typedef llvm::DICompositeType \fBDICompositeType\fP"
.br
.ti -1c
.RI "typedef llvm::DIDerivedType \fBDIDerivedType\fP"
.br
.ti -1c
.RI "typedef llvm::DISubroutineType \fBDISubroutineType\fP"
.br
.ti -1c
.RI "typedef llvm::DISubprogram \fBDISubprogram\fP"
.br
.ti -1c
.RI "typedef llvm::DISubrange \fBDISubrange\fP"
.br
.ti -1c
.RI "typedef llvm::DINode \fBDINode\fP"
.br
.ti -1c
.RI "typedef llvm::DINodeArray \fBDINodeArray\fP"
.br
.ti -1c
.RI "typedef llvm::DITypeRefArray \fBDITypeRefArray\fP"
.br
.ti -1c
.RI "typedef \fBCondVar\fP< \fBContextCond\fP > \fBCxtVar\fP"
.br
.ti -1c
.RI "typedef \fBCondStdSet\fP< \fBCxtVar\fP > \fBCxtPtSet\fP"
.br
.ti -1c
.RI "typedef \fBCondVar\fP< \fBVFPathCond\fP > \fBVFPathVar\fP"
.br
.ti -1c
.RI "typedef \fBCondStdSet\fP< \fBVFPathVar\fP > \fBVFPathPtSet\fP"
.br
.ti -1c
.RI "typedef unsigned \fBu32_t\fP"
.br
.ti -1c
.RI "typedef unsigned long long \fBu64_t\fP"
.br
.ti -1c
.RI "typedef signed \fBs32_t\fP"
.br
.ti -1c
.RI "typedef signed long \fBSize_t\fP"
.br
.ti -1c
.RI "typedef u32_t \fBNodeID\fP"
.br
.ti -1c
.RI "typedef u32_t \fBEdgeID\fP"
.br
.ti -1c
.RI "typedef unsigned \fBSymID\fP"
.br
.ti -1c
.RI "typedef unsigned \fBCallSiteID\fP"
.br
.ti -1c
.RI "typedef unsigned \fBThreadID\fP"
.br
.ti -1c
.RI "typedef unsigned \fBVersion\fP"
.br
.ti -1c
.RI "typedef llvm::SparseBitVector \fBNodeBS\fP"
.br
.ti -1c
.RI "typedef NodeBS \fBPointsTo\fP"
.br
.ti -1c
.RI "typedef PointsTo \fBAliasSet\fP"
.br
.ti -1c
.RI "template<typename Key , typename Hash  = std::hash<Key>, typename KeyEqual  = std::equal_to<Key>, typename Allocator  = std::allocator<Key>> using \fBSet\fP = std::unordered_set< Key, Hash, KeyEqual, Allocator >"
.br
.ti -1c
.RI "template<typename Key , typename Value , typename Hash  = std::hash<Key>, typename KeyEqual  = std::equal_to<Key>, typename Allocator  = std::allocator<std::pair<const Key, Value>>> using \fBMap\fP = std::unordered_map< Key, Value, Hash, KeyEqual, Allocator >"
.br
.ti -1c
.RI "template<typename Key , typename Compare  = std::less<Key>, typename Allocator  = std::allocator<Key>> using \fBOrderedSet\fP = std::set< Key, Compare, Allocator >"
.br
.ti -1c
.RI "template<typename Key , typename Value , typename Compare  = std::less<Key>, typename Allocator  = std::allocator<std::pair<const Key, Value>>> using \fBOrderedMap\fP = std::map< Key, Value, Compare, Allocator >"
.br
.ti -1c
.RI "template<typename T , unsigned N> using \fBSmallVector\fP = llvm::SmallVector< T, N >"
.br
.ti -1c
.RI "typedef std::pair< NodeID, NodeID > \fBNodePair\fP"
.br
.ti -1c
.RI "typedef std::pair< NodeID, Version > \fBVersionedVar\fP"
.br
.ti -1c
.RI "typedef OrderedSet< NodeID > \fBOrderedNodeSet\fP"
.br
.ti -1c
.RI "typedef Set< NodeID > \fBNodeSet\fP"
.br
.ti -1c
.RI "typedef Set< NodePair > \fBNodePairSet\fP"
.br
.ti -1c
.RI "typedef Map< NodePair, NodeID > \fBNodePairMap\fP"
.br
.ti -1c
.RI "typedef std::vector< NodeID > \fBNodeVector\fP"
.br
.ti -1c
.RI "typedef std::vector< EdgeID > \fBEdgeVector\fP"
.br
.ti -1c
.RI "typedef std::stack< NodeID > \fBNodeStack\fP"
.br
.ti -1c
.RI "typedef std::list< NodeID > \fBNodeList\fP"
.br
.ti -1c
.RI "typedef std::deque< NodeID > \fBNodeDeque\fP"
.br
.ti -1c
.RI "typedef SmallVector< u32_t, 16 > \fBSmallVector16\fP"
.br
.ti -1c
.RI "typedef SmallVector< u32_t, 8 > \fBSmallVector8\fP"
.br
.ti -1c
.RI "typedef NodeSet \fBEdgeSet\fP"
.br
.ti -1c
.RI "typedef SmallVector16 \fBCallStrCxt\fP"
.br
.ti -1c
.RI "typedef llvm::StringMap< u32_t > \fBStringMap\fP"
.br
.ti -1c
.RI "typedef \fBWPASolver\fP< \fBConstraintGraph\fP * > \fBWPAConstraintSolver\fP"
.br
.ti -1c
.RI "typedef \fBSCCDetection\fP< \fBConstraintGraph\fP * > \fBCGSCC\fP"
.br
.ti -1c
.RI "typedef \fBWPAFSSolver\fP< \fBSVFG\fP * > \fBWPASVFGFSSolver\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSYMTYPE\fP { \fBBlackHole\fP, \fBConstantObj\fP, \fBBlkPtr\fP, \fBNullPtr\fP, \fBValSym\fP, \fBObjSym\fP, \fBRetSym\fP, \fBVarargSym\fP }"
.br
.RI "Symbol types\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename F , typename S > \fBraw_ostream\fP & \fBoperator<<\fP (\fBraw_ostream\fP &o, const std::pair< F, S > &var)"
.br
.in -1c
.SH "Detailed Description"
.PP 
for isBitcode 

Contains abstract classes for: \fBPTData\fP: basic points-to data structure derived by all others\&. \fBDiffPTData\fP: \fBPTData\fP which only propagates new changes, not entire points-to sets\&. \fBDFPTData\fP: flow-sensitive \fBPTData\fP as defined by Hardekopf and Lin (CGO '11)\&.
.PP
Hierarchy (square brackets indicate abstract class): 
.PP
.nf
  +------------> [PTData] <----------------+---------------------+
  |                 ^                      |                     |
  |                 |                      |                     |

.fi
.PP
 \fBMutablePTData\fP [\fBDiffPTData\fP] [\fBDFPTData\fP] [\fBVersionedPTData\fP] ^ ^ ^ | | | \fBMutableDiffPTData\fP \fBMutableDFPTData\fP \fBMutableVersionedPTData\fP ^ | \fBIncMutableDFPTData\fP
.PP
\fBPTData\fP (\fBAbstractPointsToDS\&.h\fP) implementations with a mutable backend\&. Each Key is given a points-to set which is itself updated till the analysis terminates\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBCondVar\fP< \fBContextCond\fP > \fBSVF::CxtVar\fP"
Context-, flow- sensitive \fBDPItem\fP
.PP
Context \fBDPItem\fP 
.SS "typedef \fBGenericGraph\fP<\fBPTACallGraphNode\fP,\fBPTACallGraphEdge\fP> \fBSVF::GenericCallGraphTy\fP"
Pointer Analysis Call Graph used internally for various pointer analysis 
.SS "typedef \fBGenericEdge\fP<\fBConstraintNode\fP> \fBSVF::GenericConsEdgeTy\fP"
Self-defined edge for constraint resolution including add/remove/re-target, but all the operations do not affect original \fBPAG\fP Edges 
.SS "typedef \fBGenericNode\fP<\fBConstraintNode\fP,\fBConstraintEdge\fP> \fBSVF::GenericConsNodeTy\fP"
Constraint node 
.SS "typedef \fBGenericEdge\fP<\fBICFGNode\fP> \fBSVF::GenericICFGEdgeTy\fP"
Interprocedural control-flow and value-flow edge, representing the control- and value-flow dependence between two nodes 
.SS "typedef \fBGenericNode\fP<\fBICFGNode\fP, \fBICFGEdge\fP> \fBSVF::GenericICFGNodeTy\fP"
Interprocedural control-flow graph node, representing different kinds of program statements including top-level pointers (\fBValPN\fP) and address-taken objects (\fBObjPN\fP) 
.SS "typedef \fBGenericGraph\fP<\fBICFGNode\fP,\fBICFGEdge\fP> \fBSVF::GenericICFGTy\fP"
Interprocedural Control-Flow Graph (\fBICFG\fP) 
.SS "typedef \fBGenericGraph\fP<\fBTCTNode\fP, \fBTCTEdge\fP> \fBSVF::GenericThreadCreateTreeTy\fP"
Pointer Analysis Call Graph used internally for various pointer analysis 
.SS "typedef \fBGenericEdge\fP<\fBVFGNode\fP> \fBSVF::GenericVFGEdgeTy\fP"
Interprocedural control-flow and value-flow edge, representing the control- and value-flow dependence between two nodes 
.SS "typedef \fBGenericNode\fP<\fBVFGNode\fP,\fBVFGEdge\fP> \fBSVF::GenericVFGNodeTy\fP"
Interprocedural control-flow graph node, representing different kinds of program statements including top-level pointers (\fBValPN\fP) and address-taken objects (\fBObjPN\fP) 
.SS "typedef \fBGenericGraph\fP<\fBVFGNode\fP,\fBVFGEdge\fP> \fBSVF::GenericVFGTy\fP"
Interprocedural Control-Flow Graph (\fBVFG\fP) 
.SS "typedef \fBCondVar\fP<\fBVFPathCond\fP> \fBSVF::VFPathVar\fP"
Path-sensitive \fBDPItem\fP 
.SS "typedef \fBWPASolver\fP< \fBConstraintGraph\fP * > \fBSVF::WPAConstraintSolver\fP"
Abstract class of inclusion-based Pointer Analysis
.PP
Equivalence-based Pointer Analysis 
.SS "typedef \fBWPAFSSolver\fP<\fBSVFG\fP*> \fBSVF::WPASVFGFSSolver\fP"
Flow sensitive whole program pointer analysis 
.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
