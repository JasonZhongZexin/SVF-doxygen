<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_mutable_p_t_data" xml:lang="en-US">
<title>SVF::MutablePTData&lt; Key, Datum, Data &gt; Class Template Reference</title>
<indexterm><primary>SVF::MutablePTData&lt; Key, Datum, Data &gt;</primary></indexterm>
<para>

<para><link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> implemented using points-to sets which are created once and updated continuously. </para>
 
</para>
<para>
<computeroutput>#include &lt;MutablePointsToDS.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::MutablePTData&lt; Key, Datum, Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_mutable_p_t_data.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a381ace65c16e2ce5966e3f8878362f36"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; <emphasis role="strong">BasePTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a6ee023e6d345597d9bb71bd4603d12af"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">BasePTData::PTDataTy</link> <emphasis role="strong">PTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a7b2248c0361c50c56d485b79063d76c3"/>typedef BasePTData::KeySet <emphasis role="strong">KeySet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a538c90a9b9cb08ca3d52e19bc6d9862c"/>typedef Map&lt; Key, Data &gt; <emphasis role="strong">PtsMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a3d3ab4e8a26b86bf33650deed10b26bc"/>typedef Map&lt; Datum, KeySet &gt; <emphasis role="strong">RevPtsMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1afb11dce77935458e8b0c1451fed6ffb2"/>typedef PtsMap::iterator <emphasis role="strong">PtsMapIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a0173f2c011f6ee51ffd3eb1ad39aa717"/>typedef PtsMap::const_iterator <emphasis role="strong">PtsMapConstIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a70fa6e85fe5db1b82c67385f2a4d4c6c"/>typedef Data::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a1959d20d1bf780da7107fb527df68c9a"/><link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a1959d20d1bf780da7107fb527df68c9a">MutablePTData</link> (bool reversePT=true, <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">PTDataTy</link> ty=PTDataTy::MutBase)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a322653e012be4d7b48bcde7aab228119"/>virtual const PtsMap &amp; <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a322653e012be4d7b48bcde7aab228119">getPtsMap</link> () const</para>

<para>Return Points-to map. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a1defaebec7aef83dbac6066259f7fe24"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a1defaebec7aef83dbac6066259f7fe24">clear</link> () override</para>

<para>Clears all points-to sets as if nothing is stored. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a9221ae9cf4e9f992b5a60637d64668c6"/>virtual const Data &amp; <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a9221ae9cf4e9f992b5a60637d64668c6">getPts</link> (const Key &amp;var) override</para>

<para>Get points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1abd663d8229d8cb3bd011886777e6d51a"/>virtual const KeySet &amp; <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1abd663d8229d8cb3bd011886777e6d51a">getRevPts</link> (const Datum &amp;datum) override</para>

<para>Get reverse points-to set of datum. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1ad5b17668c526e8db4f77cb5f3f3be5f1"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1ad5b17668c526e8db4f77cb5f3f3be5f1">addPts</link> (const Key &amp;dstKey, const Datum &amp;element) override</para>

<para>Adds element to the points-to set associated with var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a55a05edae50e365c1da8dee3bec2ea9b"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a55a05edae50e365c1da8dee3bec2ea9b">unionPts</link> (const Key &amp;dstKey, const Key &amp;srcKey) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U pts(srcVar). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a6a9c045a3b68d543c5066388ad3a2f86"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a6a9c045a3b68d543c5066388ad3a2f86">unionPts</link> (const Key &amp;dstKey, const Data &amp;srcData) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U srcData. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1ad9a85e50883a1d93e5d456046bd0812d"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1ad9a85e50883a1d93e5d456046bd0812d">dumpPTData</link> () override</para>

<para>Dump stored keys and points-to sets. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1aaeb78d084ff0e9f1b418d47ad0e99cd3"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1aaeb78d084ff0e9f1b418d47ad0e99cd3">clearPts</link> (const Key &amp;var, const Datum &amp;element) override</para>

<para>Clears element from the points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a7ac688a755ea2d9fdcd4369cd6564887"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a7ac688a755ea2d9fdcd4369cd6564887">clearFullPts</link> (const Key &amp;var) override</para>

<para>Fully clears the points-to set of var. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_class_s_v_f_1_1_mutable_p_t_data_1a7ae5c1e151d61bda9b88403e3e7a7364">classof</link> (const <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt; Key, Datum, Data &gt; *)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a61a4b5dd0715f3ee0b002fdbbf5d6f1f"/>static bool <emphasis role="strong">classof</emphasis> (const <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; *ptd)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1ab4530d4a877e696474e6e2f1f86fb4dd"/>virtual void <emphasis role="strong">dumpPts</emphasis> (const PtsMap &amp;ptsSet, <link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;O=SVFUtil::outs()) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a912838d447bf49c60c205e213677a7f7"/>PtsMap <emphasis role="strong">ptsMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a86e291dcb4d7bf3d288f9954629bb3ad"/>RevPtsMap <emphasis role="strong">revPtsMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a1e40a996267413ac46fbfa3c69764255"/>class <emphasis role="strong">MutableDFPTData&lt; Key, Datum, Data &gt;</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Datum, typename Data&gt;
class SVF::MutablePTData&lt; Key, Datum, Data &gt;</title></simplesect>


<para><link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> implemented using points-to sets which are created once and updated continuously. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mutable_p_t_data_1a7ae5c1e151d61bda9b88403e3e7a7364"/>    <section>
    <title>classof()</title>
<indexterm><primary>classof</primary><secondary>SVF::MutablePTData&lt; Key, Datum, Data &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutablePTData&lt; Key, Datum, Data &gt;</primary><secondary>classof</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data &gt; </computeroutput><para><computeroutput>static bool <link linkend="_class_s_v_f_1_1_mutable_p_t_data">SVF::MutablePTData</link>&lt; Key, Datum, Data &gt;::classof (const <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link>&lt; Key, Datum, Data &gt; * )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Methods to support type inquiry through isa, cast, and dyn_cast: </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/MutablePointsToDS.h</section>
</section>
