<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_p_a_g_edge" xml:lang="en-US">
<title>SVF::PAGEdge Class Reference</title>
<indexterm><primary>SVF::PAGEdge</primary></indexterm>
<para>Inheritance diagram for SVF::PAGEdge:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_p_a_g_edge.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">PEDGEK</link> { 
<emphasis role="strong">Addr</emphasis>
, <emphasis role="strong">Copy</emphasis>
, <emphasis role="strong">Store</emphasis>
, <emphasis role="strong">Load</emphasis>
, 
<emphasis role="strong">Call</emphasis>
, <emphasis role="strong">Ret</emphasis>
, <emphasis role="strong">NormalGep</emphasis>
, <emphasis role="strong">VariantGep</emphasis>
, 
<emphasis role="strong">ThreadFork</emphasis>
, <emphasis role="strong">ThreadJoin</emphasis>
, <emphasis role="strong">Cmp</emphasis>
, <emphasis role="strong">BinaryOp</emphasis>
, 
<emphasis role="strong">UnaryOp</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a59eb693c90848382efa1cccb56fe82d3"/>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link>, <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> &gt;::GEdgeSetTy <emphasis role="strong">PAGEdgeSetTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a8c1ca8ef92ae08a3a0253c6f29819702"/>typedef Map&lt; EdgeID, PAGEdgeSetTy &gt; <emphasis role="strong">PAGEdgeToSetMapTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1ac42a778eef6bd1c088233da9a8552a84"/>typedef PAGEdgeToSetMapTy <emphasis role="strong">PAGKindToEdgeSetMapTy</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_p_a_g_edge_1ab686138c420a0b03cf8f1c1dff044318">PAGEdge</link> (<link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *s, <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *d, <link linkend="_class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614">GEdgeFlag</link> k)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1adb1dd2d06c0861095071d7f533935550"/><link linkend="_class_s_v_f_1_1_p_a_g_edge_1adb1dd2d06c0861095071d7f533935550">~PAGEdge</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a32df70a9a56dde960bef60b77db92da6"/>EdgeID <link linkend="_class_s_v_f_1_1_p_a_g_edge_1a32df70a9a56dde960bef60b77db92da6">getEdgeID</link> () const</para>

<para>Return Edge ID. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154">isPTAEdge</link> () const</para>

<para>Whether src and dst nodes are both of pointer type. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1af140a9966c06933da4be6f6a1354efbf"/>const Instruction * <link linkend="_class_s_v_f_1_1_p_a_g_edge_1af140a9966c06933da4be6f6a1354efbf">getInst</link> () const</para>

<para>Get/set methods for llvm instruction. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a7865f4f968f3d736b865d262e3e9a57f"/>void <emphasis role="strong">setValue</emphasis> (const Value *val)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1aa0adbe8548303302425bc6b276445f30"/>const Value * <emphasis role="strong">getValue</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a5fc7be3c1c2085a1575612e7d3e7679e"/>void <emphasis role="strong">setBB</emphasis> (const BasicBlock *bb)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1ab0938f40f245b07ee2f6ca587086b373"/>const BasicBlock * <emphasis role="strong">getBB</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a4cbbf44ec07d829f3c6d75dee2a30cee"/>void <emphasis role="strong">setICFGNode</emphasis> (<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a939676ad1ada4a91515b2182c40215e4"/><link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * <emphasis role="strong">getICFGNode</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a85c0939ab55d744d32f5fda2b54f07e3"/>virtual const std::string <emphasis role="strong">toString</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1abbb6e04f1c285b7c4e0b878f98572d21"/>static bool <link linkend="_class_s_v_f_1_1_p_a_g_edge_1abbb6e04f1c285b7c4e0b878f98572d21">classof</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *)</para>

<para>ClassOf. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a1fdd75799d9a6112d50be9bd40e94328"/>static bool <emphasis role="strong">classof</emphasis> (const <link linkend="_class_s_v_f_1_1_generic_edge">GenericPAGEdgeTy</link> *edge)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1af112ad6555179a592c97a13100f725e5"/>static <link linkend="_class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614">GEdgeFlag</link> <link linkend="_class_s_v_f_1_1_p_a_g_edge_1af112ad6555179a592c97a13100f725e5">makeEdgeFlagWithCallInst</link> (GEdgeKind k, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *cs)</para>

<para>Compute the unique edgeFlag value from edge kind and call site Instruction. </para>
</listitem>
            <listitem><para>static <link linkend="_class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614">GEdgeFlag</link> <link linkend="_class_s_v_f_1_1_p_a_g_edge_1af820acc617bcfec5d5f46627fce7dae8">makeEdgeFlagWithStoreInst</link> (GEdgeKind k, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> *store)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1ab93916c244480413ccc13438133656c8"/>static Size_t <link linkend="_class_s_v_f_1_1_p_a_g_edge_1ab93916c244480413ccc13438133656c8">totalEdgeNum</link></para>

<para>Total edge number. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a12c41e81e9695989dc8a13261f1d1ee9"/><link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; <link linkend="_class_s_v_f_1_1_p_a_g_edge_1a12c41e81e9695989dc8a13261f1d1ee9">operator&lt;&lt;</link> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;o, const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> &amp;edge)</para>

<para>Overloading operator &lt;&lt; for dumping <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6"/>    <section>
    <title>PEDGEK</title>
<indexterm><primary>PEDGEK</primary><secondary>SVF::PAGEdge</secondary></indexterm>
<indexterm><primary>SVF::PAGEdge</primary><secondary>PEDGEK</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_p_a_g_edge_1a79080505b4744aa8806b55215ac2b0f6">SVF::PAGEdge::PEDGEK</link></computeroutput></para>
<para>Thirteen kinds of <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edges Gep represents offset edge for field sensitivity ThreadFork/ThreadJoin is to model parameter passings between thread spawners and spawnees. </para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1ab686138c420a0b03cf8f1c1dff044318"/>    <section>
    <title>PAGEdge()</title>
<indexterm><primary>PAGEdge</primary><secondary>SVF::PAGEdge</secondary></indexterm>
<indexterm><primary>SVF::PAGEdge</primary><secondary>PAGEdge</secondary></indexterm>
<para><computeroutput>PAGEdge::PAGEdge (<link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * s, <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> * d, <link linkend="_class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614">GEdgeFlag</link> k)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> constructor </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154"/>    <section>
    <title>isPTAEdge()</title>
<indexterm><primary>isPTAEdge</primary><secondary>SVF::PAGEdge</secondary></indexterm>
<indexterm><primary>SVF::PAGEdge</primary><secondary>isPTAEdge</secondary></indexterm>
<para><computeroutput>bool PAGEdge::isPTAEdge ( ) const</computeroutput></para><para>

<para>Whether src and dst nodes are both of pointer type. </para>
</para>

<para>Whether src and dst nodes are both pointer type </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_a_g_edge_1af820acc617bcfec5d5f46627fce7dae8"/>    <section>
    <title>makeEdgeFlagWithStoreInst()</title>
<indexterm><primary>makeEdgeFlagWithStoreInst</primary><secondary>SVF::PAGEdge</secondary></indexterm>
<indexterm><primary>SVF::PAGEdge</primary><secondary>makeEdgeFlagWithStoreInst</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_s_v_f_1_1_generic_edge_1aab8892b73370c32b48621cd1d0cce614">GEdgeFlag</link> SVF::PAGEdge::makeEdgeFlagWithStoreInst (GEdgeKind k, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> * store)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Compute the unique edgeFlag value from edge kind and store Instruction. Two store instructions may share the same StorePAGEdge </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/PAGEdge.hlib/Graphs/PAG.cpp</section>
</section>
