<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_stmt" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtStmt</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_cxt_thread_stmt" prot="public" virt="non-virtual">SVF::CxtThreadStmt</derivedcompoundref>
    <includes refid="_cxt_stmt_8h" local="no">CxtStmt.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_stmt_1ae451ee5a61dbdd2367a04cee304bbcb1" prot="protected" static="no" mutable="no">
        <type>CallStrCxt</type>
        <definition>CallStrCxt SVF::CxtStmt::cxt</definition>
        <argsstring></argsstring>
        <name>cxt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="115" column="16" bodyfile="include/Util/CxtStmt.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_stmt_1a237b8738885e57d5a9b984221f611567" prot="protected" static="no" mutable="no">
        <type>const Instruction *</type>
        <definition>const Instruction* SVF::CxtStmt::inst</definition>
        <argsstring></argsstring>
        <name>inst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="116" column="23" bodyfile="include/Util/CxtStmt.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1ac11734a3e0db8415fdf55157b20b56a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtStmt::CxtStmt</definition>
        <argsstring>(const CallStrCxt &amp;c, const Instruction *f)</argsstring>
        <name>CxtStmt</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="45" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1ad976db5b794019bb68ccc9a35349fb41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtStmt::CxtStmt</definition>
        <argsstring>(const CxtStmt &amp;ctm)</argsstring>
        <name>CxtStmt</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>ctm</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="49" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a47425e8de39da25ffd9fe5a8e51584f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtStmt::~CxtStmt</definition>
        <argsstring>()</argsstring>
        <name>~CxtStmt</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="53" column="13" bodyfile="include/Util/CxtStmt.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallStrCxt &amp;</type>
        <definition>const CallStrCxt&amp; SVF::CxtStmt::getContext</definition>
        <argsstring>() const</argsstring>
        <name>getContext</name>
        <briefdescription>
<para>Return current context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="57" column="29" bodyfile="include/Util/CxtStmt.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Instruction *</type>
        <definition>const Instruction* SVF::CxtStmt::getStmt</definition>
        <argsstring>() const</argsstring>
        <name>getStmt</name>
        <briefdescription>
<para>Return current statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="62" column="30" bodyfile="include/Util/CxtStmt.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a8492998e88e895945845f5c666e86888" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtStmt::operator&lt;</definition>
        <argsstring>(const CxtStmt &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="68" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a4f431c7b6f3434eff34b4cea6853066b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
        <definition>CxtStmt&amp; SVF::CxtStmt::operator=</definition>
        <argsstring>(const CxtStmt &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="76" column="20" bodyfile="include/Util/CxtStmt.h" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1af7b0afe54ce69ec8f753d701818a7eca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtStmt::operator==</definition>
        <argsstring>(const CxtStmt &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="86" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a2a9aa82c6d4b95c6f1af0332666d8070" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtStmt::operator!=</definition>
        <argsstring>(const CxtStmt &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="91" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a85aa14770cec41503d674958f64c43ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CxtStmt::cxtToStr</definition>
        <argsstring>() const</argsstring>
        <name>cxtToStr</name>
        <briefdescription>
<para>Return context in string format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="96" column="24" bodyfile="include/Util/CxtStmt.h" bodystart="96" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_stmt_1a56e2767c327a383db09dca96edb19614" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtStmt::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="109" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="109" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context-sensitive thread statement &lt;c,s&gt; </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::CxtStmt</label>
        <link refid="class_s_v_f_1_1_cxt_stmt"/>
      </node>
      <node id="2">
        <label>SVF::CxtThreadStmt</label>
        <link refid="class_s_v_f_1_1_cxt_thread_stmt"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/Util/CxtStmt.h" line="41" column="1" bodyfile="include/Util/CxtStmt.h" bodystart="42" bodyend="117"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ae451ee5a61dbdd2367a04cee304bbcb1" prot="protected" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>cxt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ac11734a3e0db8415fdf55157b20b56a4" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>CxtStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ad976db5b794019bb68ccc9a35349fb41" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>CxtStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a85aa14770cec41503d674958f64c43ee" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>cxtToStr</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a56e2767c327a383db09dca96edb19614" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>getContext</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>getStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a237b8738885e57d5a9b984221f611567" prot="protected" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>inst</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a2a9aa82c6d4b95c6f1af0332666d8070" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a8492998e88e895945845f5c666e86888" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a4f431c7b6f3434eff34b4cea6853066b" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1af7b0afe54ce69ec8f753d701818a7eca" prot="public" virt="non-virtual"><scope>SVF::CxtStmt</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a47425e8de39da25ffd9fe5a8e51584f7" prot="public" virt="virtual"><scope>SVF::CxtStmt</scope><name>~CxtStmt</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
