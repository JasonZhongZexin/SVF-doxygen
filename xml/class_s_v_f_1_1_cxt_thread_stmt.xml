<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_thread_stmt" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtThreadStmt</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_cxt_stmt" prot="public" virt="non-virtual">SVF::CxtStmt</basecompoundref>
    <includes refid="_cxt_stmt_8h" local="no">CxtStmt.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_stmt_1ad96bacc3de1ce576ad397d19aa99a269" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::CxtThreadStmt::tid</definition>
        <argsstring></argsstring>
        <name>tid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="181" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1adeef75dbfd24665521931780c70aa5f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThreadStmt::CxtThreadStmt</definition>
        <argsstring>(NodeID t, const CallStrCxt &amp;c, const Instruction *f)</argsstring>
        <name>CxtThreadStmt</name>
        <param>
          <type>NodeID</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="127" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1ab5487e3f330bb18685281c5effcecfbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThreadStmt::CxtThreadStmt</definition>
        <argsstring>(const CxtThreadStmt &amp;ctm)</argsstring>
        <name>CxtThreadStmt</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>ctm</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="131" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1ac0e7ead3d4c1eff31437d980c7527361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtThreadStmt::~CxtThreadStmt</definition>
        <argsstring>()</argsstring>
        <name>~CxtThreadStmt</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="135" column="13" bodyfile="include/Util/CxtStmt.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1a3b8f641f2fb7ade7052cae1ee6463884" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::CxtThreadStmt::getTid</definition>
        <argsstring>() const</argsstring>
        <name>getTid</name>
        <briefdescription>
<para>Return current context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="139" column="19" bodyfile="include/Util/CxtStmt.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1affaa3bf793e1127a8333b6683ebb3fdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadStmt::operator&lt;</definition>
        <argsstring>(const CxtThreadStmt &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="145" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="145" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1a894849e24d01f80463a207e0c8f2548f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
        <definition>CxtThreadStmt&amp; SVF::CxtThreadStmt::operator=</definition>
        <argsstring>(const CxtThreadStmt &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="155" column="26" bodyfile="include/Util/CxtStmt.h" bodystart="155" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1af8f221ea17599dfb678922e1bad37f35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadStmt::operator==</definition>
        <argsstring>(const CxtThreadStmt &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="165" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1ab900fccf35773064aae491d552df3825" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadStmt::operator!=</definition>
        <argsstring>(const CxtThreadStmt &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="170" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_stmt_1a735d71af28b26d9576f679e53141e303" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtThreadStmt::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="175" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="175" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context-sensitive thread statement &lt;t,c,s&gt; </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::CxtStmt</label>
        <link refid="class_s_v_f_1_1_cxt_stmt"/>
      </node>
      <node id="1">
        <label>SVF::CxtThreadStmt</label>
        <link refid="class_s_v_f_1_1_cxt_thread_stmt"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::CxtStmt</label>
        <link refid="class_s_v_f_1_1_cxt_stmt"/>
      </node>
      <node id="1">
        <label>SVF::CxtThreadStmt</label>
        <link refid="class_s_v_f_1_1_cxt_thread_stmt"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Util/CxtStmt.h" line="123" column="1" bodyfile="include/Util/CxtStmt.h" bodystart="124" bodyend="182"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ae451ee5a61dbdd2367a04cee304bbcb1" prot="protected" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>cxt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ac11734a3e0db8415fdf55157b20b56a4" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>CxtStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1ad976db5b794019bb68ccc9a35349fb41" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>CxtStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1adeef75dbfd24665521931780c70aa5f9" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>CxtThreadStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1ab5487e3f330bb18685281c5effcecfbb" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>CxtThreadStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a85aa14770cec41503d674958f64c43ee" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>cxtToStr</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1a735d71af28b26d9576f679e53141e303" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>getContext</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>getStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1a3b8f641f2fb7ade7052cae1ee6463884" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>getTid</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a237b8738885e57d5a9b984221f611567" prot="protected" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>inst</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1ab900fccf35773064aae491d552df3825" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a2a9aa82c6d4b95c6f1af0332666d8070" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtStmt::"><scope>SVF::CxtThreadStmt</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1affaa3bf793e1127a8333b6683ebb3fdd" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a8492998e88e895945845f5c666e86888" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtStmt::"><scope>SVF::CxtThreadStmt</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1a894849e24d01f80463a207e0c8f2548f" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a4f431c7b6f3434eff34b4cea6853066b" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtStmt::"><scope>SVF::CxtThreadStmt</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1af8f221ea17599dfb678922e1bad37f35" prot="public" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1af7b0afe54ce69ec8f753d701818a7eca" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtStmt::"><scope>SVF::CxtThreadStmt</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1ad96bacc3de1ce576ad397d19aa99a269" prot="private" virt="non-virtual"><scope>SVF::CxtThreadStmt</scope><name>tid</name></member>
      <member refid="class_s_v_f_1_1_cxt_stmt_1a47425e8de39da25ffd9fe5a8e51584f7" prot="public" virt="virtual"><scope>SVF::CxtThreadStmt</scope><name>~CxtStmt</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_stmt_1ac0e7ead3d4c1eff31437d980c7527361" prot="public" virt="virtual"><scope>SVF::CxtThreadStmt</scope><name>~CxtThreadStmt</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
