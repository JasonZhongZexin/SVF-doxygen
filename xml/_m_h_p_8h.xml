<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_m_h_p_8h" kind="file" language="C++">
    <compoundname>MHP.h</compoundname>
    <includes refid="_t_c_t_8h" local="yes">MTA/TCT.h</includes>
    <includes local="no">set</includes>
    <includes local="no">vector</includes>
    <includedby refid="_lock_analysis_8h" local="yes">include/MTA/LockAnalysis.h</includedby>
    <includedby refid="_m_t_a_annotator_8h" local="yes">include/MTA/MTAAnnotator.h</includedby>
    <includedby refid="_m_t_a_result_validator_8h" local="yes">include/MTA/MTAResultValidator.h</includedby>
    <includedby refid="_p_c_g_8h" local="yes">include/MTA/PCG.h</includedby>
    <includedby refid="_f_s_m_p_t_a_8cpp" local="yes">lib/MTA/FSMPTA.cpp</includedby>
    <includedby refid="_m_h_p_8cpp" local="yes">lib/MTA/MHP.cpp</includedby>
    <includedby refid="_m_t_a_8cpp" local="yes">lib/MTA/MTA.cpp</includedby>
    <includedby refid="_m_t_a_stat_8cpp" local="yes">lib/MTA/MTAStat.cpp</includedby>
    <incdepgraph>
      <node id="60">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>list</label>
      </node>
      <node id="76">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>system_error</label>
      </node>
      <node id="73">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="52">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="85">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="70">
        <label>assert.h</label>
      </node>
      <node id="34">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="1">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="7">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="80">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="66">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="40">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="87">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cassert</label>
      </node>
      <node id="65">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="82">
        <label>string</label>
      </node>
      <node id="89">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="3">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="95">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="64">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="6">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="57">
        <label>limits.h</label>
      </node>
      <node id="39">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="53">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="29">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="61">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="79">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="23">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="69">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stack</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="22">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="26">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="55">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="77">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="72">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="62">
        <label>time.h</label>
      </node>
      <node id="90">
        <label>math.h</label>
      </node>
      <node id="100">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="84">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="50">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="71">
        <label>cstdlib</label>
      </node>
      <node id="56">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="49">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="17">
        <label>deque</label>
      </node>
      <node id="68">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="47">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="5">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="43">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="48">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="67">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="33">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="99">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="88">
        <label>stdio.h</label>
      </node>
      <node id="19">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="44">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="35">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="98">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="24">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="38">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="101">
        <label>Util/CxtStmt.h</label>
        <link refid="_cxt_stmt_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="2">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="4">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="6">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_m_h_p" prot="public">SVF::MHP</innerclass>
    <innerclass refid="class_s_v_f_1_1_fork_join_analysis" prot="public">SVF::ForkJoinAnalysis</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>MHP.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Jan<sp/>21,<sp/>2014</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui,<sp/>Peng<sp/>Di</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MHP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MHP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTA/TCT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ForkJoinAnalysis;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LockAnalysis;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_s_v_f_1_1_m_h_p" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>Function*&gt;<sp/>FunSet;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>Instruction*&gt;<sp/>InstSet;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>StmtSVFGNode*&gt;<sp/>SVFGNodeSet;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TCT::InstVec<sp/>InstVec;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList&lt;CxtThreadStmt&gt;</ref><sp/><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtThreadStmtWorkList</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;CxtThreadStmt&gt;<sp/>CxtThreadStmtSet;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CxtThreadStmt,NodeBS&gt;<sp/>ThreadStmtToThreadInterleav;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>Instruction*,CxtThreadStmtSet&gt;<sp/>InstToThreadStmtSetMap;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;CxtStmt&gt;<sp/>LockSpan;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>Function*,const<sp/>Function*&gt;<sp/>FuncPair;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;FuncPair,<sp/>bool&gt;<sp/>FuncPairToBool;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_m_h_p_1abf1f5a7c365dfb95b42015b7b2ad6fbe" kindref="member">MHP</ref>(<ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>*<sp/>t);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a6b7133f1767c3636ce253c5325be5053" kindref="member">~MHP</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a02457fa6e3c85c897ec3b3d8db18cc4b" kindref="member">analyze</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1adfd90a8d20d630bc3813f5ed71d3abf7" kindref="member">analyzeInterleaving</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_s_v_f_1_1_m_h_p_1a20e740d4b96ef086b6b5778acd38ca88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>*<sp/><ref refid="class_s_v_f_1_1_m_h_p_1a20e740d4b96ef086b6b5778acd38ca88" kindref="member">getThreadCallGraph</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="57"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcg;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_s_v_f_1_1_m_h_p_1a033936547612c54326a604f0ff1e39a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>*<sp/><ref refid="class_s_v_f_1_1_m_h_p_1a033936547612c54326a604f0ff1e39a6" kindref="member">getTCT</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="63"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a1cfec64cc65abcbc5ba32695850bfb48" kindref="member">isConnectedfromMain</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>///<sp/>Interface<sp/>to<sp/>query<sp/>whether<sp/>two<sp/>instructions<sp/>are<sp/>protected<sp/>by<sp/>common<sp/>locks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isProtectedByACommonLock(const<sp/>Instruction*<sp/>i1,<sp/>const<sp/>Instruction*<sp/>i2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isAllCxtInSameLockSpan(const<sp/>Instruction<sp/>*I1,<sp/>const<sp/>Instruction<sp/>*I2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>isOneCxtInSameLockSpan(const<sp/>Instruction<sp/>*I1,<sp/>const<sp/>Instruction<sp/>*I2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bool<sp/>hasOneCxtInLockSpan(const<sp/>Instruction<sp/>*I,<sp/>LockSpan<sp/>lspan);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bool<sp/>hasAllCxtInLockSpan(const<sp/>Instruction<sp/>*I,<sp/>LockSpan<sp/>lspan);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LockSpan<sp/>getSpanfromCxtLock(NodeID<sp/>l);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a9989f2d200cec6c387d63f452b8eac6b" kindref="member">mayHappenInParallel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i2);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mayHappenInParallelCache(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a2faaa02abec3b8f8fca73e178cbdcb41" kindref="member">mayHappenInParallelInst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i2);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>executedByTheSameThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>i2);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"></codeline>
<codeline lineno="89" refid="class_s_v_f_1_1_m_h_p_1a653460ed316804bea377eecdde412d36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS&amp;<sp/><ref refid="class_s_v_f_1_1_m_h_p_1a653460ed316804bea377eecdde412d36" kindref="member">getInterleavingThreads</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref>&amp;<sp/>cts)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>threadStmtToTheadInterLeav[cts];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasInterleavingThreads(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_thread_stmt" kindref="compound">CxtThreadStmt</ref>&amp;<sp/>cts)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>threadStmtToTheadInterLeav.find(cts)!=threadStmtToTheadInterLeav.end();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"></codeline>
<codeline lineno="100"></codeline>
<codeline lineno="101" refid="class_s_v_f_1_1_m_h_p_1a49504524c0d3e53c769cdbfd9ec1ccb0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmtSet&amp;<sp/><ref refid="class_s_v_f_1_1_m_h_p_1a49504524c0d3e53c769cdbfd9ec1ccb0" kindref="member">getThreadStmtSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="102"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstToThreadStmtSetMap::const_iterator<sp/>it<sp/>=<sp/>instToTSMap.find(inst);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=instToTSMap.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>thread<sp/>access<sp/>the<sp/>instruction?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasThreadStmtSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="108"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instToTSMap.find(inst)!=instToTSMap.end();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_h_p_1a22f7dc5043fed97f1b4b273b8b710415" kindref="member">printInterleaving</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateNonCandidateFunInterleaving();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleNonCandidateFun(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleFork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts,<sp/>NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts,<sp/>NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts,<sp/>NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleIntra(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cts);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>validateResults();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInterleavingThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>tgr,<sp/>NodeID<sp/>tid)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(threadStmtToTheadInterLeav[tgr].test_and_set(tid))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instToTSMap[tgr.getStmt()].insert(tgr);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(tgr);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInterleavingThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>tgr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>src)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/>threadStmtToTheadInterLeav[tgr]<sp/>|=<sp/>threadStmtToTheadInterLeav[src];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(changed)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instToTSMap[tgr.getStmt()].insert(tgr);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(tgr);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rmInterleavingThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>tgr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS&amp;<sp/>tids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>joinsite)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeBS<sp/>joinedTids;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(NodeBS::iterator<sp/>it<sp/>=<sp/>tids.begin(),<sp/>eit<sp/>=<sp/>tids.end();<sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isMustJoin(tgr.getTid(),joinsite))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joinedTids.set(*it);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(threadStmtToTheadInterLeav[tgr].intersectWithComplement(joinedTids))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(tgr);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"></codeline>
<codeline lineno="177"></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateAncestorThreads(NodeID<sp/>tid);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateSiblingThreads(NodeID<sp/>tid);</highlight></codeline>
<codeline lineno="181"></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRecurFullJoin(NodeID<sp/>parentTid,<sp/>NodeID<sp/>curTid);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMustJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeID<sp/>curTid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>joinsite);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultiForkedThread(NodeID<sp/>curTid)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d" kindref="member">getTCTNode</ref>(curTid)-&gt;isMultiforked();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getNextInsts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst,<sp/>InstVec&amp;<sp/>instVec)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf" kindref="member">getNextInsts</ref>(inst,instVec);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e" kindref="member">pushCxt</ref>(cxt,call,callee);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e" kindref="member">matchCxt</ref>(cxt,call,callee);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pushToCTSWorkList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtThreadStmt&amp;<sp/>cs)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cxtStmtList.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8" kindref="member">push</ref>(cs);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CxtThreadStmt<sp/>popFromCTSWorkList()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtThreadStmt<sp/>ctp<sp/>=<sp/>cxtStmtList.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1a8fa72918fce7e9c0b2dc34b683a797c6" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctp;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTDFork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcg-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf" kindref="member">isTDFork</ref>(call);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTDJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcg-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44" kindref="member">isTDJoin</ref>(call);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeBS<sp/>getDirAndIndJoinedTid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Loop*<sp/>isJoinInSymmetricLoop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHBPair(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadCallGraph*<sp/>tcg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>TCT*<sp/>tct;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ForkJoinAnalysis*<sp/>fja;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtThreadStmtWorkList<sp/>cxtStmtList;<sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadStmtToThreadInterleav<sp/>threadStmtToTheadInterLeav;<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>InstToThreadStmtSetMap<sp/>instToTSMap;<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>FuncPairToBool<sp/>nonCandidateFuncMHPRelMap;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="252" refid="class_s_v_f_1_1_m_h_p_1a26ae18993915d76b704232cded9811c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_m_h_p_1a26ae18993915d76b704232cded9811c2" kindref="member">numOfTotalQueries</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253" refid="class_s_v_f_1_1_m_h_p_1ab8bd382e0c70b0feb2a291ecc4043106" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_m_h_p_1ab8bd382e0c70b0feb2a291ecc4043106" kindref="member">numOfMHPQueries</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interleavingTime;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interleavingQueriesTime;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="class_s_v_f_1_1_fork_join_analysis" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_fork_join_analysis" kindref="compound">ForkJoinAnalysis</ref></highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="268" refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Empty,<sp/><sp/></highlight><highlight class="comment">//<sp/>initial(dummy)<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TDAlive,<sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>is<sp/>alive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TDDead,<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>thread<sp/>is<sp/>dead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TCT::InstVec<sp/>InstVec;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CxtStmt,ValDomain&gt;<sp/>CxtStmtToAliveFlagMap;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CxtStmt,NodeBS&gt;<sp/>CxtStmtToTIDMap;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;NodePair&gt;<sp/>ThreadPairSet;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CxtStmt,<sp/>const<sp/>Loop*&gt;<sp/>CxtStmtToLoopMap;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList&lt;CxtStmt&gt;</ref><sp/>CxtStmtWorkList;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>Instruction*,<sp/>PTASCEV&gt;<sp/>forkjoinToPTASCEVMap;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis" kindref="compound">ForkJoinAnalysis</ref>(<ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>*<sp/>t)<sp/>:<sp/>tct(t)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a731ece7e21bfa2b08ae16780b55f9f5f" kindref="member">collectSCEVInfo</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a731ece7e21bfa2b08ae16780b55f9f5f" kindref="member">collectSCEVInfo</ref>();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a16061e7c28e7a9177d9ab798c102b815" kindref="member">analyzeForkJoinPair</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="class_s_v_f_1_1_fork_join_analysis_1a819ef18524ee9104b920d1a465c61da1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodeBS&amp;<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a819ef18524ee9104b920d1a465c61da1" kindref="member">getDirectlyJoinedTid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cs)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>directJoinMap[cs];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeBS<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a34ec31a6859cd94b525bfa26e549d8c1" kindref="member">getDirAndIndJoinedTid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cs);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="class_s_v_f_1_1_fork_join_analysis_1a4e058b920c3648f943f85099690ff44f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Loop*<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a4e058b920c3648f943f85099690ff44f" kindref="member">isJoinInSymmetricLoop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="304"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtStmtToLoopMap::const_iterator<sp/>it<sp/>=<sp/>cxtJoinInLoop.find(cs);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it!=cxtJoinInLoop.end())</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311" refid="class_s_v_f_1_1_fork_join_analysis_1a86c68ce5fd8825b1593d92a5a5bad389" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a86c68ce5fd8825b1593d92a5a5bad389" kindref="member">isHBPair</ref>(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nonhp<sp/>=<sp/>HBPair.find(std::make_pair(tid1,tid2))!=HBPair.end();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hp<sp/>=<sp/>HPPair.find(std::make_pair(tid1,tid2))!=HPPair.end();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nonhp<sp/>&amp;&amp;<sp/>!hp)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320" refid="class_s_v_f_1_1_fork_join_analysis_1ab55532eefbcef639ced957ad82fbd340" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1ab55532eefbcef639ced957ad82fbd340" kindref="member">isFullJoin</ref>(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full<sp/>=<sp/>fullJoin.find(std::make_pair(tid1,tid2))!=fullJoin.end();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>partial<sp/>=<sp/>partialJoin.find(std::make_pair(tid1,tid2))!=partialJoin.end();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(full<sp/>&amp;&amp;<sp/>!partial)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="class_s_v_f_1_1_fork_join_analysis_1acc178bd423dbb21bd46a9fae9ed0351c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1acc178bd423dbb21bd46a9fae9ed0351c" kindref="member">getExitInstOfParentRoutineFun</ref>(NodeID<sp/>tid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="331"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>parentTid<sp/>=<sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a516578af1f8666ff672e6611e61d7152" kindref="member">getParentThread</ref>(tid);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>&amp;<sp/>parentct<sp/>=<sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d" kindref="member">getTCTNode</ref>(parentTid)-&gt;<ref refid="class_s_v_f_1_1_t_c_t_node_1a21591b19f6a9267151c31178f9543ee6" kindref="member">getCxtThread</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>parentRoutine<sp/>=<sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a7ccacac1c673b38215b90e4eb480581f" kindref="member">getStartRoutineOfCxtThread</ref>(parentct);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(SVFUtil::getFunExitBB(parentRoutine)-&gt;back());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="class_s_v_f_1_1_fork_join_analysis_1a3449439792a54c847c67b3041094db49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Loop*<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a3449439792a54c847c67b3041094db49" kindref="member">getJoinLoop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a52a707bf6f278e810f440c279f5261dc" kindref="member">getJoinLoop</ref>(inst);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344" refid="class_s_v_f_1_1_fork_join_analysis_1ad3db3e7a2ebe7646675aab16103691e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ScalarEvolution*<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1ad3db3e7a2ebe7646675aab16103691e7" kindref="member">getSE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1ac66b3a193240c17c3f06437442b2d8bf" kindref="member">getSE</ref>(inst);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleFork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts,NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts,NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts,NodeID<sp/>rootTid);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleRet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleIntra(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>&amp;<sp/>cts);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSameSCEV(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>forkSite,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>joinSite);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sameLoopTripCount(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>forkSite,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>joinSite);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAliasedForkJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>forkSite,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>joinSite)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a5b087b42340d1a1b2ee37339637709d3" kindref="member">getPTA</ref>()-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1" kindref="member">alias</ref>(getForkedThread(forkSite),<sp/>getJoinedThread(joinSite))<sp/>&amp;&amp;<sp/>isSameSCEV(forkSite,joinSite);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref><sp/>getMarkedFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>cs)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtStmtToAliveFlagMap::const_iterator<sp/>it<sp/>=<sp/>cxtStmtToAliveFlagMap.find(cs);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it==cxtStmtToAliveFlagMap.end())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtToAliveFlagMap[cs]<sp/>=<sp/>Empty;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Empty;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markCxtStmtFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>tgr,<sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref><sp/>flag)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref><sp/>flag_tgr<sp/>=<sp/>getMarkedFlag(tgr);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtToAliveFlagMap[tgr]<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_tgr!=getMarkedFlag(tgr))</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(tgr);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markCxtStmtFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>tgr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>src)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref><sp/>flag_tgr<sp/>=<sp/>getMarkedFlag(tgr);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref><sp/>flag_src<sp/>=<sp/>getMarkedFlag(src);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_tgr<sp/>==<sp/>Empty)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtToAliveFlagMap[tgr]<sp/>=<sp/>flag_src;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_tgr<sp/>==<sp/>TDDead)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_src==TDAlive)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtToAliveFlagMap[tgr]<sp/>=<sp/>TDAlive;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_tgr!=getMarkedFlag(tgr))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushToCTSWorkList(tgr);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearFlagMap()</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtToAliveFlagMap.clear();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtStmtList.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1a29d9fec1ea7b8e5456342522eea403ad" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"></codeline>
<codeline lineno="430"></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pushToCTSWorkList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>cs)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cxtStmtList.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1ad4c6a48b60c870d63049fe7272cc7eb8" kindref="member">push</ref>(cs);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CxtStmt<sp/>popFromCTSWorkList()</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CxtStmt<sp/>ctp<sp/>=<sp/>cxtStmtList.<ref refid="class_s_v_f_1_1_f_i_f_o_work_list_1a8fa72918fce7e9c0b2dc34b683a797c6" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctp;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getNextInsts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst,<sp/>InstVec&amp;<sp/>instSet)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf" kindref="member">getNextInsts</ref>(inst,instSet);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e" kindref="member">pushCxt</ref>(cxt,call,callee);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchCxt(CallStrCxt&amp;<sp/>cxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>callee)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e" kindref="member">matchCxt</ref>(cxt,call,callee);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTDFork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getTCG()-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a9da276dca5092d18f4f22d32e5ab6cdf" kindref="member">isTDFork</ref>(call);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTDJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getTCG()-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a8cc5f9ff6039392ce1471cd830973c44" kindref="member">isTDJoin</ref>(call);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getForkedThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getTCG()-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1a11dc55f35c18bd1f46d00c21c7dc695e" kindref="member">getForkedThread</ref>(call);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>getJoinedThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>call)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getTCG()-&gt;<ref refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" kindref="member">getThreadAPI</ref>()-&gt;<ref refid="class_s_v_f_1_1_thread_a_p_i_1ac9f3cc080275ce7d76dd2f56fc7c6434" kindref="member">getJoinedThread</ref>(call);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ThreadCallGraph*<sp/>getTCG()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="480"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tct-&gt;<ref refid="class_s_v_f_1_1_t_c_t_1a1602d02773578bca73dcbd29b95c67d0" kindref="member">getThreadCallGraph</ref>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDirectlyJoinTID(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>cs,<sp/>NodeID<sp/>tid)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directJoinMap[cs].set(tid);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addToHPPair(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPPair.insert(std::make_pair(tid1,tid2));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPPair.insert(std::make_pair(tid2,tid1));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addToHBPair(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HBPair.insert(std::make_pair(tid1,tid2));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"></codeline>
<codeline lineno="504"></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addToFullJoin(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullJoin.insert(std::make_pair(tid1,tid2));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addToPartial(NodeID<sp/>tid1,<sp/>NodeID<sp/>tid2)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialJoin.insert(std::make_pair(tid1,tid2));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSymmetricLoopJoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CxtStmt&amp;<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Loop*<sp/>lp)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxtJoinInLoop[cs]<sp/>=<sp/>lp;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>TCT*<sp/>tct;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtStmtToAliveFlagMap<sp/>cxtStmtToAliveFlagMap;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtStmtWorkList<sp/>cxtStmtList;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtStmtToTIDMap<sp/>directJoinMap;<sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtStmtToTIDMap<sp/>dirAndIndJoinMap;<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>CxtStmtToLoopMap<sp/>cxtJoinInLoop;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadPairSet<sp/>HBPair;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadPairSet<sp/>HPPair;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadPairSet<sp/>fullJoin;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadPairSet<sp/>partialJoin;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>PTACFInfoBuilder<sp/><sp/>ptaCFInfo;<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>forkjoinToPTASCEVMap<sp/>fkjnToPTASCEVMap;<sp/></highlight><highlight class="comment">//&lt;<sp/>map<sp/>a<sp/>pointer<sp/>at<sp/>a<sp/>fork/join<sp/>site<sp/>to<sp/>its<sp/>corresponing<sp/>scev<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">};</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MHP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/MTA/MHP.h"/>
  </compounddef>
</doxygen>
