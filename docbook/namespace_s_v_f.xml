<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_s_v_f" xml:lang="en-US">
<title>SVF Namespace Reference</title>
<indexterm><primary>SVF</primary></indexterm>
<para>

<para>for isBitcode </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_context_d_d_a">ContextDDA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_d_a_client">DDAClient</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_funptr_d_d_a_client">FunptrDDAClient</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_alias_d_d_a_client">AliasDDAClient</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_d_a_pass">DDAPass</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_d_a_stat">DDAStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_d_a_v_f_solver">DDAVFSolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_flow_d_d_a">FlowDDA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_constraint_graph">ConstraintGraph</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_addr_c_g_edge">AddrCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_copy_c_g_edge">CopyCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_store_c_g_edge">StoreCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_load_c_g_edge">LoadCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_gep_c_g_edge">GepCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_normal_gep_c_g_edge">NormalGepCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_variant_gep_c_g_edge">VariantGepCGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_external_p_a_g">ExternalPAG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_c_f_g_edge">IntraCFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_c_f_g_edge">CallCFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_c_f_g_edge">RetCFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_global_block_node">GlobalBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_block_node">IntraBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_inter_block_node">InterBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_fun_entry_block_node">FunEntryBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_fun_exit_block_node">FunExitBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_block_node">RetBlockNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g_stat">ICFGStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_offline_cons_g">OfflineConsG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_addr_p_e">AddrPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_copy_p_e">CopyPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cmp_p_e">CmpPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_binary_o_p_p_e">BinaryOPPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_unary_o_p_p_e">UnaryOPPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_store_p_e">StorePE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_load_p_e">LoadPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_gep_p_e">GepPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_normal_gep_p_e">NormalGepPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_variant_gep_p_e">VariantGepPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_p_e">CallPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_p_e">RetPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_t_d_fork_p_e">TDForkPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_t_d_join_p_e">TDJoinPE</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_val_p_n">ValPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_obj_p_n">ObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_gep_val_p_n">GepValPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_gep_obj_p_n">GepObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_f_i_obj_p_n">FIObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_p_n">RetPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_var_arg_p_n">VarArgPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_dummy_val_p_n">DummyValPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_dummy_obj_p_n">DummyObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_clone_dummy_obj_p_n">CloneDummyObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_clone_gep_obj_p_n">CloneGepObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_clone_f_i_obj_p_n">CloneFIObjPN</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_edge">PTACallGraphEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_indirect_s_v_f_g_edge">IndirectSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_ind_s_v_f_g_edge">IntraIndSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_ind_s_v_f_g_edge">CallIndSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_ind_s_v_f_g_edge">RetIndSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_m_h_p_ind_s_v_f_g_edge">ThreadMHPIndSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_r_s_v_f_g_node">MRSVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_formal_i_n_s_v_f_g_node">FormalINSVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node">FormalOUTSVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_actual_i_n_s_v_f_g_node">ActualINSVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node">ActualOUTSVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i_s_v_f_g_node">MSSAPHISVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_m_s_s_a_p_h_i_s_v_f_g_node">IntraMSSAPHISVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_inter_m_s_s_a_p_h_i_s_v_f_g_node">InterMSSAPHISVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t">SVFGOPT</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mem_s_s_a_stat">MemSSAStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_g_stat">SVFGStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_fork_edge">ThreadForkEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_join_edge">ThreadJoinEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_hare_par_for_edge">HareParForEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_call_graph">ThreadCallGraph</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_v_f_g">VFG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_direct_s_v_f_g_edge">DirectSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_dir_s_v_f_g_edge">IntraDirSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_dir_s_v_f_g_edge">CallDirSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_dir_s_v_f_g_edge">RetDirSVFGEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_load_v_f_g_node">LoadVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_copy_v_f_g_node">CopyVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cmp_v_f_g_node">CmpVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_binary_o_p_v_f_g_node">BinaryOPVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_unary_o_p_v_f_g_node">UnaryOPVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_gep_v_f_g_node">GepVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">PHIVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_p_h_i_v_f_g_node">IntraPHIVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_argument_v_f_g_node">ArgumentVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">ActualParmVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">FormalParmVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">ActualRetVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_inter_p_h_i_v_f_g_node">InterPHIVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_null_ptr_v_f_g_node">NullPtrVFGNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cond_points_to_set">CondPointsToSet</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_field_info">FieldInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_st_info">StInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_obj_type_info">ObjTypeInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mem_obj">MemObj</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutableDFPTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link></para>

<para><link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> implemented using points-to sets which are created once and updated continuously. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mutable_diff_p_t_data">MutableDiffPTData</link></para>

<para><link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link> implemented with points-to sets which are updated continuously. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data">IncMutableDFPTData</link></para>

<para>Incremental version of the mutable data-flow points-to data structure. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">MutableVersionedPTData</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_a_g_builder_from_file">PAGBuilderFromFile</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl">CondPTAImpl</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_stat">PTAStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_type">PTAType</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_type_set">TypeSet</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_type_system">TypeSystem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_distinct_m_r_g">DistinctMRG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_intra_disjoint_m_r_g">IntraDisjointMRG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_inter_disjoint_m_r_g">InterDisjointMRG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mem_region">MemRegion</link></para>

<para>Memory Region class. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_r_generator">MRGenerator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mem_s_s_a">MemSSA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_r_ver">MRVer</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_s_s_a_m_u">MSSAMU</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_load_m_u">LoadMU</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_m_u">CallMU</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ret_m_u">RetMU</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_s_s_a_d_e_f">MSSADEF</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">MSSACHI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_store_c_h_i">StoreCHI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_c_h_i">CallCHI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_entry_c_h_i">EntryCHI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">MSSAPHI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_mem_s_s_a_d_f">MemSSADF</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_g_builder">SVFGBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_t_a_s_v_f_g_builder">MTASVFGBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_f_s_m_p_t_a">FSMPTA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_lock_analysis">LockAnalysis</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_h_p">MHP</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_fork_join_analysis">ForkJoinAnalysis</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_t_a">MTA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_t_a_annotator">MTAAnnotator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_t_a_stat">MTAStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_c_g">PCG</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_double_free_checker">DoubleFreeChecker</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_file_checker">FileChecker</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_leak_checker">LeakChecker</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_saber_annotator">SaberAnnotator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_saber_checker_a_p_i">SaberCheckerAPI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_saber_s_v_f_g_builder">SaberSVFGBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_src_snk_d_d_a">SrcSnkDDA</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_break_constant_g_e_ps">BreakConstantGEPs</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_merge_function_rets">MergeFunctionRets</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_call_graph_builder">CallGraphBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_call_graph_builder">ThreadCallGraphBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_c_h_edge">CHEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_c_h_node">CHNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_c_h_graph">CHGraph</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_common_c_h_graph">CommonCHGraph</link></para>

<para>Common base for class hierarchy graph. Only implements what <link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> needs. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_t_a_c_f_info_builder">PTACFInfoBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_iterated_dominance_frontier">IteratedDominanceFrontier</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_c_h_edge">DCHEdge</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_c_h_node">DCHNode</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_c_h_graph">DCHGraph</link></para>

<para>Dwarf based CHG. </para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g_printer">ICFGPrinter</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_i_c_f_g_builder">ICFGBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_l_l_v_m_module_set">LLVMModuleSet</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_p_a_g_builder">PAGBuilder</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_symbol_table_info">SymbolTableInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_loc_sym_table_info">LocSymTableInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_loc_obj_type_info">LocObjTypeInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_annotator">Annotator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_global">SVFGlobal</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_basic_block">SVFBasicBlock</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_instruction">SVFInstruction</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_c_f_l_solver">CFLSolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_bdd_cond_manager">BddCondManager</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_thread_stmt">CxtThreadStmt</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_stmt_d_p_item">StmtDPItem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_context_cond">ContextCond</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_stmt_d_p_item">CxtStmtDPItem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_path_stmt_d_p_item">PathStmtDPItem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_cxt_d_p_item">CxtDPItem</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_ext_a_p_i">ExtAPI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_node_i_d_allocator">NodeIDAllocator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_value">SVFValue</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_thread_a_p_i">ThreadAPI</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_type_based_heap_cloning">TypeBasedHeapCloning</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_list">List</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_f_i_l_o_work_list">FILOWorkList</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_base">AndersenBase</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen">Andersen</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_wave_diff">AndersenWaveDiff</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type">AndersenWaveDiffWithType</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_l_c_d">AndersenLCD</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_h_c_d">AndersenHCD</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_h_l_c_d">AndersenHLCD</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_s_c_d">AndersenSCD</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_s_f_r">AndersenSFR</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_c_s_c">CSC</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_flow_sensitive">FlowSensitive</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c">FlowSensitiveTBHC</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_steensgaard">Steensgaard</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_type_analysis">TypeAnalysis</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_versioned_flow_sensitive">VersionedFlowSensitive</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_w_p_a_f_s_solver">WPAFSSolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_w_p_a_s_c_c_solver">WPASCCSolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_w_p_a_minimum_solver">WPAMinimumSolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_w_p_a_pass">WPAPass</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_w_p_a_solver">WPASolver</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_andersen_stat">AndersenStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_flow_sensitive_stat">FlowSensitiveStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_versioned_flow_sensitive_stat">VersionedFlowSensitiveStat</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_lock_validator">LockValidator</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_s_v_f_1_1_m_h_p_validator">MHPValidator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa612d67dfa9b0c2999eeef980ca6c893"/>typedef <link linkend="_class_s_v_f_1_1_cxt_stmt_d_p_item">CxtStmtDPItem</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> &gt; <emphasis role="strong">CxtLocDPItem</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa50ee8563f99ba1eb897301f55e9d855"/>typedef <link linkend="_class_s_v_f_1_1_stmt_d_p_item">StmtDPItem</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> &gt; <emphasis role="strong">LocDPItem</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> &gt; <link linkend="_namespace_s_v_f_1a1d2b00b4b0ab475899488fc89b2bfe66">GenericConsEdgeTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link>, <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> &gt; <link linkend="_namespace_s_v_f_1a825a8805e4a16072031a18b8d553c5a2">GenericConsNodeTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt; <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> &gt; <link linkend="_namespace_s_v_f_1afe5e1b0e028b4cf0db9f2a9c758b03ed">GenericICFGTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> &gt; <link linkend="_namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404">GenericICFGEdgeTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link> &gt; <link linkend="_namespace_s_v_f_1afc2824871ad4eb9b871c35ae28494cd3">GenericICFGNodeTy</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7ad1b1990da305fb9a522857cef7d4b8"/>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> &gt; <emphasis role="strong">GenericPAGEdgeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a309503b57249377a51c8b3b2e633086d"/>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link>, <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> &gt; <emphasis role="strong">GenericPAGNodeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1acd909bf6784bb6e2178aa0f5d27da0ca"/>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link> &gt; <emphasis role="strong">GenericCallGraphEdgeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a673ed8bf673a4c426a9d91aa8987e31c"/>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link>, <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_edge">PTACallGraphEdge</link> &gt; <emphasis role="strong">GenericCallGraphNodeTy</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link>, <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_edge">PTACallGraphEdge</link> &gt; <link linkend="_namespace_s_v_f_1ab6fe492db79077a60254f8a03cfce180">GenericCallGraphTy</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa4745cf70b26e17d59752356f0b19dd9"/>typedef <link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> <emphasis role="strong">SVFGEdge</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5dfa3fa5129bacdc0be0c051ccf386df"/>typedef <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> <emphasis role="strong">SVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a11c50c2f81327753b3ff3ffdbe356812"/>typedef <link linkend="_class_s_v_f_1_1_actual_parm_v_f_g_node">ActualParmVFGNode</link> <emphasis role="strong">ActualParmSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a77b8b8ca831e1eba3e47f2ca29667f67"/>typedef <link linkend="_class_s_v_f_1_1_actual_ret_v_f_g_node">ActualRetVFGNode</link> <emphasis role="strong">ActualRetSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad466edced10faeafd48e96daf193b8a9"/>typedef <link linkend="_class_s_v_f_1_1_formal_parm_v_f_g_node">FormalParmVFGNode</link> <emphasis role="strong">FormalParmSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ae5987da3ffd5681e8ec4ef14ba54588e"/>typedef <link linkend="_class_s_v_f_1_1_formal_ret_v_f_g_node">FormalRetVFGNode</link> <emphasis role="strong">FormalRetSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aeccd0bd024319173c1cda5ff1a79c5ae"/>typedef <link linkend="_class_s_v_f_1_1_null_ptr_v_f_g_node">NullPtrVFGNode</link> <emphasis role="strong">NullPtrSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a26bd4f89dc154b9c6d34b6a517777934"/>typedef <link linkend="_class_s_v_f_1_1_stmt_v_f_g_node">StmtVFGNode</link> <emphasis role="strong">StmtSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a959453cbb8ff2d852b526fd1ff74ce49"/>typedef <link linkend="_class_s_v_f_1_1_addr_v_f_g_node">AddrVFGNode</link> <emphasis role="strong">AddrSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab98f7c9e6311e649cdfd5d2f3f8e59be"/>typedef <link linkend="_class_s_v_f_1_1_copy_v_f_g_node">CopyVFGNode</link> <emphasis role="strong">CopySVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a54c5725186e66ead6faf53c10a288714"/>typedef <link linkend="_class_s_v_f_1_1_store_v_f_g_node">StoreVFGNode</link> <emphasis role="strong">StoreSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3ce49be3724e1e8423ccdfa726fbf6c8"/>typedef <link linkend="_class_s_v_f_1_1_load_v_f_g_node">LoadVFGNode</link> <emphasis role="strong">LoadSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a65a3be463427d1112a8b87f072f3d22f"/>typedef <link linkend="_class_s_v_f_1_1_gep_v_f_g_node">GepVFGNode</link> <emphasis role="strong">GepSVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a71d4e214e049f02bf26537cba6328673"/>typedef <link linkend="_class_s_v_f_1_1_p_h_i_v_f_g_node">PHIVFGNode</link> <emphasis role="strong">PHISVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad772e1586e369943f37c22641e93e941"/>typedef <link linkend="_class_s_v_f_1_1_intra_p_h_i_v_f_g_node">IntraPHIVFGNode</link> <emphasis role="strong">IntraPHISVFGNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0f7ff1d9a479df87241b45bb9c81d3ca"/>typedef <link linkend="_class_s_v_f_1_1_inter_p_h_i_v_f_g_node">InterPHIVFGNode</link> <emphasis role="strong">InterPHISVFGNode</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>, <link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> &gt; <link linkend="_namespace_s_v_f_1ab4f1d8a6715e791c94970e6f87b18f8f">GenericVFGTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> &gt; <link linkend="_namespace_s_v_f_1a30dcaf83718f2652012f98b192dcf437">GenericVFGEdgeTy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>, <link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link> &gt; <link linkend="_namespace_s_v_f_1a3b4bbc4b72e982a79c23fd3ec26410b6">GenericVFGNodeTy</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1ed5cfc8a00b2d3b90e74debabaa62a5"/>typedef NodeID <emphasis role="strong">MRID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0039280e908258b8e73779de51e9f63b"/>typedef NodeID <emphasis role="strong">MRVERID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a39df0130e37e97db2ff7620bbb2a72f5"/>typedef NodeID <emphasis role="strong">MRVERSION</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a07db688cc13384ddfddb1372612db205"/>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> &gt; <emphasis role="strong">GenericTCTEdgeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a115fc72b31d2ae72e60ebd9af1351e83"/>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link>, <link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> &gt; <emphasis role="strong">GenericTCTNodeTy</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt; <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link>, <link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> &gt; <link linkend="_namespace_s_v_f_1a8e1221553658c8b506c348534135ceaa">GenericThreadCreateTreeTy</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a6144ebf5a46ac5e8899044864caf92ba"/>typedef <link linkend="_class_s_v_f_1_1_c_f_l_solver">CFLSolver</link>&lt; <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> *, <link linkend="_class_s_v_f_1_1_cxt_d_p_item">CxtDPItem</link> &gt; <emphasis role="strong">CFLSrcSnkSolver</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7cb629496a70d2dd22634405652e573a"/>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt; <link linkend="_class_s_v_f_1_1_c_h_node">CHNode</link> &gt; <emphasis role="strong">GenericCHEdgeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a838ed37e84836101711c25a760eec57d"/>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt; <link linkend="_class_s_v_f_1_1_c_h_node">CHNode</link>, <link linkend="_class_s_v_f_1_1_c_h_edge">CHEdge</link> &gt; <emphasis role="strong">GenericCHNodeTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa8bd37e4ec2e98c805a14adbf590b9dd"/>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt; <link linkend="_class_s_v_f_1_1_c_h_node">CHNode</link>, <link linkend="_class_s_v_f_1_1_c_h_edge">CHEdge</link> &gt; <link linkend="_namespace_s_v_f_1aa8bd37e4ec2e98c805a14adbf590b9dd">GenericCHGraphTy</link></para>

<para>class hierarchy graph </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a53511f619c06836ee85acf12153810e2"/>typedef Set&lt; const GlobalValue * &gt; <emphasis role="strong">VTableSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad2b487757f1e1a1d81073120fc1d49c7"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * &gt; <emphasis role="strong">VFunSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a86863d104a3930b3a806935d92ddbf30"/>typedef llvm::SMDiagnostic <link linkend="_namespace_s_v_f_1a86863d104a3930b3a806935d92ddbf30">SMDiagnostic</link></para>

<para>LLVM Basic classes. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1affba423b674a0aba723e33101826e297"/>typedef llvm::LLVMContext <emphasis role="strong">LLVMContext</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1d008c0666c145622b81d427be64c52d"/>typedef llvm::Type <emphasis role="strong">Type</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5faee14fa1dd41447bc73ac365fe33c1"/>typedef llvm::Function <emphasis role="strong">Function</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a23bf614858f168b6ad76e0233cec9965"/>typedef llvm::BasicBlock <emphasis role="strong">BasicBlock</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a90b263fd2f541eca78135078114cabda"/>typedef llvm::Value <emphasis role="strong">Value</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7875172ff434b2210eea7cecfbbd959e"/>typedef llvm::Instruction <emphasis role="strong">Instruction</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a150305e9f9de6ab51677e0971c1110c0"/>typedef llvm::CallSite <emphasis role="strong">CallSite</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1af157dc77830b6cc804338df7430cbbb3"/>typedef llvm::GlobalObject <emphasis role="strong">GlobalObject</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a67f3f86344f028cacfbeb08caaf7bb0f"/>typedef llvm::GlobalValue <emphasis role="strong">GlobalValue</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a09f5fa3bc44bf53612a085e3a611cc4e"/>typedef llvm::GlobalVariable <emphasis role="strong">GlobalVariable</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa7a770b5dd5cd0e37d06a1088f252906"/>typedef llvm::Module <emphasis role="strong">Module</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a6c559fdb6e0c4e84c4e5b05a5cf90052"/>typedef llvm::CallGraph <emphasis role="strong">LLVMCallGraph</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1afc1b50355821e7299df03b026e36f1df"/>typedef llvm::User <emphasis role="strong">User</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a334998718813a19a7697daf4ba282faf"/>typedef llvm::Use <emphasis role="strong">Use</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1abf85e29310b2e4df8925d00a5c081314"/>typedef llvm::Loop <emphasis role="strong">Loop</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a77e088bfe47c0b0ddcbbe0693dec6fe5"/>typedef llvm::LoopInfo <emphasis role="strong">LoopInfo</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ae5853f7df76735b195ff93949ca4256b"/>typedef llvm::UnifyFunctionExitNodes <emphasis role="strong">UnifyFunctionExitNodes</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac226d84f86637126d17f6814632c8a90"/>typedef llvm::ModulePass <emphasis role="strong">ModulePass</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a73f84dcc6371f1503f6e7cec3387f9a2"/>typedef llvm::AnalysisUsage <emphasis role="strong">AnalysisUsage</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71"/>typedef llvm::raw_ostream <link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link></para>

<para>LLVM outputs. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a726981481ac082dcda3e4921416b65a0"/>typedef llvm::raw_string_ostream <emphasis role="strong">raw_string_ostream</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1c7c7ac12791c0ae386283c0a4f127ba"/>typedef llvm::raw_fd_ostream <emphasis role="strong">raw_fd_ostream</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a88fd7387fcf16caf70abe265cdcf90b9"/>typedef llvm::StringRef <emphasis role="strong">StringRef</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1acde6a1d496f1b655088ccbe023820277"/>typedef llvm::ToolOutputFile <emphasis role="strong">ToolOutputFile</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a2bf58575ac7d068e0f1a4cf953b9e6cb"/>typedef llvm::StructType <link linkend="_namespace_s_v_f_1a2bf58575ac7d068e0f1a4cf953b9e6cb">StructType</link></para>

<para>LLVM types. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a146d286041987860388da3d8bc85cee3"/>typedef llvm::ArrayType <emphasis role="strong">ArrayType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa962cc1d782cc46553251e96b64a754b"/>typedef llvm::PointerType <emphasis role="strong">PointerType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a6ec0236303089a01fd9da36a8bb84e0a"/>typedef llvm::FunctionType <emphasis role="strong">FunctionType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1eaed46fa67cf1a51e438c5f8f523418"/>typedef llvm::VectorType <emphasis role="strong">VectorType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a773900ea3c75022657aac1abf59fa51b"/>typedef llvm::MetadataAsValue <emphasis role="strong">MetadataAsValue</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a956458a8554bf734db1194f320fd4b4c"/>typedef llvm::BlockAddress <emphasis role="strong">BlockAddress</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a03db82b8a7914367024723dba4d6ca3c"/>typedef llvm::DataLayout <link linkend="_namespace_s_v_f_1a03db82b8a7914367024723dba4d6ca3c">DataLayout</link></para>

<para>LLVM data layout. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a52c8654c221bb53a59f70ea3cb1e5c45"/>typedef llvm::StructLayout <emphasis role="strong">StructLayout</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad09d8882474ef59b50d1c6a6d3ba0b59"/>typedef llvm::SmallVector&lt; BasicBlock *, 8 &gt; <emphasis role="strong">SmallBBVector</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a2b28f48dde0a9a91d251e654ce1f9477"/>typedef llvm::ConstantStruct <emphasis role="strong">ConstantStruct</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a339bbddac9d9dffd5ef602200d34c403"/>typedef llvm::MemoryLocation <emphasis role="strong">MemoryLocation</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a58cdfbc4160cae08745b67844ac29801"/>typedef llvm::Argument <link linkend="_namespace_s_v_f_1a58cdfbc4160cae08745b67844ac29801">Argument</link></para>

<para>LLVM Aliases and constants. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7e230c0cba2e3a7c2e5a5f2ee7d88af9"/>typedef llvm::Constant <emphasis role="strong">Constant</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7332f8059ea95472dcc231de884a5768"/>typedef llvm::ConstantData <emphasis role="strong">ConstantData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a911dbaab38cb42deb9c195c7f687853d"/>typedef llvm::ConstantExpr <emphasis role="strong">ConstantExpr</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7cbe1c6567039e72958fd70e423d3597"/>typedef llvm::ConstantAggregate <emphasis role="strong">ConstantAggregate</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a90f6c91ba7a3c31c84b5c25277d83fca"/>typedef llvm::ConstantPointerNull <emphasis role="strong">ConstantPointerNull</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5ae718cba37d8e34d2946530dc098c8e"/>typedef llvm::ConstantArray <emphasis role="strong">ConstantArray</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0fd33072b099f61eaa642e94ed0c03fc"/>typedef llvm::GlobalAlias <emphasis role="strong">GlobalAlias</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ae941b2925716d8ebe14bf190aa8dfd06"/>typedef llvm::AliasResult <emphasis role="strong">AliasResult</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7e833aa9feaf931fb44fb1e3fd502a6c"/>typedef llvm::ModRefInfo <emphasis role="strong">ModRefInfo</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1adee4dc991998deed59f251fb5010d7db"/>typedef llvm::AnalysisID <emphasis role="strong">AnalysisID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad9ebd847ed5d901cd30b1cfcdaec3462"/>typedef llvm::ConstantDataArray <emphasis role="strong">ConstantDataArray</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3011dbac9102f044ad5f36a4ad3d4a71"/>typedef llvm::NamedMDNode <link linkend="_namespace_s_v_f_1a3011dbac9102f044ad5f36a4ad3d4a71">NamedMDNode</link></para>

<para>LLVM metadata. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a28eec26ec8edaa5e96aecfeb01f6c0d4"/>typedef llvm::MDString <emphasis role="strong">MDString</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad3d3cec1813411f039211c86236f7adb"/>typedef llvm::MDNode <emphasis role="strong">MDNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3bacb4f95c73e6d794901d01c6b65a83"/>typedef llvm::AllocaInst <link linkend="_namespace_s_v_f_1a3bacb4f95c73e6d794901d01c6b65a83">AllocaInst</link></para>

<para>LLVM Instructions. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1adc8b60ca7d60cf6c81feae20e4a04c63"/>typedef llvm::CallInst <emphasis role="strong">CallInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a56cb9d6d1e05f6c31bfe1a4045bc8b5f"/>typedef llvm::InvokeInst <emphasis role="strong">InvokeInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac6b6710585fc6667858ccfd4311b6ab5"/>typedef llvm::CallBrInst <emphasis role="strong">CallBrInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab696aab940eb187dc81217efe8649af5"/>typedef llvm::StoreInst <emphasis role="strong">StoreInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5a6e8ab900d5cd17ef72661006a7fbe0"/>typedef llvm::LoadInst <emphasis role="strong">LoadInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac8d4990439af7a2ecca7e15383119674"/>typedef llvm::PHINode <emphasis role="strong">PHINode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac4e93e1fec646ff222940a663843921b"/>typedef llvm::GetElementPtrInst <emphasis role="strong">GetElementPtrInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a962e9a9044a46fc4bd2367384f6e0827"/>typedef llvm::CastInst <emphasis role="strong">CastInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1afc50da46a6ea7c2cf61683bbec4d7c8d"/>typedef llvm::BitCastInst <emphasis role="strong">BitCastInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac7dcc6103dee3a0bbc2fd2e02716a154"/>typedef llvm::ReturnInst <emphasis role="strong">ReturnInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1adefcb50414ea999d70cea5ccdbcb98d7"/>typedef llvm::ConstantInt <emphasis role="strong">ConstantInt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab7fac9d4a4839be445c89777e21bc307"/>typedef llvm::SelectInst <emphasis role="strong">SelectInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a07578c424e9d3c07a54e65404a0a6abb"/>typedef llvm::IntToPtrInst <emphasis role="strong">IntToPtrInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5d875a9d726bb9f68a17efa528dec0b4"/>typedef llvm::CmpInst <emphasis role="strong">CmpInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac9a05dd7ab16e998625037aa242cd30f"/>typedef llvm::BranchInst <emphasis role="strong">BranchInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a412280b134578905248ce0122c5db7c9"/>typedef llvm::SwitchInst <emphasis role="strong">SwitchInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ace1fd4c32134018e2f6d5da193524986"/>typedef llvm::ExtractValueInst <emphasis role="strong">ExtractValueInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a485b10fc29e76fdb6f31a56ebbde8f24"/>typedef llvm::InsertValueInst <emphasis role="strong">InsertValueInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aad5d26ab07a5d1314bdb8f54e0fcdb22"/>typedef llvm::BinaryOperator <emphasis role="strong">BinaryOperator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a292a6e8c5b4f2023b5575879c57eca62"/>typedef llvm::UnaryOperator <emphasis role="strong">UnaryOperator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3d5581c375ee3fe856327dc648c379f0"/>typedef llvm::PtrToIntInst <emphasis role="strong">PtrToIntInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1abcafc32093ff5ee038b5fcf6e4076ed4"/>typedef llvm::VAArgInst <emphasis role="strong">VAArgInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1afb88c4d723dd7c51bdfc7ba5893cb356"/>typedef llvm::ExtractElementInst <emphasis role="strong">ExtractElementInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a6b857824fb3c39ff6de953651260a326"/>typedef llvm::InsertElementInst <emphasis role="strong">InsertElementInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a64e69f438b8c302c4cae27735319fa49"/>typedef llvm::ShuffleVectorInst <emphasis role="strong">ShuffleVectorInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1afa513a3c76371907221ee2b1ef289c71"/>typedef llvm::LandingPadInst <emphasis role="strong">LandingPadInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a8c685f6bff3a67bf7fe3557dbfa84caa"/>typedef llvm::ResumeInst <emphasis role="strong">ResumeInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a8ac6a8ff90f47a93166fbdf15be2d721"/>typedef llvm::UnreachableInst <emphasis role="strong">UnreachableInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a61f0d928e58d4f7e21616f770ae1080b"/>typedef llvm::FenceInst <emphasis role="strong">FenceInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a582e3736a2bbb0540364c1693d831b49"/>typedef llvm::AtomicCmpXchgInst <emphasis role="strong">AtomicCmpXchgInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a468154e0ab9e7be82afef1aa0a2fb9e0"/>typedef llvm::AtomicRMWInst <emphasis role="strong">AtomicRMWInst</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1af4912ad47e19060e53b665f73e0ee6ec"/>typedef llvm::UndefValue <emphasis role="strong">UndefValue</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a9f1aca0384166e42d14e2608009ebc01"/>typedef llvm::ScalarEvolutionWrapperPass <link linkend="_namespace_s_v_f_1a9f1aca0384166e42d14e2608009ebc01">ScalarEvolutionWrapperPass</link></para>

<para>LLVM scalar evolution. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad8794eb3c00de3d3b5c5e43dded3fb42"/>typedef llvm::ScalarEvolution <emphasis role="strong">ScalarEvolution</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a4f7c400fbf2fa03db8cf61cb9a7dd3e8"/>typedef llvm::SCEVAddRecExpr <emphasis role="strong">SCEVAddRecExpr</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1abe745006fa40399d8a13613a3e0dfc63"/>typedef llvm::SCEVConstant <emphasis role="strong">SCEVConstant</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aac5262378e41a3414a20cc9a41d4adc6"/>typedef llvm::SCEV <emphasis role="strong">SCEV</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab44d20f806be99699895260b14a942d7"/>typedef llvm::DominanceFrontier <link linkend="_namespace_s_v_f_1ab44d20f806be99699895260b14a942d7">DominanceFrontier</link></para>

<para>LLVM Dominators. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aecbb42b8e9d17fa0189c50dda9fd5fdd"/>typedef llvm::DominatorTree <emphasis role="strong">DominatorTree</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab34383ee87cd45eb485fa29db482ffef"/>typedef llvm::PostDominatorTree <emphasis role="strong">PostDominatorTree</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a827d09974dc7bf0849f96823cc2fee89"/>typedef llvm::DomTreeNode <emphasis role="strong">DomTreeNode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aefa7ddc97343be9e528108d0a52293de"/>typedef llvm::DominanceFrontierBase&lt; BasicBlock, false &gt; <emphasis role="strong">DominanceFrontierBase</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a7f570d09953aa4ec60fd1d5f7f71b521"/>typedef llvm::PostDominatorTreeWrapperPass <emphasis role="strong">PostDominatorTreeWrapperPass</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a023d6e6043174fffaf29d75b38877ed0"/>typedef llvm::LoopInfoWrapperPass <emphasis role="strong">LoopInfoWrapperPass</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a255af6ff30782cb9a548feadb0fe7d6b"/>typedef llvm::inst_iterator <link linkend="_namespace_s_v_f_1a255af6ff30782cb9a548feadb0fe7d6b">inst_iterator</link></para>

<para>LLVM Iterators. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3436a988bf80c021cd8022fb445b66d5"/>typedef llvm::succ_const_iterator <emphasis role="strong">succ_const_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a032e8478a7b6a8bb0b7755c98a7bce91"/>typedef llvm::const_inst_iterator <emphasis role="strong">const_inst_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5c943191dc4e242704943e5f594ae99e"/>typedef llvm::const_pred_iterator <emphasis role="strong">const_pred_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa508c087703240dad69a9827e85ebd0b"/>typedef llvm::gep_type_iterator <emphasis role="strong">gep_type_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3b6e84470681a9f731a81e8cf54680cc"/>typedef <link linkend="_classllvm_1_1generic__bridge__gep__type__iterator">llvm::bridge_gep_iterator</link> <emphasis role="strong">bridge_gep_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a2eae2d6648dd6715421bd7af67d57637"/>typedef <link linkend="_classllvm_1_1_graph_printer">llvm::GraphPrinter</link> <emphasis role="strong">GraphPrinter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a94824519e439aeef1568d415b6f7331c"/>typedef llvm::IRBuilder <emphasis role="strong">IRBuilder</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3d9e7f32dc17fe8d40f8d6a011403b91"/>typedef llvm::IntegerType <emphasis role="strong">IntegerType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5ae98f122c64b0114df2e5861b341321"/>typedef llvm::DebugInfoFinder <link linkend="_namespace_s_v_f_1a5ae98f122c64b0114df2e5861b341321">DebugInfoFinder</link></para>

<para>LLVM debug information. </para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad127b0ad478640ede3d426e3a58d2632"/>typedef llvm::DIType <emphasis role="strong">DIType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ada0513be7e25325325ccc9183aeca278"/>typedef llvm::DIBasicType <emphasis role="strong">DIBasicType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aded9b991c77acc5284ccead0739e84f1"/>typedef llvm::DICompositeType <emphasis role="strong">DICompositeType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a852e75c562139237fcc754c7461533e6"/>typedef llvm::DIDerivedType <emphasis role="strong">DIDerivedType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a090e0791e8c200104ed3ab6bab157129"/>typedef llvm::DISubroutineType <emphasis role="strong">DISubroutineType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a89c7208bfc0b57873dfa574f52050295"/>typedef llvm::DISubprogram <emphasis role="strong">DISubprogram</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a99bc1228f07429855c81a720be862dc6"/>typedef llvm::DISubrange <emphasis role="strong">DISubrange</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a758f3bee97ed46a719d64a2d4f2bc62d"/>typedef llvm::DINode <emphasis role="strong">DINode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0f825e73d115173b05ca54fb8ec65003"/>typedef llvm::DINodeArray <emphasis role="strong">DINodeArray</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a9d3ee421789884473bfacfaa9ec007cc"/>typedef llvm::DITypeRefArray <emphasis role="strong">DITypeRefArray</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link>&lt; <link linkend="_class_s_v_f_1_1_context_cond">ContextCond</link> &gt; <link linkend="_namespace_s_v_f_1ab3532a31724d8719d29aa4c3521ca215">CxtVar</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ae23af66c8962f4a37da0a5a952bd137a"/>typedef <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; <link linkend="_namespace_s_v_f_1ab3532a31724d8719d29aa4c3521ca215">CxtVar</link> &gt; <emphasis role="strong">CxtPtSet</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link>&lt; <link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link> &gt; <link linkend="_namespace_s_v_f_1a4a4d1c207659cdb9efbcfd7a7af6d9cd">VFPathVar</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab2dd5e7169f19030e124d09284ee50c1"/>typedef <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; <link linkend="_namespace_s_v_f_1a4a4d1c207659cdb9efbcfd7a7af6d9cd">VFPathVar</link> &gt; <emphasis role="strong">VFPathPtSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad42bff8d0a7d60a085aa32d10f4955af"/>typedef unsigned <emphasis role="strong">u32_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a366625858f450a1ea5f985a3c83e0f14"/>typedef unsigned long long <emphasis role="strong">u64_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a9b707002523ece2ac54ca893ee9a2d4e"/>typedef signed <emphasis role="strong">s32_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a2db29836a72e8d86e9baa6d8d55d2978"/>typedef signed long <emphasis role="strong">Size_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a43a65e0d33af3c743294f7a1139d2301"/>typedef u32_t <emphasis role="strong">NodeID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ae71551d6a1fc300e0403297aa25ddf94"/>typedef u32_t <emphasis role="strong">EdgeID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad11fe2412b2182365a662ff0e4639b48"/>typedef unsigned <emphasis role="strong">SymID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a03d88a0302bcd253387690f13f693f64"/>typedef unsigned <emphasis role="strong">CallSiteID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a10cddb090690c82a2aab31a480253d35"/>typedef unsigned <emphasis role="strong">ThreadID</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a9ec7a8dc63411ee3724a25a59191be0c"/>typedef unsigned <emphasis role="strong">Version</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a740396763e377643790c8b803ab3e4ea"/>typedef llvm::SparseBitVector <emphasis role="strong">NodeBS</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0c6594b4bae7924369bb61943c1da4fb"/>typedef NodeBS <emphasis role="strong">PointsTo</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a2b2887cf75225bc9127338b4cf30aa85"/>typedef PointsTo <emphasis role="strong">AliasSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1af739db846e47ba6b2fd15eaad31ab7fb"/>template&lt;typename Key , typename Hash  = std::hash&lt;Key&gt;, typename KeyEqual  = std::equal_to&lt;Key&gt;, typename Allocator  = std::allocator&lt;Key&gt;&gt; </para><para>using <emphasis role="strong">Set</emphasis> = std::unordered_set&lt; Key, Hash, KeyEqual, Allocator &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a8234d4b959abc9123993bcff4eee34c1"/>template&lt;typename Key , typename Value , typename Hash  = std::hash&lt;Key&gt;, typename KeyEqual  = std::equal_to&lt;Key&gt;, typename Allocator  = std::allocator&lt;std::pair&lt;const Key, Value&gt;&gt;&gt; </para><para>using <emphasis role="strong">Map</emphasis> = std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a4f21e91ff8eaea5207afe5c60dbd78d7"/>template&lt;typename Key , typename Compare  = std::less&lt;Key&gt;, typename Allocator  = std::allocator&lt;Key&gt;&gt; </para><para>using <emphasis role="strong">OrderedSet</emphasis> = std::set&lt; Key, Compare, Allocator &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aedf0d6718ca176e0b9e17ab4b30729c6"/>template&lt;typename Key , typename Value , typename Compare  = std::less&lt;Key&gt;, typename Allocator  = std::allocator&lt;std::pair&lt;const Key, Value&gt;&gt;&gt; </para><para>using <emphasis role="strong">OrderedMap</emphasis> = std::map&lt; Key, Value, Compare, Allocator &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1aa408bbe668ca1208beceae0f842079b4"/>template&lt;typename T , unsigned N&gt; </para><para>using <emphasis role="strong">SmallVector</emphasis> = llvm::SmallVector&lt; T, N &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1af15e78ec0ab5bf5328d0f8e90c74fe4b"/>typedef std::pair&lt; NodeID, NodeID &gt; <emphasis role="strong">NodePair</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a32489632f53dce062ca2e8bff42c65cf"/>typedef std::pair&lt; NodeID, Version &gt; <emphasis role="strong">VersionedVar</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a3c2bd95727ec0d9c55c631b6617026c8"/>typedef OrderedSet&lt; NodeID &gt; <emphasis role="strong">OrderedNodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a212231734fa43d5c7414137deaac7df3"/>typedef Set&lt; NodeID &gt; <emphasis role="strong">NodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac82022f3f81965c3ce9b26c299f537a7"/>typedef Set&lt; NodePair &gt; <emphasis role="strong">NodePairSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a56a7d652fccf3134748f3cb8e8334b76"/>typedef Map&lt; NodePair, NodeID &gt; <emphasis role="strong">NodePairMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a39d27055a14d9d6363c668ee215a4676"/>typedef std::vector&lt; NodeID &gt; <emphasis role="strong">NodeVector</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a4831992588252dc51c102e9e3f7d5e2e"/>typedef std::vector&lt; EdgeID &gt; <emphasis role="strong">EdgeVector</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1811127aebdb9c926e39d155e20b3dc0"/>typedef std::stack&lt; NodeID &gt; <emphasis role="strong">NodeStack</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ab80cc7e84367e8c5a6a5a617880890f5"/>typedef std::list&lt; NodeID &gt; <emphasis role="strong">NodeList</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a35068c3650567d5051416db4aeb48e74"/>typedef std::deque&lt; NodeID &gt; <emphasis role="strong">NodeDeque</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a9893c2871f3e879e8e50c2ed157bc615"/>typedef SmallVector&lt; u32_t, 16 &gt; <emphasis role="strong">SmallVector16</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a5b2b380d8e5b1c790157dc4799d3f403"/>typedef SmallVector&lt; u32_t, 8 &gt; <emphasis role="strong">SmallVector8</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a0d2e17d5b07a50ed95e8f407cd6dd0be"/>typedef NodeSet <emphasis role="strong">EdgeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a542c6d5483bfc74fa58b45ad06b65960"/>typedef SmallVector16 <emphasis role="strong">CallStrCxt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ad5ce5ddecac033fe5309cb929d8dea3a"/>typedef llvm::StringMap&lt; u32_t &gt; <emphasis role="strong">StringMap</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_w_p_a_solver">WPASolver</link>&lt; <link linkend="_class_s_v_f_1_1_constraint_graph">ConstraintGraph</link> * &gt; <link linkend="_namespace_s_v_f_1ae9c142945ea31b6c70bceb93eb6f3ca4">WPAConstraintSolver</link></para>
</listitem>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1a1f730acb8da8187da732631ca6bbff01"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; <link linkend="_class_s_v_f_1_1_constraint_graph">ConstraintGraph</link> * &gt; <emphasis role="strong">CGSCC</emphasis></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_s_v_f_1_1_w_p_a_f_s_solver">WPAFSSolver</link>&lt; <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * &gt; <link linkend="_namespace_s_v_f_1a221270d70aa99a37738c0f919519a73d">WPASVFGFSSolver</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1afe243912c982fde7d6beb4d046f9d42b"/>enum <link linkend="_namespace_s_v_f_1afe243912c982fde7d6beb4d046f9d42b">SYMTYPE</link> { 
<emphasis role="strong">BlackHole</emphasis>
, <emphasis role="strong">ConstantObj</emphasis>
, <emphasis role="strong">BlkPtr</emphasis>
, <emphasis role="strong">NullPtr</emphasis>
, 
<emphasis role="strong">ValSym</emphasis>
, <emphasis role="strong">ObjSym</emphasis>
, <emphasis role="strong">RetSym</emphasis>
, <emphasis role="strong">VarargSym</emphasis>
 }</para>

<para>Symbol types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_namespace_s_v_f_1ac5a03512613828c2fab8930f38c2d485"/>template&lt;typename F , typename S &gt; </para><para><link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; <emphasis role="strong">operator&lt;&lt;</emphasis> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;o, const std::pair&lt; F, S &gt; &amp;var)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>for isBitcode </para>

<para>Contains abstract classes for: <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>: basic points-to data structure derived by all others. <link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link>: <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> which only propagates new changes, not entire points-to sets. <link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTData</link>: flow-sensitive <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> as defined by Hardekopf and Lin (CGO &apos;11).</para>

<para>Hierarchy (square brackets indicate abstract class): <literallayout><computeroutput>  +------------&gt; [PTData] &lt;----------------+---------------------+
  |                 ^                      |                     |
  |                 |                      |                     |
</computeroutput></literallayout> <link linkend="_class_s_v_f_1_1_mutable_p_t_data">MutablePTData</link> [<link linkend="_class_s_v_f_1_1_diff_p_t_data">DiffPTData</link>] [<link linkend="_class_s_v_f_1_1_d_f_p_t_data">DFPTData</link>] [<link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTData</link>] ^ ^ ^ | | | <link linkend="_class_s_v_f_1_1_mutable_diff_p_t_data">MutableDiffPTData</link> <link linkend="_class_s_v_f_1_1_mutable_d_f_p_t_data">MutableDFPTData</link> <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">MutableVersionedPTData</link> ^ | <link linkend="_class_s_v_f_1_1_inc_mutable_d_f_p_t_data">IncMutableDFPTData</link></para>

<para><link linkend="_class_s_v_f_1_1_p_t_data">PTData</link> (<link linkend="__abstract_points_to_d_s_8h_source">AbstractPointsToDS.h</link>) implementations with a mutable backend. Each Key is given a points-to set which is itself updated till the analysis terminates. </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespace_s_v_f_1ab3532a31724d8719d29aa4c3521ca215"/>    <section>
    <title>CxtVar</title>
<indexterm><primary>CxtVar</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>CxtVar</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link>&lt; <link linkend="_class_s_v_f_1_1_context_cond">ContextCond</link> &gt; <link linkend="_namespace_s_v_f_1ab3532a31724d8719d29aa4c3521ca215">SVF::CxtVar</link></computeroutput></para>
<para>Context-, flow- sensitive <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link></para>

<para>Context <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> </para>
    </section><anchor xml:id="_namespace_s_v_f_1ab6fe492db79077a60254f8a03cfce180"/>    <section>
    <title>GenericCallGraphTy</title>
<indexterm><primary>GenericCallGraphTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericCallGraphTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt;<link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link>,<link linkend="_class_s_v_f_1_1_p_t_a_call_graph_edge">PTACallGraphEdge</link>&gt; <link linkend="_namespace_s_v_f_1ab6fe492db79077a60254f8a03cfce180">SVF::GenericCallGraphTy</link></computeroutput></para>
<para>Pointer Analysis Call Graph used internally for various pointer analysis </para>
    </section><anchor xml:id="_namespace_s_v_f_1a1d2b00b4b0ab475899488fc89b2bfe66"/>    <section>
    <title>GenericConsEdgeTy</title>
<indexterm><primary>GenericConsEdgeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericConsEdgeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt;<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link>&gt; <link linkend="_namespace_s_v_f_1a1d2b00b4b0ab475899488fc89b2bfe66">SVF::GenericConsEdgeTy</link></computeroutput></para>
<para>Self-defined edge for constraint resolution including add/remove/re-target, but all the operations do not affect original <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> Edges </para>
    </section><anchor xml:id="_namespace_s_v_f_1a825a8805e4a16072031a18b8d553c5a2"/>    <section>
    <title>GenericConsNodeTy</title>
<indexterm><primary>GenericConsNodeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericConsNodeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt;<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link>,<link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link>&gt; <link linkend="_namespace_s_v_f_1a825a8805e4a16072031a18b8d553c5a2">SVF::GenericConsNodeTy</link></computeroutput></para>
<para>Constraint node </para>
    </section><anchor xml:id="_namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404"/>    <section>
    <title>GenericICFGEdgeTy</title>
<indexterm><primary>GenericICFGEdgeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericICFGEdgeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt;<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>&gt; <link linkend="_namespace_s_v_f_1a91e714a719b1e62e9b63103e9e6af404">SVF::GenericICFGEdgeTy</link></computeroutput></para>
<para>Interprocedural control-flow and value-flow edge, representing the control- and value-flow dependence between two nodes </para>
    </section><anchor xml:id="_namespace_s_v_f_1afc2824871ad4eb9b871c35ae28494cd3"/>    <section>
    <title>GenericICFGNodeTy</title>
<indexterm><primary>GenericICFGNodeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericICFGNodeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt;<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>, <link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link>&gt; <link linkend="_namespace_s_v_f_1afc2824871ad4eb9b871c35ae28494cd3">SVF::GenericICFGNodeTy</link></computeroutput></para>
<para>Interprocedural control-flow graph node, representing different kinds of program statements including top-level pointers (<link linkend="_class_s_v_f_1_1_val_p_n">ValPN</link>) and address-taken objects (<link linkend="_class_s_v_f_1_1_obj_p_n">ObjPN</link>) </para>
    </section><anchor xml:id="_namespace_s_v_f_1afe5e1b0e028b4cf0db9f2a9c758b03ed"/>    <section>
    <title>GenericICFGTy</title>
<indexterm><primary>GenericICFGTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericICFGTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt;<link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>,<link linkend="_class_s_v_f_1_1_i_c_f_g_edge">ICFGEdge</link>&gt; <link linkend="_namespace_s_v_f_1afe5e1b0e028b4cf0db9f2a9c758b03ed">SVF::GenericICFGTy</link></computeroutput></para>
<para>Interprocedural Control-Flow Graph (<link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link>) </para>
    </section><anchor xml:id="_namespace_s_v_f_1a8e1221553658c8b506c348534135ceaa"/>    <section>
    <title>GenericThreadCreateTreeTy</title>
<indexterm><primary>GenericThreadCreateTreeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericThreadCreateTreeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt;<link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link>, <link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link>&gt; <link linkend="_namespace_s_v_f_1a8e1221553658c8b506c348534135ceaa">SVF::GenericThreadCreateTreeTy</link></computeroutput></para>
<para>Pointer Analysis Call Graph used internally for various pointer analysis </para>
    </section><anchor xml:id="_namespace_s_v_f_1a30dcaf83718f2652012f98b192dcf437"/>    <section>
    <title>GenericVFGEdgeTy</title>
<indexterm><primary>GenericVFGEdgeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericVFGEdgeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_edge">GenericEdge</link>&lt;<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>&gt; <link linkend="_namespace_s_v_f_1a30dcaf83718f2652012f98b192dcf437">SVF::GenericVFGEdgeTy</link></computeroutput></para>
<para>Interprocedural control-flow and value-flow edge, representing the control- and value-flow dependence between two nodes </para>
    </section><anchor xml:id="_namespace_s_v_f_1a3b4bbc4b72e982a79c23fd3ec26410b6"/>    <section>
    <title>GenericVFGNodeTy</title>
<indexterm><primary>GenericVFGNodeTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericVFGNodeTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_node">GenericNode</link>&lt;<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>,<link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link>&gt; <link linkend="_namespace_s_v_f_1a3b4bbc4b72e982a79c23fd3ec26410b6">SVF::GenericVFGNodeTy</link></computeroutput></para>
<para>Interprocedural control-flow graph node, representing different kinds of program statements including top-level pointers (<link linkend="_class_s_v_f_1_1_val_p_n">ValPN</link>) and address-taken objects (<link linkend="_class_s_v_f_1_1_obj_p_n">ObjPN</link>) </para>
    </section><anchor xml:id="_namespace_s_v_f_1ab4f1d8a6715e791c94970e6f87b18f8f"/>    <section>
    <title>GenericVFGTy</title>
<indexterm><primary>GenericVFGTy</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>GenericVFGTy</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_generic_graph">GenericGraph</link>&lt;<link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link>,<link linkend="_class_s_v_f_1_1_v_f_g_edge">VFGEdge</link>&gt; <link linkend="_namespace_s_v_f_1ab4f1d8a6715e791c94970e6f87b18f8f">SVF::GenericVFGTy</link></computeroutput></para>
<para>Interprocedural Control-Flow Graph (<link linkend="_class_s_v_f_1_1_v_f_g">VFG</link>) </para>
    </section><anchor xml:id="_namespace_s_v_f_1a4a4d1c207659cdb9efbcfd7a7af6d9cd"/>    <section>
    <title>VFPathVar</title>
<indexterm><primary>VFPathVar</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>VFPathVar</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_cond_var">CondVar</link>&lt;<link linkend="_class_s_v_f_1_1_v_f_path_cond">VFPathCond</link>&gt; <link linkend="_namespace_s_v_f_1a4a4d1c207659cdb9efbcfd7a7af6d9cd">SVF::VFPathVar</link></computeroutput></para>
<para>Path-sensitive <link linkend="_class_s_v_f_1_1_d_p_item">DPItem</link> </para>
    </section><anchor xml:id="_namespace_s_v_f_1ae9c142945ea31b6c70bceb93eb6f3ca4"/>    <section>
    <title>WPAConstraintSolver</title>
<indexterm><primary>WPAConstraintSolver</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>WPAConstraintSolver</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_w_p_a_solver">WPASolver</link>&lt; <link linkend="_class_s_v_f_1_1_constraint_graph">ConstraintGraph</link> * &gt; <link linkend="_namespace_s_v_f_1ae9c142945ea31b6c70bceb93eb6f3ca4">SVF::WPAConstraintSolver</link></computeroutput></para>
<para>Abstract class of inclusion-based Pointer Analysis</para>

<para>Equivalence-based Pointer Analysis </para>
    </section><anchor xml:id="_namespace_s_v_f_1a221270d70aa99a37738c0f919519a73d"/>    <section>
    <title>WPASVFGFSSolver</title>
<indexterm><primary>WPASVFGFSSolver</primary><secondary>SVF</secondary></indexterm>
<indexterm><primary>SVF</primary><secondary>WPASVFGFSSolver</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_s_v_f_1_1_w_p_a_f_s_solver">WPAFSSolver</link>&lt;<link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>*&gt; <link linkend="_namespace_s_v_f_1a221270d70aa99a37738c0f919519a73d">SVF::WPASVFGFSSolver</link></computeroutput></para>
<para>Flow sensitive whole program pointer analysis </para>
</section>
</section>
</section>
