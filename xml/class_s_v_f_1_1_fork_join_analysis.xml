<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_fork_join_analysis" kind="class" language="C++" prot="public">
    <compoundname>SVF::ForkJoinAnalysis</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" prot="public" static="no" strong="no">
        <type></type>
        <name>ValDomain</name>
        <enumvalue id="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631a9d940442c782d5a1297102209540182f" prot="public">
          <name>Empty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631a2abecc56b7d5c644f7e14c98d33d0a0a" prot="public">
          <name>TDAlive</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631ad5af2a561c196e33d88fc63363d0d8f4" prot="public">
          <name>TDDead</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>semilattice Empty==&gt;TDDead==&gt;TDAlive </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="268" column="5" bodyfile="include/MTA/MHP.h" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a613d763731058899e6819acdb2d7315f" prot="public" static="no">
        <type>TCT::InstVec</type>
        <definition>typedef TCT::InstVec SVF::ForkJoinAnalysis::InstVec</definition>
        <argsstring></argsstring>
        <name>InstVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="275" column="26" bodyfile="include/MTA/MHP.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a8e0f7a646ab6b0295d9a990c91725b50" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>, <ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref> &gt;</type>
        <definition>typedef Map&lt;const CxtStmt,ValDomain&gt; SVF::ForkJoinAnalysis::CxtStmtToAliveFlagMap</definition>
        <argsstring></argsstring>
        <name>CxtStmtToAliveFlagMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="276" column="17" bodyfile="include/MTA/MHP.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a27168ab02991978299cd312f6d223774" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>, NodeBS &gt;</type>
        <definition>typedef Map&lt;const CxtStmt,NodeBS&gt; SVF::ForkJoinAnalysis::CxtStmtToTIDMap</definition>
        <argsstring></argsstring>
        <name>CxtStmtToTIDMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="277" column="17" bodyfile="include/MTA/MHP.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a7fb8df483e619337e77088e8543a9846" prot="public" static="no">
        <type>Set&lt; NodePair &gt;</type>
        <definition>typedef Set&lt;NodePair&gt; SVF::ForkJoinAnalysis::ThreadPairSet</definition>
        <argsstring></argsstring>
        <name>ThreadPairSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="278" column="17" bodyfile="include/MTA/MHP.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a2cf27e4045ca5fdaedb8f0d26ca007a3" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>, const Loop * &gt;</type>
        <definition>typedef Map&lt;const CxtStmt, const Loop*&gt; SVF::ForkJoinAnalysis::CxtStmtToLoopMap</definition>
        <argsstring></argsstring>
        <name>CxtStmtToLoopMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="279" column="17" bodyfile="include/MTA/MHP.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1a0ec0920d324604e3672db4d8dff93b1e" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &gt;</type>
        <definition>typedef FIFOWorkList&lt;CxtStmt&gt; SVF::ForkJoinAnalysis::CxtStmtWorkList</definition>
        <argsstring></argsstring>
        <name>CxtStmtWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="280" column="26" bodyfile="include/MTA/MHP.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_fork_join_analysis_1acd98a293bb20064cf5d0bb71c619fc54" prot="public" static="no">
        <type>Map&lt; const Instruction *, <ref refid="class_s_v_f_1_1_p_t_a_s_c_e_v" kindref="compound">PTASCEV</ref> &gt;</type>
        <definition>typedef Map&lt;const Instruction*, PTASCEV&gt; SVF::ForkJoinAnalysis::forkjoinToPTASCEVMap</definition>
        <argsstring></argsstring>
        <name>forkjoinToPTASCEVMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="281" column="17" bodyfile="include/MTA/MHP.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a2c6ce7aa04c399746d89230be0e0f1ce" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
        <definition>TCT* SVF::ForkJoinAnalysis::tct</definition>
        <argsstring></argsstring>
        <name>tct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="520" column="9" bodyfile="include/MTA/MHP.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1aa31b3f3d51b963ccd475e66b77143dba" prot="private" static="no" mutable="no">
        <type>CxtStmtToAliveFlagMap</type>
        <definition>CxtStmtToAliveFlagMap SVF::ForkJoinAnalysis::cxtStmtToAliveFlagMap</definition>
        <argsstring></argsstring>
        <name>cxtStmtToAliveFlagMap</name>
        <briefdescription>
<para>flags for context-sensitive statements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="521" column="27" bodyfile="include/MTA/MHP.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1acccf53d174cac3275da0d79c89a73916" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtStmtWorkList</ref></type>
        <definition>CxtStmtWorkList SVF::ForkJoinAnalysis::cxtStmtList</definition>
        <argsstring></argsstring>
        <name>cxtStmtList</name>
        <briefdescription>
<para>context-sensitive statement worklist </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="522" column="21" bodyfile="include/MTA/MHP.h" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1abf5b499f93a658636d09a62d14a47cad" prot="private" static="no" mutable="no">
        <type>CxtStmtToTIDMap</type>
        <definition>CxtStmtToTIDMap SVF::ForkJoinAnalysis::directJoinMap</definition>
        <argsstring></argsstring>
        <name>directJoinMap</name>
        <briefdescription>
<para>maps a context-sensitive join site to directly joined thread ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="523" column="21" bodyfile="include/MTA/MHP.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1ab5678bd46e573070827cc413f0e0d5be" prot="private" static="no" mutable="no">
        <type>CxtStmtToTIDMap</type>
        <definition>CxtStmtToTIDMap SVF::ForkJoinAnalysis::dirAndIndJoinMap</definition>
        <argsstring></argsstring>
        <name>dirAndIndJoinMap</name>
        <briefdescription>
<para>maps a context-sensitive join site to directly and indirectly joined thread ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="524" column="21" bodyfile="include/MTA/MHP.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a63da48d338683ec95709a6bd95238707" prot="private" static="no" mutable="no">
        <type>CxtStmtToLoopMap</type>
        <definition>CxtStmtToLoopMap SVF::ForkJoinAnalysis::cxtJoinInLoop</definition>
        <argsstring></argsstring>
        <name>cxtJoinInLoop</name>
        <briefdescription>
<para>a set of context-sensitive join inside loop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="525" column="22" bodyfile="include/MTA/MHP.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1aad3e722ecaa4a39aef0e1cabfa2b8019" prot="private" static="no" mutable="no">
        <type>ThreadPairSet</type>
        <definition>ThreadPairSet SVF::ForkJoinAnalysis::HBPair</definition>
        <argsstring></argsstring>
        <name>HBPair</name>
        <briefdescription>
<para>thread happens-before pair </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="526" column="19" bodyfile="include/MTA/MHP.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a4ad5c7a21ca994d908d648ca9d9e1833" prot="private" static="no" mutable="no">
        <type>ThreadPairSet</type>
        <definition>ThreadPairSet SVF::ForkJoinAnalysis::HPPair</definition>
        <argsstring></argsstring>
        <name>HPPair</name>
        <briefdescription>
<para>threads happen-in-parallel </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="527" column="19" bodyfile="include/MTA/MHP.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a4193a30050195cd9aaafd58511b66ccc" prot="private" static="no" mutable="no">
        <type>ThreadPairSet</type>
        <definition>ThreadPairSet SVF::ForkJoinAnalysis::fullJoin</definition>
        <argsstring></argsstring>
        <name>fullJoin</name>
        <briefdescription>
<para>t1 fully joins t2 along all program path </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="528" column="19" bodyfile="include/MTA/MHP.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a3616d6e1649f9e451da0f7a44cffc1e3" prot="private" static="no" mutable="no">
        <type>ThreadPairSet</type>
        <definition>ThreadPairSet SVF::ForkJoinAnalysis::partialJoin</definition>
        <argsstring></argsstring>
        <name>partialJoin</name>
        <briefdescription>
<para>t1 partially joins t2 along some program path(s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="529" column="19" bodyfile="include/MTA/MHP.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a1c616b61fbe9c713f51f2a44c4208cfa" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder" kindref="compound">PTACFInfoBuilder</ref></type>
        <definition>PTACFInfoBuilder SVF::ForkJoinAnalysis::ptaCFInfo</definition>
        <argsstring></argsstring>
        <name>ptaCFInfo</name>
        <briefdescription>
<para>PTA control flow info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="530" column="23" bodyfile="include/MTA/MHP.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_fork_join_analysis_1a4207948054a0f98560922f3f07ada10f" prot="private" static="no" mutable="no">
        <type>forkjoinToPTASCEVMap</type>
        <definition>forkjoinToPTASCEVMap SVF::ForkJoinAnalysis::fkjnToPTASCEVMap</definition>
        <argsstring></argsstring>
        <name>fkjnToPTASCEVMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="531" column="26" bodyfile="include/MTA/MHP.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a431ec90a12a62bb892e8b78f66a8f9dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::ForkJoinAnalysis::ForkJoinAnalysis</definition>
        <argsstring>(TCT *t)</argsstring>
        <name>ForkJoinAnalysis</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="282" column="5" bodyfile="include/MTA/MHP.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a731ece7e21bfa2b08ae16780b55f9f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::collectSCEVInfo</definition>
        <argsstring>()</argsstring>
        <name>collectSCEVInfo</name>
        <briefdescription>
<para>functions </para>
        </briefdescription>
        <detaileddescription>
<para>Collect SCEV pass information for pointers at fork/join sites Because ScalarEvolution is a function pass, previous knowledge of a function may be overwritten when analyzing a new function. We use a internal wrapper class <ref refid="class_s_v_f_1_1_p_t_a_s_c_e_v" kindref="compound">PTASCEV</ref> to record all the necessary information for determining symmetric fork/join inside loops </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="287" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="707" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a16061e7c28e7a9177d9ab798c102b815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::analyzeForkJoinPair</definition>
        <argsstring>()</argsstring>
        <name>analyzeForkJoinPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>context-sensitive forward traversal from each fork site. Generate following results (1) fork join pair, maps a context-sensitive join site to its corresponding thread ids (2) never happen-in-parallel thread pairs</para>
<para>Context-sensitive forward traversal from each fork site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="292" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="760" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a819ef18524ee9104b920d1a465c61da1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeBS &amp;</type>
        <definition>NodeBS&amp; SVF::ForkJoinAnalysis::getDirectlyJoinedTid</definition>
        <argsstring>(const CxtStmt &amp;cs)</argsstring>
        <name>getDirectlyJoinedTid</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get directly joined threadIDs based on a context-sensitive join site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="295" column="19" bodyfile="include/MTA/MHP.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a34ec31a6859cd94b525bfa26e549d8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS</type>
        <definition>NodeBS ForkJoinAnalysis::getDirAndIndJoinedTid</definition>
        <argsstring>(const CxtStmt &amp;cs)</argsstring>
        <name>getDirAndIndJoinedTid</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get directly and indirectly joined threadIDs based on a context-sensitive join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Return thread id(s) which are joined at this join site (1) thread t1 directly joins thread t2 (2) thread t1 indirectly joins thread t3 via directly joining t2 (t2 fully joins its child thread t3) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="300" column="12" bodyfile="lib/MTA/MHP.cpp" bodystart="998" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a4e058b920c3648f943f85099690ff44f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop* SVF::ForkJoinAnalysis::isJoinInSymmetricLoop</definition>
        <argsstring>(const CxtStmt &amp;cs) const</argsstring>
        <name>isJoinInSymmetricLoop</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Whether a context-sensitive join satisfies symmetric loop pattern. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="303" column="23" bodyfile="include/MTA/MHP.h" bodystart="303" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a86c68ce5fd8825b1593d92a5a5bad389" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::isHBPair</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>isHBPair</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
<para>Whether thread t1 happens-before thread t2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="311" column="17" bodyfile="include/MTA/MHP.h" bodystart="311" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ab55532eefbcef639ced957ad82fbd340" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::isFullJoin</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>isFullJoin</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
<para>Whether t1 fully joins t2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="320" column="17" bodyfile="include/MTA/MHP.h" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1acc178bd423dbb21bd46a9fae9ed0351c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Instruction *</type>
        <definition>const Instruction* SVF::ForkJoinAnalysis::getExitInstOfParentRoutineFun</definition>
        <argsstring>(NodeID tid) const</argsstring>
        <name>getExitInstOfParentRoutineFun</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get exit instruction of the start routine function of tid&apos;s parent thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="330" column="30" bodyfile="include/MTA/MHP.h" bodystart="330" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a3449439792a54c847c67b3041094db49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop* SVF::ForkJoinAnalysis::getJoinLoop</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getJoinLoop</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get loop for join site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="339" column="23" bodyfile="include/MTA/MHP.h" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ad3db3e7a2ebe7646675aab16103691e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ScalarEvolution *</type>
        <definition>ScalarEvolution* SVF::ForkJoinAnalysis::getSE</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getSE</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get SE for function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="344" column="28" bodyfile="include/MTA/MHP.h" bodystart="344" bodyend="347"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1adddbc09b7b99170cd0941f22ccc7e561" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::handleFork</definition>
        <argsstring>(const CxtStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleFork</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle fork. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="351" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="823" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ae4d0ee03b30220793d24f814e75a440e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::handleJoin</definition>
        <argsstring>(const CxtStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleJoin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle join. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>for the join site in a loop loop which does not join the current thread we process the loop exit</para>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="354" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="849" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ab636777379aca0b53a06e4888d4b4c6b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::handleCall</definition>
        <argsstring>(const CxtStmt &amp;cts, NodeID rootTid)</argsstring>
        <name>handleCall</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>rootTid</declname>
        </param>
        <briefdescription>
<para>Handle call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="357" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="909" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a30e5ef1322216857513047d23b525829" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::handleRet</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="360" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="932" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1add09218cce8d8bd8dd9e73b2d26a5797" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ForkJoinAnalysis::handleIntra</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleIntra</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle intra. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="363" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="978" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a4d073da3e5266964dad7422033013219" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ForkJoinAnalysis::isSameSCEV</definition>
        <argsstring>(const Instruction *forkSite, const Instruction *joinSite)</argsstring>
        <name>isSameSCEV</name>
        <param>
          <type>const Instruction *</type>
          <declname>forkSite</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>joinSite</declname>
        </param>
        <briefdescription>
<para>Return true if the fork and join have the same SCEV. </para>
        </briefdescription>
        <detaileddescription>
<para>We assume a pair of fork and join sites are must-alias if they have same <ref refid="class_s_v_f_1_1_p_t_a_s_c_e_v" kindref="compound">PTASCEV</ref> (1) SCEV not inside loop (2) SCEV inside two symmetric loops, then pointers of fork thread and join thread should have same scev start and step. and should have same loop trip count </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="366" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="1073" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1acbd457a3cbb3cb7ca54ac3c0610b5c9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ForkJoinAnalysis::sameLoopTripCount</definition>
        <argsstring>(const Instruction *forkSite, const Instruction *joinSite)</argsstring>
        <name>sameLoopTripCount</name>
        <param>
          <type>const Instruction *</type>
          <declname>forkSite</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>joinSite</declname>
        </param>
        <briefdescription>
<para>Same loop trip count. </para>
        </briefdescription>
        <detaileddescription>
<para>The fork and join have same loop trip count </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="369" column="10" bodyfile="lib/MTA/MHP.cpp" bodystart="1095" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a3655131add43346a175576b023e32509" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::isAliasedForkJoin</definition>
        <argsstring>(const Instruction *forkSite, const Instruction *joinSite)</argsstring>
        <name>isAliasedForkJoin</name>
        <param>
          <type>const Instruction *</type>
          <declname>forkSite</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>joinSite</declname>
        </param>
        <briefdescription>
<para>Whether it is a matched fork join pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="372" column="10" bodyfile="include/MTA/MHP.h" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a149114898b13e1430c8fbb60978ca4f5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref></type>
        <definition>ValDomain SVF::ForkJoinAnalysis::getMarkedFlag</definition>
        <argsstring>(const CxtStmt &amp;cs)</argsstring>
        <name>getMarkedFlag</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Mark thread flags for cxtStmt. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the flag for a cxtStmt </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="379" column="22" bodyfile="include/MTA/MHP.h" bodystart="379" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ac483d3b0e9084c2033e177eda9ac9215" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::markCxtStmtFlag</definition>
        <argsstring>(const CxtStmt &amp;tgr, ValDomain flag)</argsstring>
        <name>markCxtStmtFlag</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" kindref="member">ValDomain</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Initialize TDAlive and TDDead flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="391" column="10" bodyfile="include/MTA/MHP.h" bodystart="391" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a047fbff4be9f94ab12795cd371f60efa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::markCxtStmtFlag</definition>
        <argsstring>(const CxtStmt &amp;tgr, const CxtStmt &amp;src)</argsstring>
        <name>markCxtStmtFlag</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Transfer function for marking context-sensitive statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>alive is at the bottom of the semilattice, nothing needs to be done here</para>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="399" column="10" bodyfile="include/MTA/MHP.h" bodystart="399" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a7965a276a3a12d532c9967de13d4cc8a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::clearFlagMap</definition>
        <argsstring>()</argsstring>
        <name>clearFlagMap</name>
        <briefdescription>
<para>Clear flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="422" column="17" bodyfile="include/MTA/MHP.h" bodystart="422" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a7ac37e3399aa6e303a6babe8f455aa87" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::pushToCTSWorkList</definition>
        <argsstring>(const CxtStmt &amp;cs)</argsstring>
        <name>pushToCTSWorkList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Worklist operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="431" column="17" bodyfile="include/MTA/MHP.h" bodystart="431" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a4d893583db922444c6a29923bf3d05d3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref></type>
        <definition>CxtStmt SVF::ForkJoinAnalysis::popFromCTSWorkList</definition>
        <argsstring>()</argsstring>
        <name>popFromCTSWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="435" column="20" bodyfile="include/MTA/MHP.h" bodystart="435" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a799e14292e16b9fb322cab07f3ff5593" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::getNextInsts</definition>
        <argsstring>(const Instruction *inst, InstVec &amp;instSet)</argsstring>
        <name>getNextInsts</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <param>
          <type>InstVec &amp;</type>
          <declname>instSet</declname>
        </param>
        <briefdescription>
<para>Get the next instructions following control flow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="443" column="17" bodyfile="include/MTA/MHP.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1aaf70954762aa86f835d799994726790e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::pushCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>pushCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Push calling context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="448" column="17" bodyfile="include/MTA/MHP.h" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1aea9ef584ce6c7129bcd1d5ecda2f1f74" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::matchCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>matchCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Match context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="453" column="17" bodyfile="include/MTA/MHP.h" bodystart="453" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1aff32f240a03421937c2fc606359dca9b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::isTDFork</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDFork</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a fork site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="459" column="17" bodyfile="include/MTA/MHP.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1aac722a42dc6e03e771a7a80de5f8ec94" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ForkJoinAnalysis::isTDJoin</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDJoin</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a join site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="464" column="17" bodyfile="include/MTA/MHP.h" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1acd4308b99446c277ccb3407103fe21d0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::ForkJoinAnalysis::getForkedThread</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>getForkedThread</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Get forked thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="469" column="24" bodyfile="include/MTA/MHP.h" bodystart="469" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ada1e56dfe2d64ea6310142a346c86ed4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::ForkJoinAnalysis::getJoinedThread</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>getJoinedThread</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Get joined thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="474" column="24" bodyfile="include/MTA/MHP.h" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a8ad9b8cb0e6300b2ffc55244e53cece6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::ForkJoinAnalysis::getTCG</definition>
        <argsstring>() const</argsstring>
        <name>getTCG</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="479" column="28" bodyfile="include/MTA/MHP.h" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a8aa2d4c83981007108b152d05e9c51fe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addDirectlyJoinTID</definition>
        <argsstring>(const CxtStmt &amp;cs, NodeID tid)</argsstring>
        <name>addDirectlyJoinTID</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>maps a context-sensitive join site to a thread id </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="484" column="17" bodyfile="include/MTA/MHP.h" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a1505ba82206169f76ea239067797d6c2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addToHPPair</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>addToHPPair</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>happen-in-parallel pair happens-before pair </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="492" column="17" bodyfile="include/MTA/MHP.h" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a647ae6866bb37be850f0bdd5a7341188" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addToHBPair</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>addToHBPair</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="497" column="17" bodyfile="include/MTA/MHP.h" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a02dad7e9ae45a1751c4548dd9991a8b4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addToFullJoin</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>addToFullJoin</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
<para>full join and partial join </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="505" column="17" bodyfile="include/MTA/MHP.h" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1a6ead92486459ec7f94a8375c7f96faca" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addToPartial</definition>
        <argsstring>(NodeID tid1, NodeID tid2)</argsstring>
        <name>addToPartial</name>
        <param>
          <type>NodeID</type>
          <declname>tid1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tid2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="509" column="17" bodyfile="include/MTA/MHP.h" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_fork_join_analysis_1ab302cceb28998623fed622560e50a740" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ForkJoinAnalysis::addSymmetricLoopJoin</definition>
        <argsstring>(const CxtStmt &amp;cs, const Loop *lp)</argsstring>
        <name>addSymmetricLoopJoin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const Loop *</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
<para>Add inloop join. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MHP.h" line="516" column="17" bodyfile="include/MTA/MHP.h" bodystart="516" bodyend="519"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/MTA/MHP.h" line="263" column="1" bodyfile="include/MTA/MHP.h" bodystart="264" bodyend="532"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8aa2d4c83981007108b152d05e9c51fe" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addDirectlyJoinTID</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ab302cceb28998623fed622560e50a740" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addSymmetricLoopJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a02dad7e9ae45a1751c4548dd9991a8b4" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addToFullJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a647ae6866bb37be850f0bdd5a7341188" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addToHBPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a1505ba82206169f76ea239067797d6c2" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addToHPPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a6ead92486459ec7f94a8375c7f96faca" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>addToPartial</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a16061e7c28e7a9177d9ab798c102b815" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>analyzeForkJoinPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a7965a276a3a12d532c9967de13d4cc8a" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>clearFlagMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a731ece7e21bfa2b08ae16780b55f9f5f" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>collectSCEVInfo</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a63da48d338683ec95709a6bd95238707" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>cxtJoinInLoop</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1acccf53d174cac3275da0d79c89a73916" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>cxtStmtList</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8e0f7a646ab6b0295d9a990c91725b50" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>CxtStmtToAliveFlagMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aa31b3f3d51b963ccd475e66b77143dba" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>cxtStmtToAliveFlagMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a2cf27e4045ca5fdaedb8f0d26ca007a3" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>CxtStmtToLoopMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a27168ab02991978299cd312f6d223774" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>CxtStmtToTIDMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a0ec0920d324604e3672db4d8dff93b1e" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>CxtStmtWorkList</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ab5678bd46e573070827cc413f0e0d5be" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>dirAndIndJoinMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1abf5b499f93a658636d09a62d14a47cad" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>directJoinMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631a9d940442c782d5a1297102209540182f" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>Empty</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4207948054a0f98560922f3f07ada10f" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>fkjnToPTASCEVMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a431ec90a12a62bb892e8b78f66a8f9dc" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>ForkJoinAnalysis</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1acd98a293bb20064cf5d0bb71c619fc54" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>forkjoinToPTASCEVMap</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4193a30050195cd9aaafd58511b66ccc" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>fullJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a34ec31a6859cd94b525bfa26e549d8c1" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getDirAndIndJoinedTid</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a819ef18524ee9104b920d1a465c61da1" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getDirectlyJoinedTid</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1acc178bd423dbb21bd46a9fae9ed0351c" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getExitInstOfParentRoutineFun</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1acd4308b99446c277ccb3407103fe21d0" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getForkedThread</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ada1e56dfe2d64ea6310142a346c86ed4" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getJoinedThread</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a3449439792a54c847c67b3041094db49" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getJoinLoop</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a149114898b13e1430c8fbb60978ca4f5" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getMarkedFlag</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a799e14292e16b9fb322cab07f3ff5593" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getNextInsts</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ad3db3e7a2ebe7646675aab16103691e7" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getSE</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8ad9b8cb0e6300b2ffc55244e53cece6" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>getTCG</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ab636777379aca0b53a06e4888d4b4c6b" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>handleCall</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1adddbc09b7b99170cd0941f22ccc7e561" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>handleFork</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1add09218cce8d8bd8dd9e73b2d26a5797" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>handleIntra</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ae4d0ee03b30220793d24f814e75a440e" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>handleJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a30e5ef1322216857513047d23b525829" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>handleRet</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aad3e722ecaa4a39aef0e1cabfa2b8019" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>HBPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4ad5c7a21ca994d908d648ca9d9e1833" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>HPPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a613d763731058899e6819acdb2d7315f" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>InstVec</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a3655131add43346a175576b023e32509" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isAliasedForkJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ab55532eefbcef639ced957ad82fbd340" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isFullJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a86c68ce5fd8825b1593d92a5a5bad389" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isHBPair</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4e058b920c3648f943f85099690ff44f" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isJoinInSymmetricLoop</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4d073da3e5266964dad7422033013219" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isSameSCEV</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aff32f240a03421937c2fc606359dca9b" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isTDFork</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aac722a42dc6e03e771a7a80de5f8ec94" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>isTDJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1ac483d3b0e9084c2033e177eda9ac9215" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>markCxtStmtFlag</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a047fbff4be9f94ab12795cd371f60efa" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>markCxtStmtFlag</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aea9ef584ce6c7129bcd1d5ecda2f1f74" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>matchCxt</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a3616d6e1649f9e451da0f7a44cffc1e3" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>partialJoin</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a4d893583db922444c6a29923bf3d05d3" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>popFromCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a1c616b61fbe9c713f51f2a44c4208cfa" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>ptaCFInfo</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1aaf70954762aa86f835d799994726790e" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>pushCxt</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a7ac37e3399aa6e303a6babe8f455aa87" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>pushToCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1acbd457a3cbb3cb7ca54ac3c0610b5c9e" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>sameLoopTripCount</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a2c6ce7aa04c399746d89230be0e0f1ce" prot="private" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>tct</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631a2abecc56b7d5c644f7e14c98d33d0a0a" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>TDAlive</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631ad5af2a561c196e33d88fc63363d0d8f4" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>TDDead</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a7fb8df483e619337e77088e8543a9846" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>ThreadPairSet</name></member>
      <member refid="class_s_v_f_1_1_fork_join_analysis_1a8d40e687caf8999369621ed385dfc631" prot="public" virt="non-virtual"><scope>SVF::ForkJoinAnalysis</scope><name>ValDomain</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
