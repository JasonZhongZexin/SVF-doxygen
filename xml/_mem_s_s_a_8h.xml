<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_mem_s_s_a_8h" kind="file" language="C++">
    <compoundname>MemSSA.h</compoundname>
    <includes refid="_mem_region_8h" local="yes">MSSA/MemRegion.h</includes>
    <includes refid="_m_s_s_a_mu_chi_8h" local="yes">MSSA/MSSAMuChi.h</includes>
    <includes local="no">vector</includes>
    <includedby refid="_s_v_f_g_edge_8h" local="yes">include/Graphs/SVFGEdge.h</includedby>
    <includedby refid="_mem_s_s_a_8cpp" local="yes">lib/MSSA/MemSSA.cpp</includedby>
    <includedby refid="_s_v_f_g_builder_8cpp" local="yes">lib/MSSA/SVFGBuilder.cpp</includedby>
    <incdepgraph>
      <node id="65">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>list</label>
      </node>
      <node id="61">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>system_error</label>
      </node>
      <node id="58">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="4">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="77">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="80">
        <label>assert.h</label>
      </node>
      <node id="38">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="41">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="12">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="11">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="72">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="78">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="44">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="83">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="74">
        <label>string</label>
      </node>
      <node id="85">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="94">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="45">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="17">
        <label>unordered_set</label>
      </node>
      <node id="93">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="73">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="10">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="95">
        <label>limits.h</label>
      </node>
      <node id="43">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="57">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="1">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="66">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="71">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="27">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="79">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stack</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="26">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="30">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="59">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="69">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="24">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="3">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>time.h</label>
      </node>
      <node id="86">
        <label>math.h</label>
      </node>
      <node id="99">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="76">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="54">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="81">
        <label>cstdlib</label>
      </node>
      <node id="60">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="53">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="21">
        <label>deque</label>
      </node>
      <node id="68">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="19">
        <label>unordered_map</label>
      </node>
      <node id="51">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="9">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="47">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="52">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="62">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="98">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="84">
        <label>stdio.h</label>
      </node>
      <node id="23">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="48">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="39">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="97">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>memory</label>
      </node>
      <node id="28">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="42">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="46">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="28">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="18">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="25">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="9">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="12">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="4">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="13">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="23">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="17">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="21">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="24">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="2">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_mem_s_s_a" prot="public">SVF::MemSSA</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>MemSSA.h<sp/>--<sp/>Memory<sp/>SSA-------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2017&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>MemorySSAPass.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Jul<sp/>14,<sp/>2013</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MEMORYSSAPASS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEMORYSSAPASS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MSSA/MemRegion.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MSSA/MSSAMuChi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PointerAnalysis;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemSSAStat;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Memory<sp/>SSA<sp/>implementation<sp/>on<sp/>top<sp/>of<sp/>partial<sp/>SSA</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="class_s_v_f_1_1_mem_s_s_a" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_mem_s_s_a" kindref="compound">MemSSA</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">MemRegion::Condition</ref><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a" kindref="member">Condition</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MSSAMU&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MU</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_ret_m_u" kindref="compound">RetMU&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_ret_m_u" kindref="compound">RETMU</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_m_u" kindref="compound">LoadMU&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_load_m_u" kindref="compound">LOADMU</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">CallMU&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">CALLMU</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MSSACHI&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">CHI</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_entry_c_h_i" kindref="compound">EntryCHI&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_entry_c_h_i" kindref="compound">ENTRYCHI</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_c_h_i" kindref="compound">StoreCHI&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_store_c_h_i" kindref="compound">STORECHI</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_c_h_i" kindref="compound">CallCHI&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_call_c_h_i" kindref="compound">CALLCHI</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI&lt;Condition&gt;</ref><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">PHI</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_d_e_f" kindref="compound">MSSADEF</ref><sp/><ref refid="class_s_v_f_1_1_m_s_s_a_d_e_f" kindref="compound">MDEF</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;MU*&gt;<sp/>MUSet;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;CHI*&gt;<sp/>CHISet;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;PHI*&gt;<sp/>PHISet;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_r_generator_1a98ac3bf264e6a85d172c2c4264ea908f" kindref="member">MRGenerator::MRSet</ref><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>MemRegion*&gt;<sp/>MRVector;</highlight></codeline>
<codeline lineno="73"></codeline>
<codeline lineno="74" refid="class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>LoadPE*,<sp/>MUSet&gt;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b" kindref="member">LoadToMUSetMap</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>StorePE*,<sp/>CHISet&gt;<sp/>StoreToChiSetMap;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CallBlockNode*,<sp/>MUSet&gt;<sp/>CallSiteToMUSetMap;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>CallBlockNode*,<sp/>CHISet&gt;<sp/>CallSiteToCHISetMap;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>BasicBlock*,<sp/>PHISet&gt;<sp/>BBToPhiSetMap;</highlight></codeline>
<codeline lineno="80"></codeline>
<codeline lineno="82" refid="class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>SVFFunction*,<sp/>CHISet&gt;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca" kindref="member">FunToEntryChiSetMap</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>SVFFunction*,<sp/>MUSet&gt;<sp/>FunToReturnMuSetMap;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"></codeline>
<codeline lineno="87" refid="class_s_v_f_1_1_mem_s_s_a_1a66e693af7b37e4e58b4834898d6a34fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>BasicBlock*&gt;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a66e693af7b37e4e58b4834898d6a34fa" kindref="member">BBList</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>BasicBlock*,<sp/>MRSet&gt;<sp/>BBToMRSetMap;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>MemRegion*,<sp/>BBList&gt;<sp/>MemRegToBBsMap;</highlight></codeline>
<codeline lineno="91"></codeline>
<codeline lineno="93" refid="class_s_v_f_1_1_mem_s_s_a_1aa9dbaf51f0498f3bd878827744208899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>MemRegion*,<sp/>std::vector&lt;MRVer*&gt;<sp/>&gt;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aa9dbaf51f0498f3bd878827744208899" kindref="member">MemRegToVerStackMap</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>MemRegion*,<sp/>MRVERSION&gt;<sp/>MemRegToCounterMap;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_s_v_f_1_1_mem_s_s_a_1ac04de5e349ced05d7289b8ee55c86e34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PAG::PAGEdgeList<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac04de5e349ced05d7289b8ee55c86e34" kindref="member">PAGEdgeList</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"></codeline>
<codeline lineno="101" refid="class_s_v_f_1_1_mem_s_s_a_1a37dca8a7d155de4870358146d219b5e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37dca8a7d155de4870358146d219b5e5" kindref="member">timeOfGeneratingMemRegions</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102" refid="class_s_v_f_1_1_mem_s_s_a_1a4d2418b7df74f23d8fd328f66e29f198" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a4d2418b7df74f23d8fd328f66e29f198" kindref="member">timeOfCreateMUCHI</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="class_s_v_f_1_1_mem_s_s_a_1a3c7b5fa73fdc7c805ee3673fbe812b44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a3c7b5fa73fdc7c805ee3673fbe812b44" kindref="member">timeOfInsertingPHI</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="class_s_v_f_1_1_mem_s_s_a_1a97ccd5e0b9ab6144415e26bdf95cbabd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a97ccd5e0b9ab6144415e26bdf95cbabd" kindref="member">timeOfSSARenaming</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref>*<sp/>pta;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_m_r_generator" kindref="compound">MRGenerator</ref>*<sp/>mrGen;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_s_v_f_1ab44d20f806be99699895260b14a942d7" kindref="member">DominanceFrontier</ref>*<sp/>df;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>DominatorTree*<sp/>dt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_stat" kindref="compound">MemSSAStat</ref>*<sp/>stat;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a695adf83e8c40b9628b1866053f68033" kindref="member">createMUCHI</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>&amp;<sp/>fun);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1acc6f72d96cf29e36093ba08ea86b8983" kindref="member">insertPHI</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>&amp;<sp/>fun);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a16114eb55775f6ee812c1648dcaede0c" kindref="member">SSARename</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>&amp;<sp/>fun);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a271c20725d49dd65b95c062938ffde4c" kindref="member">SSARenameBB</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock&amp;<sp/>bb);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b" kindref="member">LoadToMUSetMap</ref><sp/>load2MuSetMap;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>StoreToChiSetMap<sp/>store2ChiSetMap;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSiteToMUSetMap<sp/>callsiteToMuSetMap;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSiteToCHISetMap<sp/>callsiteToChiSetMap;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>BBToPhiSetMap<sp/>bb2PhiSetMap;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca" kindref="member">FunToEntryChiSetMap</ref><sp/>funToEntryChiSetMap;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>FunToReturnMuSetMap<sp/>funToReturnMuSetMap;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aa9dbaf51f0498f3bd878827744208899" kindref="member">MemRegToVerStackMap</ref><sp/>mr2VerStackMap;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>MemRegToCounterMap<sp/>mr2CounterMap;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>algorithm<sp/>in<sp/>book<sp/>Engineering<sp/>A<sp/>Compiler<sp/>section<sp/>9.3)</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref><sp/>usedRegs;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>MemRegToBBsMap<sp/>reg2BBMap;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref><sp/>varKills;</highlight></codeline>
<codeline lineno="145"></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_m_r_ver" kindref="compound">MRVer</ref>*<sp/>newSSAName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_region" kindref="compound">MemRegion</ref>*<sp/>mr,<sp/><ref refid="class_s_v_f_1_1_m_s_s_a_d_e_f" kindref="compound">MSSADEF</ref>*<sp/>def);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_r_ver" kindref="compound">MRVer</ref>*<sp/>getTopStackVer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_region" kindref="compound">MemRegion</ref>*<sp/>mr)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MRVer*&gt;<sp/>&amp;stack<sp/>=<sp/>mr2VerStackMap[mr];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!stack.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;stack<sp/>is<sp/>empty!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack.back();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>collectRegUses(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_region" kindref="compound">MemRegion</ref>*<sp/>mr)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>varKills.count(mr))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedRegs.insert(mr);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>collectRegDefs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varKills.insert(mr);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg2BBMap[mr].push_back(bb);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"></codeline>
<codeline lineno="175"></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddLoadMU(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LoadPE*<sp/>load,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>&amp;<sp/>mrSet)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MRSet::iterator<sp/>iter<sp/>=<sp/>mrSet.begin(),<sp/>eiter<sp/>=<sp/>mrSet.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddLoadMU(bb,load,*iter);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddStoreCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StorePE*<sp/>store,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>&amp;<sp/>mrSet)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MRSet::iterator<sp/>iter<sp/>=<sp/>mrSet.begin(),<sp/>eiter<sp/>=<sp/>mrSet.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddStoreCHI(bb,store,*iter);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddCallSiteMU(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>&amp;<sp/>mrSet)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MRSet::iterator<sp/>iter<sp/>=<sp/>mrSet.begin(),<sp/>eiter<sp/>=<sp/>mrSet.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddCallSiteMU(cs,*iter);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddCallSiteCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>&amp;<sp/>mrSet)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MRSet::iterator<sp/>iter<sp/>=<sp/>mrSet.begin(),<sp/>eiter<sp/>=<sp/>mrSet.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddCallSiteCHI(cs,*iter);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddMSSAPHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1" kindref="member">MRSet</ref>&amp;<sp/>mrSet)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MRSet::iterator<sp/>iter<sp/>=<sp/>mrSet.begin(),<sp/>eiter<sp/>=<sp/>mrSet.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddMSSAPHI(bb,*iter);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddLoadMU(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LoadPE*<sp/>load,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOADMU*<sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LOADMU(bb,load,<sp/>mr);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load2MuSetMap[load].insert(mu);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegUses(mr);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddStoreCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StorePE*<sp/>store,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STORECHI*<sp/>chi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>STORECHI(bb,store,<sp/>mr);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store2ChiSetMap[store].insert(chi);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegUses(mr);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegDefs(bb,mr);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddCallSiteMU(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CALLMU*<sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CALLMU(cs,<sp/>mr);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callsiteToMuSetMap[cs].insert(mu);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegUses(mr);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddCallSiteCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CALLCHI*<sp/>chi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CALLCHI(cs,<sp/>mr);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callsiteToChiSetMap[cs].insert(chi);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegUses(mr);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectRegDefs(chi-&gt;getBasicBlock(),mr);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddMSSAPHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemRegion*<sp/>mr)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bb2PhiSetMap[bb].insert(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PHI(bb,<sp/>mr));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"></codeline>
<codeline lineno="234"></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenameMuSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MUSet&amp;<sp/>muSet)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MUSet::const_iterator<sp/>mit<sp/>=<sp/>muSet.begin(),<sp/>emit<sp/>=<sp/>muSet.end();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mit<sp/>!=<sp/>emit;<sp/>++mit)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MU*<sp/>mu<sp/>=<sp/>(*mit);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu-&gt;setVer(getTopStackVer(mu-&gt;getMR()));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenameChiSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHISet&amp;<sp/>chiSet,<sp/>MRVector&amp;<sp/>memRegs)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CHISet::const_iterator<sp/>cit<sp/>=<sp/>chiSet.begin(),<sp/>ecit<sp/>=<sp/>chiSet.end();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cit<sp/>!=<sp/>ecit;<sp/>++cit)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHI*<sp/>chi<sp/>=<sp/>(*cit);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi-&gt;setOpVer(getTopStackVer(chi-&gt;getMR()));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi-&gt;setResVer(newSSAName(chi-&gt;getMR(),chi));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memRegs.push_back(chi-&gt;getMR());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenamePhiRes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PHISet&amp;<sp/>phiSet,<sp/>MRVector&amp;<sp/>memRegs)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PHISet::const_iterator<sp/>iter<sp/>=<sp/>phiSet.begin(),<sp/>eiter<sp/>=<sp/>phiSet.end();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PHI*<sp/>phi<sp/>=<sp/>*iter;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi-&gt;setResVer(newSSAName(phi-&gt;getMR(),phi));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memRegs.push_back(phi-&gt;getMR());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenamePhiOps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PHISet&amp;<sp/>phiSet,<sp/>u32_t<sp/>pos,<sp/>MRVector&amp;)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PHISet::const_iterator<sp/>iter<sp/>=<sp/>phiSet.begin(),<sp/>eiter<sp/>=<sp/>phiSet.end();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PHI*<sp/>phi<sp/>=<sp/>*iter;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi-&gt;setOpVer(getTopStackVer(phi-&gt;getMR()),<sp/>pos);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_s_v_f_1ab44d20f806be99699895260b14a942d7" kindref="member">DominanceFrontier</ref>*<sp/>getDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction&amp;)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>df;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>DominatorTree*<sp/>getDT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction&amp;)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurrentDFDT(<ref refid="namespace_s_v_f_1ab44d20f806be99699895260b14a942d7" kindref="member">DominanceFrontier</ref>*<sp/>f,<sp/>DominatorTree*<sp/>t);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a6bd57451370f5f4c92ce212be4cddd15" kindref="member">MemSSA</ref>(BVDataPTAImpl*<sp/>p,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ptrOnlyMSSA);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="class_s_v_f_1_1_mem_s_s_a_1ae09603b40c7359c4cd2f644d3efc40cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ae09603b40c7359c4cd2f644d3efc40cc" kindref="member">~MemSSA</ref>()</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306" refid="class_s_v_f_1_1_mem_s_s_a_1a37ba6ead86bce47f97adeff1e8cdb564" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a37ba6ead86bce47f97adeff1e8cdb564" kindref="member">getPAG</ref>()</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311" refid="class_s_v_f_1_1_mem_s_s_a_1ad40617a1907b9a6b8cc24888ce54a0ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref>*<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ad40617a1907b9a6b8cc24888ce54a0ac" kindref="member">getPTA</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="312"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pta;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316" refid="class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_m_r_generator" kindref="compound">MRGenerator</ref>*<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09" kindref="member">getMRGenerator</ref>()</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mrGen;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ae56d1878046c119d1857727ca3609d74" kindref="member">buildMemSSA</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref>&amp;<sp/>fun,<ref refid="namespace_s_v_f_1ab44d20f806be99699895260b14a942d7" kindref="member">DominanceFrontier</ref>*,<sp/>DominatorTree*);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a89c40c8fad70f3aead6531261e5a3cc3" kindref="member">performStat</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"></codeline>
<codeline lineno="328" refid="class_s_v_f_1_1_mem_s_s_a_1af5e356e82c3f93b65bd89908e0f465dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1af5e356e82c3f93b65bd89908e0f465dc" kindref="member">hasMU</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>inst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="329"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref>*<sp/>load<sp/>=<sp/>SVFUtil::dyn_cast&lt;LoadPE&gt;(inst))</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>!=<sp/>load2MuSetMap.count(load)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>associated<sp/>with<sp/>mem<sp/>region!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_edge" kindref="compound">PAGEdge</ref>*<sp/>inst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="340"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref>*<sp/>store<sp/>=<sp/>SVFUtil::dyn_cast&lt;StorePE&gt;(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inst))</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>!=<sp/>store2ChiSetMap.count(store)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>associated<sp/>with<sp/>mem<sp/>region!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1af5e356e82c3f93b65bd89908e0f465dc" kindref="member">hasMU</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="352"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToMuSetMap.find(cs)!=callsiteToMuSetMap.end();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCHI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="356"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToChiSetMap.find(cs)!=callsiteToChiSetMap.end();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"></codeline>
<codeline lineno="362"></codeline>
<codeline lineno="363" refid="class_s_v_f_1_1_mem_s_s_a_1aec75259d035e3b5589e6fcbbcdfe4b2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aec75259d035e3b5589e6fcbbcdfe4b2c" kindref="member">hasFuncEntryChi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*<sp/>fun)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="364"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(funToEntryChiSetMap.find(fun)<sp/>!=<sp/>funToEntryChiSetMap.end());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasReturnMu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref><sp/>*<sp/>fun)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="368"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(funToReturnMuSetMap.find(fun)<sp/>!=<sp/>funToReturnMuSetMap.end());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CHISet&amp;<sp/>getFuncEntryChiSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>funToEntryChiSetMap[fun];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>MUSet&amp;<sp/>getReturnMuSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFFunction<sp/>*<sp/>fun)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>funToReturnMuSetMap[fun];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"></codeline>
<codeline lineno="383"></codeline>
<codeline lineno="384" refid="class_s_v_f_1_1_mem_s_s_a_1aea0fc1d2e5407f86e0211d8e253fa24e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>MUSet&amp;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aea0fc1d2e5407f86e0211d8e253fa24e" kindref="member">getMUSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_p_e" kindref="compound">LoadPE</ref>*<sp/>ld)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load2MuSetMap[ld];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CHISet&amp;<sp/>getCHISet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_p_e" kindref="compound">StorePE</ref>*<sp/>st)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store2ChiSetMap[st];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>MUSet&amp;<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aea0fc1d2e5407f86e0211d8e253fa24e" kindref="member">getMUSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToMuSetMap[cs];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CHISet&amp;<sp/>getCHISet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallBlockNode*<sp/>cs)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToChiSetMap[cs];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PHISet&amp;<sp/>getPHISet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bb2PhiSetMap[bb];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPHISet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="405"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bb2PhiSetMap.find(bb)!=bb2PhiSetMap.end();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b" kindref="member">LoadToMUSetMap</ref>&amp;<sp/>getLoadToMUSetMap()</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load2MuSetMap;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>StoreToChiSetMap&amp;<sp/>getStoreToChiSetMap()</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store2ChiSetMap;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FunToReturnMuSetMap&amp;<sp/>getFunToRetMuSetMap()</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>funToReturnMuSetMap;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca" kindref="member">FunToEntryChiSetMap</ref>&amp;<sp/>getFunToEntryChiSetMap()</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>funToEntryChiSetMap;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CallSiteToMUSetMap&amp;<sp/>getCallSiteToMuSetMap()</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToMuSetMap;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>CallSiteToCHISetMap&amp;<sp/>getCallSiteToChiSetMap()</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callsiteToChiSetMap;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BBToPhiSetMap&amp;<sp/>getBBToPhiSetMap()</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bb2PhiSetMap;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"></codeline>
<codeline lineno="439"></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aafc83f7f22ebf3b3683607440c488bef" kindref="member">getLoadMuNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1aa8c45b455e6fc60cab955534c3e50bfa" kindref="member">getStoreChiNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a15272a4ed019d1c323d1826c1bedb70f" kindref="member">getFunEntryChiNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a67175188232e08f5c5374f92ff61810f" kindref="member">getFunRetMuNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a9e8c5b85957485635d0f72c2f48bb8b5" kindref="member">getCallSiteMuNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a2c65795ca63a53c833f5ac17a752b6dc" kindref="member">getCallSiteChiNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a9bb6512999cbf9c7c03153be77c8af20" kindref="member">getBBPhiNum</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_mem_s_s_a_1a9f9ac433d9c9348ceb5be8893d814ebd" kindref="member">dumpMSSA</ref>(<ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref><sp/>&amp;<sp/>Out<sp/>=<sp/>SVFUtil::outs());</highlight></codeline>
<codeline lineno="451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MEMORYSSAPASS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/MSSA/MemSSA.h"/>
  </compounddef>
</doxygen>
