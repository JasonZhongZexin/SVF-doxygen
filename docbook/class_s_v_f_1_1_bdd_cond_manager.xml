<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_bdd_cond_manager" xml:lang="en-US">
<title>SVF::BddCondManager Class Reference</title>
<indexterm><primary>SVF::BddCondManager</primary></indexterm>
<para>
<computeroutput>#include &lt;Conditions.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1af81b4cf3c652695a7354daa94758792b"/><link linkend="_class_s_v_f_1_1_bdd_cond_manager_1af81b4cf3c652695a7354daa94758792b">BddCondManager</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a9d8fae24ce2f03ccca04380e01da9676"/><link linkend="_class_s_v_f_1_1_bdd_cond_manager_1a9d8fae24ce2f03ccca04380e01da9676">~BddCondManager</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a9a01d3b99cf9c6614accd7ca41721c3d"/><link linkend="_struct_dd_node">DdNode</link> * <emphasis role="strong">Cudd_bdd</emphasis> (u32_t i)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1ae3463aa193f9755ec2766340456be71b"/>unsigned <emphasis role="strong">BddVarNum</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1aedcb7f5cc71b8c144e592818180fb0c9"/><link linkend="_struct_dd_node">DdNode</link> * <emphasis role="strong">getTrueCond</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a4604b02410dfe4c65e08cf08eff3240e"/><link linkend="_struct_dd_node">DdNode</link> * <emphasis role="strong">getFalseCond</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a8cb493333b919d0dbea6c4633e95ac6b"/>u32_t <emphasis role="strong">getBDDMemUsage</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a89ab3f923baf3062b85f34506eb85041"/>u32_t <emphasis role="strong">getCondNumber</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1ad70a75998fabac2e884e398c8bb57307"/>u32_t <emphasis role="strong">getMaxLiveCondNumber</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a47ace763ad44c64a5c053f64c82b1983"/>void <emphasis role="strong">markForRelease</emphasis> (<link linkend="_struct_dd_node">DdNode</link> *cond)</para>
</listitem>
            <listitem><para><link linkend="_struct_dd_node">DdNode</link> * <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1a7439d48e29f497c5a1606dec0288ee40">AND</link> (<link linkend="_struct_dd_node">DdNode</link> *lhs, <link linkend="_struct_dd_node">DdNode</link> *rhs)</para>

<para>Operations on conditions. </para>
</listitem>
            <listitem><para><link linkend="_struct_dd_node">DdNode</link> * <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1adfe12ffee44c87abc5b10ab184454bc4">OR</link> (<link linkend="_struct_dd_node">DdNode</link> *lhs, <link linkend="_struct_dd_node">DdNode</link> *rhs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a3aa554033b2b7e1719788d04759c0950"/><link linkend="_struct_dd_node">DdNode</link> * <emphasis role="strong">NEG</emphasis> (<link linkend="_struct_dd_node">DdNode</link> *lhs)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1a9cffa74f31d76365d41b6d00ae6bbc62">ddClearFlag</link> (<link linkend="_struct_dd_node">DdNode</link> *f) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a08167ddc2ccf9bb529a08e4453cfbf6c"/>void <emphasis role="strong">BddSupportStep</emphasis> (<link linkend="_struct_dd_node">DdNode</link> *f, NodeBS &amp;support) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a39d7745293688c601e10c2716288b394"/>void <emphasis role="strong">BddSupport</emphasis> (<link linkend="_struct_dd_node">DdNode</link> *f, NodeBS &amp;support) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1a21c4f286baeca3bfa1422955d13382c8">dump</link> (<link linkend="_struct_dd_node">DdNode</link> *lhs, <link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;O)</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1abb0a08b6b2e0c599fd3d9a57ba751943">dumpStr</link> (<link linkend="_struct_dd_node">DdNode</link> *lhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a80f0e4e6fadb3bf45a7cb5ef13dfd62d"/>void <link linkend="_class_s_v_f_1_1_bdd_cond_manager_1a80f0e4e6fadb3bf45a7cb5ef13dfd62d">printMinterms</link> (<link linkend="_struct_dd_node">DdNode</link> *d)</para>

<para>print minterms and debug information for the Ddnode </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a88f1985d938e0eeadfeae0cb37540179"/>void <emphasis role="strong">printDbg</emphasis> (<link linkend="_struct_dd_node">DdNode</link> *d)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Using Cudd as conditions. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a7439d48e29f497c5a1606dec0288ee40"/>    <section>
    <title>AND()</title>
<indexterm><primary>AND</primary><secondary>SVF::BddCondManager</secondary></indexterm>
<indexterm><primary>SVF::BddCondManager</primary><secondary>AND</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">DdNode</link> * BddCondManager::AND (<link linkend="_struct_dd_node">DdNode</link> * lhs, <link linkend="_struct_dd_node">DdNode</link> * rhs)</computeroutput></para><para>

<para>Operations on conditions. </para>
</para>

<para>use Cudd_bddAndLimit interface to avoid bdds blow up </para>

<para>drop the rhs condition</para>
    </section><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a9cffa74f31d76365d41b6d00ae6bbc62"/>    <section>
    <title>ddClearFlag()</title>
<indexterm><primary>ddClearFlag</primary><secondary>SVF::BddCondManager</secondary></indexterm>
<indexterm><primary>SVF::BddCondManager</primary><secondary>ddClearFlag</secondary></indexterm>
<para><computeroutput>void BddCondManager::ddClearFlag (<link linkend="_struct_dd_node">DdNode</link> * f) const</computeroutput></para>
<para>Utilities for dumping conditions. These methods use global functions from CUDD package and they can be removed outside this class scope to be used by others. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1a21c4f286baeca3bfa1422955d13382c8"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>SVF::BddCondManager</secondary></indexterm>
<indexterm><primary>SVF::BddCondManager</primary><secondary>dump</secondary></indexterm>
<para><computeroutput>void BddCondManager::dump (<link linkend="_struct_dd_node">DdNode</link> * lhs, <link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; O)</computeroutput></para>
<para>Dump BDD </para>
    </section><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1abb0a08b6b2e0c599fd3d9a57ba751943"/>    <section>
    <title>dumpStr()</title>
<indexterm><primary>dumpStr</primary><secondary>SVF::BddCondManager</secondary></indexterm>
<indexterm><primary>SVF::BddCondManager</primary><secondary>dumpStr</secondary></indexterm>
<para><computeroutput>std::string BddCondManager::dumpStr (<link linkend="_struct_dd_node">DdNode</link> * lhs) const</computeroutput></para>
<para>Dump BDD </para>
    </section><anchor xml:id="_class_s_v_f_1_1_bdd_cond_manager_1adfe12ffee44c87abc5b10ab184454bc4"/>    <section>
    <title>OR()</title>
<indexterm><primary>OR</primary><secondary>SVF::BddCondManager</secondary></indexterm>
<indexterm><primary>SVF::BddCondManager</primary><secondary>OR</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">DdNode</link> * BddCondManager::OR (<link linkend="_struct_dd_node">DdNode</link> * lhs, <link linkend="_struct_dd_node">DdNode</link> * rhs)</computeroutput></para>
<para>Use Cudd_bddOrLimit interface to avoid bdds blow up </para>

<para>drop the two conditions here</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Util/Conditions.hlib/Util/Conditions.cpp</section>
</section>
