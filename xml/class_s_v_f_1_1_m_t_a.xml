<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_m_t_a" kind="class" language="C++" prot="public">
    <compoundname>SVF::MTA</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ModulePass</basecompoundref>
    <includes refid="_m_t_a_8h" local="no">MTA.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_1a80356495b6c45bac59dc15fd7a99730b" prot="public" static="no">
        <type>Set&lt; const LoadInst * &gt;</type>
        <definition>typedef Set&lt;const LoadInst*&gt; SVF::MTA::LoadSet</definition>
        <argsstring></argsstring>
        <name>LoadSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="34" column="17" bodyfile="include/MTA/MTA.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_1a891e56104b9c2daa8b052e3821e85b9b" prot="public" static="no">
        <type>Set&lt; const StoreInst * &gt;</type>
        <definition>typedef Set&lt;const StoreInst*&gt; SVF::MTA::StoreSet</definition>
        <argsstring></argsstring>
        <name>StoreSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="35" column="17" bodyfile="include/MTA/MTA.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_1a2c92809f1395aa064c80aef0c3e4c944" prot="public" static="no">
        <type>Map&lt; const Function *, ScalarEvolution * &gt;</type>
        <definition>typedef Map&lt;const Function*, ScalarEvolution*&gt; SVF::MTA::FunToSEMap</definition>
        <argsstring></argsstring>
        <name>FunToSEMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="36" column="17" bodyfile="include/MTA/MTA.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_1a2473be56f2861ad101f65a65e02dff8d" prot="public" static="no">
        <type>Map&lt; const Function *, LoopInfo * &gt;</type>
        <definition>typedef Map&lt;const Function*, LoopInfo*&gt; SVF::MTA::FunToLoopInfoMap</definition>
        <argsstring></argsstring>
        <name>FunToLoopInfoMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="37" column="17" bodyfile="include/MTA/MTA.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a5ce0b3247bd412e5267a42be0646471b" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char MTA::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Pass ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="40" column="17" bodyfile="include/MTA/MTA.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a3dd09dcdcf58ae8ee1745634cefbb8aa" prot="public" static="yes" mutable="no">
        <type>ModulePass *</type>
        <definition>ModulePass * MTA::modulePass</definition>
        <argsstring></argsstring>
        <name>modulePass</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="42" column="23" bodyfile="include/MTA/MTA.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a308ca0fa99b3c95f3e62b27522b6aeaa" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::MTA::tcg</definition>
        <argsstring></argsstring>
        <name>tcg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="91" column="21" bodyfile="include/MTA/MTA.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a9c9a42fb8a8ada910cdb9a8fb55d7c36" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
        <definition>TCT* SVF::MTA::tct</definition>
        <argsstring></argsstring>
        <name>tct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="92" column="9" bodyfile="include/MTA/MTA.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a8c0f7a777b7fd6b388678be63190ee59" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_m_t_a_stat" kindref="compound">MTAStat</ref> *</type>
        <definition>MTAStat* SVF::MTA::stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="93" column="13" bodyfile="include/MTA/MTA.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a7a879943a817d0283971b5588cfa83d5" prot="private" static="yes" mutable="no">
        <type>FunToSEMap</type>
        <definition>MTA::FunToSEMap MTA::func2ScevMap</definition>
        <argsstring></argsstring>
        <name>func2ScevMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="94" column="23" bodyfile="include/MTA/MTA.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_1a427ebcf1f00b601087e5b098c18cc29a" prot="private" static="yes" mutable="no">
        <type>FunToLoopInfoMap</type>
        <definition>MTA::FunToLoopInfoMap MTA::func2LoopInfoMap</definition>
        <argsstring></argsstring>
        <name>func2LoopInfoMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="95" column="29" bodyfile="include/MTA/MTA.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1ab25d605ed6040a9ad6ed6fcec4e8d338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MTA::MTA</definition>
        <argsstring>()</argsstring>
        <name>MTA</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="45" column="5" bodyfile="lib/MTA/MTA.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a77b2f1d3de217219ea9346b5bbce4b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>MTA::~MTA</definition>
        <argsstring>()</argsstring>
        <name>~MTA</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="48" column="13" bodyfile="lib/MTA/MTA.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a9c4b9eb2c04de305a30114019c3b1dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MTA::runOnModule</definition>
        <argsstring>(Module &amp;module)</argsstring>
        <name>runOnModule</name>
        <param>
          <type>Module &amp;</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>We start the pass here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="53" column="18" bodyfile="lib/MTA/MTA.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a32f6beffb47e5c2ac86f5c3b8a1bd9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MTA::runOnModule</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>runOnModule</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>We start the pass here. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform data race detection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="55" column="18" bodyfile="lib/MTA/MTA.cpp" bodystart="55" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a4f2f17975aabd2c4b9a3b2fbf3b1a487" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> *</type>
        <definition>MHP * MTA::computeMHP</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>computeMHP</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Compute <ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="57" column="17" bodyfile="lib/MTA/MTA.cpp" bodystart="120" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a0f4805f195ebd42d81127b1a79333c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref> *</type>
        <definition>LockAnalysis * MTA::computeLocksets</definition>
        <argsstring>(TCT *tct)</argsstring>
        <name>computeLocksets</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
          <declname>tct</declname>
        </param>
        <briefdescription>
<para>Compute locksets. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute lock sets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="59" column="26" bodyfile="lib/MTA/MTA.cpp" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a5adab2e3b400190ecc9fa2a158203cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::MTA::detect</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>detect</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Perform detection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="61" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a45ca7724c876baabef88e6d4e32633d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>StringRef</type>
        <definition>virtual StringRef SVF::MTA::getPassName</definition>
        <argsstring>() const</argsstring>
        <name>getPassName</name>
        <briefdescription>
<para>Pass name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="64" column="23" bodyfile="include/MTA/MTA.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a2ced024c7e0785d3d78d19c3c52d0f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::MTA::dump</definition>
        <argsstring>(Module &amp;module, MHP *mhp, LockAnalysis *lsa)</argsstring>
        <name>dump</name>
        <param>
          <type>Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> *</type>
          <declname>mhp</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref> *</type>
          <declname>lsa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="69" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1ab059d92eaed415d6d0ffdd655a633826" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::MTA::getAnalysisUsage</definition>
        <argsstring>(AnalysisUsage &amp;au) const</argsstring>
        <name>getAnalysisUsage</name>
        <param>
          <type>AnalysisUsage &amp;</type>
          <declname>au</declname>
        </param>
        <briefdescription>
<para>Get analysis usage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>do not intend to change the IR in this pass,</para>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="72" column="25" bodyfile="include/MTA/MTA.h" bodystart="72" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_1a7cb2fd230ed5839b59f650cc87de192e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ScalarEvolution *</type>
        <definition>static ScalarEvolution* SVF::MTA::getSE</definition>
        <argsstring>(const Function *F)</argsstring>
        <name>getSE</name>
        <param>
          <type>const Function *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/MTA.h" line="80" column="35" bodyfile="include/MTA/MTA.h" bodystart="80" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base data race detector </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::MTA</label>
        <link refid="class_s_v_f_1_1_m_t_a"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ModulePass</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::MTA</label>
        <link refid="class_s_v_f_1_1_m_t_a"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ModulePass</label>
      </node>
    </collaborationgraph>
    <location file="include/MTA/MTA.h" line="30" column="1" bodyfile="include/MTA/MTA.h" bodystart="31" bodyend="96"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_m_t_a_1a0f4805f195ebd42d81127b1a79333c75" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>computeLocksets</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a4f2f17975aabd2c4b9a3b2fbf3b1a487" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>computeMHP</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a5adab2e3b400190ecc9fa2a158203cb3" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>detect</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a2ced024c7e0785d3d78d19c3c52d0f75" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a427ebcf1f00b601087e5b098c18cc29a" prot="private" virt="non-virtual"><scope>SVF::MTA</scope><name>func2LoopInfoMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a7a879943a817d0283971b5588cfa83d5" prot="private" virt="non-virtual"><scope>SVF::MTA</scope><name>func2ScevMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a2473be56f2861ad101f65a65e02dff8d" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>FunToLoopInfoMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a2c92809f1395aa064c80aef0c3e4c944" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>FunToSEMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1ab059d92eaed415d6d0ffdd655a633826" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>getAnalysisUsage</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a45ca7724c876baabef88e6d4e32633d0" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>getPassName</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a7cb2fd230ed5839b59f650cc87de192e" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>getSE</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a5ce0b3247bd412e5267a42be0646471b" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>ID</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a80356495b6c45bac59dc15fd7a99730b" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>LoadSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a3dd09dcdcf58ae8ee1745634cefbb8aa" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>modulePass</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1ab25d605ed6040a9ad6ed6fcec4e8d338" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>MTA</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a9c4b9eb2c04de305a30114019c3b1dae" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>runOnModule</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a32f6beffb47e5c2ac86f5c3b8a1bd9ba" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>runOnModule</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a8c0f7a777b7fd6b388678be63190ee59" prot="private" virt="non-virtual"><scope>SVF::MTA</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a891e56104b9c2daa8b052e3821e85b9b" prot="public" virt="non-virtual"><scope>SVF::MTA</scope><name>StoreSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a308ca0fa99b3c95f3e62b27522b6aeaa" prot="private" virt="non-virtual"><scope>SVF::MTA</scope><name>tcg</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a9c9a42fb8a8ada910cdb9a8fb55d7c36" prot="private" virt="non-virtual"><scope>SVF::MTA</scope><name>tct</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_1a77b2f1d3de217219ea9346b5bbce4b5f" prot="public" virt="virtual"><scope>SVF::MTA</scope><name>~MTA</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
