<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="st_8h" kind="file" language="C++">
    <compoundname>st.h</compoundname>
    <includedby refid="cudd_int_8h" local="yes">include/CUDD/cuddInt.h</includedby>
    <includedby refid="st_8c" local="yes">lib/CUDD/st.c</includedby>
    <invincdepgraph>
      <node id="28">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="46">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/Util/CFLSolver.h</label>
        <link refid="_c_f_l_solver_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="1">
        <label>include/CUDD/st.h</label>
        <link refid="st_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="2">
        <label>include/CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="37">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="25">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="15">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="14">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="41">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="42">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="17">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="26">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="18">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="43">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="30">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="34">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>include/Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="36">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="45">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structst__table__entry" prot="public">st_table_entry</innerclass>
    <innerclass refid="structst__table" prot="public">st_table</innerclass>
    <innerclass refid="structst__generator" prot="public">st_generator</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="st_8h_1a4f884be75490db2c92e409a0209fdbcb" prot="public" static="no">
        <name>ST_DEFAULT_MAX_DENSITY</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CHeaderFile*****************************************************************</para>
<para>FileName [<ref refid="st_8h_source" kindref="compound">st.h</ref>]</para>
<para>PackageName [st]</para>
<para>Synopsis [Symbol table package.]</para>
<para>Description [The st library provides functions to create, maintain, and query symbol tables.]</para>
<para>SeeAlso []</para>
<para>Author []</para>
<para>Copyright []</para>
<para>Revision [<simplesect kind="rcs"><title>Id</title><para><ref refid="st_8h_source" kindref="compound">st.h</ref>,v 1.10 2004/01/02 07:40:31 fabio Exp fabio </para>
</simplesect>
] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="37" column="9" bodyfile="include/CUDD/st.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a311df13f4d458054df7d87ca22782ab2" prot="public" static="no">
        <name>ST_DEFAULT_INIT_TABLE_SIZE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="38" column="9" bodyfile="include/CUDD/st.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a05bb01984da349eeeb8eed0ce43c38a5" prot="public" static="no">
        <name>ST_DEFAULT_GROW_FACTOR</name>
        <initializer>2.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="39" column="9" bodyfile="include/CUDD/st.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a933aaa48b6a156a000befde073a24e4c" prot="public" static="no">
        <name>ST_DEFAULT_REORDER_FLAG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="40" column="9" bodyfile="include/CUDD/st.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a1276d6ae80c20ae2ec082db7c502ef75" prot="public" static="no">
        <name>ST_OUT_OF_MEM</name>
        <initializer>-10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="41" column="9" bodyfile="include/CUDD/st.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a3e18b4a4f91b4188aa376a15ca372b9c" prot="public" static="no">
        <name>st_is_member</name>
        <param><defname>table</defname></param>
        <param><defname>key</defname></param>
        <initializer>st_lookup(table,key,(char **) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Checks whethere <lsquo/>key<rsquo/> is in <lsquo/>table<rsquo/>.]</para>
<para>Description [Returns 1 if there is an entry under <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>, 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_lookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="107" column="9" bodyfile="include/CUDD/st.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a140c61cab2720a1fa326c92be40c62d8" prot="public" static="no">
        <name>st_count</name>
        <param><defname>table</defname></param>
        <initializer>((table)-&gt;num_entries)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Returns the number of entries in the table <lsquo/>table<rsquo/>.]</para>
<para>Description [Returns the number of entries in the table <lsquo/>table<rsquo/>.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="121" column="9" bodyfile="include/CUDD/st.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1aea51027ca2b7197709990fb086e12c2c" prot="public" static="no">
        <name>st_foreach_item</name>
        <param><defname>table</defname></param>
        <param><defname>gen</defname></param>
        <param><defname>key</defname></param>
        <param><defname>value</defname></param>
        <initializer>    for(gen=st_init_gen(table); st_gen(gen,key,value) || (st_free_gen(gen),0);)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Iteration macro.]</para>
<para>Description [An iteration macro which loops over all the entries in <lsquo/>table<rsquo/>, setting <lsquo/>key<rsquo/> to point to the key and <lsquo/>value<rsquo/> to the associated value (if it is not nil). <lsquo/>gen<rsquo/> is a generator variable used internally. Sample usage: <preformatted>
    char *key, *value;
</preformatted> <preformatted>
  <ref refid="structst__generator" kindref="compound">st_generator</ref> *gen;
</preformatted> <preformatted>

  st_foreach_item(table, gen, &amp;key, &amp;value) {
</preformatted> <preformatted>
      process_item(value);
</preformatted> <preformatted>
  }
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_foreach_item_int st_foreach] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="155" column="9" bodyfile="include/CUDD/st.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8h_1a437227772bc9c4c0ec636f5723654a4c" prot="public" static="no">
        <name>st_foreach_item_int</name>
        <param><defname>table</defname></param>
        <param><defname>gen</defname></param>
        <param><defname>key</defname></param>
        <param><defname>value</defname></param>
        <initializer>    for(gen=st_init_gen(table); st_gen_int(gen,key,value) || (st_free_gen(gen),0);)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Iteration macro.]</para>
<para>Description [An iteration macro which loops over all the entries in <lsquo/>table<rsquo/>, setting <lsquo/>key<rsquo/> to point to the key and <lsquo/>value<rsquo/> to the associated value (if it is not nil). <lsquo/>value<rsquo/> is assumed to be a pointer to an integer. <lsquo/>gen<rsquo/> is a generator variable used internally. Sample usage: <preformatted>
    char *key;
</preformatted> <preformatted>
  int value;
</preformatted> <preformatted>
  <ref refid="structst__generator" kindref="compound">st_generator</ref> *gen;
</preformatted> <preformatted>

  st_foreach_item_int(table, gen, &amp;key, &amp;value) {
</preformatted> <preformatted>
      process_item(value);
</preformatted> <preformatted>
  }
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_foreach_item st_foreach] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="194" column="9" bodyfile="include/CUDD/st.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="st_8h_1a0c6a172fd99de7928916e65034ed8b1f" prot="public" static="no" strong="no">
        <type></type>
        <name>st_retval</name>
        <enumvalue id="st_8h_1a0c6a172fd99de7928916e65034ed8b1fac99fc55c7f355bf9071739a4bc2ea139" prot="public">
          <name>ST_CONTINUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="st_8h_1a0c6a172fd99de7928916e65034ed8b1fa04b939c166d4baa471909eb224d5fed3" prot="public">
          <name>ST_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="st_8h_1a0c6a172fd99de7928916e65034ed8b1fa64ab176f8e8b9719bcd9b5297ccda9c7" prot="public">
          <name>ST_DELETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="78" column="1" bodyfile="include/CUDD/st.h" bodystart="78" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="st_8h_1a4bafc81982b39c3f3fa20e5f7b3dbbf5" prot="public" static="no">
        <type>struct <ref refid="structst__table__entry" kindref="compound">st_table_entry</ref></type>
        <definition>typedef struct st_table_entry st_table_entry</definition>
        <argsstring></argsstring>
        <name>st_table_entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="1" column="0" bodyfile="include/CUDD/st.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="st_8h_1a97b5395afafae465d6ada75aae48079d" prot="public" static="no">
        <type>struct <ref refid="structst__table" kindref="compound">st_table</ref></type>
        <definition>typedef struct st_table st_table</definition>
        <argsstring></argsstring>
        <name>st_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="1" column="0" bodyfile="include/CUDD/st.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="st_8h_1a9247f69aea004a8ea6a07cd22bdae32d" prot="public" static="no">
        <type>struct <ref refid="structst__generator" kindref="compound">st_generator</ref></type>
        <definition>typedef struct st_generator st_generator</definition>
        <argsstring></argsstring>
        <name>st_generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="1" column="0" bodyfile="include/CUDD/st.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="st_8h_1afcc2f06d7b3802b2710eec97355f968d" prot="public" static="no">
        <type>enum st_retval(*</type>
        <definition>typedef enum st_retval(* ST_PFSR) (char *, char *, char *)</definition>
        <argsstring>)(char *, char *, char *)</argsstring>
        <name>ST_PFSR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="1" column="0" bodyfile="include/CUDD/st.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="st_8h_1afb91ce58b9010645ed1cdf1ed2b76b03" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ST_PFICPCP) (const char *, const char *)</definition>
        <argsstring>)(const char *, const char *)</argsstring>
        <name>ST_PFICPCP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="82" column="9" bodyfile="include/CUDD/st.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="st_8h_1a4689d232930698db6d2432922e094539" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ST_PFICPI) (char *, int)</definition>
        <argsstring>)(char *, int)</argsstring>
        <name>ST_PFICPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="84" column="9" bodyfile="include/CUDD/st.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="st_8h_1a97536a2badd1d502b63ca4d9e550fb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_init_table_with_params</definition>
        <argsstring>(ST_PFICPCP, ST_PFICPI, int, int, double, int)</argsstring>
        <name>st_init_table_with_params</name>
        <param>
          <type>ST_PFICPCP</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>ST_PFICPI</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>density</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grow_factor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reorder_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart</para>
<para>Function********************************************************************</para>
<para>Synopsis [Create a table with given parameters.]</para>
<para>Description [The full blown table initializer. compare and hash are the same as in st_init_table. density is the largest the average number of entries per hash bin there should be before the table is grown. grow_factor is the factor the table is grown by when it becomes too full. size is the initial number of bins to be allocated for the hash table. If reorder_flag is non-zero, then every time an entry is found, it is moved to the top of the chain.</para>
<para>st_init_table(compare, hash) is equivelent to <preformatted>
st_init_table_with_params(compare, hash, ST_DEFAULT_INIT_TABLE_SIZE,
            ST_DEFAULT_MAX_DENSITY,
            ST_DEFAULT_GROW_FACTOR,
            ST_DEFAULT_REORDER_FLAG);
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_free_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="203" column="17" bodyfile="lib/CUDD/st.c" bodystart="199" bodyend="234" declfile="include/CUDD/st.h" declline="203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a410a87c90bd4719f24fecc904b9426ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_init_table</definition>
        <argsstring>(ST_PFICPCP, ST_PFICPI)</argsstring>
        <name>st_init_table</name>
        <param>
          <type>ST_PFICPCP</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>ST_PFICPI</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Create and initialize a table.]</para>
<para>Description [Create and initialize a table with the comparison function compare_fn and hash function hash_fn. compare_fn is <preformatted>
  int compare_fn(const char *key1, const char *key2)
</preformatted> It returns &lt;,=,&gt; 0 depending on whether key1 &lt;,=,&gt; key2 by some measure.</para>
<para>hash_fn is <preformatted>
  int hash_fn(char *key, int modulus)
</preformatted> It returns a integer between 0 and modulus-1 such that if compare_fn(key1,key2) == 0 then hash_fn(key1) == hash_fn(key2).</para>
<para>There are five predefined hash and comparison functions in st. For keys as numbers: <preformatted>
   st_numhash(key, modulus) { return (unsigned int) key % modulus; }
</preformatted> <preformatted>
   st_numcmp(x,y) { return (int) x - (int) y; }
</preformatted> For keys as pointers: <preformatted>
   st_ptrhash(key, modulus) { return ((unsigned int) key/4) % modulus }
</preformatted> <preformatted>
   st_ptrcmp(x,y) { return (int) x - (int) y; }
</preformatted> For keys as strings: <preformatted>
       st_strhash(x,y) - a reasonable hashing function for strings
</preformatted> <preformatted>
   strcmp(x,y) - the standard library function
</preformatted> It is recommended to use these particular functions if they fit your needs, since st will recognize certain of them and run more quickly because of it.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table_with_params st_free_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="204" column="17" bodyfile="lib/CUDD/st.c" bodystart="163" bodyend="170" declfile="include/CUDD/st.h" declline="204" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1acb004847ef312373d65bfb0d1a21c5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void st_free_table</definition>
        <argsstring>(st_table *)</argsstring>
        <name>st_free_table</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Free a table.]</para>
<para>Description [Any internal storage associated with table is freed. It is the user&apos;s responsibility to free any storage associated with the pointers he placed in the table (by perhaps using st_foreach).]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_init_table_with_params] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="205" column="13" bodyfile="lib/CUDD/st.c" bodystart="252" bodyend="268" declfile="include/CUDD/st.h" declline="205" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a0ed63fd0cb21b0a1fe502e84aa5563ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_lookup</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_lookup</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If an entry is found, 1 is returned and if <lsquo/>value<rsquo/> is not nil, the variable it points to is set to the associated value. If an entry is not found, 0 is returned and the variable pointed by value is unchanged.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_lookup_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="206" column="12" bodyfile="lib/CUDD/st.c" bodystart="286" bodyend="304" declfile="include/CUDD/st.h" declline="206" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1ab10245506c3e5d053c75a902ec62a074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_lookup_int</definition>
        <argsstring>(st_table *, void *, int *)</argsstring>
        <name>st_lookup_int</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If an entry is found, 1 is returned and if <lsquo/>value<rsquo/> is not nil, the variable it points to is set to the associated integer value. If an entry is not found, 0 is return and the variable pointed by <lsquo/>value<rsquo/> is unchanged.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_lookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="207" column="12" bodyfile="lib/CUDD/st.c" bodystart="322" bodyend="340" declfile="include/CUDD/st.h" declline="207" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1aca243196fa4ab979ccdd33888fdfcacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_insert</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_insert</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Insert value in table under the key &apos;key&apos;.]</para>
<para>Description [Insert value in table under the key &apos;key&apos;. Returns 1 if there was an entry already under the key; 0 if there was no entry under the key and insertion was successful; ST_OUT_OF_MEM otherwise. In either of the first two cases the new value is added.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="208" column="12" bodyfile="lib/CUDD/st.c" bodystart="358" bodyend="390" declfile="include/CUDD/st.h" declline="208" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a5daa0595c5420a09332832a12d165489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_add_direct</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_add_direct</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Place &apos;value&apos; in &apos;table&apos; under the key &apos;key&apos;.]</para>
<para>Description [Place &apos;value&apos; in &apos;table&apos; under the key &apos;key&apos;. This is done without checking if &apos;key&apos; is in &apos;table&apos; already. This should only be used if you are sure there is not already an entry for &apos;key&apos;, since it is undefined which entry you would later get from st_lookup or st_find_or_add. Returns 1 if successful; ST_OUT_OF_MEM otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="209" column="12" bodyfile="lib/CUDD/st.c" bodystart="410" bodyend="433" declfile="include/CUDD/st.h" declline="209" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1adee1edfccfcb38acf26e5ec65d2221f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_find_or_add</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_find_or_add</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If not found, create an entry. In either case set slot to point to the field in the entry where the value is stored. The value associated with <lsquo/>key<rsquo/> may then be changed by accessing directly through slot. Returns 1 if an entry already existed, 0 if it did not exist and creation was successful; ST_OUT_OF_MEM otherwise. As an example: <preformatted>
    char **slot;
</preformatted> <preformatted>
    char *key;
</preformatted> <preformatted>
    char *value = (char *) item_ptr &lt;-- ptr to a malloc&apos;d structure
</preformatted> <preformatted>
    if (st_find_or_add(table, key, &amp;slot) == 1) {
</preformatted> <preformatted>
   FREE(*slot); &lt;-- free the old value of the record
</preformatted> <preformatted>
    }
</preformatted> <preformatted>
    *slot = value;  &lt;-- attach the new value to the record
</preformatted> This replaces the equivelent code: <preformatted>
    if (st_lookup(table, key, &amp;ovalue) == 1) {
</preformatted> <preformatted>
       FREE(ovalue);
</preformatted> <preformatted>
    }
</preformatted> <preformatted>
    st_insert(table, key, value);
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_find] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="210" column="12" bodyfile="lib/CUDD/st.c" bodystart="488" bodyend="520" declfile="include/CUDD/st.h" declline="210" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a81983e44259bcff42813efc0e2e4bfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_find</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_find</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Like st_find_or_add, but does not create an entry if one is not found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_find_or_add] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="211" column="12" bodyfile="lib/CUDD/st.c" bodystart="536" bodyend="554" declfile="include/CUDD/st.h" declline="211" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a7dbfd8e3a251a09c8543b301bcef0cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_copy</definition>
        <argsstring>(st_table *)</argsstring>
        <name>st_copy</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>old_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Return a copy of old_table and all its members.]</para>
<para>Description [Return a copy of old_table and all its members. (<ref refid="structst__table" kindref="compound">st_table</ref> *) 0 is returned if there was insufficient memory to do the copy.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="212" column="17" bodyfile="lib/CUDD/st.c" bodystart="571" bodyend="614" declfile="include/CUDD/st.h" declline="212" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1aeac35fa92942958472a69117777ec90d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_delete</definition>
        <argsstring>(st_table *, void *, void *)</argsstring>
        <name>st_delete</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keyp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>.]</para>
<para>Description [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>. If the entry is found, 1 is returned, the variable pointed by <lsquo/>keyp<rsquo/> is set to the actual key and the variable pointed by <lsquo/>value<rsquo/> is set to the corresponding entry. (This allows the freeing of the associated storage.) If the entry is not found, then 0 is returned and nothing is changed.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_delete_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="213" column="12" bodyfile="lib/CUDD/st.c" bodystart="634" bodyend="655" declfile="include/CUDD/st.h" declline="213" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a3c692fb11b96b8e7a9b1211e53009fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_delete_int</definition>
        <argsstring>(st_table *, void *, int *)</argsstring>
        <name>st_delete_int</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keyp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>.]</para>
<para>Description [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>. <lsquo/>value<rsquo/> must be a pointer to an integer. If the entry is found, 1 is returned, the variable pointed by <lsquo/>keyp<rsquo/> is set to the actual key and the variable pointed by <lsquo/>value<rsquo/> is set to the corresponding entry. (This allows the freeing of the associated storage.) If the entry is not found, then 0 is returned and nothing is changed.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_delete] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="214" column="12" bodyfile="lib/CUDD/st.c" bodystart="675" bodyend="696" declfile="include/CUDD/st.h" declline="214" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a5341675ff925b7a670ab4705735ceb38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_foreach</definition>
        <argsstring>(st_table *, ST_PFSR, char *)</argsstring>
        <name>st_foreach</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ST_PFSR</type>
          <declname>func</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Iterates over the elements of a table.]</para>
<para>Description [For each (key, value) record in <lsquo/>table<rsquo/>, st_foreach call func with the arguments <preformatted>
    (*func)(key, value, arg)
</preformatted> If func returns ST_CONTINUE, st_foreach continues processing entries. If func returns ST_STOP, st_foreach stops processing and returns immediately. If func returns ST_DELETE, then the entry is deleted from the symbol table and st_foreach continues. In the case of ST_DELETE, it is func&apos;s responsibility to free the key and value, if necessary.</para>
<para>The routine returns 1 if all items in the table were generated and 0 if the generation sequence was aborted using ST_STOP. The order in which the records are visited will be seemingly random.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_foreach_item st_foreach_item_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="215" column="12" bodyfile="lib/CUDD/st.c" bodystart="725" bodyend="751" declfile="include/CUDD/st.h" declline="215" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a52c6aa6a32d8eac4592e78dda9d74dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_strhash</definition>
        <argsstring>(char *, int)</argsstring>
        <name>st_strhash</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modulus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [String hash function.]</para>
<para>Description [String hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="216" column="12" bodyfile="lib/CUDD/st.c" bodystart="766" bodyend="777" declfile="include/CUDD/st.h" declline="216" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a487317ef8c55ab34fb58ddfe47163b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_numhash</definition>
        <argsstring>(char *, int)</argsstring>
        <name>st_numhash</name>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Number hash function.]</para>
<para>Description [Integer number hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_numcmp] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="217" column="12" bodyfile="lib/CUDD/st.c" bodystart="792" bodyend="796" declfile="include/CUDD/st.h" declline="217" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a144fc385b211526daab6da9ad5a854cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_ptrhash</definition>
        <argsstring>(char *, int)</argsstring>
        <name>st_ptrhash</name>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Pointer hash function.]</para>
<para>Description [Pointer hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_ptrcmp] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="218" column="12" bodyfile="lib/CUDD/st.c" bodystart="811" bodyend="815" declfile="include/CUDD/st.h" declline="218" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a65b35768bcf5b6f173b063b441a493db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_numcmp</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>st_numcmp</name>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Number comparison function.]</para>
<para>Description [integer number comparison function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_numhash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="219" column="12" bodyfile="lib/CUDD/st.c" bodystart="830" bodyend="834" declfile="include/CUDD/st.h" declline="219" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a6073f524b9f0ec98b2b3d3e59e4e3fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_ptrcmp</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>st_ptrcmp</name>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Pointer comparison function.]</para>
<para>Description [Pointer comparison function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_ptrhash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="220" column="12" bodyfile="lib/CUDD/st.c" bodystart="849" bodyend="853" declfile="include/CUDD/st.h" declline="220" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a0dcd656f435c872a9ccddf65061bcb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
        <definition>st_generator* st_init_gen</definition>
        <argsstring>(st_table *)</argsstring>
        <name>st_init_gen</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes a generator.]</para>
<para>Description [Returns a generator handle which when used with st_gen() will progressively return each (key, value) record in <lsquo/>table<rsquo/>.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_free_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="221" column="21" bodyfile="lib/CUDD/st.c" bodystart="870" bodyend="883" declfile="include/CUDD/st.h" declline="221" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1aee509dc4913f3a3a18dbcd8417856ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_gen</definition>
        <argsstring>(st_generator *, void *, void *)</argsstring>
        <name>st_gen</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [returns the next (key, value) pair in the generation sequence. ]</para>
<para>Description [Given a generator returned by st_init_gen(), this routine returns the next (key, value) pair in the generation sequence. The pointer <lsquo/>value_p<rsquo/> can be zero which means no value will be returned. When there are no more items in the generation sequence, the routine returns 0.</para>
<para>While using a generation sequence, deleting any (key, value) pair other than the one just generated may cause a fatal error when st_gen() is called later in the sequence and is therefore not recommended.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_gen_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="222" column="12" bodyfile="lib/CUDD/st.c" bodystart="908" bodyend="932" declfile="include/CUDD/st.h" declline="222" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a2aa2db047a033b23dcd8d0b273b5e83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_gen_int</definition>
        <argsstring>(st_generator *, void *, int *)</argsstring>
        <name>st_gen_int</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the next (key, value) pair in the generation sequence.]</para>
<para>Description [Given a generator returned by st_init_gen(), this routine returns the next (key, value) pair in the generation sequence. <lsquo/>value_p<rsquo/> must be a pointer to an integer. The pointer <lsquo/>value_p<rsquo/> can be zero which means no value will be returned. When there are no more items in the generation sequence, the routine returns 0.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="223" column="12" bodyfile="lib/CUDD/st.c" bodystart="953" bodyend="977" declfile="include/CUDD/st.h" declline="223" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8h_1a819c7d22d51c5f7e26fc1fc7038b0daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void st_free_gen</definition>
        <argsstring>(st_generator *)</argsstring>
        <name>st_free_gen</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reclaims the resources associated with <lsquo/>gen<rsquo/>.]</para>
<para>Description [After generating all items in a generation sequence, this routine must be called to reclaim the resources associated with <lsquo/>gen<rsquo/>.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/st.h" line="224" column="13" bodyfile="lib/CUDD/st.c" bodystart="994" bodyend="998" declfile="include/CUDD/st.h" declline="224" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ST_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Nested<sp/>includes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constant<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_DEFAULT_MAX_DENSITY<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_DEFAULT_INIT_TABLE_SIZE<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_DEFAULT_GROW_FACTOR<sp/>2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_DEFAULT_REORDER_FLAG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_OUT_OF_MEM<sp/>-10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stucture<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>;</highlight></codeline>
<codeline lineno="53" refid="structst__table__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*record;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*next;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__table" kindref="compound">st_table</ref><sp/><ref refid="structst__table" kindref="compound">st_table</ref>;</highlight></codeline>
<codeline lineno="60" refid="structst__table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__table" kindref="compound">st_table</ref><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*compare)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*hash)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bins;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_entries;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_density;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reorder_flag;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>grow_factor;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>**bins;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__generator" kindref="compound">st_generator</ref><sp/><ref refid="structst__generator" kindref="compound">st_generator</ref>;</highlight></codeline>
<codeline lineno="72" refid="structst__generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>st_retval<sp/>{ST_CONTINUE,<sp/>ST_STOP,<sp/>ST_DELETE};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>st_retval<sp/>(*ST_PFSR)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ST_PFICPCP)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);<sp/></highlight><highlight class="comment">/*<sp/>type<sp/>for<sp/>comparison<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ST_PFICPI)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>type<sp/>for<sp/>hash<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Variable<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_is_member(table,key)<sp/>st_lookup(table,key,(char<sp/>**)<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_count(table)<sp/>((table)-&gt;num_entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_foreach_item(table,<sp/>gen,<sp/>key,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for(gen=st_init_gen(table);<sp/>st_gen(gen,key,value)<sp/>||<sp/>(st_free_gen(gen),0);)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_foreach_item_int(table,<sp/>gen,<sp/>key,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for(gen=st_init_gen(table);<sp/>st_gen_int(gen,key,value)<sp/>||<sp/>(st_free_gen(gen),0);)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*st_init_table_with_params<sp/>(ST_PFICPCP,<sp/>ST_PFICPI,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*st_init_table<sp/>(ST_PFICPCP,<sp/>ST_PFICPI);<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>st_free_table<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_lookup<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_lookup_int<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_insert<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_add_direct<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_find_or_add<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_find<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*st_copy<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_delete<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_delete_int<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_foreach<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*,<sp/>ST_PFSR,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_strhash<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_numhash<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_ptrhash<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_numcmp<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_ptrcmp<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*st_init_gen<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_gen<sp/>(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_gen_int<sp/>(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>st_free_gen<sp/>(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ST_INCLUDED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/CUDD/st.h"/>
  </compounddef>
</doxygen>
