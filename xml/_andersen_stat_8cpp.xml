<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_andersen_stat_8cpp" kind="file" language="C++">
    <compoundname>AndersenStat.cpp</compoundname>
    <includes refid="_l_l_v_m_util_8h" local="yes">SVF-FE/LLVMUtil.h</includes>
    <includes refid="_w_p_a_stat_8h" local="yes">WPA/WPAStat.h</includes>
    <includes refid="_andersen_8h" local="yes">WPA/Andersen.h</includes>
    <incdepgraph>
      <node id="13">
        <label>list</label>
      </node>
      <node id="5">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>WPA/WPASolver.h</label>
        <link refid="_w_p_a_solver_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>system_error</label>
      </node>
      <node id="74">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="54">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="72">
        <label>Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="87">
        <label>assert.h</label>
      </node>
      <node id="36">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="108">
        <label>Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="10">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="9">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="2">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="1">
        <label>lib/WPA/AndersenStat.cpp</label>
        <link refid="_andersen_stat_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="42">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="90">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>MemoryModel/PTAStat.h</label>
        <link refid="_p_t_a_stat_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>cassert</label>
      </node>
      <node id="114">
        <label>WPA/WPAFSSolver.h</label>
        <link refid="_w_p_a_f_s_solver_8h_source"/>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>Graphs/ConsGNode.h</label>
        <link refid="_cons_g_node_8h_source"/>
      </node>
      <node id="97">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="62">
        <label>string</label>
      </node>
      <node id="92">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="101">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>map</label>
      </node>
      <node id="43">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="119">
        <label>Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>unordered_set</label>
      </node>
      <node id="100">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="113">
        <label>MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="8">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="121">
        <label>Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>limits.h</label>
      </node>
      <node id="41">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="55">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="71">
        <label>Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="59">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="83">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="25">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="86">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stack</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="24">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="28">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="57">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="81">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="73">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="60">
        <label>time.h</label>
      </node>
      <node id="93">
        <label>math.h</label>
      </node>
      <node id="106">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="64">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="52">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="88">
        <label>cstdlib</label>
      </node>
      <node id="67">
        <label>iostream</label>
      </node>
      <node id="58">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="51">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="19">
        <label>deque</label>
      </node>
      <node id="80">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="49">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="7">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="45">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="50">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="65">
        <label>WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="35">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="105">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="91">
        <label>stdio.h</label>
      </node>
      <node id="21">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="46">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="37">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="104">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>memory</label>
      </node>
      <node id="26">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="109">
        <label>Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="44">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>AndersenStat.cpp<sp/>--<sp/>Statistics<sp/>of<sp/>Andersen&apos;s<sp/>analysis------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2017&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>AndersenStat.cpp</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Oct<sp/>12,<sp/>2013</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/LLVMUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/WPAStat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/Andersen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SVFUtil;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">u32_t<sp/>AndersenStat::_MaxPtsSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">u32_t<sp/>AndersenStat::_NumOfCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">u32_t<sp/>AndersenStat::_NumOfPWCCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">u32_t<sp/>AndersenStat::_NumOfNodesInCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">u32_t<sp/>AndersenStat::_MaxNumOfNodesInSCC<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>AndersenStat::CollapseTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CollapseTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="class_s_v_f_1_1_andersen_stat_1a257d814ef3983c4f513d37161d376719" kindref="member">AndersenStat::AndersenStat</ref>(<ref refid="class_s_v_f_1_1_andersen_base" kindref="compound">AndersenBase</ref>*<sp/>p):<sp/><ref refid="class_s_v_f_1_1_p_t_a_stat" kindref="compound">PTAStat</ref>(p),pta(p)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfNullPtr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfConstantPtr=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfBlackholePtr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>startClk();</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AndersenStat::collectCycleInfo(<ref refid="class_s_v_f_1_1_constraint_graph" kindref="compound">ConstraintGraph</ref>*<sp/>consCG)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfPWCCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfNodesInCycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeSet<sp/>repNodes;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>repNodes.clear();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" kindref="member">ConstraintGraph::iterator</ref><sp/>it<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>eit<sp/>=<sp/>consCG-&gt;end();<sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub<sp/>nodes<sp/>have<sp/>been<sp/>removed<sp/>from<sp/>the<sp/>constraint<sp/>graph,<sp/>only<sp/>rep<sp/>nodes<sp/>are<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>repNode<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1a39b973543acdcdc5493832cc9d0f586f" kindref="member">sccRepNode</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeBS&amp;<sp/>subNodes<sp/>=<sp/>consCG-&gt;sccSubNodes(repNode);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeBS<sp/>clone<sp/>=<sp/>subNodes;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeBS::iterator<sp/>it<sp/>=<sp/>subNodes.begin(),<sp/>eit<sp/>=<sp/>subNodes.end();<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>nodeId<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(nodeId);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;ObjPN&gt;(pagNode)<sp/>&amp;&amp;<sp/>pta-&gt;isFieldInsensitive(nodeId))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>baseId<sp/>=<sp/>consCG-&gt;getBaseObjNode(nodeId);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clone.reset(nodeId);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clone.set(baseId);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>num<sp/>=<sp/>clone.count();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(repNodes.insert(repNode).second)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfNodesInCycles<sp/>+=<sp/>num;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1a84468bc9355d31e8c3e18369036ddf5c" kindref="member">isPWCNode</ref>(repNode))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfPWCCycles<sp/>++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>num<sp/>&gt;<sp/>_MaxNumOfNodesInSCC)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MaxNumOfNodesInSCC<sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfCycles<sp/>+=<sp/>repNodes.size();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AndersenStat::constraintGraphStat()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_constraint_graph" kindref="compound">ConstraintGraph</ref>*<sp/>consCG<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_andersen_base_1aaec5125db063f8c1e7431ac7fe7a70f2" kindref="member">getConstraintGraph</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>numOfCopys<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>numOfGeps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>copy<sp/>and<sp/>gep<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ConstraintEdge::ConstraintEdgeSetTy::iterator<sp/>it<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1ad7196d5f05192d9468ee0ca93b6b66ee" kindref="member">getDirectCGEdges</ref>().begin(),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1ad7196d5f05192d9468ee0ca93b6b66ee" kindref="member">getDirectCGEdges</ref>().end();<sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SVFUtil::isa&lt;CopyCGEdge&gt;(*it))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOfCopys++;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SVFUtil::isa&lt;GepCGEdge&gt;(*it))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numOfGeps++;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;what<sp/>else!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalNodeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>cgNodeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>objNodeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addrtotalIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addrtotalOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addrmaxIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addrmaxOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>copytotalIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>copytotalOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>copymaxIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>copymaxOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>loadtotalIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>loadtotalOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>loadmaxIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>loadmaxOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>storetotalIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>storetotalOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>storemaxIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>storemaxOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ConstraintGraph::ConstraintNodeIDToNodeMapTy::iterator<sp/>nodeIt<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>nodeEit<sp/>=<sp/>consCG-&gt;end();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeIt<sp/>!=<sp/>nodeEit;<sp/>nodeIt++)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalNodeNumber++;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nodeIt-&gt;second-&gt;getInEdges().empty()<sp/>&amp;&amp;<sp/>nodeIt-&gt;second-&gt;getOutEdges().empty())</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgNodeNumber++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SVFUtil::isa&lt;ObjPN&gt;(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(nodeIt-&gt;first)))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objNodeNumber++;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nCopyIn<sp/>=<sp/>nodeIt-&gt;second-&gt;getDirectInEdges().size();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nCopyIn<sp/>&gt;<sp/>copymaxIn)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymaxIn<sp/>=<sp/>nCopyIn;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copytotalIn<sp/>+=nCopyIn;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nCopyOut<sp/>=<sp/>nodeIt-&gt;second-&gt;getDirectOutEdges().size();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nCopyOut<sp/>&gt;<sp/>copymaxOut)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymaxOut<sp/>=<sp/>nCopyOut;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copytotalOut<sp/>+=nCopyOut;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nLoadIn<sp/>=<sp/>nodeIt-&gt;second-&gt;getLoadInEdges().size();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nLoadIn<sp/>&gt;<sp/>loadmaxIn)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadmaxIn<sp/>=<sp/>nLoadIn;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadtotalIn<sp/>+=nLoadIn;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nLoadOut<sp/>=<sp/>nodeIt-&gt;second-&gt;getLoadOutEdges().size();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nLoadOut<sp/>&gt;<sp/>loadmaxOut)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadmaxOut<sp/>=<sp/>nLoadOut;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadtotalOut<sp/>+=nLoadOut;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nStoreIn<sp/>=<sp/>nodeIt-&gt;second-&gt;getStoreInEdges().size();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nStoreIn<sp/>&gt;<sp/>storemaxIn)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storemaxIn<sp/>=<sp/>nStoreIn;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storetotalIn<sp/>+=nStoreIn;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nStoreOut<sp/>=<sp/>nodeIt-&gt;second-&gt;getStoreOutEdges().size();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nStoreOut<sp/>&gt;<sp/>storemaxOut)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storemaxOut<sp/>=<sp/>nStoreOut;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storetotalOut<sp/>+=nStoreOut;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nAddrIn<sp/>=<sp/>nodeIt-&gt;second-&gt;getAddrInEdges().size();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nAddrIn<sp/>&gt;<sp/>addrmaxIn)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrmaxIn<sp/>=<sp/>nAddrIn;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrtotalIn<sp/>+=nAddrIn;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>nAddrOut<sp/>=<sp/>nodeIt-&gt;second-&gt;getAddrOutEdges().size();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nAddrOut<sp/>&gt;<sp/>addrmaxOut)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrmaxOut<sp/>=<sp/>nAddrOut;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrtotalOut<sp/>+=nAddrOut;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>storeavgIn<sp/>=<sp/>(double)storetotalIn/cgNodeNumber;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>loadavgIn<sp/>=<sp/>(double)loadtotalIn/cgNodeNumber;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>copyavgIn<sp/>=<sp/>(double)copytotalIn/cgNodeNumber;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>addravgIn<sp/>=<sp/>(double)addrtotalIn/cgNodeNumber;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avgIn<sp/>=<sp/>(double)(addrtotalIn<sp/>+<sp/>copytotalIn<sp/>+<sp/>loadtotalIn<sp/>+<sp/>storetotalIn)/cgNodeNumber;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfCGNode&quot;</highlight><highlight class="normal">]<sp/>=<sp/>totalNodeNumber;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;TotalValidNode&quot;</highlight><highlight class="normal">]<sp/>=<sp/>cgNodeNumber;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;TotalValidObjNode&quot;</highlight><highlight class="normal">]<sp/>=<sp/>objNodeNumber;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfCGEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1afb849d8f3425ff36497d062ecefd2cc1" kindref="member">getLoadCGEdges</ref>().size()<sp/>+<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1a61ef90be6ccc01634e5440f22a0f746e" kindref="member">getStoreCGEdges</ref>().size()</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>numOfCopys<sp/>+<sp/>numOfGeps;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfAddrs&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1adee52f15f5ff58dd455e419c2643f89b" kindref="member">getAddrCGEdges</ref>().size();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfCopys&quot;</highlight><highlight class="normal">]<sp/>=<sp/>numOfCopys;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfGeps&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>numOfGeps;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfLoads&quot;</highlight><highlight class="normal">]<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1afb849d8f3425ff36497d062ecefd2cc1" kindref="member">getLoadCGEdges</ref>().size();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;NumOfStores&quot;</highlight><highlight class="normal">]<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1a61ef90be6ccc01634e5440f22a0f746e" kindref="member">getStoreCGEdges</ref>().size();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxInCopyEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>copymaxIn;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxOutCopyEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>copymaxOut;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxInLoadEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>loadmaxIn;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxOutLoadEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>loadmaxOut;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxInStoreEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>storemaxIn;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxOutStoreEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>storemaxOut;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;AvgIn/OutStoreEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>storeavgIn;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxInAddrEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>addrmaxIn;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;MaxOutAddrEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>addrmaxOut;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[</highlight><highlight class="stringliteral">&quot;AvgIn/OutCopyEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>copyavgIn;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[</highlight><highlight class="stringliteral">&quot;AvgIn/OutLoadEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>loadavgIn;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[</highlight><highlight class="stringliteral">&quot;AvgIn/OutAddrEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>addravgIn;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[</highlight><highlight class="stringliteral">&quot;AvgIn/OutEdge&quot;</highlight><highlight class="normal">]<sp/>=<sp/>avgIn;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAStat::printStat(</highlight><highlight class="stringliteral">&quot;Constraint<sp/>Graph<sp/>Stats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_stat_1a898f091cd9aeed4b0cf5b338b8a3b1d3" kindref="member">AndersenStat::statNullPtr</ref>()</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>_NumOfNullPtr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" kindref="member">PAG::iterator</ref><sp/>iter<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>eiter<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;end();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>pagNodeId<sp/>=<sp/>iter-&gt;first;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>pagNode<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pagNode-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a983d2d9a8ea6fd5be14af55cf22c65ce" kindref="member">isTopLevelPtr</ref>()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/>inComingStore<sp/>=<sp/>pagNode-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a5a5712e845d05c2eaef385113c5bce58" kindref="member">getIncomingEdges</ref>(PAGEdge::Store);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/>outGoingLoad<sp/>=<sp/>pagNode-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a92ae607f7a27f6597dd56aeaef064819" kindref="member">getOutgoingEdges</ref>(PAGEdge::Load);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inComingStore.empty()==</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>||<sp/>outGoingLoad.empty()==</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>pts<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(pagNodeId);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" kindref="member">containBlackHoleNode</ref>(pts))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfBlackholePtr++;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pta-&gt;containConstantNode(pts))</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfConstantPtr++;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pts.empty())</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_string_ostream<sp/>rawstr(str);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SVFUtil::isa&lt;DummyValPN&gt;(pagNode)<sp/>&amp;&amp;<sp/>!SVFUtil::isa&lt;DummyObjPN&gt;(pagNode)<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>pointer<sp/>is<sp/>in<sp/>dead<sp/>function,<sp/>we<sp/>do<sp/>not<sp/>care</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isPtrInDeadFunction(pagNode-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae" kindref="member">getValue</ref>())<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfNullPtr++;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawstr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;##Null<sp/>Pointer<sp/>:<sp/>(NodeID<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pagNode-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>PtrName:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pagNode-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae" kindref="member">getValue</ref>()-&gt;getName();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWrnMsg(rawstr.str());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pagNode-&gt;getValue()-&gt;dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NumOfNullPtr++;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawstr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;##Null<sp/>Pointer<sp/>:<sp/>(NodeID<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pagNode-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWrnMsg(rawstr.str());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_stat_1a66fee1c0ee5781152a2d489f8857ad43" kindref="member">AndersenStat::performStat</ref>()</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(SVFUtil::isa&lt;AndersenBase&gt;(pta)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>an<sp/>andersen<sp/>pta<sp/>pass!!<sp/>what<sp/>else??&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>endClk();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_constraint_graph" kindref="compound">ConstraintGraph</ref>*<sp/>consCG<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_andersen_base_1aaec5125db063f8c1e7431ac7fe7a70f2" kindref="member">getConstraintGraph</ref>();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>constraint<sp/>graph<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_andersen_stat_1ae35507bebe6a1a9a64ab379473c85cad" kindref="member">collectCycleInfo</ref>(consCG);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stat<sp/>null<sp/>ptr<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_andersen_stat_1a898f091cd9aeed4b0cf5b338b8a3b1d3" kindref="member">statNullPtr</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalPointers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalTopLevPointers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalPtsSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalTopLevPtsSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" kindref="member">PAG::iterator</ref><sp/>iter<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>eiter<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;end();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>node<sp/>=<sp/>iter-&gt;first;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>pts<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(node);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32_t<sp/>size<sp/>=<sp/>pts.count();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPointers++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPtsSize+=size;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;isValidTopLevelPtr(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(node)))</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalTopLevPointers++;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalTopLevPtsSize+=size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&gt;<sp/>_MaxPtsSize<sp/>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MaxPtsSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAStat::performStat();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>constraintGraphStat();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a25001a6d794d91056f37d954d9660910" kindref="member">TotalAnalysisTime</ref>]<sp/>=<sp/>(endTime<sp/>-<sp/>startTime)/TIMEINTERVAL;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ad4c1cf3750341f73987c37745f3bd2aa" kindref="member">SCCDetectionTime</ref>]<sp/>=<sp/>Andersen::timeOfSCCDetection;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a8c4101e697057269def501d14a987287" kindref="member">SCCMergeTime</ref>]<sp/>=<sp/><sp/>Andersen::timeOfSCCMerges;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[CollapseTime]<sp/>=<sp/><sp/>Andersen::timeOfCollapse;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1aeb6a52c31ecd004670e85f24b01d75d6" kindref="member">ProcessLoadStoreTime</ref>]<sp/>=<sp/><sp/>Andersen::timeOfProcessLoadStore;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a95a0a7861731072baeaf75354531875f" kindref="member">ProcessCopyGepTime</ref>]<sp/>=<sp/><sp/>Andersen::timeOfProcessCopyGep;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a8aedfeb35f76e6d33135637156468894" kindref="member">UpdateCallGraphTime</ref>]<sp/>=<sp/><sp/>Andersen::timeOfUpdateCallGraph;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a1a4d418fd9e5413e7ffbbfe57f5e0560" kindref="member">TotalNumOfPointers</ref>]<sp/>=<sp/>pag-&gt;getValueNodeNum()<sp/>+<sp/>pag-&gt;getFieldValNodeNum();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1acd9848f15aa359550e86c7b857df84ed" kindref="member">TotalNumOfObjects</ref>]<sp/>=<sp/>pag-&gt;getObjectNodeNum()<sp/>+<sp/>pag-&gt;getFieldObjNodeNum();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a0de03cdb382b353c6c1495c0f80cfe19" kindref="member">NumOfProcessedAddrs</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1a70e60ce2e6f4cfd575c6f5c974ca1081" kindref="member">Andersen::numOfProcessedAddr</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ad30b36fb1884d1ef0b01c3b36a245211" kindref="member">NumOfProcessedCopys</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1a9d7b6e602e1764f76583824dddebf985" kindref="member">Andersen::numOfProcessedCopy</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1aaa9d98f868c0724cb57c6934e783d1e5" kindref="member">NumOfProcessedGeps</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1a25de7638a692832f0d4727815ff270f6" kindref="member">Andersen::numOfProcessedGep</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a17531fa1df42df0b19191d61853380d9" kindref="member">NumOfProcessedLoads</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1a5f1b0711583aa8947dfb4619658f1904" kindref="member">Andersen::numOfProcessedLoad</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a5b9bc0e9dac6ac97199476f6b7ea1edf" kindref="member">NumOfProcessedStores</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1ae18183a5d8ebd46fcdb9246bd643b150" kindref="member">Andersen::numOfProcessedStore</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a07a1db62ddba50bda787b2985ef8d135" kindref="member">NumOfSfr</ref>]<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_base_1aa31bc83cdeaa30dd0975976e29a5be12" kindref="member">Andersen::numOfSfrs</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[NumOfFieldExpand]<sp/>=<sp/>Andersen::numOfFieldExpand;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a218748b401bdd3d5eebd45eea0026b12" kindref="member">NumOfPointers</ref>]<sp/>=<sp/>pag-&gt;getValueNodeNum();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a5c09f41916e40d784a63e301584511f9" kindref="member">NumOfMemObjects</ref>]<sp/>=<sp/>pag-&gt;getObjectNodeNum();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a164249b9d35606387e628529c643d119" kindref="member">NumOfGepFieldPointers</ref>]<sp/>=<sp/>pag-&gt;getFieldValNodeNum();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a16f9bdb5387471d0bd825c4a9cbcb22e" kindref="member">NumOfGepFieldObjects</ref>]<sp/>=<sp/>pag-&gt;getFieldObjNodeNum();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1adb0edbe88a74e5e89921bcfafa4759c6" kindref="member">AveragePointsToSetSize</ref>]<sp/>=<sp/>(double)totalPtsSize/totalPointers;;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a1649c9f893c5b9ec2d57a399bc050030" kindref="member">AverageTopLevPointsToSetSize</ref>]<sp/>=<sp/>(double)totalTopLevPtsSize/totalTopLevPointers;;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1af2b45aab2eee96a1cabba3025e4375a2" kindref="member">MaxPointsToSetSize</ref>]<sp/>=<sp/>_MaxPtsSize;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ae95fb0771a71ead27da79a45cac47a36" kindref="member">NumOfIterations</ref>]<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_w_p_a_solver_1ab3369caa278da03e6e6697a839985cd6" kindref="member">numOfIteration</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a618707c52da086e04f5e7bff31794cf3" kindref="member">NumOfIndirectCallSites</ref>]<sp/>=<sp/>consCG-&gt;<ref refid="class_s_v_f_1_1_constraint_graph_1a003e68319c41fb32df9ab6f2fe02d8d2" kindref="member">getIndirectCallsites</ref>().size();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ad51d2bd924f049e440b3d0dd0d423524" kindref="member">NumOfIndirectEdgeSolved</ref>]<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" kindref="member">getNumOfResolvedIndCallEdge</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ad1731b88c24bb79728f62cd3e9c55699" kindref="member">NumOfSCCDetection</ref>]<sp/>=<sp/>Andersen::numOfSCCDetection;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ac518843a4148ecc45027ccc19a690c05" kindref="member">NumOfCycles</ref>]<sp/>=<sp/>_NumOfCycles;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1aefcc3638fac7034ab3542be8eb01ab58" kindref="member">NumOfPWCCycles</ref>]<sp/>=<sp/>_NumOfPWCCycles;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea3e95097b3b9d326bef0d36f17e51a5" kindref="member">NumOfNodesInCycles</ref>]<sp/>=<sp/>_NumOfNodesInCycles;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1ab754f7768ffcd6f232b8cdf0fef6fc4e" kindref="member">MaxNumOfNodesInSCC</ref>]<sp/>=<sp/>_MaxNumOfNodesInSCC;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[<ref refid="class_s_v_f_1_1_p_t_a_stat_1a1211e1c7f16b715f32ecdef83f39a8c6" kindref="member">NumOfNullPointer</ref>]<sp/>=<sp/>_NumOfNullPtr;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;PointsToConstPtr&quot;</highlight><highlight class="normal">]<sp/>=<sp/>_NumOfConstantPtr;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>PTNumStatMap[</highlight><highlight class="stringliteral">&quot;PointsToBlkPtr&quot;</highlight><highlight class="normal">]<sp/>=<sp/>_NumOfBlackholePtr;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAStat::printStat(</highlight><highlight class="stringliteral">&quot;Andersen<sp/>Pointer<sp/>Analysis<sp/>Stats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/WPA/AndersenStat.cpp"/>
  </compounddef>
</doxygen>
