<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cxt_proc" xml:lang="en-US">
<title>SVF::CxtProc Class Reference</title>
<indexterm><primary>SVF::CxtProc</primary></indexterm>
<para>
<computeroutput>#include &lt;CxtStmt.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::CxtProc:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_cxt_proc.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1ac1ca3a049f6d0f8a0548a153cc903aa0"/><link linkend="_class_s_v_f_1_1_cxt_proc_1ac1ca3a049f6d0f8a0548a153cc903aa0">CxtProc</link> (const CallStrCxt &amp;c, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *f)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a25a80c93a6aeb1112a846d6c588364cc"/><link linkend="_class_s_v_f_1_1_cxt_proc_1a25a80c93a6aeb1112a846d6c588364cc">CxtProc</link> (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp;ctm)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a94195be123e936ae55ea5c503b7f887f"/>virtual <link linkend="_class_s_v_f_1_1_cxt_proc_1a94195be123e936ae55ea5c503b7f887f">~CxtProc</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1ab9ac6459c90873b7dea35e0a22700189"/>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <link linkend="_class_s_v_f_1_1_cxt_proc_1ab9ac6459c90873b7dea35e0a22700189">getProc</link> () const</para>

<para>Return current procedure. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a99b0f68b4cbd733f91eea33aa3e64eb7"/>const CallStrCxt &amp; <link linkend="_class_s_v_f_1_1_cxt_proc_1a99b0f68b4cbd733f91eea33aa3e64eb7">getContext</link> () const</para>

<para>Return current context. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cxt_proc_1ab58a8dc44944ac2ab3280562a8306e7b">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a617c7ee432ac89cf419dfad47854e3a5"/><link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp; <link linkend="_class_s_v_f_1_1_cxt_proc_1a617c7ee432ac89cf419dfad47854e3a5">operator=</link> (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a7e019158f464401c6d7fc5676d48d69c"/>bool <link linkend="_class_s_v_f_1_1_cxt_proc_1a7e019158f464401c6d7fc5676d48d69c">operator==</link> (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a1e9e5490dead73e1cd9ddd964848eb13"/>bool <link linkend="_class_s_v_f_1_1_cxt_proc_1a1e9e5490dead73e1cd9ddd964848eb13">operator!=</link> (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1ac53f22f1e9547b15b8998d83290f4281"/>std::string <link linkend="_class_s_v_f_1_1_cxt_proc_1ac53f22f1e9547b15b8998d83290f4281">cxtToStr</link> () const</para>

<para>Return context in string format. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a254c612f06a3f82b57b1c5a0e52c012f"/>void <link linkend="_class_s_v_f_1_1_cxt_proc_1a254c612f06a3f82b57b1c5a0e52c012f">dump</link> () const</para>

<para>Dump <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1af5f186c71d815dabcbfab6bae7c57b59"/>CallStrCxt <emphasis role="strong">cxt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_proc_1a70b6a2ae40bd7e4b08ddcb6d6b0289df"/>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <emphasis role="strong">fun</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Context-sensitive procedure &lt;c,m&gt; c represent current context m represent current procedure </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cxt_proc_1ab58a8dc44944ac2ab3280562a8306e7b"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::CxtProc</secondary></indexterm>
<indexterm><primary>SVF::CxtProc</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::CxtProc::operator&lt; (const <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Util/CxtStmt.h</section>
</section>
