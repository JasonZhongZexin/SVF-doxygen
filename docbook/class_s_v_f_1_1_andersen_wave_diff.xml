<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_andersen_wave_diff" xml:lang="en-US">
<title>SVF::AndersenWaveDiff Class Reference</title>
<indexterm><primary>SVF::AndersenWaveDiff</primary></indexterm>
<para>
<computeroutput>#include &lt;Andersen.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::AndersenWaveDiff:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_andersen_wave_diff.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a6a8a801ecca92785ec937cebc8732bd1"/><emphasis role="strong">AndersenWaveDiff</emphasis> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> type=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2">AndersenWaveDiff_WPA</link>, bool alias_check=true)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a35cd97d5f7c1dcb65dd077f45ad864e9">solveWorklist</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1afa1055cda6c910b24480505efd205895">processNode</link> (NodeID nodeId)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1aa0659a2787c1f9b1b6ec62900313475e">postProcessNode</link> (NodeID nodeId)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1ad5c85a28967cc3f62e663dc00a8aa8c9">handleCopyGep</link> (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> *node)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a7f2af504c4fb96e64371a8533c0525fe">handleLoad</link> (NodeID id, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> *load)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a775a74d57842b85301daeafe64c8a5c4">handleStore</link> (NodeID id, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> *store)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a3a5b952c0c2fe2be1b9a6fcfeeba2c37">processCopy</link> (NodeID node, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> *edge)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a74134978db1c0d9c71122bc63f4b73c1"/>static <link linkend="_class_s_v_f_1_1_andersen_wave_diff">AndersenWaveDiff</link> * <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a74134978db1c0d9c71122bc63f4b73c1">createAndersenWaveDiff</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag)</para>

<para>Create an singleton instance directly instead of invoking llvm pass manager. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a5da6abb1a7f0ef3e3871ea6e5a623625"/>static void <emphasis role="strong">releaseAndersenWaveDiff</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1acdc82c72b14e012551a460fa91a634db">mergeNodeToRep</link> (NodeID nodeId, NodeID newRepId)</para>

<para>Merge sub node to its rep. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a57c7c12ebcf06f2912e93c802c6cdd02"/>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_1a57c7c12ebcf06f2912e93c802c6cdd02">processCast</link> (const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> *)</para>

<para>process &quot;bitcast&quot; <link linkend="_class_s_v_f_1_1_copy_c_g_edge">CopyCGEdge</link> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Wave propagation with diff points-to set. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1ad5c85a28967cc3f62e663dc00a8aa8c9"/>    <section>
    <title>handleCopyGep()</title>
<indexterm><primary>handleCopyGep</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>handleCopyGep</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiff::handleCopyGep (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> * node)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Handle copy gep </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1ab069683dd6ca563113efbde2813ab35e">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a7f2af504c4fb96e64371a8533c0525fe"/>    <section>
    <title>handleLoad()</title>
<indexterm><primary>handleLoad</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>handleLoad</secondary></indexterm>
<para><computeroutput>bool AndersenWaveDiff::handleLoad (NodeID nodeId, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> * edge)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Handle load </para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a775a74d57842b85301daeafe64c8a5c4"/>    <section>
    <title>handleStore()</title>
<indexterm><primary>handleStore</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>handleStore</secondary></indexterm>
<para><computeroutput>bool AndersenWaveDiff::handleStore (NodeID nodeId, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> * edge)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Handle store </para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1acdc82c72b14e012551a460fa91a634db"/>    <section>
    <title>mergeNodeToRep()</title>
<indexterm><primary>mergeNodeToRep</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>mergeNodeToRep</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiff::mergeNodeToRep (NodeID nodeId, NodeID newRepId)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Merge sub node to its rep. </para>
</para>

<para>update rep&apos;s propagated points-to set</para>

<para><orderedlist>
<listitem>
<para>if find gep edges inside SCC cycle, the rep node will become a PWC node and its pts should be collapsed later.</para>
</listitem><listitem>
<para>if the node to be merged is already a PWC node, the rep node will also become a PWC node as it will have a self-cycle gep edge.</para>
</listitem></orderedlist>
</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a36729160041bc3a3e2b0a92b29062848">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1aa0659a2787c1f9b1b6ec62900313475e"/>    <section>
    <title>postProcessNode()</title>
<indexterm><primary>postProcessNode</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>postProcessNode</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiff::postProcessNode (NodeID nodeId)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Post process node </para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a3a5b952c0c2fe2be1b9a6fcfeeba2c37"/>    <section>
    <title>processCopy()</title>
<indexterm><primary>processCopy</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>processCopy</secondary></indexterm>
<para><computeroutput>bool AndersenWaveDiff::processCopy (NodeID node, const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> * edge)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Propagate diff points-to set from src to dst </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1ac4afe532655c3f311143ebbe15175ca2">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1afa1055cda6c910b24480505efd205895"/>    <section>
    <title>processNode()</title>
<indexterm><primary>processNode</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>processNode</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiff::processNode (NodeID nodeId)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Process edge <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a1caa6fa0740f4fa789d960a5a6fcb9c1">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_1a35cd97d5f7c1dcb65dd077f45ad864e9"/>    <section>
    <title>solveWorklist()</title>
<indexterm><primary>solveWorklist</primary><secondary>SVF::AndersenWaveDiff</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiff</primary><secondary>solveWorklist</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiff::solveWorklist ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>solve worklist </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_w_p_a_solver">SVF::WPASolver&lt; GraphType &gt;</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/WPA/Andersen.hlib/WPA/AndersenWaveDiff.cpp</section>
</section>
