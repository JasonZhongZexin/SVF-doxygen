<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cxt_thread_proc" xml:lang="en-US">
<title>SVF::CxtThreadProc Class Reference</title>
<indexterm><primary>SVF::CxtThreadProc</primary></indexterm>
<para>
<computeroutput>#include &lt;CxtStmt.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::CxtThreadProc:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_cxt_thread_proc.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1a1c7dd7740266a07d354df537a9167bcc"/><link linkend="_class_s_v_f_1_1_cxt_thread_proc_1a1c7dd7740266a07d354df537a9167bcc">CxtThreadProc</link> (NodeID t, const CallStrCxt &amp;c, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *f)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1acce14996e41ae55ae8e27b29408ef7c8"/><link linkend="_class_s_v_f_1_1_cxt_thread_proc_1acce14996e41ae55ae8e27b29408ef7c8">CxtThreadProc</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp;ctm)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1aa65ab8cf5003457ce87991663315b5f1"/>virtual <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1aa65ab8cf5003457ce87991663315b5f1">~CxtThreadProc</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1a61d950c7469f4bb9d2152b0e7d892ebf"/>NodeID <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1a61d950c7469f4bb9d2152b0e7d892ebf">getTid</link> () const</para>

<para>Return current thread id. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1a4b8e4f182a34d078595ce0eb9ec94c6d">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1a439a27864cb18accba5f8fe706c1e74b"/><link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp; <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1a439a27864cb18accba5f8fe706c1e74b">operator=</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1aef53ca59b8cbd614b28350d12113e3c4"/>bool <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1aef53ca59b8cbd614b28350d12113e3c4">operator==</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1a7f65ade2a231590c26643ef907061727"/>bool <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1a7f65ade2a231590c26643ef907061727">operator!=</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1aed801cfecdbfcd690db2d78de5f8e0b5"/>void <link linkend="_class_s_v_f_1_1_cxt_thread_proc_1aed801cfecdbfcd690db2d78de5f8e0b5">dump</link> () const</para>

<para>Dump <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Context-sensitive procedure &lt;t,c,m&gt; t represent current thread during traversing c represent current context m represent current procedure </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cxt_thread_proc_1a4b8e4f182a34d078595ce0eb9ec94c6d"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::CxtThreadProc</secondary></indexterm>
<indexterm><primary>SVF::CxtThreadProc</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::CxtThreadProc::operator&lt; (const <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Util/CxtStmt.h</section>
</section>
