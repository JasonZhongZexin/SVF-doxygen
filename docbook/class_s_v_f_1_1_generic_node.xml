<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_generic_node" xml:lang="en-US">
<title>SVF::GenericNode&lt; NodeTy, EdgeTy &gt; Class Template Reference</title>
<indexterm><primary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;GenericGraph.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::GenericNode&lt; NodeTy, EdgeTy &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_generic_node.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ad63e862eb1d1369bd69318fe698e4a22"/>typedef NodeTy <emphasis role="strong">NodeType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a458c626543431b4314f5f4f532eb51de"/>typedef EdgeTy <emphasis role="strong">EdgeType</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c"/>typedef s32_t <link linkend="_class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c">GNodeK</link></para>

<para>Edge kind. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a03c6da4a73c47f84f5c5b47252bc339a"/>typedef OrderedSet&lt; EdgeType *, typename EdgeType::equalGEdge &gt; <emphasis role="strong">GEdgeSetTy</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>typedef GEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ab6dc1ae41ae23b383f8add474caa7429"/>typedef GEdgeSetTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1acdca5baae3e9e4208a60322fec9c9d3f"/><link linkend="_class_s_v_f_1_1_generic_node_1acdca5baae3e9e4208a60322fec9c9d3f">GenericNode</link> (NodeID i, <link linkend="_class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c">GNodeK</link> k)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a48a8d05b81b5c8099c3f3d1f2c4983a9"/>virtual <link linkend="_class_s_v_f_1_1_generic_node_1a48a8d05b81b5c8099c3f3d1f2c4983a9">~GenericNode</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895"/>NodeID <link linkend="_class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895">getId</link> () const</para>

<para>Get ID. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a391e996d695b114530120723da1d003e"/><link linkend="_class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c">GNodeK</link> <link linkend="_class_s_v_f_1_1_generic_node_1a391e996d695b114530120723da1d003e">getNodeKind</link> () const</para>

<para>Get node kind. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a06a7373b11143e709784de784fa476fe"/>bool <link linkend="_class_s_v_f_1_1_generic_node_1a06a7373b11143e709784de784fa476fe">hasIncomingEdge</link> () const</para>

<para>Has incoming/outgoing edge set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a0931220d7a38e03f206cbdc6465d32ad"/>bool <emphasis role="strong">hasOutgoingEdge</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1aa4f103330118c8976bf95e4bf53416eb"/><link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <link linkend="_class_s_v_f_1_1_generic_node_1aa4f103330118c8976bf95e4bf53416eb">OutEdgeBegin</link> ()</para>

<para>iterators </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a19a3366fd8a58290d0c740c46c3dcb3d"/><link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">OutEdgeEnd</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ae5b113921530eee6afe58a65d8e5b3a7"/><link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">InEdgeBegin</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1afe6a7b286d9af4992f41b59612fd2900"/><link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">InEdgeEnd</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a50219c203fb5a8a44fe22428699f26e7"/>const_iterator <emphasis role="strong">OutEdgeBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ace88b6c7561f61f747ff08f61e2c18bc"/>const_iterator <emphasis role="strong">OutEdgeEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a7c0ff80b1c0ae8b76fc620f21495ca39"/>const_iterator <emphasis role="strong">InEdgeBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a0118fbeb2b314dcdcb53c56a2a13ab07"/>const_iterator <emphasis role="strong">InEdgeEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1aa0e258d3a92dae367f2809a6f16c80db"/>virtual <link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <link linkend="_class_s_v_f_1_1_generic_node_1aa0e258d3a92dae367f2809a6f16c80db">directOutEdgeBegin</link> ()</para>

<para>Iterators used for SCC detection, overwrite it in child class if necessory. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a5950d69d4ba6c2122dd06b93911e4992"/>virtual <link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">directOutEdgeEnd</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a4ab1f2e5db301e4a37215905a22e6476"/>virtual <link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">directInEdgeBegin</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a19599627ba095b5452373284deab7f6c"/>virtual <link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link> <emphasis role="strong">directInEdgeEnd</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1acfae7a2809931cbd62b6f47c4813510d"/>virtual const_iterator <emphasis role="strong">directOutEdgeBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a7f914b128f7839483efc9ad56834e7c2"/>virtual const_iterator <emphasis role="strong">directOutEdgeEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ab331402aed245c33bad841df2bc21f7b"/>virtual const_iterator <emphasis role="strong">directInEdgeBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1aa7be9ff204bf85bc3bf2fa4e078fcab2"/>virtual const_iterator <emphasis role="strong">directInEdgeEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a93d217b0c9fd8008a2989ca2b4f3fbfb"/>bool <link linkend="_class_s_v_f_1_1_generic_node_1a93d217b0c9fd8008a2989ca2b4f3fbfb">addIncomingEdge</link> (EdgeType *inEdge)</para>

<para>Add incoming and outgoing edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1ae74283fbc788665296a69e56f334557b"/>bool <emphasis role="strong">addOutgoingEdge</emphasis> (EdgeType *outEdge)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1add6b6b3bd45a9460335c5db9eda821b8"/>EdgeType * <link linkend="_class_s_v_f_1_1_generic_node_1add6b6b3bd45a9460335c5db9eda821b8">hasIncomingEdge</link> (EdgeType *edge) const</para>

<para>Find incoming and outgoing edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1aa0c40cb708b39300b3cb7354194e4993"/>EdgeType * <emphasis role="strong">hasOutgoingEdge</emphasis> (EdgeType *edge) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>const GEdgeSetTy &amp; <link linkend="_class_s_v_f_1_1_generic_node_1a2d9cd758d6f8c5189d9b90b74f43e009">getOutEdges</link> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1afc8b5f86d7795b6a0dfc0687d942d79b"/>const GEdgeSetTy &amp; <emphasis role="strong">getInEdges</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>Size_t <link linkend="_class_s_v_f_1_1_generic_node_1a56dff05dc2b3c5664d3b8fc1c6c927d5">removeIncomingEdge</link> (EdgeType *edge)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_generic_node_1a7c6192cb176bda3fad1819711302e468"/>Size_t <emphasis role="strong">removeOutgoingEdge</emphasis> (EdgeType *edge)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class NodeTy, class EdgeTy&gt;
class SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</title></simplesect>


<para>Generic node on the graph as base class </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153"/>    <section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</secondary></indexterm>
<indexterm><primary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;class NodeTy , class EdgeTy &gt; </computeroutput><para><computeroutput>typedef GEdgeSetTy::iterator <link linkend="_class_s_v_f_1_1_generic_node">SVF::GenericNode</link>&lt; NodeTy, EdgeTy &gt;::<link linkend="_class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153">iterator</link></computeroutput></para>
<para>Edge iterator </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_generic_node_1a2d9cd758d6f8c5189d9b90b74f43e009"/>    <section>
    <title>getOutEdges()</title>
<indexterm><primary>getOutEdges</primary><secondary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</secondary></indexterm>
<indexterm><primary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</primary><secondary>getOutEdges</secondary></indexterm>
<computeroutput>template&lt;class NodeTy , class EdgeTy &gt; </computeroutput><para><computeroutput>const GEdgeSetTy&amp; <link linkend="_class_s_v_f_1_1_generic_node">SVF::GenericNode</link>&lt; NodeTy, EdgeTy &gt;::getOutEdges ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Get incoming/outgoing edge set </para>
    </section><anchor xml:id="_class_s_v_f_1_1_generic_node_1a56dff05dc2b3c5664d3b8fc1c6c927d5"/>    <section>
    <title>removeIncomingEdge()</title>
<indexterm><primary>removeIncomingEdge</primary><secondary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</secondary></indexterm>
<indexterm><primary>SVF::GenericNode&lt; NodeTy, EdgeTy &gt;</primary><secondary>removeIncomingEdge</secondary></indexterm>
<computeroutput>template&lt;class NodeTy , class EdgeTy &gt; </computeroutput><para><computeroutput>Size_t <link linkend="_class_s_v_f_1_1_generic_node">SVF::GenericNode</link>&lt; NodeTy, EdgeTy &gt;::removeIncomingEdge (EdgeType * edge)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Remove incoming and outgoing edges </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Graphs/GenericGraph.h</section>
</section>
