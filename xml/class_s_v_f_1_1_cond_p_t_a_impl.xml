<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cond_p_t_a_impl" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::CondPTAImpl</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_pointer_analysis" prot="public" virt="non-virtual">SVF::PointerAnalysis</basecompoundref>
    <includes refid="_pointer_analysis_impl_8h" local="no">PointerAnalysisImpl.h</includes>
    <templateparamlist>
      <param>
        <type>class Cond</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_p_t_a_impl_1af960c10e49932ea5e9dcdd299ff300ce" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTDataTy</ref> *</type>
        <definition>PTDataTy* SVF::CondPTAImpl&lt; Cond &gt;::ptD</definition>
        <argsstring></argsstring>
        <name>ptD</name>
        <briefdescription>
<para>Points-to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="446" column="14" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_p_t_a_impl_1ab4115f25e2e477bfd73d01f069f47241" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::normalized</definition>
        <argsstring></argsstring>
        <name>normalized</name>
        <briefdescription>
<para>Normalized flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="448" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_p_t_a_impl_1a30b9ee7b1dcd04285f92cf7accd05b2e" prot="protected" static="no" mutable="no">
        <type>PtrToBVPtsMap</type>
        <definition>PtrToBVPtsMap SVF::CondPTAImpl&lt; Cond &gt;::ptrToBVPtsMap</definition>
        <argsstring></argsstring>
        <name>ptrToBVPtsMap</name>
        <briefdescription>
<para>Normal points-to representation (without conditions) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="450" column="19" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_p_t_a_impl_1a22c23f3ba1ee7e0aaccf0b8a1b58e33e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_cond_p_t_a_impl_1a838c3f2be39d278072f7a9df7c0bcb4d" kindref="member">PtrToNSMap</ref></type>
        <definition>PtrToNSMap SVF::CondPTAImpl&lt; Cond &gt;::objToNSRevPtsMap</definition>
        <argsstring></argsstring>
        <name>objToNSRevPtsMap</name>
        <briefdescription>
<para>Normal points-to representation (without conditions) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="452" column="16" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_p_t_a_impl_1a61167fcdb2005090de1b38e53450431a" prot="protected" static="no" mutable="no">
        <type>PtrToCPtsMap</type>
        <definition>PtrToCPtsMap SVF::CondPTAImpl&lt; Cond &gt;::ptrToCPtsMap</definition>
        <argsstring></argsstring>
        <name>ptrToCPtsMap</name>
        <briefdescription>
<para>Conditional points-to representation (with conditions) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="454" column="18" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a63fa2b3a96696ffc67a119c1ba5ce748" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
        <definition>virtual const CPtSet&amp; SVF::CondPTAImpl&lt; Cond &gt;::getPts</definition>
        <argsstring>(CVar id)</argsstring>
        <name>getPts</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get points-to and reverse points-to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="297" column="33" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a0da0602c5b260afaba4bef1abcbcf7b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const Set&lt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &gt; &amp;</type>
        <definition>virtual const Set&lt;CVar&gt;&amp; SVF::CondPTAImpl&lt; Cond &gt;::getRevPts</definition>
        <argsstring>(CVar nodeId)</argsstring>
        <name>getRevPts</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="301" column="30" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1adfae199dfbe05c9c20052e0fc204e6de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::CondPTAImpl&lt; Cond &gt;::clearPts</definition>
        <argsstring>()</argsstring>
        <name>clearPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a">clearPts</reimplements>
        <briefdescription>
<para>Clear all data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="308" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1adf0acbb0c605278e43d88787d651bbd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::overlap</definition>
        <argsstring>(const CPtSet &amp;cpts1, const CPtSet &amp;cpts2) const</argsstring>
        <name>overlap</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts2</declname>
        </param>
        <briefdescription>
<para>Whether cpts1 and cpts2 have overlap points-to targets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="314" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="314" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a87b48287d7edb97fc120200fe0e5218d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPTAImpl&lt; Cond &gt;::expandFIObjs</definition>
        <argsstring>(const CPtSet &amp;cpts, CPtSet &amp;expandedCpts)</argsstring>
        <name>expandFIObjs</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>expandedCpts</declname>
        </param>
        <briefdescription>
<para>Expand all fields of an aggregate in all points-to sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="328" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="328" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1aa260a3275fbec7061295306a58763d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::CondPTAImpl&lt; Cond &gt;::dumpCPts</definition>
        <argsstring>()</argsstring>
        <name>dumpCPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1ad409cbf61271743394b9e5868f3fd197">dumpCPts</reimplements>
        <briefdescription>
<para>Print out conditional pts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="457" column="18" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a94f3e4d073b8c5bab3c46058ddba3f43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>PointsTo</type>
        <definition>virtual PointsTo SVF::CondPTAImpl&lt; Cond &gt;::getBVPointsTo</definition>
        <argsstring>(const CPtSet &amp;cpts) const</argsstring>
        <name>getBVPointsTo</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Given a conditional pts return its bit vector points-to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="462" column="29" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="462" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a0b96ba98239186d6d676f9540da9e590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>PointsTo &amp;</type>
        <definition>virtual PointsTo&amp; SVF::CondPTAImpl&lt; Cond &gt;::getPts</definition>
        <argsstring>(NodeID ptr)</argsstring>
        <name>getPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec">getPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Given a pointer return its bit vector points-to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="470" column="29" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="470" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a454a998ef5a866f2a6f270e3283c6ebd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
        <definition>virtual const CPtSet&amp; SVF::CondPTAImpl&lt; Cond &gt;::getCondPointsTo</definition>
        <argsstring>(NodeID ptr)</argsstring>
        <name>getCondPointsTo</name>
        <param>
          <type>NodeID</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Given a pointer return its conditional points-to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="476" column="33" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="476" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>NodeSet &amp;</type>
        <definition>virtual NodeSet&amp; SVF::CondPTAImpl&lt; Cond &gt;::getRevPts</definition>
        <argsstring>(NodeID obj)</argsstring>
        <name>getRevPts</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280">getRevPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Given an object return all pointers points to this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="482" column="28" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="482" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1afa6dffc1ac7e8dada1ff9e75b8cfd187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::CondPTAImpl&lt; Cond &gt;::alias</definition>
        <argsstring>(const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1">alias</reimplements>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocA</declname>
        </param>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocB</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Location infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="489" column="32" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="489" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a171918ada9b679b0114b27476caa5ee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::CondPTAImpl&lt; Cond &gt;::alias</definition>
        <argsstring>(const Value *V1, const Value *V2)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8">alias</reimplements>
        <param>
          <type>const Value *</type>
          <declname>V1</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>V2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Value infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="495" column="32" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1ac18e1dc9c6fc8cc952f67a93c2491876" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::CondPTAImpl&lt; Cond &gt;::alias</definition>
        <argsstring>(NodeID node1, NodeID node2)</argsstring>
        <name>alias</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf">alias</reimplements>
        <param>
          <type>NodeID</type>
          <declname>node1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>node2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given two pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="500" column="32" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1adb1ed3728d53a13c94402392155e9913" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::CondPTAImpl&lt; Cond &gt;::alias</definition>
        <argsstring>(const CVar &amp;var1, const CVar &amp;var2)</argsstring>
        <name>alias</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given conditional variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="505" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a8e48e9fe6f7e21da49a155f8f6893944" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::CondPTAImpl&lt; Cond &gt;::alias</definition>
        <argsstring>(const CPtSet &amp;pts1, const CPtSet &amp;pts2)</argsstring>
        <name>alias</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>pts1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>pts2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given two conditional points-to sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="510" column="32" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="510" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a8cd7b08bd978513cb0faacc47bbaf578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::containBlackHoleNode</definition>
        <argsstring>(const CPtSet &amp;cpts)</argsstring>
        <name>containBlackHoleNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Test blk node for cpts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="528" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="528" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a3a10f3327d6473c348df5b62a5d6683f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::containConstantNode</definition>
        <argsstring>(const CPtSet &amp;cpts)</argsstring>
        <name>containConstantNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Test constant node for cpts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="538" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="538" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a6b746c30161c7dab86510895e0032935" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::CondPTAImpl&lt; Cond &gt;::isCondCompatible</definition>
        <argsstring>(const Cond &amp;cxt1, const Cond &amp;cxt2, bool singleton) const =0</argsstring>
        <name>isCondCompatible</name>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1a57d309971de00db9bd8c6bfaf237cbff">isCondCompatible</reimplementedby>
        <param>
          <type>const Cond &amp;</type>
          <declname>cxt1</declname>
        </param>
        <param>
          <type>const Cond &amp;</type>
          <declname>cxt2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>singleton</declname>
        </param>
        <briefdescription>
<para>Whether two conditions are compatible (to be implemented by child class) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="548" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a80daa422e0dacf75aceb4fe5b4687c04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void SVF::CondPTAImpl&lt; Cond &gt;::dumpTopLevelPtsTo</definition>
        <argsstring>()</argsstring>
        <name>dumpTopLevelPtsTo</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a627bdc95485fd65e8846fcaa5e89559f">dumpTopLevelPtsTo</reimplements>
        <briefdescription>
<para>Dump points-to information of top-level pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="551" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="551" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::CondPTAImpl&lt; Cond &gt;::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166">finalize</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_context_d_d_a_1ae34cd06ee3b7d763c81ec418af76d244">finalize</reimplementedby>
        <briefdescription>
<para>Finalization of pointer analysis, and normalize points-to information to Bit Vector representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="348" column="18" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a1a95d1d6ac48157c896d9895cff697b4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::CondPTAImpl&lt; Cond &gt;::unionPts</definition>
        <argsstring>(CVar id, const CPtSet &amp;target)</argsstring>
        <name>unionPts</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Union/add points-to, and add the reverse points-to for node collapse purpose To be noted that adding reverse pts might incur 10% total overhead during solving </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="356" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a4ad5da56c8b7bc75bf2dc30a1bcf1552" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::CondPTAImpl&lt; Cond &gt;::unionPts</definition>
        <argsstring>(CVar id, CVar ptd)</argsstring>
        <name>unionPts</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="361" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a08037f32b927fe2e6be47a61a060463c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::CondPTAImpl&lt; Cond &gt;::addPts</definition>
        <argsstring>(CVar id, CVar ptd)</argsstring>
        <name>addPts</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref></type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="366" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a3b5877fec52bbfa7c83bab6c9bc95684" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::mustAlias</definition>
        <argsstring>(const CVar &amp;var1, const CVar &amp;var2)</argsstring>
        <name>mustAlias</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var2</declname>
        </param>
        <briefdescription>
<para>Internal interface to be used for conditional points-to set queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="374" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="374" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a5af00bb26800882ab96c470ee9fc4632" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::contains</definition>
        <argsstring>(const CPtSet &amp;cpts1, const CPtSet &amp;cpts2)</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &amp;</type>
          <declname>cpts2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="389" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="389" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a7a1be735c76ba4a6b235264fe8ec6c28" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::isSameVar</definition>
        <argsstring>(const CVar &amp;var1, const CVar &amp;var2) const</argsstring>
        <name>isSameVar</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &amp;</type>
          <declname>var2</declname>
        </param>
        <briefdescription>
<para>Whether two pointers/objects are the same one by considering their conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>we distinguish context sensitive memory allocation here</para>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="412" column="10" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="412" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a9452d65894864446d8288639435382d7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::CondPTAImpl&lt; Cond &gt;::NormalizePointsTo</definition>
        <argsstring>()</argsstring>
        <name>NormalizePointsTo</name>
        <briefdescription>
<para>Normalize points-to information to BitVector/conditional representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="424" column="18" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="424" bodyend="444"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1af71b4ec9844701582d997466c2e4d94f" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref>&lt; Cond &gt;</type>
        <definition>typedef CondVar&lt;Cond&gt; SVF::CondPTAImpl&lt; Cond &gt;::CVar</definition>
        <argsstring></argsstring>
        <name>CVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="233" column="21" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1a3f2f48fc122c07ff9eb1382aa7a3f966" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CondStdSet</ref>&lt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref> &gt;</type>
        <definition>typedef CondStdSet&lt;CVar&gt; SVF::CondPTAImpl&lt; Cond &gt;::CPtSet</definition>
        <argsstring></argsstring>
        <name>CPtSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="234" column="25" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1aca28ac25c0c3ca6bebbec2535c175230" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTData</ref>&lt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref>, <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref>, <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &gt;</type>
        <definition>typedef PTData&lt;CVar, CVar, CPtSet&gt; SVF::CondPTAImpl&lt; Cond &gt;::PTDataTy</definition>
        <argsstring></argsstring>
        <name>PTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="235" column="20" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1abc91ac8ebca1c22d08ddb357889d0fa8" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_mutable_p_t_data" kindref="compound">MutablePTData</ref>&lt; <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref>, <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CVar</ref>, <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &gt;</type>
        <definition>typedef MutablePTData&lt;CVar, CVar, CPtSet&gt; SVF::CondPTAImpl&lt; Cond &gt;::MutPTDataTy</definition>
        <argsstring></argsstring>
        <name>MutPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="236" column="27" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1aba828ca8e2aa2bd71b78be8b45a48c9b" prot="public" static="no">
        <type>Map&lt; NodeID, PointsTo &gt;</type>
        <definition>typedef Map&lt;NodeID,PointsTo&gt; SVF::CondPTAImpl&lt; Cond &gt;::PtrToBVPtsMap</definition>
        <argsstring></argsstring>
        <name>PtrToBVPtsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="237" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1a838c3f2be39d278072f7a9df7c0bcb4d" prot="public" static="no">
        <type>Map&lt; NodeID, NodeSet &gt;</type>
        <definition>typedef Map&lt;NodeID, NodeSet&gt; SVF::CondPTAImpl&lt; Cond &gt;::PtrToNSMap</definition>
        <argsstring></argsstring>
        <name>PtrToNSMap</name>
        <briefdescription>
<para>map a pointer to its BitVector points-to representation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="238" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_p_t_a_impl_1a5043e9d9255d31777d038c48c809bb09" prot="public" static="no">
        <type>Map&lt; NodeID, <ref refid="class_s_v_f_1_1_cond_std_set" kindref="compound">CPtSet</ref> &gt;</type>
        <definition>typedef Map&lt;NodeID,CPtSet&gt; SVF::CondPTAImpl&lt; Cond &gt;::PtrToCPtsMap</definition>
        <argsstring></argsstring>
        <name>PtrToCPtsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="239" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1adc5d33698377dc22aa1ae1151da13675" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondPTAImpl&lt; Cond &gt;::CondPTAImpl</definition>
        <argsstring>(PAG *pag, PointerAnalysis::PTATY type)</argsstring>
        <name>CondPTAImpl</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
          <declname>pag</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PointerAnalysis::PTATY</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>map a pointer to its conditional points-to set </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="242" column="5" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="242" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a01f64600bf6581403836019e4e5ae741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CondPTAImpl&lt; Cond &gt;::~CondPTAImpl</definition>
        <argsstring>()</argsstring>
        <name>~CondPTAImpl</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="253" column="13" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a5fa3d986e4ef710a2148b2854167c3ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPTAImpl&lt; Cond &gt;::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Release memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="264" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a35cb1fd6e18cdc8e8466ee94846bc553" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTDataTy</ref> *</type>
        <definition>PTDataTy* SVF::CondPTAImpl&lt; Cond &gt;::getPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getPTDataTy</name>
        <briefdescription>
<para>Get points-to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="271" column="21" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1ab582d46731c06a7fa022bf301d6008c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mutable_p_t_data" kindref="compound">MutPTDataTy</ref> *</type>
        <definition>MutPTDataTy* SVF::CondPTAImpl&lt; Cond &gt;::getMutPTDataTy</definition>
        <argsstring>() const</argsstring>
        <name>getMutPTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="276" column="24" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a597e9c4e76f358c36d4b820c4d69ebc6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPTAImpl&lt; Cond &gt;::hasPtsMap</definition>
        <argsstring>(void) const</argsstring>
        <name>hasPtsMap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="283" column="17" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1a979486e35b529fbc62b2974899627113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MutPTDataTy::PtsMap &amp;</type>
        <definition>const MutPTDataTy::PtsMap&amp; SVF::CondPTAImpl&lt; Cond &gt;::getPtsMap</definition>
        <argsstring>() const</argsstring>
        <name>getPtsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="288" column="47" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="288" bodyend="293"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_p_t_a_impl_1ae76fb767c13ca39baa0fbec55a7780fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::CondPTAImpl&lt; Cond &gt;::classof</definition>
        <argsstring>(const PointerAnalysis *pta)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/PointerAnalysisImpl.h" line="258" column="24" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="258" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Pointer analysis implementation which uses conditional points-to map data structure (context/path sensitive analysis) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::CondPTAImpl&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_cond_p_t_a_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::CondPTAImpl&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_cond_p_t_a_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>ptD</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="10">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>SVF::PTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_p_t_data"/>
      </node>
      <node id="3">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="13">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="9">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="5">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="4">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="12">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="7">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="3" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MemoryModel/PointerAnalysisImpl.h" line="229" column="1" bodyfile="include/MemoryModel/PointerAnalysisImpl.h" bodystart="230" bodyend="586"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ADAPTFSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ADAPTFSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a08037f32b927fe2e6be47a61a060463c" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>addPts</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1afa6dffc1ac7e8dada1ff9e75b8cfd187" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a171918ada9b679b0114b27476caa5ee6" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1ac18e1dc9c6fc8cc952f67a93c2491876" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1adb1ed3728d53a13c94402392155e9913" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a8e48e9fe6f7e21da49a155f8f6893944" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>alias_validation</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AliasAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestFailMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestFailMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestFailNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestFailNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestMustAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestMustAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestPartialAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>aliasTestPartialAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6" prot="public" virt="pure-virtual"><scope>SVF::CondPTAImpl</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>Andersen_BASE</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>Andersen_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenHCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenHLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenSCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenSFR_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenWaveDiff_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>AndersenWaveDiffWithType_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>BaseImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>BVDataImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>callGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>callGraphSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>chgraph</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1ae76fb767c13ca39baa0fbec55a7780fe" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1adfae199dfbe05c9c20052e0fc204e6de" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>computeDDAPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CondImpl</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1adc5d33698377dc22aa1ae1151da13675" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CondPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>connectVCallToVFns</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a8cd7b08bd978513cb0faacc47bbaf578" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>containBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" prot="public" virt="non-virtual" ambiguityscope="SVF::PointerAnalysis::"><scope>SVF::CondPTAImpl</scope><name>containBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a3a10f3327d6473c348df5b62a5d6683f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>containConstantNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd" prot="public" virt="non-virtual" ambiguityscope="SVF::PointerAnalysis::"><scope>SVF::CondPTAImpl</scope><name>containConstantNode</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a5af00bb26800882ab96c470ee9fc4632" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>contains</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a3f2f48fc122c07ff9eb1382aa7a3f966" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CPtSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CSCallString_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CSSummary_WPA</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1af71b4ec9844701582d997466c2e4d94f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>CVar</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>Cxt_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>Default_PTA</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a5fa3d986e4ef710a2148b2854167c3ed" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>disablePrintStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a861554c2fdeaa406131c2c920b4c7908" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>dumpAllPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>dumpAllTypes</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa260a3275fbec7061295306a58763d24" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>dumpCPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>dumpGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>dumpPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>dumpStat</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a80daa422e0dacf75aceb4fe5b4687c04" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>dumpTopLevelPtsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a87b48287d7edb97fc120200fe0e5218d" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>expandFIObjs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FieldS_DDA</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>finalize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FlowS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FSDATAFLOW_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FSSPARSE_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FSTBHC_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getAllValidPtrs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getAnalysisTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getBaseObjNode</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a94f3e4d073b8c5bab3c46058ddba3f43" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getBVPointsTo</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getCallGraphSCCRepNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getCHGraph</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a454a998ef5a866f2a6f270e3283c6ebd" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getCondPointsTo</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getFunPtr</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getIndCallMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1ab582d46731c06a7fa022bf301d6008c1" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getMutPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getNumOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getPTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a35cb1fd6e18cdc8e8466ee94846bc553" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a63fa2b3a96696ffc67a119c1ba5ce748" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a0b96ba98239186d6d676f9540da9e590" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a979486e35b529fbc62b2974899627113" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getPtsMap</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a0da0602c5b260afaba4bef1abcbcf7b3" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getTypeSystem</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getVFnsFromCHA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>getVFnsFromPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>hasIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a597e9c4e76f358c36d4b820c4d69ebc6" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>hasPtsMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>icfg</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>initialize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>inSameCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isArrayMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a6b746c30161c7dab86510895e0032935" prot="public" virt="pure-virtual"><scope>SVF::CondPTAImpl</scope><name>isCondCompatible</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isHeapMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isInRecursion</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isLocalVarInRecursiveFun</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isNonPointerObj</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a7a1be735c76ba4a6b235264fe8ec6c28" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>isSameVar</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>matchArgs</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a3b5877fec52bbfa7c83bab6c9bc95684" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>mustAlias</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1abc91ac8ebca1c22d08ddb357889d0fa8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>MutPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1ab4115f25e2e477bfd73d01f069f47241" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>normalized</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a9452d65894864446d8288639435382d7" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>NormalizePointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a22c23f3ba1ee7e0aaccf0b8a1b58e33e" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>objToNSRevPtsMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>OnTheFlyIterBudgetForStat</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1adf0acbb0c605278e43d88787d651bbd8" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>overlap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PathS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>print_stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>printStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptaCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PTAImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptaImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>PTAName</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptaTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PTATY</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1af960c10e49932ea5e9dcdd299ff300ce" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptD</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1aca28ac25c0c3ca6bebbec2535c175230" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PTDataTy</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1aba828ca8e2aa2bd71b78be8b45a48c9b" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PtrToBVPtsMap</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a30b9ee7b1dcd04285f92cf7accd05b2e" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptrToBVPtsMap</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a5043e9d9255d31777d038c48c809bb09" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PtrToCPtsMap</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a61167fcdb2005090de1b38e53450431a" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>ptrToCPtsMap</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a838c3f2be39d278072f7a9df7c0bcb4d" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>PtrToNSMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>resetObjFieldSensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>resolveCPPIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>resolveIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>setObjFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>Steensgaard_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>svfMod</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>TypeCPP_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed" prot="protected" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>typeSystem</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a1a95d1d6ac48157c896d9895cff697b4" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a4ad5da56c8b7bc75bf2dc30a1bcf1552" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>validateExpectedFailureTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>validateSuccessTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df" prot="protected" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>validateTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>VFS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>VFunSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca" prot="public" virt="non-virtual"><scope>SVF::CondPTAImpl</scope><name>VTableSet</name></member>
      <member refid="class_s_v_f_1_1_cond_p_t_a_impl_1a01f64600bf6581403836019e4e5ae741" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>~CondPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c" prot="public" virt="virtual"><scope>SVF::CondPTAImpl</scope><name>~PointerAnalysis</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
