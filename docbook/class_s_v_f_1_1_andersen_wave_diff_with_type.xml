<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type" xml:lang="en-US">
<title>SVF::AndersenWaveDiffWithType Class Reference</title>
<indexterm><primary>SVF::AndersenWaveDiffWithType</primary></indexterm>
<para>
<computeroutput>#include &lt;Andersen.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::AndersenWaveDiffWithType:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_andersen_wave_diff_with_type.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ab35af1ec760ee8ffa39ad7258d79cd4f"/><emphasis role="strong">AndersenWaveDiffWithType</emphasis> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> type=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f">AndersenWaveDiffWithType_WPA</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a4abc7b63b173fcff5dbe2a187fc73298"/>static <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type">AndersenWaveDiffWithType</link> * <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a4abc7b63b173fcff5dbe2a187fc73298">createAndersenWaveDiffWithType</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *p)</para>

<para>Create an singleton instance directly instead of invoking llvm pass manager. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ab82dc509ba29728b0827e20931aca7fc"/>static void <emphasis role="strong">releaseAndersenWaveDiffWithType</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual NodeStack &amp; <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1aef46713e8407e5963c5c8f04ff1545d1">SCCDetect</link> ()</para>

<para>SCC detection. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ac6801af3f3ffde939930995de9340cce">mergeTypeOfNodes</link> (const NodeBS &amp;nodes)</para>

<para>merge types of nodes in a cycle </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a77cfe9b8370d1bfcdf920162c09b7d00"/>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a77cfe9b8370d1bfcdf920162c09b7d00">processCast</link> (const <link linkend="_class_s_v_f_1_1_constraint_edge">ConstraintEdge</link> *edge)</para>

<para>process &quot;bitcast&quot; <link linkend="_class_s_v_f_1_1_copy_c_g_edge">CopyCGEdge</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ac93f4b9ea637914084bbccab73de869a"/>void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ac93f4b9ea637914084bbccab73de869a">updateObjType</link> (const Type *type, const PointsTo &amp;objs)</para>

<para>update type of objects when process &quot;bitcast&quot; <link linkend="_class_s_v_f_1_1_copy_c_g_edge">CopyCGEdge</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ab8ed40f529fe0b89ba88f8209a379a53"/>void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ab8ed40f529fe0b89ba88f8209a379a53">processTypeMismatchedGep</link> (NodeID obj, const Type *type)</para>

<para>process mismatched gep edges </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a2e30eef929c8aa8b0f9ac2f8fa7bc0f5"/>virtual bool <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1a2e30eef929c8aa8b0f9ac2f8fa7bc0f5">matchType</link> (NodeID ptrid, NodeID objid, const <link linkend="_class_s_v_f_1_1_normal_gep_c_g_edge">NormalGepCGEdge</link> *normalGepEdge)</para>

<para>match types for Gep Edges </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1aaa2264bae63b40a1f345473aabfa927d"/>virtual void <link linkend="_class_s_v_f_1_1_andersen_wave_diff_with_type_1aaa2264bae63b40a1f345473aabfa927d">addTypeForGepObjNode</link> (NodeID id, const <link linkend="_class_s_v_f_1_1_normal_gep_c_g_edge">NormalGepCGEdge</link> *normalGepEdge)</para>

<para>add type for newly created GepObjNode </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Wave propagation with diff points-to set with type filter. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1ac6801af3f3ffde939930995de9340cce"/>    <section>
    <title>mergeTypeOfNodes()</title>
<indexterm><primary>mergeTypeOfNodes</primary><secondary>SVF::AndersenWaveDiffWithType</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiffWithType</primary><secondary>mergeTypeOfNodes</secondary></indexterm>
<para><computeroutput>void AndersenWaveDiffWithType::mergeTypeOfNodes (const NodeBS &amp; nodes)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>merge types of nodes in a cycle </para>
</para>

<para>collect types in a cycle</para>

<para>merge types of nodes in a cycle</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_wave_diff_with_type_1aef46713e8407e5963c5c8f04ff1545d1"/>    <section>
    <title>SCCDetect()</title>
<indexterm><primary>SCCDetect</primary><secondary>SVF::AndersenWaveDiffWithType</secondary></indexterm>
<indexterm><primary>SVF::AndersenWaveDiffWithType</primary><secondary>SCCDetect</secondary></indexterm>
<para><computeroutput>NodeStack &amp; AndersenWaveDiffWithType::SCCDetect ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>SCC detection. </para>
</para>

<para>merge types of nodes in SCC</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a31ea24432ff42ab86a4728f2bde571bc">SVF::Andersen</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/WPA/Andersen.hlib/WPA/AndersenWaveDiffWithType.cpp</section>
</section>
