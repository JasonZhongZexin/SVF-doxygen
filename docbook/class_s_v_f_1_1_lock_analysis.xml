<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_lock_analysis" xml:lang="en-US">
<title>SVF::LockAnalysis Class Reference</title>
<indexterm><primary>SVF::LockAnalysis</primary></indexterm>
<para>
<computeroutput>#include &lt;LockAnalysis.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791"/>enum <link linkend="_class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791">ValDomain</link> { <emphasis role="strong">Empty</emphasis>
, <emphasis role="strong">TDLocked</emphasis>
, <emphasis role="strong">TDUnlocked</emphasis>
 }</para>

<para>semilattice Empty==&gt;TDUnlocked==&gt;TDLocked </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ab468a6a0f1705c000dc4260097222b06"/>typedef <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> <emphasis role="strong">CxtLock</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ad855d1de318766ac305a10bfdae4da82"/>typedef <link linkend="_class_s_v_f_1_1_cxt_proc">CxtProc</link> <emphasis role="strong">CxtLockProc</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4bde0f39a6b5cf83e0011d7ef272c685"/>typedef NodeBS <emphasis role="strong">LockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1aeb4b15ecc4ba1a0ca8794d304d1895cb"/>typedef TCT::InstVec <emphasis role="strong">InstVec</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ae682eb30763f0f52184eb36c95fc3811"/>typedef Set&lt; const Instruction * &gt; <emphasis role="strong">InstSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ae675d0ebf4eac597487ce83e667a8229"/>typedef InstSet <emphasis role="strong">CISpan</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1acdcc3fc4b90e7f67cfb9601ddc31d5f8"/>typedef Map&lt; const Instruction *, CISpan &gt; <emphasis role="strong">CILockToSpan</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a561bb2fbfbeee9117efad7c7c70871d8"/>typedef Set&lt; const Function * &gt; <emphasis role="strong">FunSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a281e41a6a1cdc21c214aafa6ea23b343"/>typedef Map&lt; const Instruction *, InstSet &gt; <emphasis role="strong">InstToInstSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ab6ee6947515c61c07428e62c267d5412"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link>, <link linkend="_class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791">ValDomain</link> &gt; <emphasis role="strong">CxtStmtToLockFlagMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ae2218961699a4b4385f47fb039005dbe"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &gt; <emphasis role="strong">CxtStmtWorkList</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a07b7d49e1fbe3e5dc694b6aadbee05b8"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &gt; <emphasis role="strong">LockSpan</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a42ed881d4cd79eae099266a9e171aeb2"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &gt; <emphasis role="strong">CxtStmtSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a0716c155b42b3ae7a6c8d7593bb6ac83"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &gt; <emphasis role="strong">CxtLockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a7335d5b13a6cb1dcde9706f30b8a4826"/>typedef Map&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link>, LockSpan &gt; <emphasis role="strong">CxtLockToSpan</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ab782401c6521a2810e28ac602710ac22"/>typedef Map&lt; <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link>, NodeBS &gt; <emphasis role="strong">CxtLockToLockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a1f9ae41c4ed7450d0d8b29cd20a6ef25"/>typedef Map&lt; const Instruction *, NodeBS &gt; <emphasis role="strong">LockSiteToLockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a32543eb205653a65bb71de55d0471a1d"/>typedef Map&lt; const Instruction *, LockSpan &gt; <emphasis role="strong">InstToCxtStmtSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a388ab1fdb932d68655fb7032998ab1ba"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link>, CxtLockSet &gt; <emphasis role="strong">CxtStmtToCxtLockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a058f3518f0b861c46c99095922e373f0"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; <link linkend="_class_s_v_f_1_1_cxt_proc">CxtLockProc</link> &gt; <emphasis role="strong">CxtLockProcVec</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a9bd40b3051f60c527eef38ae70cfeb14"/>typedef set&lt; <link linkend="_class_s_v_f_1_1_cxt_proc">CxtLockProc</link> &gt; <emphasis role="strong">CxtLockProcSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a6029b3e184b169bc8a32bd1ed97148ae"/>typedef std::pair&lt; const Function *, const Function * &gt; <emphasis role="strong">FuncPair</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1aa74d461f9dafa748e558ee120f914ce3"/>typedef Map&lt; FuncPair, bool &gt; <emphasis role="strong">FuncPairToBool</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1af8aff31058caba691c127b8aef297b43"/><emphasis role="strong">LockAnalysis</emphasis> (<link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> *t)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1ad1516b6cb1dbd06b8dff04ae3c944621">analyze</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1a8a34f7544f22a87e1caf010c34abda75">analyzeIntraProcedualLock</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a6febb0bb12f4983cd54b3bd310ce65d2">intraForwardTraverse</link> (const Instruction *lock, InstSet &amp;unlockset, InstSet &amp;forwardInsts)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a5f693c893f3701e1e025881f91193d53">intraBackwardTraverse</link> (const InstSet &amp;unlockset, InstSet &amp;backwardInsts)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ae03db88ef0ad0da2c31cf1623b32165f"/>void <emphasis role="strong">collectCxtLock</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a00ccd89eff3fe8fec397df101f927cbe"/>void <emphasis role="strong">analyzeLockSpanCxtStmt</emphasis> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1aa8683de99ad02fb75b175b0bb54e5f7d">collectLockUnlocksites</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1a271506d5032033efae684b0d729f5b3e">buildCandidateFuncSetforLock</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1aa91522e95e8a9450032bfeaf7a3e491c">isIntraLock</link> (const Instruction *lock) const</para>

<para>Intraprocedural locks. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ab28428444170091d2c65572263b9f40b"/>void <link linkend="_class_s_v_f_1_1_lock_analysis_1ab28428444170091d2c65572263b9f40b">addIntraLock</link> (const Instruction *lockSite, const InstSet &amp;stmts)</para>

<para>Add intra-procedural lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a0cc6e4b4ab78f3c54b68fe35adb02957"/>void <link linkend="_class_s_v_f_1_1_lock_analysis_1a0cc6e4b4ab78f3c54b68fe35adb02957">addCondIntraLock</link> (const Instruction *lockSite, const InstSet &amp;stmts)</para>

<para>Add intra-procedural lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ac33c03c9d4a978891009ae919559d567"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1ac33c03c9d4a978891009ae919559d567">isInsideIntraLock</link> (const Instruction *stmt) const</para>

<para>Return true if a statement is inside an intra-procedural lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1af3b0c1b628bac48d07c24008fd9edc4f"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1af3b0c1b628bac48d07c24008fd9edc4f">isInsideCondIntraLock</link> (const Instruction *stmt) const</para>

<para>Return true if a statement is inside a partial lock/unlock pair (conditional lock with unconditional unlock) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ad8e7c32cb1163f4917124fed5cf6c3ab"/>const InstSet &amp; <emphasis role="strong">getIntraLockSet</emphasis> (const Instruction *stmt) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1a177b10a617c275a9c2c2ed5e9b10d78a">addCxtLock</link> (const CallStrCxt &amp;cxt, const Instruction *inst)</para>

<para>Context-sensitive locks. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a6c918786d065309e8a7b13759f410a09"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a6c918786d065309e8a7b13759f410a09">hasCxtLock</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &amp;cxtLock) const</para>

<para>Get context-sensitive lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1af45f3c22edce16913ccbdd7015a06076"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1af45f3c22edce16913ccbdd7015a06076">intersects</link> (const CxtLockSet &amp;lockset1, const CxtLockSet &amp;lockset2) const</para>

<para>Return true if the intersection of two locksets is not empty. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4424f27444c12dce8071c56a95c664bf"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a4424f27444c12dce8071c56a95c664bf">alias</link> (const CxtLockSet &amp;lockset1, const CxtLockSet &amp;lockset2)</para>

<para>Return true if two locksets has at least one alias lock. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4c76b3fb18248081dc1affbc33940164"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a4c76b3fb18248081dc1affbc33940164">isLockCandidateFun</link> (const Function *fun) const</para>

<para>Return true if it is a candidate function. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a0af0f5bf91f4ae175b89ef24c27c987a">hasCxtStmtfromInst</link> (const Instruction *inst) const</para>

<para>Context-sensitive statement and lock spans. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1afc8c13fcff7c1199f63efc198a3b5a6d"/>const CxtStmtSet &amp; <emphasis role="strong">getCxtStmtfromInst</emphasis> (const Instruction *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a395df7174e06cad1971e6a81587ca043"/>bool <emphasis role="strong">hasCxtLockfromCxtStmt</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4b55036dae224c83b650389a409d9b96"/>const CxtLockSet &amp; <emphasis role="strong">getCxtLockfromCxtStmt</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a0809f300ab80173523b34226bb832bd2"/>CxtLockSet &amp; <emphasis role="strong">getCxtLockfromCxtStmt</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a718d6f2f55c1e2e7eb619c3e056ab458"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a718d6f2f55c1e2e7eb619c3e056ab458">addCxtStmtToSpan</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &amp;cl)</para>

<para>Add context-sensitive statement. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a0b21446e6d5dfc1b5d0ebd75895225dd"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a0b21446e6d5dfc1b5d0ebd75895225dd">removeCxtStmtToSpan</link> (<link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &amp;cl)</para>

<para>Add context-sensitive statement. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1aaa0f33f19d9f80eee98289119ba907d2"/>void <link linkend="_class_s_v_f_1_1_lock_analysis_1aaa0f33f19d9f80eee98289119ba907d2">touchCxtStmt</link> (<link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts)</para>

<para>Touch this context statement. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1af8ada4a73bf132e1adeef7aa0522f596"/>bool <emphasis role="strong">hasSpanfromCxtLock</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &amp;cl)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ae7942c801e05357bb63f08c24489daf6"/>LockSpan &amp; <emphasis role="strong">getSpanfromCxtLock</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtLock</link> &amp;cl)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a86f06a790cf90ec897b896a79956e5b4"/>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a86f06a790cf90ec897b896a79956e5b4">hasOneCxtInLockSpan</link> (const Instruction *I, LockSpan lspan) const</para>

<para>Check if one instruction&apos;s context stmt is in a lock span. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a33740d6dc51d24af2d0c8cb2fbf27db6"/>bool <emphasis role="strong">hasAllCxtInLockSpan</emphasis> (const Instruction *I, LockSpan lspan) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a4d4501d62bf51475662b6ba66e6380aa">isProtectedByCommonLock</link> (const Instruction *i1, const Instruction *i2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287">isProtectedByCommonCxtLock</link> (const Instruction *i1, const Instruction *i2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a3e2e629a588b44ed39e529babb59a4f9">isProtectedByCommonCxtLock</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cxtStmt1, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cxtStmt2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a842ddef4d1cb9c45555d949375627a48">isProtectedByCommonCILock</link> (const Instruction *i1, const Instruction *i2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1af30d0dad3d17188de8c2cea9b004f3d3">isInSameSpan</link> (const Instruction *I1, const Instruction *I2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd">isInSameCSSpan</link> (const Instruction *i1, const Instruction *i2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a8595b976bf60d161561e5494257aa179">isInSameCSSpan</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cxtStmt1, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cxtStmt2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_lock_analysis_1a65aca2bc12fc34203b16549653943eae">isInSameCISpan</link> (const Instruction *i1, const Instruction *i2) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a3df63f936d488166109d73bdcf0437d5"/>u32_t <emphasis role="strong">getNumOfCxtLocks</emphasis> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_lock_analysis_1ac1b42b0a53feae04f848e5b0828ff01a">printLocks</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;cts)</para>

<para>Print locks and spans. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1adadee129c04b82576b4ca3c7594cdcb2"/>double <emphasis role="strong">lockTime</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ad648ad9cda4070f9aec1addef0067627"/>u32_t <emphasis role="strong">numOfTotalQueries</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a80c56ebc6b9b594e97b56767f451ff8b"/>u32_t <emphasis role="strong">numOfLockedQueries</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a853ab1a953ddcf76841016a833e43f3d"/>double <emphasis role="strong">lockQueriesTime</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Lock analysis </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a177b10a617c275a9c2c2ed5e9b10d78a"/>    <section>
    <title>addCxtLock()</title>
<indexterm><primary>addCxtLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>addCxtLock</secondary></indexterm>
<para><computeroutput>void SVF::LockAnalysis::addCxtLock (const CallStrCxt &amp; cxt, const Instruction * inst)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Context-sensitive locks. </para>
</para>

<para>Add inter-procedural context-sensitive lock </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ad1516b6cb1dbd06b8dff04ae3c944621"/>    <section>
    <title>analyze()</title>
<indexterm><primary>analyze</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>analyze</secondary></indexterm>
<para><computeroutput>void LockAnalysis::analyze ( )</computeroutput></para>
<para>context-sensitive forward traversal from each lock site. Generate following results (1) context-sensitive lock site, (2) maps a context-sensitive lock site to its corresponding lock span. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a8a34f7544f22a87e1caf010c34abda75"/>    <section>
    <title>analyzeIntraProcedualLock()</title>
<indexterm><primary>analyzeIntraProcedualLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>analyzeIntraProcedualLock</secondary></indexterm>
<para><computeroutput>void LockAnalysis::analyzeIntraProcedualLock ( )</computeroutput></para>
<para>Analyze intraprocedural locks A lock is intraprocedural if its lock span is within a procedural </para>

<para>FIXME:Should we intersect forwardInsts and backwardInsts?</para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a271506d5032033efae684b0d729f5b3e"/>    <section>
    <title>buildCandidateFuncSetforLock()</title>
<indexterm><primary>buildCandidateFuncSetforLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>buildCandidateFuncSetforLock</secondary></indexterm>
<para><computeroutput>void LockAnalysis::buildCandidateFuncSetforLock ( )</computeroutput></para>
<para>Collect candidate functions for context-sensitive lock analysis </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1aa8683de99ad02fb75b175b0bb54e5f7d"/>    <section>
    <title>collectLockUnlocksites()</title>
<indexterm><primary>collectLockUnlocksites</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>collectLockUnlocksites</secondary></indexterm>
<para><computeroutput>void LockAnalysis::collectLockUnlocksites ( )</computeroutput></para>
<para>Collect lock/unlock sites </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a0af0f5bf91f4ae175b89ef24c27c987a"/>    <section>
    <title>hasCxtStmtfromInst()</title>
<indexterm><primary>hasCxtStmtfromInst</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>hasCxtStmtfromInst</secondary></indexterm>
<para><computeroutput>bool SVF::LockAnalysis::hasCxtStmtfromInst (const Instruction * inst) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Context-sensitive statement and lock spans. </para>
</para>

<para>Get LockSet and LockSpan </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a5f693c893f3701e1e025881f91193d53"/>    <section>
    <title>intraBackwardTraverse()</title>
<indexterm><primary>intraBackwardTraverse</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>intraBackwardTraverse</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::intraBackwardTraverse (const InstSet &amp; unlockSet, InstSet &amp; backwardInsts)</computeroutput></para>
<para>Intra-procedural backward traversal </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a6febb0bb12f4983cd54b3bd310ce65d2"/>    <section>
    <title>intraForwardTraverse()</title>
<indexterm><primary>intraForwardTraverse</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>intraForwardTraverse</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::intraForwardTraverse (const Instruction * lockSite, InstSet &amp; unlockSet, InstSet &amp; forwardInsts)</computeroutput></para>
<para>Intra-procedural forward traversal </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a65aca2bc12fc34203b16549653943eae"/>    <section>
    <title>isInSameCISpan()</title>
<indexterm><primary>isInSameCISpan</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isInSameCISpan</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isInSameCISpan (const Instruction * i1, const Instruction * i2) const</computeroutput></para>
<para>Return true if two instructions are inside same context-insensitive lock span </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a8595b976bf60d161561e5494257aa179"/>    <section>
    <title>isInSameCSSpan()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>isInSameCSSpan</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isInSameCSSpan</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isInSameCSSpan (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; cxtStmt1, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; cxtStmt2) const</computeroutput></para>
<para>Return true if two context-sensitive instructions are inside same context-insensitive lock spa </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd"/>    <section>
    <title>isInSameCSSpan()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>isInSameCSSpan</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isInSameCSSpan</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isInSameCSSpan (const Instruction * I1, const Instruction * I2) const</computeroutput></para>
<para>Return true if two instructions are inside at least one common contex-sensitive lock span </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1af30d0dad3d17188de8c2cea9b004f3d3"/>    <section>
    <title>isInSameSpan()</title>
<indexterm><primary>isInSameSpan</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isInSameSpan</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isInSameSpan (const Instruction * i1, const Instruction * i2)</computeroutput></para>
<para>Return true if two instructions are inside at least one common lock span </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1aa91522e95e8a9450032bfeaf7a3e491c"/>    <section>
    <title>isIntraLock()</title>
<indexterm><primary>isIntraLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isIntraLock</secondary></indexterm>
<para><computeroutput>bool SVF::LockAnalysis::isIntraLock (const Instruction * lock) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Intraprocedural locks. </para>
</para>

<para>Return true if the lock is an intra-procedural lock </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a842ddef4d1cb9c45555d949375627a48"/>    <section>
    <title>isProtectedByCommonCILock()</title>
<indexterm><primary>isProtectedByCommonCILock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isProtectedByCommonCILock</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isProtectedByCommonCILock (const Instruction * i1, const Instruction * i2)</computeroutput></para>
<para>Protected by at least one common context-insensitive lock </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a3e2e629a588b44ed39e529babb59a4f9"/>    <section>
    <title>isProtectedByCommonCxtLock()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>isProtectedByCommonCxtLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isProtectedByCommonCxtLock</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isProtectedByCommonCxtLock (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; cxtStmt1, const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; cxtStmt2)</computeroutput></para>
<para>Protected by at least one common context-sensitive lock </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287"/>    <section>
    <title>isProtectedByCommonCxtLock()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>isProtectedByCommonCxtLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isProtectedByCommonCxtLock</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isProtectedByCommonCxtLock (const Instruction * i1, const Instruction * i2)</computeroutput></para>
<para>Protected by at least one common context-sensitive lock under each context </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1a4d4501d62bf51475662b6ba66e6380aa"/>    <section>
    <title>isProtectedByCommonLock()</title>
<indexterm><primary>isProtectedByCommonLock</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>isProtectedByCommonLock</secondary></indexterm>
<para><computeroutput>bool LockAnalysis::isProtectedByCommonLock (const Instruction * i1, const Instruction * i2)</computeroutput></para>
<para>Check if two Instructions are protected by common locks echo inst may have multiple cxt stmt we check whether every cxt stmt of instructions is protected by a common lock.</para>

<para>Protected by at least one common lock under every context </para>
    </section><anchor xml:id="_class_s_v_f_1_1_lock_analysis_1ac1b42b0a53feae04f848e5b0828ff01a"/>    <section>
    <title>printLocks()</title>
<indexterm><primary>printLocks</primary><secondary>SVF::LockAnalysis</secondary></indexterm>
<indexterm><primary>SVF::LockAnalysis</primary><secondary>printLocks</secondary></indexterm>
<para><computeroutput>void LockAnalysis::printLocks (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; cts)</computeroutput></para><para>

<para>Print locks and spans. </para>
</para>

<para>Print context-insensitive and context-sensitive locks </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MTA/LockAnalysis.hlib/MTA/LockAnalysis.cpp</section>
</section>
