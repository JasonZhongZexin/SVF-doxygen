<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_d_c_h_graph" kind="class" language="C++" prot="public">
    <compoundname>SVF::DCHGraph</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_common_c_h_graph" prot="public" virt="non-virtual">SVF::CommonCHGraph</basecompoundref>
    <basecompoundref refid="class_s_v_f_1_1_generic_graph" prot="public" virt="non-virtual">SVF::GenericGraph&lt; DCHNode, DCHEdge &gt;</basecompoundref>
    <includes refid="_d_c_h_g_8h" local="no">DCHG.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a85a3c9a6a60a4379717773f8722ae42e" prot="protected" static="no" mutable="no">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>const SVFModule* SVF::DCHGraph::svfModule</definition>
        <argsstring></argsstring>
        <name>svfModule</name>
        <briefdescription>
<para><ref refid="namespace_s_v_f" kindref="compound">SVF</ref> Module this CHG is built from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="354" column="21" bodyfile="include/SVF-FE/DCHG.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1aa6f49dfc9e3580d3f2d8c257395eb11e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::DCHGraph::extended</definition>
        <argsstring></argsstring>
        <name>extended</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether this CHG is an extended CHG (first-field). Set by buildCHG. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="356" column="10" bodyfile="include/SVF-FE/DCHG.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a581ce71cbc7994f71c9a6b9b145d3b9f" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, <ref refid="class_s_v_f_1_1_d_c_h_node" kindref="compound">DCHNode</ref> * &gt;</type>
        <definition>Map&lt;const DIType *, DCHNode *&gt; SVF::DCHGraph::diTypeToNodeMap</definition>
        <argsstring></argsstring>
        <name>diTypeToNodeMap</name>
        <briefdescription>
<para>Maps DITypes to their nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="358" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1aaa63715e67ade7711a0366eb7559b708" prot="protected" static="no" mutable="no">
        <type>Map&lt; const GlobalValue *, const DIType * &gt;</type>
        <definition>Map&lt;const GlobalValue *, const DIType *&gt; SVF::DCHGraph::vtblToTypeMap</definition>
        <argsstring></argsstring>
        <name>vtblToTypeMap</name>
        <briefdescription>
<para>Maps VTables to the DIType associated with them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="360" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1ac0d5f1e10f642aac5b64792bf5fcbd9d" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, NodeBS &gt;</type>
        <definition>Map&lt;const DIType *, NodeBS&gt; SVF::DCHGraph::chaMap</definition>
        <argsstring></argsstring>
        <name>chaMap</name>
        <briefdescription>
<para>Maps types to all children (i.e. CHA). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="362" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1abe8d313b501182ab62f2276a19d670a4" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, NodeBS &gt;</type>
        <definition>Map&lt;const DIType *, NodeBS&gt; SVF::DCHGraph::chaFFMap</definition>
        <argsstring></argsstring>
        <name>chaFFMap</name>
        <briefdescription>
<para>Maps types to all children but also considering first field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="364" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a294e7a04aff9cef87c1008e91a620155" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, VTableSet &gt;</type>
        <definition>Map&lt;const DIType *, VTableSet&gt; SVF::DCHGraph::vtblCHAMap</definition>
        <argsstring></argsstring>
        <name>vtblCHAMap</name>
        <briefdescription>
<para>Maps types to a set with their vtable and all their children&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="366" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1ad79a569e77f94fa8494eed3f18e07e90" prot="protected" static="no" mutable="no">
        <type>Map&lt; CallSite, VFunSet &gt;</type>
        <definition>Map&lt;CallSite, VFunSet&gt; SVF::DCHGraph::csCHAMap</definition>
        <argsstring></argsstring>
        <name>csCHAMap</name>
        <briefdescription>
<para>Maps callsites to a set of potential virtual functions based on CHA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="368" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a498a18fe8702251b6f2a4e6379e5cbb1" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, const DIType * &gt;</type>
        <definition>Map&lt;const DIType *, const DIType *&gt; SVF::DCHGraph::canonicalTypeMap</definition>
        <argsstring></argsstring>
        <name>canonicalTypeMap</name>
        <briefdescription>
<para>Maps types to their canonical type (many-to-one). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="370" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a10225f56b21eb7f0870fdc433de3c393" prot="protected" static="no" mutable="no">
        <type>Set&lt; const DIType * &gt;</type>
        <definition>Set&lt;const DIType *&gt; SVF::DCHGraph::canonicalTypes</definition>
        <argsstring></argsstring>
        <name>canonicalTypes</name>
        <briefdescription>
<para>Set of all possible canonical types (i.e. values of canonicalTypeMap). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="372" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a574ec14099f1112b394b00a79f3fdf1a" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, std::vector&lt; const DIType * &gt; &gt;</type>
        <definition>Map&lt;const DIType *, std::vector&lt;const DIType *&gt; &gt; SVF::DCHGraph::fieldTypes</definition>
        <argsstring></argsstring>
        <name>fieldTypes</name>
        <briefdescription>
<para>Maps types to their flattened fields&apos; types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="374" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1adc7a17f70ac3fa89624ad874dbd16ff9" prot="protected" static="no" mutable="no">
        <type>Map&lt; const DIType *, Set&lt; const DIType * &gt; &gt;</type>
        <definition>Map&lt;const DIType *, Set&lt;const DIType *&gt; &gt; SVF::DCHGraph::containingAggs</definition>
        <argsstring></argsstring>
        <name>containingAggs</name>
        <briefdescription>
<para>Maps aggregate types to all the aggregate types it transitively contains. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="376" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_graph_1a76fd3154a31584bb64683f2d762cc56c" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::DCHGraph::numTypes</definition>
        <argsstring></argsstring>
        <name>numTypes</name>
        <briefdescription>
<para>Number of types (nodes) in the graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="442" column="12" bodyfile="include/SVF-FE/DCHG.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a175ed6ad0c9b23d5617f755ab96c76c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType * DCHGraph::stripQualifiers</definition>
        <argsstring>(const DIType *)</argsstring>
        <name>stripQualifiers</name>
        <param>
          <type>const DIType *</type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Returns the DIType beneath the qualifiers. Does not strip away &quot;DW_TAG_members&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="212" column="25" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="754" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a6c276e661e5e63c1c84387f84c8a62e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType * DCHGraph::stripArray</definition>
        <argsstring>(const DIType *)</argsstring>
        <name>stripArray</name>
        <param>
          <type>const DIType *</type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Returns the DIType beneath all qualifiers and arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="215" column="25" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="807" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1acb76ab20da1bfbec00f63d08e48cbddd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DCHGraph::teq</definition>
        <argsstring>(const DIType *t1, const DIType *t2)</argsstring>
        <name>teq</name>
        <param>
          <type>const DIType *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if t1 and t2 are equivalent, ignoring qualifiers. For equality... Tags always need to be equal. DIBasicType: shallow pointer equality. DIDerivedType: base types (teq). DICompositeType: shallow pointer equality. DISubroutineType: shallow pointer equality. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="224" column="17" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="819" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a2dc488345cc3a5f37079952f638d8c2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DCHGraph::diTypeToStr</definition>
        <argsstring>(const DIType *)</argsstring>
        <name>diTypeToStr</name>
        <param>
          <type>const DIType *</type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Returns a human-readable version of the DIType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="227" column="24" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="958" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a9d2be5aec5216cbc1d1709b41f79c44b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DCHGraph::isAgg</definition>
        <argsstring>(const DIType *t)</argsstring>
        <name>isAgg</name>
        <param>
          <type>const DIType *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="230" column="17" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="342" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1af9970ff0ef4a8f4c638da9f519d14a21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::DCHGraph::classof</definition>
        <argsstring>(const CommonCHGraph *chg)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_common_c_h_graph" kindref="compound">CommonCHGraph</ref> *</type>
          <declname>chg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="280" column="24" bodyfile="include/SVF-FE/DCHG.h" bodystart="280" bodyend="283"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a7cbea4d5399333497faa3f8d213e365e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DCHGraph::DCHGraph</definition>
        <argsstring>(const SVFModule *svfMod)</argsstring>
        <name>DCHGraph</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfMod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="233" column="5" bodyfile="include/SVF-FE/DCHG.h" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1ae358abf5a377f480ecaea4df7a9fbdfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::DCHGraph::~DCHGraph</definition>
        <argsstring>()</argsstring>
        <name>~DCHGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="239" column="13" bodyfile="include/SVF-FE/DCHG.h" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a710c6b87fd475552eddb425e38de8889" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DCHGraph::buildCHG</definition>
        <argsstring>(bool extend)</argsstring>
        <name>buildCHG</name>
        <param>
          <type>bool</type>
          <declname>extend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the CHG from DWARF debug information. extend determines whether to extend the CHG with first field edges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="243" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="457" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a587baf86ecc2fdbecfcf85310673e9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHGraph::dump</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="245" column="10" bodyfile="include/SVF-FE/DCHG.h" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a5f08ed4cbba3e4b7a348d5ad77664726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::print</definition>
        <argsstring>(void)</argsstring>
        <name>print</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="250" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="1131" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a1494aeef22e15baaa160e8d598dd7de0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DCHGraph::csHasVFnsBasedonCHA</definition>
        <argsstring>(CallSite cs) override</argsstring>
        <name>csHasVFnsBasedonCHA</name>
        <reimplements refid="class_s_v_f_1_1_common_c_h_graph_1a0ce9117288d9e0b498f128217fda0cca">csHasVFnsBasedonCHA</reimplements>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="252" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1ad398e58286af020fb4dcc03644f2a24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const VFunSet &amp;</type>
        <definition>const VFunSet &amp; DCHGraph::getCSVFsBasedonCHA</definition>
        <argsstring>(CallSite cs) override</argsstring>
        <name>getCSVFsBasedonCHA</name>
        <reimplements refid="class_s_v_f_1_1_common_c_h_graph_1abe9232b9cada361e0434f7c4390a7864">getCSVFsBasedonCHA</reimplements>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="257" column="27" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="538" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a2fef8f7209f100c7a266cf3102b1219b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DCHGraph::csHasVtblsBasedonCHA</definition>
        <argsstring>(CallSite cs) override</argsstring>
        <name>csHasVtblsBasedonCHA</name>
        <reimplements refid="class_s_v_f_1_1_common_c_h_graph_1aff7363feebc20267dad7230666b583b1">csHasVtblsBasedonCHA</reimplements>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="259" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="259" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a3383b841bb79ee39cb108b9906fca6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const VTableSet &amp;</type>
        <definition>const VTableSet &amp; DCHGraph::getCSVtblsBasedonCHA</definition>
        <argsstring>(CallSite cs) override</argsstring>
        <name>getCSVtblsBasedonCHA</name>
        <reimplements refid="class_s_v_f_1_1_common_c_h_graph_1ae90f9a2152ab07aa0df16badd733f1fd">getCSVtblsBasedonCHA</reimplements>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="270" column="29" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="555" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a6a5d012fda005d45bf3196d1a7d2c6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DCHGraph::getVFnsFromVtbls</definition>
        <argsstring>(CallSite cs, const VTableSet &amp;vtbls, VFunSet &amp;virtualFunctions) override</argsstring>
        <name>getVFnsFromVtbls</name>
        <reimplements refid="class_s_v_f_1_1_common_c_h_graph_1aae511b2ee7c2c7ea7be70c7884e92021">getVFnsFromVtbls</reimplements>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const VTableSet &amp;</type>
          <declname>vtbls</declname>
        </param>
        <param>
          <type>VFunSet &amp;</type>
          <declname>virtualFunctions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="271" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="583" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1ab33f9af6ad22eb99dd0d9950fb0e50e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool DCHGraph::isBase</definition>
        <argsstring>(const DIType *a, const DIType *b, bool firstField)</argsstring>
        <name>isBase</name>
        <param>
          <type>const DIType *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>firstField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if a is a transitive base of b. firstField determines whether to consider first-field edges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="275" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="666" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1af0534356b4a8c68507e1237f1d7a8c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool DCHGraph::isFieldOf</definition>
        <argsstring>(const DIType *f, const DIType *b)</argsstring>
        <name>isFieldOf</name>
        <param>
          <type>const DIType *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if f is a field of b (fields from getFieldTypes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="278" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="677" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a079feacdcc3783f4a9108a3b2d2aed2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType * DCHGraph::getCanonicalType</definition>
        <argsstring>(const DIType *t)</argsstring>
        <name>getCanonicalType</name>
        <param>
          <type>const DIType *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type representing all qualifier-variations of t. This should only matter in the case of DerivedTypes where qualifiers and have qualified base types cause a mess. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="288" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="713" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1acaff636e6a9cf59363d6ee00435c04ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType* SVF::DCHGraph::getFieldType</definition>
        <argsstring>(const DIType *base, unsigned idx)</argsstring>
        <name>getFieldType</name>
        <param>
          <type>const DIType *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Returns the type of field number idx (flattened) in base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="291" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="291" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1ae9a0007299178912e2568dc7158d6824" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; const DIType * &gt; &amp;</type>
        <definition>const std::vector&lt;const DIType *&gt;&amp; SVF::DCHGraph::getFieldTypes</definition>
        <argsstring>(const DIType *base)</argsstring>
        <name>getFieldTypes</name>
        <param>
          <type>const DIType *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Returns a vector of the types of all fields in base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="327" column="23" bodyfile="include/SVF-FE/DCHG.h" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a0788694fbff155949fc4f4d6487c223e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned SVF::DCHGraph::getNumFields</definition>
        <argsstring>(const DIType *base)</argsstring>
        <name>getNumFields</name>
        <param>
          <type>const DIType *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="335" column="14" bodyfile="include/SVF-FE/DCHG.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a159e158c794fff115d5642b85963f43b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Set&lt; const DIType * &gt; &amp;</type>
        <definition>const Set&lt;const DIType *&gt;&amp; SVF::DCHGraph::getAggs</definition>
        <argsstring>(const DIType *base)</argsstring>
        <name>getAggs</name>
        <param>
          <type>const DIType *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Returns all the aggregates contained (transitively) in base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="343" column="15" bodyfile="include/SVF-FE/DCHG.h" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a2b2dbc52089696854a8339f2e83fc333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DCHGraph::isFirstField</definition>
        <argsstring>(const DIType *f, const DIType *b)</argsstring>
        <name>isFirstField</name>
        <param>
          <type>const DIType *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="350" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="931" bodyend="956"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a86bf48776ccf53092f4cb742cf95f8eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::handleDIBasicType</definition>
        <argsstring>(const DIBasicType *basicType)</argsstring>
        <name>handleDIBasicType</name>
        <param>
          <type>const DIBasicType *</type>
          <declname>basicType</declname>
        </param>
        <briefdescription>
<para>Construction helper to process DIBasicTypes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="380" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a3ce75cbe92a1fa7d34c6fca2d2ca1b0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::handleDICompositeType</definition>
        <argsstring>(const DICompositeType *compositeType)</argsstring>
        <name>handleDICompositeType</name>
        <param>
          <type>const DICompositeType *</type>
          <declname>compositeType</declname>
        </param>
        <briefdescription>
<para>Construction helper to process DICompositeTypes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="382" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="27" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a1a4162e68b22d53e9dca73c6780ed3e5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::handleDIDerivedType</definition>
        <argsstring>(const DIDerivedType *derivedType)</argsstring>
        <name>handleDIDerivedType</name>
        <param>
          <type>const DIDerivedType *</type>
          <declname>derivedType</declname>
        </param>
        <briefdescription>
<para>Construction helper to process DIDerivedTypes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="384" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="97" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a671f379ae54eef247b5e013478eb3f0c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::handleDISubroutineType</definition>
        <argsstring>(const DISubroutineType *subroutineType)</argsstring>
        <name>handleDISubroutineType</name>
        <param>
          <type>const DISubroutineType *</type>
          <declname>subroutineType</declname>
        </param>
        <briefdescription>
<para>Construction helper to process DISubroutineTypes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="386" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a0c873ab28d5967991e636696fae8c67f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::buildVTables</definition>
        <argsstring>(const Module &amp;module)</argsstring>
        <name>buildVTables</name>
        <param>
          <type>const Module &amp;</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Finds all defined virtual functions and attaches them to nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="389" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="166" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a0a3dfe1f2757eabd75082e2c4caec47a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS &amp;</type>
        <definition>const NodeBS &amp; DCHGraph::cha</definition>
        <argsstring>(const DIType *type, bool firstField)</argsstring>
        <name>cha</name>
        <param>
          <type>const DIType *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>firstField</declname>
        </param>
        <briefdescription>
<para>Returns a set of all children of type (CHA). Also gradually builds chaMap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="392" column="18" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="220" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a6d97a772afe16c1483e65eea81f82603" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::handleTypedef</definition>
        <argsstring>(const DIType *typedefType)</argsstring>
        <name>handleTypedef</name>
        <param>
          <type>const DIType *</type>
          <declname>typedefType</declname>
        </param>
        <briefdescription>
<para>Attaches the typedef(s) to the base node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="395" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="138" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1ab96874bc8f6461fe0c3eb53b7f5cedce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::flatten</definition>
        <argsstring>(const DICompositeType *type)</argsstring>
        <name>flatten</name>
        <param>
          <type>const DICompositeType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Populates fieldTypes for type and all its elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="398" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="265" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a8fcbea9435a77beb27ad64d5a3175b0b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DCHGraph::gatherAggs</definition>
        <argsstring>(const DICompositeType *type)</argsstring>
        <name>gatherAggs</name>
        <param>
          <type>const DICompositeType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Populates containingAggs for type and all its elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="401" column="10" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="350" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a9ed6b91fad334605f514049a2072b538" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_c_h_node" kindref="compound">DCHNode</ref> *</type>
        <definition>DCHNode * DCHGraph::getOrCreateNode</definition>
        <argsstring>(const DIType *type)</argsstring>
        <name>getOrCreateNode</name>
        <param>
          <type>const DIType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a node from type, or returns it if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="404" column="13" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="403" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a236d785d728189c2026357ce837fcdc6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType* SVF::DCHGraph::getCSStaticType</definition>
        <argsstring>(CallSite cs) const</argsstring>
        <name>getCSStaticType</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Retrieves the metadata associated with a <emphasis>virtual</emphasis> callsite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="407" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="407" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a58341e23c1dc2b3e7fce190ed16a8a25" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHGraph::hasNode</definition>
        <argsstring>(const DIType *type)</argsstring>
        <name>hasNode</name>
        <param>
          <type>const DIType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Checks if a node exists for type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="417" column="10" bodyfile="include/SVF-FE/DCHG.h" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a96c68bbb5ee5e939158ce0b67da2c61d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_c_h_node" kindref="compound">DCHNode</ref> *</type>
        <definition>DCHNode* SVF::DCHGraph::getNode</definition>
        <argsstring>(const DIType *type)</argsstring>
        <name>getNode</name>
        <param>
          <type>const DIType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns the node for type (NULL if it doesn&apos;t exist). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="424" column="13" bodyfile="include/SVF-FE/DCHG.h" bodystart="424" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a294a2075c97e1db8003393fb472c1def" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_c_h_edge" kindref="compound">DCHEdge</ref> *</type>
        <definition>DCHEdge * DCHGraph::addEdge</definition>
        <argsstring>(const DIType *t1, const DIType *t2, DCHEdge::GEdgeKind et)</argsstring>
        <name>addEdge</name>
        <param>
          <type>const DIType *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>DCHEdge::GEdgeKind</type>
          <declname>et</declname>
        </param>
        <briefdescription>
<para>Creates an edge between from t1 to t2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="437" column="13" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="421" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_graph_1a74b2e5787f65cf3e3b4a03ebec806b91" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_c_h_edge" kindref="compound">DCHEdge</ref> *</type>
        <definition>DCHEdge * DCHGraph::hasEdge</definition>
        <argsstring>(const DIType *t1, const DIType *t2, DCHEdge::GEdgeKind et)</argsstring>
        <name>hasEdge</name>
        <param>
          <type>const DIType *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>DCHEdge::GEdgeKind</type>
          <declname>et</declname>
        </param>
        <briefdescription>
<para>Returns the edge between t1 and t2 if it exists, returns NULL otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="439" column="13" bodyfile="lib/SVF-FE/DCHG.cpp" bodystart="438" bodyend="455"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Dwarf based CHG. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::DCHGraph</label>
        <link refid="class_s_v_f_1_1_d_c_h_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="3">
        <label>SVF::GenericGraph&lt; DCHNode, DCHEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::DCHGraph</label>
        <link refid="class_s_v_f_1_1_d_c_h_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>svfModule</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="4">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="3">
        <label>SVF::GenericGraph&lt; DCHNode, DCHEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </collaborationgraph>
    <location file="include/SVF-FE/DCHG.h" line="208" column="1" bodyfile="include/SVF-FE/DCHG.h" bodystart="209" bodyend="443"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a294a2075c97e1db8003393fb472c1def" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>addEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a710c6b87fd475552eddb425e38de8889" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>buildCHG</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a0c873ab28d5967991e636696fae8c67f" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>buildVTables</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a498a18fe8702251b6f2a4e6379e5cbb1" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>canonicalTypeMap</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a10225f56b21eb7f0870fdc433de3c393" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>canonicalTypes</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a0a3dfe1f2757eabd75082e2c4caec47a" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>cha</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1abe8d313b501182ab62f2276a19d670a4" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>chaFFMap</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ac0d5f1e10f642aac5b64792bf5fcbd9d" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>chaMap</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1a6a1feb9e268fb56b0de3efc39cfc8db8" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>CHGKind</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1af9970ff0ef4a8f4c638da9f519d14a21" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a5dfa3f178d4abf37177d0d74ff4c6a97" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1adc7a17f70ac3fa89624ad874dbd16ff9" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>containingAggs</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ad79a569e77f94fa8494eed3f18e07e90" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>csCHAMap</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a1494aeef22e15baaa160e8d598dd7de0" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>csHasVFnsBasedonCHA</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a2fef8f7209f100c7a266cf3102b1219b" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>csHasVtblsBasedonCHA</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a7cbea4d5399333497faa3f8d213e365e" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>DCHGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1adf0a205f4f62f33c5fa8f2d544aac633" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1a6a1feb9e268fb56b0de3efc39cfc8db8ae9e3edea0bae930aa9af04699fca9506" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>DI</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a581ce71cbc7994f71c9a6b9b145d3b9f" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>diTypeToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a2dc488345cc3a5f37079952f638d8c2b" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>diTypeToStr</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a587baf86ecc2fdbecfcf85310673e9f4" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1aa6f49dfc9e3580d3f2d8c257395eb11e" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>extended</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a574ec14099f1112b394b00a79f3fdf1a" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>fieldTypes</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ab96874bc8f6461fe0c3eb53b7f5cedce" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>flatten</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a8fcbea9435a77beb27ad64d5a3175b0b" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>gatherAggs</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a159e158c794fff115d5642b85963f43b" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getAggs</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a079feacdcc3783f4a9108a3b2d2aed2c" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getCanonicalType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a236d785d728189c2026357ce837fcdc6" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getCSStaticType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ad398e58286af020fb4dcc03644f2a24f" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>getCSVFsBasedonCHA</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a3383b841bb79ee39cb108b9906fca6a9" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>getCSVtblsBasedonCHA</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1acaff636e6a9cf59363d6ee00435c04ff" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getFieldType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ae9a0007299178912e2568dc7158d6824" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getFieldTypes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1adf2a02fff9d7dd9fc9d92121e5e28f8b" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a96c68bbb5ee5e939158ce0b67da2c61d" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getNode</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a0788694fbff155949fc4f4d6487c223e" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getNumFields</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a9ed6b91fad334605f514049a2072b538" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getOrCreateNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a6a5d012fda005d45bf3196d1a7d2c6fa" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>getVFnsFromVtbls</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a86bf48776ccf53092f4cb742cf95f8eb" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>handleDIBasicType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a3ce75cbe92a1fa7d34c6fca2d2ca1b0f" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>handleDICompositeType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a1a4162e68b22d53e9dca73c6780ed3e5" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>handleDIDerivedType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a671f379ae54eef247b5e013478eb3f0c" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>handleDISubroutineType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a6d97a772afe16c1483e65eea81f82603" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>handleTypedef</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a74b2e5787f65cf3e3b4a03ebec806b91" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>hasEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a58341e23c1dc2b3e7fce190ed16a8a25" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>hasNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a9d2be5aec5216cbc1d1709b41f79c44b" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>isAgg</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ab33f9af6ad22eb99dd0d9950fb0e50e6" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>isBase</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1af0534356b4a8c68507e1237f1d7a8c11" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>isFieldOf</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a2b2dbc52089696854a8339f2e83fc333" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>isFirstField</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1a4d3f2b9ed7ae8e87baf69525e9115071" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>kind</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a76fd3154a31584bb64683f2d762cc56c" prot="private" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>numTypes</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a5f08ed4cbba3e4b7a348d5ad77664726" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>print</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1a6a1feb9e268fb56b0de3efc39cfc8db8afa3f4c3017fb95011bfdc11b147eae0c" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>Standard</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a6c276e661e5e63c1c84387f84c8a62e4" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>stripArray</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a175ed6ad0c9b23d5617f755ab96c76c4" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>stripQualifiers</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a85a3c9a6a60a4379717773f8722ae42e" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>svfModule</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1acb76ab20da1bfbec00f63d08e48cbddd" prot="public" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>teq</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1a294e7a04aff9cef87c1008e91a620155" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>vtblCHAMap</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1aaa63715e67ade7711a0366eb7559b708" prot="protected" virt="non-virtual"><scope>SVF::DCHGraph</scope><name>vtblToTypeMap</name></member>
      <member refid="class_s_v_f_1_1_common_c_h_graph_1aeb7e79b36c74bcded008fe227952c335" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>~CommonCHGraph</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_graph_1ae358abf5a377f480ecaea4df7a9fbdfd" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>~DCHGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::DCHGraph</scope><name>~GenericGraph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
