<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_mem_obj" xml:lang="en-US">
<title>SVF::MemObj Class Reference</title>
<indexterm><primary>SVF::MemObj</primary></indexterm>
<para>
<computeroutput>#include &lt;MemModel.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_mem_obj_1ab22373574ae9dff2f8ffbef16d5b339c">MemObj</link> (const Value *val, SymID id)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_mem_obj_1ac5d2dcf38bd4ba539b10c9b4838c4d23">MemObj</link> (SymID id, const Type *type=NULL)</para>

<para>Constructor for black hole and constant obj. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1ad56f353dde7462dd54297e1b51e6eb05"/><link linkend="_class_s_v_f_1_1_mem_obj_1ad56f353dde7462dd54297e1b51e6eb05">~MemObj</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a768e82826964c68673af7db3b5702442"/>void <link linkend="_class_s_v_f_1_1_mem_obj_1a768e82826964c68673af7db3b5702442">init</link> (const Value *val)</para>

<para>Initialize the object. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a581e1d4f060a0fe5a7cac1c05508caa6"/>void <link linkend="_class_s_v_f_1_1_mem_obj_1a581e1d4f060a0fe5a7cac1c05508caa6">init</link> (const Type *type)</para>

<para>Initialize black hole and constant object. </para>
</listitem>
            <listitem><para>const llvm::Type * <link linkend="_class_s_v_f_1_1_mem_obj_1aa4fa7a1b86d66692ffffeaee0e187216">getType</link> () const</para>

<para>Get obj type. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a7d029aa6ac6d1427831ed8bc166ba22f"/>Size_t <link linkend="_class_s_v_f_1_1_mem_obj_1a7d029aa6ac6d1427831ed8bc166ba22f">getMaxFieldOffsetLimit</link> () const</para>

<para>Get max field offset limit. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1ae952c8b6b92c6cbef9494a83b411a60f"/>const Value * <link linkend="_class_s_v_f_1_1_mem_obj_1ae952c8b6b92c6cbef9494a83b411a60f">getRefVal</link> () const</para>

<para>Get the reference value to this object. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1ad7f7de744715c3acaf3d48822865c87b"/>SymID <link linkend="_class_s_v_f_1_1_mem_obj_1ad7f7de744715c3acaf3d48822865c87b">getSymId</link> () const</para>

<para>Get the memory object id. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a9d50a00ff608df21f50b3b2823128901"/>bool <link linkend="_class_s_v_f_1_1_mem_obj_1a9d50a00ff608df21f50b3b2823128901">isFieldInsensitive</link> () const</para>

<para>Return true if its field limit is 0. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1af2546305536df79576fe02a1aa1fffaf"/>void <link linkend="_class_s_v_f_1_1_mem_obj_1af2546305536df79576fe02a1aa1fffaf">setFieldInsensitive</link> ()</para>

<para>Set the memory object to be field insensitive. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_mem_obj_1a981b7424901ef74467f725ffc9fec0ca">setFieldSensitive</link> ()</para>

<para>Set the memory object to be field sensitive (up to max field limit) </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_mem_obj_1a7b890ca9e93b1c61cc6437b7e6a82a8c">isBlackHoleObj</link> () const</para>

<para>Whether it is a black hole object. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a0da6483089b2d80778535929426c1540"/>bool <link linkend="_class_s_v_f_1_1_mem_obj_1a0da6483089b2d80778535929426c1540">isFunction</link> () const</para>

<para>object attributes methods </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1aa513ca5bd3927c9f697b504a70e57013"/>bool <emphasis role="strong">isGlobalObj</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1abd776509d1ae281a246acfb168efe2ea"/>bool <emphasis role="strong">isStaticObj</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a65735220b56354f7b6c7ce6753f84e4b"/>bool <emphasis role="strong">isStack</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1af8f4f85cfbcb09615fb04ca63d634138"/>bool <emphasis role="strong">isHeap</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a88ce05dfb3c16598fe5a8968ee56c100"/>bool <emphasis role="strong">isStruct</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a5796d7fec7f0fc2260e8a36493409eab"/>bool <emphasis role="strong">isArray</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a5a6887b8ae47b21ba82324daced74ac0"/>bool <emphasis role="strong">isVarStruct</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a167ed4be108aa7833aa267470d256766"/>bool <emphasis role="strong">isVarArray</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a846fafa3f005531525856df4581e33fd"/>bool <emphasis role="strong">isConstStruct</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a347eacc3e472c706600c25d7bd46bed6"/>bool <emphasis role="strong">isConstArray</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1ad67bc82cb51d0eb23c92c2ff9456c636"/>bool <emphasis role="strong">isConstant</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a1ecb652416c602e1c5e3d9e7be580c3c"/>bool <emphasis role="strong">hasPtrObj</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1af903baaf5f0b72fb7faed3041c2743c9"/>bool <emphasis role="strong">isNonPtrFieldObj</emphasis> (const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;ls) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a1a8601b72b6e6df211db1fffdd54c48b"/>bool <link linkend="_class_s_v_f_1_1_mem_obj_1a1a8601b72b6e6df211db1fffdd54c48b">operator==</link> (const <link linkend="_class_s_v_f_1_1_mem_obj">MemObj</link> &amp;mem) const</para>

<para>Operator overloading. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a1e6ff4c2b04b07c5f71e5e7a6a0d7735"/>void <link linkend="_class_s_v_f_1_1_mem_obj_1a1e6ff4c2b04b07c5f71e5e7a6a0d7735">destroy</link> ()</para>

<para>Clean up memory. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Memory Object </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_obj_1ab22373574ae9dff2f8ffbef16d5b339c"/>    <section>
    <title>MemObj()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>MemObj</primary><secondary>SVF::MemObj</secondary></indexterm>
<indexterm><primary>SVF::MemObj</primary><secondary>MemObj</secondary></indexterm>
<para><computeroutput>MemObj::MemObj (const Value * val, SymID id)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor of a memory object </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_obj_1ac5d2dcf38bd4ba539b10c9b4838c4d23"/>    <section>
    <title>MemObj()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>MemObj</primary><secondary>SVF::MemObj</secondary></indexterm>
<indexterm><primary>SVF::MemObj</primary><secondary>MemObj</secondary></indexterm>
<para><computeroutput>MemObj::MemObj (SymID id, const Type * type = <computeroutput>NULL</computeroutput>
)</computeroutput></para><para>

<para>Constructor for black hole and constant obj. </para>
</para>

<para>Constructor of a memory object </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_obj_1aa4fa7a1b86d66692ffffeaee0e187216"/>    <section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>SVF::MemObj</secondary></indexterm>
<indexterm><primary>SVF::MemObj</primary><secondary>getType</secondary></indexterm>
<para><computeroutput>const Type * MemObj::getType ( ) const</computeroutput></para><para>

<para>Get obj type. </para>
</para>

<para>Get obj type info. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a7b890ca9e93b1c61cc6437b7e6a82a8c"/>    <section>
    <title>isBlackHoleObj()</title>
<indexterm><primary>isBlackHoleObj</primary><secondary>SVF::MemObj</secondary></indexterm>
<indexterm><primary>SVF::MemObj</primary><secondary>isBlackHoleObj</secondary></indexterm>
<para><computeroutput>bool MemObj::isBlackHoleObj ( ) const</computeroutput></para><para>

<para>Whether it is a black hole object. </para>
</para>

<para>Whether it is a black hole object </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_obj_1a981b7424901ef74467f725ffc9fec0ca"/>    <section>
    <title>setFieldSensitive()</title>
<indexterm><primary>setFieldSensitive</primary><secondary>SVF::MemObj</secondary></indexterm>
<indexterm><primary>SVF::MemObj</primary><secondary>setFieldSensitive</secondary></indexterm>
<para><computeroutput>void MemObj::setFieldSensitive ( )</computeroutput></para><para>

<para>Set the memory object to be field sensitive (up to max field limit) </para>
</para>

<para>Set mem object to be field sensitive (up to maximum field limit) </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MemoryModel/MemModel.hlib/MemoryModel/MemModel.cpplib/SVF-FE/SymbolTableInfo.cpp</section>
</section>
