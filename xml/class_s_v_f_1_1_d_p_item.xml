<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_d_p_item" kind="class" language="C++" prot="public">
    <compoundname>SVF::DPItem</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_cxt_d_p_item" prot="public" virt="non-virtual">SVF::CxtDPItem</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_stmt_d_p_item" prot="public" virt="non-virtual">SVF::StmtDPItem&lt; LocCond &gt;</derivedcompoundref>
    <includes refid="_d_p_item_8h" local="no">DPItem.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_d_p_item_1a82d2a11fb456192ec88fcb5ffe239d80" prot="protected" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::DPItem::cur</definition>
        <argsstring></argsstring>
        <name>cur</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="49" column="12" bodyfile="include/Util/DPItem.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_d_p_item_1a5dbb0e6010b38c5b937ff06cb40cd0ef" prot="protected" static="yes" mutable="no">
        <type>u64_t</type>
        <definition>u64_t DPItem::maximumBudget</definition>
        <argsstring></argsstring>
        <name>maximumBudget</name>
        <initializer>= ULONG_MAX - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="50" column="18" bodyfile="include/Util/DPItem.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1ac5dbe11ebf512e6dccdfa1eceba04fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DPItem::DPItem</definition>
        <argsstring>(NodeID c)</argsstring>
        <name>DPItem</name>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="54" column="5" bodyfile="include/Util/DPItem.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a715b7de4a392d8c389e611e27f8b9184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DPItem::DPItem</definition>
        <argsstring>(const DPItem &amp;dps)</argsstring>
        <name>DPItem</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
          <declname>dps</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="58" column="5" bodyfile="include/Util/DPItem.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a1df86140eee6015369836d20d509f14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::DPItem::~DPItem</definition>
        <argsstring>()</argsstring>
        <name>~DPItem</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="62" column="13" bodyfile="include/Util/DPItem.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a03a90eca842c0e83d874902103f6fdb2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::DPItem::getCurNodeID</definition>
        <argsstring>() const</argsstring>
        <name>getCurNodeID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="65" column="19" bodyfile="include/Util/DPItem.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a5fbde30cae2cb09bd9dc9a6969ea4b90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DPItem::setCurNodeID</definition>
        <argsstring>(NodeID c)</argsstring>
        <name>setCurNodeID</name>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="69" column="17" bodyfile="include/Util/DPItem.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a639c757076141a14bedc26c73f875ffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DPItem::operator&lt;</definition>
        <argsstring>(const DPItem &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="84" column="12" bodyfile="include/Util/DPItem.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a10226d37dfef045bec9f7cfb78315440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
        <definition>DPItem&amp; SVF::DPItem::operator=</definition>
        <argsstring>(const DPItem &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="89" column="19" bodyfile="include/Util/DPItem.h" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1ad67fcd340351360555b0cb88f57b183a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DPItem::operator==</definition>
        <argsstring>(const DPItem &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="98" column="17" bodyfile="include/Util/DPItem.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1add804064ca2bfaa16bcc25503698a1ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DPItem::operator!=</definition>
        <argsstring>(const DPItem &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_p_item" kindref="compound">DPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator!=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="103" column="17" bodyfile="include/Util/DPItem.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a6048fa772b5023710c34687c4f047d44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DPItem::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="108" column="17" bodyfile="include/Util/DPItem.h" bodystart="108" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1a687ef8944ccb55b826508c47ea5b9240" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void SVF::DPItem::setMaxBudget</definition>
        <argsstring>(u32_t max)</argsstring>
        <name>setMaxBudget</name>
        <param>
          <type>u32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>set max step budge per query </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="74" column="24" bodyfile="include/Util/DPItem.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_p_item_1af9d8f95249190e164131dc19b6db1b67" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>static u32_t SVF::DPItem::getMaxBudget</definition>
        <argsstring>()</argsstring>
        <name>getMaxBudget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="78" column="25" bodyfile="include/Util/DPItem.h" bodystart="78" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Dynamic programming item for CFL researchability search This serves as a base class for CFL-reachability formulation by matching parentheses. Extend this class for further sophisticated CFL-reachability items (e.g. field, flow, path) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>SVF::PathStmtDPItem&lt; LocCond &gt;</label>
        <link refid="class_s_v_f_1_1_path_stmt_d_p_item"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::DPItem</label>
        <link refid="class_s_v_f_1_1_d_p_item"/>
      </node>
      <node id="4">
        <label>SVF::CxtStmtDPItem&lt; LocCond &gt;</label>
        <link refid="class_s_v_f_1_1_cxt_stmt_d_p_item"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::StmtDPItem&lt; LocCond &gt;</label>
        <link refid="class_s_v_f_1_1_stmt_d_p_item"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::CxtDPItem</label>
        <link refid="class_s_v_f_1_1_cxt_d_p_item"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/Util/DPItem.h" line="46" column="1" bodyfile="include/Util/DPItem.h" bodystart="47" bodyend="112"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_d_p_item_1a82d2a11fb456192ec88fcb5ffe239d80" prot="protected" virt="non-virtual"><scope>SVF::DPItem</scope><name>cur</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1ac5dbe11ebf512e6dccdfa1eceba04fe8" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>DPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a715b7de4a392d8c389e611e27f8b9184" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>DPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a6048fa772b5023710c34687c4f047d44" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a03a90eca842c0e83d874902103f6fdb2" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>getCurNodeID</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1af9d8f95249190e164131dc19b6db1b67" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>getMaxBudget</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a5dbb0e6010b38c5b937ff06cb40cd0ef" prot="protected" virt="non-virtual"><scope>SVF::DPItem</scope><name>maximumBudget</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1add804064ca2bfaa16bcc25503698a1ea" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a639c757076141a14bedc26c73f875ffe" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a10226d37dfef045bec9f7cfb78315440" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1ad67fcd340351360555b0cb88f57b183a" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a5fbde30cae2cb09bd9dc9a6969ea4b90" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>setCurNodeID</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a687ef8944ccb55b826508c47ea5b9240" prot="public" virt="non-virtual"><scope>SVF::DPItem</scope><name>setMaxBudget</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a1df86140eee6015369836d20d509f14d" prot="public" virt="virtual"><scope>SVF::DPItem</scope><name>~DPItem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
