<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_call_m_u" kind="class" language="C++" prot="public">
    <compoundname>SVF::CallMU</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_m_s_s_a_m_u" prot="public" virt="non-virtual">SVF::MSSAMU&lt; Cond &gt;</basecompoundref>
    <includes refid="_m_s_s_a_mu_chi_8h" local="no">MSSAMuChi.h</includes>
    <templateparamlist>
      <param>
        <type>class Cond</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_call_m_u_1ae748ea61422184b513c09b842be9b076" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>const CallBlockNode* SVF::CallMU&lt; Cond &gt;::callsite</definition>
        <argsstring></argsstring>
        <name>callsite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="219" column="25" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1a15481a6706532e121d7b6066f25df28a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CallMU&lt; Cond &gt;::CallMU</definition>
        <argsstring>(const CallBlockNode *cs, const MemRegion *m, Cond c=PathCondAllocator::trueCond())</argsstring>
        <name>CallMU</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_region" kindref="compound">MemRegion</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Cond</type>
          <declname>c</declname>
          <defval>PathCondAllocator::trueCond()</defval>
        </param>
        <briefdescription>
<para>Constructor/Destructor for MU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="224" column="5" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1a408184b7a6c625d67a4b660e140b10c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CallMU&lt; Cond &gt;::~CallMU</definition>
        <argsstring>()</argsstring>
        <name>~CallMU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="228" column="13" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1a401be4fc10a3b9f3d392f1c278bef866" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>const CallBlockNode* SVF::CallMU&lt; Cond &gt;::getCallSite</definition>
        <argsstring>() const</argsstring>
        <name>getCallSite</name>
        <briefdescription>
<para>Return callsite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="235" column="32" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1ab20ae240ad380c760b9b1f4b8b06344f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BasicBlock *</type>
        <definition>const BasicBlock* SVF::CallMU&lt; Cond &gt;::getBasicBlock</definition>
        <argsstring>() const</argsstring>
        <name>getBasicBlock</name>
        <briefdescription>
<para>Return basic block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="241" column="29" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1af08ecc9c2b75737e88690fb2319fcf57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::CallMU&lt; Cond &gt;::dump</definition>
        <argsstring>()</argsstring>
        <name>dump</name>
        <reimplements refid="class_s_v_f_1_1_m_s_s_a_m_u_1a489e8c27e40b709d94a462653fb760f5">dump</reimplements>
        <briefdescription>
<para>Print MU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="259" column="18" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="259" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1af8a0defe4c5b36893e155a4b074c0f30" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::CallMU&lt; Cond &gt;::classof</definition>
        <argsstring>(const CallMU *)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">CallMU</ref> *</type>
        </param>
        <briefdescription>
<para>Methods for support type inquiry through isa, cast, and dyn_cast: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="248" column="24" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_call_m_u_1a27c70bc7543eeb2fcf64f139481d3bf9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::CallMU&lt; Cond &gt;::classof</definition>
        <argsstring>(const MSSAMU&lt; Cond &gt; *mu)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MSSAMU</ref>&lt; Cond &gt; *</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MSSA/MSSAMuChi.h" line="252" column="24" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="252" bodyend="255"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">CallMU</ref> is annotated at callsite, representing a memory object is indirect read by callee </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::MSSAMU&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_m_s_s_a_m_u"/>
      </node>
      <node id="1">
        <label>SVF::CallMU&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_call_m_u"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::MSSAMU&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_m_s_s_a_m_u"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mr</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>ver</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::MemRegion</label>
        <link refid="class_s_v_f_1_1_mem_region"/>
      </node>
      <node id="1">
        <label>SVF::CallMU&lt; Cond &gt;</label>
        <link refid="class_s_v_f_1_1_call_m_u"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::MRVer</label>
        <link refid="class_s_v_f_1_1_m_r_ver"/>
      </node>
    </collaborationgraph>
    <location file="include/MSSA/MSSAMuChi.h" line="215" column="1" bodyfile="include/MSSA/MSSAMuChi.h" bodystart="216" bodyend="264"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a82c66f3e2b7d2d9dd391a947719bda9ba5e02921dfd30772024d77915d9f15f18" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>CallMSSAMU</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1a15481a6706532e121d7b6066f25df28a" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>CallMU</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1ae748ea61422184b513c09b842be9b076" prot="private" virt="non-virtual"><scope>SVF::CallMU</scope><name>callsite</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1af8a0defe4c5b36893e155a4b074c0f30" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1a27c70bc7543eeb2fcf64f139481d3bf9" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a8e828af79da08528166b1f53165bc5b2" prot="protected" virt="non-virtual"><scope>SVF::CallMU</scope><name>cond</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1af08ecc9c2b75737e88690fb2319fcf57" prot="public" virt="virtual"><scope>SVF::CallMU</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1ab20ae240ad380c760b9b1f4b8b06344f" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getBasicBlock</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1a401be4fc10a3b9f3d392f1c278bef866" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getCallSite</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1ac51263250da06fd63b923a6771744f97" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getCond</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a6bd671839ec0376439ccd81d5b2eff30" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getMR</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a9a542febe746d1389d34e5e31a3253c9" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a9c701be3646f4a04fa7f71a82e6b2f5f" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>getVer</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a82c66f3e2b7d2d9dd391a947719bda9baca29c59204ea9d2e228cba3e349aa019" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>LoadMSSAMU</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a51b89fa50c39d864cc9ca63508ea94f4" prot="protected" virt="non-virtual"><scope>SVF::CallMU</scope><name>mr</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a1d0f8d3e7651f4ace92d31a9c6604e2f" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>MSSAMU</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a82c66f3e2b7d2d9dd391a947719bda9b" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>MUTYPE</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a838a4a7cd670eef1153701aef9871bcf" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a82c66f3e2b7d2d9dd391a947719bda9ba255f3e3fc50f3a8d9a8bd5800b1b4594" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>RetMSSAMU</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a2af1e639aabbc5997aa4e6526f6595fb" prot="public" virt="non-virtual"><scope>SVF::CallMU</scope><name>setVer</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a3cbe5ca0cb91090ef0e8b331e2f15f7c" prot="protected" virt="non-virtual"><scope>SVF::CallMU</scope><name>type</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a9c84b55a34025c6742f5a02c07cd4a36" prot="protected" virt="non-virtual"><scope>SVF::CallMU</scope><name>ver</name></member>
      <member refid="class_s_v_f_1_1_call_m_u_1a408184b7a6c625d67a4b660e140b10c5" prot="public" virt="virtual"><scope>SVF::CallMU</scope><name>~CallMU</name></member>
      <member refid="class_s_v_f_1_1_m_s_s_a_m_u_1a128d59c1fbfa6aed7ba4b84c92909366" prot="public" virt="virtual"><scope>SVF::CallMU</scope><name>~MSSAMU</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
