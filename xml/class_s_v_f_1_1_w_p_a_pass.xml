<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_w_p_a_pass" kind="class" language="C++" prot="public">
    <compoundname>SVF::WPAPass</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ModulePass</basecompoundref>
    <includes refid="_w_p_a_pass_8h" local="no">WPAPass.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394d" prot="public" static="no" strong="no">
        <type></type>
        <name>AliasCheckRule</name>
        <enumvalue id="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394da498ba80d25733b291f391a94500dd4c7" prot="public">
          <name>Conservative</name>
          <briefdescription>
<para>return MayAlias if any pta says alias </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394dabb45a604558e2ebff460adb77b4a5d7c" prot="public">
          <name>Veto</name>
          <briefdescription>
<para>return NoAlias if any pta says no alias </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394daa6dd95cbf907a36a9ec001af338ec54c" prot="public">
          <name>Precise</name>
          <briefdescription>
<para>return alias result by the most precise pta </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="62" column="5" bodyfile="include/WPA/WPAPass.h" bodystart="63" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_w_p_a_pass_1ad4e3d480ebcc6bbbb7bcc8dc3df8663e" prot="private" static="no">
        <type>std::vector&lt; <ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> * &gt;</type>
        <definition>typedef std::vector&lt;PointerAnalysis*&gt; SVF::WPAPass::PTAVector</definition>
        <argsstring></argsstring>
        <name>PTAVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="56" column="25" bodyfile="include/WPA/WPAPass.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_w_p_a_pass_1a2674527c92cdef223e655d449f0811d4" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char WPAPass::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Pass ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="60" column="17" bodyfile="include/WPA/WPAPass.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_w_p_a_pass_1a72a66ae158793f5d1bcb37b655db4446" prot="private" static="no" mutable="no">
        <type>PTAVector</type>
        <definition>PTAVector SVF::WPAPass::ptaVector</definition>
        <argsstring></argsstring>
        <name>ptaVector</name>
        <briefdescription>
<para>all pointer analysis to be executed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="135" column="15" bodyfile="include/WPA/WPAPass.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_w_p_a_pass_1a0b57d86a5305aefcd6c8ae4e328d3ab0" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::WPAPass::_pta</definition>
        <argsstring></argsstring>
        <name>_pta</name>
        <briefdescription>
<para>pointer analysis to be executed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="136" column="21" bodyfile="include/WPA/WPAPass.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_w_p_a_pass_1ac0f6d1221ee66ac17d0b201d73d7e28a" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> *</type>
        <definition>SVFG* SVF::WPAPass::_svfg</definition>
        <argsstring></argsstring>
        <name>_svfg</name>
        <briefdescription>
<para>svfg generated through -ander pointer analysis </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="137" column="10" bodyfile="include/WPA/WPAPass.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a3fc957e01a3ac7c242c030c6f6846fa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::WPAPass::WPAPass</definition>
        <argsstring>()</argsstring>
        <name>WPAPass</name>
        <briefdescription>
<para>Constructor needs TargetLibraryInfo to be passed to the AliasAnalysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="70" column="5" bodyfile="include/WPA/WPAPass.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a7ea8006b7e9237a470dfd34ad633826b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>WPAPass::~WPAPass</definition>
        <argsstring>()</argsstring>
        <name>~WPAPass</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="76" column="13" bodyfile="lib/WPA/WPAPass.cpp" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1abe0750901c2e0305b3ced5e523489a4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::WPAPass::getAnalysisUsage</definition>
        <argsstring>(AnalysisUsage &amp;au) const</argsstring>
        <name>getAnalysisUsage</name>
        <param>
          <type>AnalysisUsage &amp;</type>
          <declname>au</declname>
        </param>
        <briefdescription>
<para>LLVM analysis usage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>do not intend to change the IR in this pass,</para>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="79" column="25" bodyfile="include/WPA/WPAPass.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1ace88ef31b3b43af9f516860ad914053b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>virtual void* SVF::WPAPass::getAdjustedAnalysisPointer</definition>
        <argsstring>(AnalysisID)</argsstring>
        <name>getAdjustedAnalysisPointer</name>
        <param>
          <type>AnalysisID</type>
        </param>
        <briefdescription>
<para>Get adjusted analysis for alias analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="87" column="25" bodyfile="include/WPA/WPAPass.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1af339db8bffc554be7dd5cb6b100649e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>AliasResult</type>
        <definition>virtual AliasResult SVF::WPAPass::alias</definition>
        <argsstring>(const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)</argsstring>
        <name>alias</name>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocA</declname>
        </param>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>LocB</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Location infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="93" column="32" bodyfile="include/WPA/WPAPass.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a5a71ab4d4bd993ff52da60c730d7b57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AliasResult</type>
        <definition>AliasResult WPAPass::alias</definition>
        <argsstring>(const Value *V1, const Value *V2)</argsstring>
        <name>alias</name>
        <param>
          <type>const Value *</type>
          <declname>V1</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>V2</declname>
        </param>
        <briefdescription>
<para>Interface expose to users of our pointer analysis, given Value infos. </para>
        </briefdescription>
        <detaileddescription>
<para>Return alias results based on our points-to/alias analysis TODO: Need to handle PartialAlias and MustAlias here. </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: When this method is invoked during compiler optimizations, the IR used for pointer analysis may been changed, so some Values may not find corresponding <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node. In this case, we only check alias between two Values if they both have <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> nodes. Otherwise, MayAlias will be returned.</para>
<para>Veto is used by default</para>
<para>Return NoAlias if any PTA gives NoAlias result</para>
<para>Return MayAlias if any PTA gives MayAlias result</para>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="99" column="25" bodyfile="lib/WPA/WPAPass.cpp" bodystart="228" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1abb6e0c5cc5de312ee0285d1854550752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void WPAPass::PrintAliasPairs</definition>
        <argsstring>(PointerAnalysis *pta)</argsstring>
        <name>PrintAliasPairs</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Print all alias pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="102" column="18" bodyfile="lib/WPA/WPAPass.cpp" bodystart="200" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a567f818fa7b29142b18cb39e5c063a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ModRefInfo</type>
        <definition>ModRefInfo WPAPass::getModRefInfo</definition>
        <argsstring>(const CallInst *callInst)</argsstring>
        <name>getModRefInfo</name>
        <param>
          <type>const CallInst *</type>
          <declname>callInst</declname>
        </param>
        <briefdescription>
<para>Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref any memory location. </para>
        </briefdescription>
        <detaileddescription>
<para>Return mod-ref result of a CallInst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="105" column="24" bodyfile="lib/WPA/WPAPass.cpp" bodystart="275" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a6d86f4ef6ad2f14c2dbf57b759e2950f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>ModRefInfo</type>
        <definition>virtual ModRefInfo SVF::WPAPass::getModRefInfo</definition>
        <argsstring>(const CallInst *callInst, const MemoryLocation &amp;Loc)</argsstring>
        <name>getModRefInfo</name>
        <param>
          <type>const CallInst *</type>
          <declname>callInst</declname>
        </param>
        <param>
          <type>const MemoryLocation &amp;</type>
          <declname>Loc</declname>
        </param>
        <briefdescription>
<para>Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref a specific memory location, given Location infos. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="108" column="31" bodyfile="include/WPA/WPAPass.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a81277c93b6a89c01a7a1f476bc3d744d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ModRefInfo</type>
        <definition>ModRefInfo WPAPass::getModRefInfo</definition>
        <argsstring>(const CallInst *callInst, const Value *V)</argsstring>
        <name>getModRefInfo</name>
        <param>
          <type>const CallInst *</type>
          <declname>callInst</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref a specific memory location, given Value infos. </para>
        </briefdescription>
        <detaileddescription>
<para>Return mod-ref results of a CallInst to a specific memory location </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="114" column="24" bodyfile="lib/WPA/WPAPass.cpp" bodystart="286" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a148cd86101e402e7ed8d3b3dae151d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ModRefInfo</type>
        <definition>ModRefInfo WPAPass::getModRefInfo</definition>
        <argsstring>(const CallInst *callInst1, const CallInst *callInst2)</argsstring>
        <name>getModRefInfo</name>
        <param>
          <type>const CallInst *</type>
          <declname>callInst1</declname>
        </param>
        <param>
          <type>const CallInst *</type>
          <declname>callInst2</declname>
        </param>
        <briefdescription>
<para>Interface of mod-ref analysis between two CallSite instructions. </para>
        </briefdescription>
        <detaileddescription>
<para>Return mod-ref result between two CallInsts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="117" column="24" bodyfile="lib/WPA/WPAPass.cpp" bodystart="297" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a394dcd976c1ef08d9cadcba8f5d07c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void WPAPass::runOnModule</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>runOnModule</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Run pointer analysis on <ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>We start from here </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="120" column="18" bodyfile="lib/WPA/WPAPass.cpp" bodystart="109" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a1f47c1cb5a64bab9a6b8ac38103416ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool WPAPass::runOnModule</definition>
        <argsstring>(Module &amp;module)</argsstring>
        <name>runOnModule</name>
        <param>
          <type>Module &amp;</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Run pointer analysis on LLVM module. </para>
        </briefdescription>
        <detaileddescription>
<para>We start from here </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="123" column="18" bodyfile="lib/WPA/WPAPass.cpp" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a12fda9849e3d9e4eb71e0bff8d0696f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>StringRef</type>
        <definition>virtual StringRef SVF::WPAPass::getPassName</definition>
        <argsstring>() const</argsstring>
        <name>getPassName</name>
        <briefdescription>
<para>PTA name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="126" column="30" bodyfile="include/WPA/WPAPass.h" bodystart="126" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_w_p_a_pass_1a2d6a270c3a71b5963eaed37839355fd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WPAPass::runPointerAnalysis</definition>
        <argsstring>(SVFModule *svfModule, u32_t kind)</argsstring>
        <name>runPointerAnalysis</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Create pointer analysis according to specified kind and analyze the module. </para>
        </briefdescription>
        <detaileddescription>
<para>Create pointer analysis according to a specified kind and then analyze the module. </para>
        </detaileddescription>
        <inbodydescription>
<para>Build <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref></para>
<para>Initialize pointer analysis.</para>
<para>support mod-ref queries only for -ander</para>
        </inbodydescription>
        <location file="include/WPA/WPAPass.h" line="133" column="10" bodyfile="lib/WPA/WPAPass.cpp" bodystart="132" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Whole program pointer analysis. This class performs various pointer analysis on the given module. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::WPAPass</label>
        <link refid="class_s_v_f_1_1_w_p_a_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ModulePass</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::WPAPass</label>
        <link refid="class_s_v_f_1_1_w_p_a_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ModulePass</label>
      </node>
    </collaborationgraph>
    <location file="include/WPA/WPAPass.h" line="54" column="1" bodyfile="include/WPA/WPAPass.h" bodystart="55" bodyend="138"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a0b57d86a5305aefcd6c8ae4e328d3ab0" prot="private" virt="non-virtual"><scope>SVF::WPAPass</scope><name>_pta</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1ac0f6d1221ee66ac17d0b201d73d7e28a" prot="private" virt="non-virtual"><scope>SVF::WPAPass</scope><name>_svfg</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1af339db8bffc554be7dd5cb6b100649e7" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a5a71ab4d4bd993ff52da60c730d7b57f" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394d" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>AliasCheckRule</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394da498ba80d25733b291f391a94500dd4c7" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>Conservative</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1ace88ef31b3b43af9f516860ad914053b" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getAdjustedAnalysisPointer</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1abe0750901c2e0305b3ced5e523489a4f" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getAnalysisUsage</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a567f818fa7b29142b18cb39e5c063a4e" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getModRefInfo</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a6d86f4ef6ad2f14c2dbf57b759e2950f" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getModRefInfo</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a81277c93b6a89c01a7a1f476bc3d744d" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getModRefInfo</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a148cd86101e402e7ed8d3b3dae151d79" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getModRefInfo</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a12fda9849e3d9e4eb71e0bff8d0696f8" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>getPassName</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a2674527c92cdef223e655d449f0811d4" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>ID</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394daa6dd95cbf907a36a9ec001af338ec54c" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>Precise</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1abb6e0c5cc5de312ee0285d1854550752" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>PrintAliasPairs</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a72a66ae158793f5d1bcb37b655db4446" prot="private" virt="non-virtual"><scope>SVF::WPAPass</scope><name>ptaVector</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1ad4e3d480ebcc6bbbb7bcc8dc3df8663e" prot="private" virt="non-virtual"><scope>SVF::WPAPass</scope><name>PTAVector</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a394dcd976c1ef08d9cadcba8f5d07c75" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>runOnModule</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a1f47c1cb5a64bab9a6b8ac38103416ac" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>runOnModule</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a2d6a270c3a71b5963eaed37839355fd3" prot="private" virt="non-virtual"><scope>SVF::WPAPass</scope><name>runPointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394dabb45a604558e2ebff460adb77b4a5d7c" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>Veto</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a3fc957e01a3ac7c242c030c6f6846fa9" prot="public" virt="non-virtual"><scope>SVF::WPAPass</scope><name>WPAPass</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_pass_1a7ea8006b7e9237a470dfd34ad633826b" prot="public" virt="virtual"><scope>SVF::WPAPass</scope><name>~WPAPass</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
