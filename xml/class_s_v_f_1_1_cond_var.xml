<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cond_var" kind="class" language="C++" prot="public">
    <compoundname>SVF::CondVar</compoundname>
    <includes refid="_conditional_p_t_8h" local="no">ConditionalPT.h</includes>
    <templateparamlist>
      <param>
        <type>class Cond</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a7faf827845c5e820f1b63ce6523bc2a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondVar&lt; Cond &gt;::operator==</definition>
        <argsstring>(const CondVar &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Comparison between two elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="66" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a50321e5ead24c8a9d6c58998072634f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondVar&lt; Cond &gt;::operator!=</definition>
        <argsstring>(const CondVar &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="71" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="71" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_var_1a90b13685d2126f8c10dde4a504bb28df" prot="private" static="no" mutable="no">
        <type>Cond</type>
        <definition>Cond SVF::CondVar&lt; Cond &gt;::m_cond</definition>
        <argsstring></argsstring>
        <name>m_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="123" column="9" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_var_1a26fd04b3f2d45f0c230e1823f3eea49a" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::CondVar&lt; Cond &gt;::m_id</definition>
        <argsstring></argsstring>
        <name>m_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="124" column="11" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a0999a4b34face00af83b3b840920fd3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondVar&lt; Cond &gt;::CondVar</definition>
        <argsstring>(const Cond &amp;cond, NodeID id)</argsstring>
        <name>CondVar</name>
        <param>
          <type>const Cond &amp;</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="50" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1afd729e068419ed45bb9da8d5920f8674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondVar&lt; Cond &gt;::CondVar</definition>
        <argsstring>(const CondVar &amp;conVar)</argsstring>
        <name>CondVar</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
          <declname>conVar</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="54" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a93101c4401ed4ced33d64b5726e9cd69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondVar&lt; Cond &gt;::CondVar</definition>
        <argsstring>()</argsstring>
        <name>CondVar</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="58" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1aad76f894d96617fb153cff0c875899a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondVar&lt; Cond &gt;::~CondVar</definition>
        <argsstring>()</argsstring>
        <name>~CondVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="60" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a90d6c2204c92db5c78991e6dfdcc5c80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
        <definition>CondVar&amp; SVF::CondVar&lt; Cond &gt;::operator=</definition>
        <argsstring>(const CondVar &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="78" column="20" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="78" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1add10a9d6f6a49cbd5dd0f5d47c423d27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondVar&lt; Cond &gt;::operator&lt;</definition>
        <argsstring>(const CondVar &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Less than implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="92" column="12" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1af84e7bfcff909009be5e109c600c63fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Cond &amp;</type>
        <definition>const Cond&amp; SVF::CondVar&lt; Cond &gt;::get_cond</definition>
        <argsstring>() const</argsstring>
        <name>get_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="100" column="23" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a5d64fa2be89051cd03301e3b07bffd6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::CondVar&lt; Cond &gt;::get_id</definition>
        <argsstring>() const</argsstring>
        <name>get_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="104" column="19" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_var_1a4baf5fb20288491c96827177f9965cc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CondVar&lt; Cond &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="109" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="109" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_s_v_f_1_1_cond_var_1a539bf3722c1ef2887e5459add0abf24c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
        <definition>raw_ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(raw_ostream &amp;o, const CondVar&lt; Cond &gt; &amp;cvar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref>&lt; Cond &gt; &amp;</type>
          <declname>cvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="117" column="12" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="117" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Conditional Variable (c,v) A context/path condition A variable NodeID </para>
    </detaileddescription>
    <location file="include/MemoryModel/ConditionalPT.h" line="46" column="1" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="47" bodyend="125"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cond_var_1a0999a4b34face00af83b3b840920fd3f" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>CondVar</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1afd729e068419ed45bb9da8d5920f8674" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>CondVar</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a93101c4401ed4ced33d64b5726e9cd69" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>CondVar</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1af84e7bfcff909009be5e109c600c63fe" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>get_cond</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a5d64fa2be89051cd03301e3b07bffd6a" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>get_id</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a90b13685d2126f8c10dde4a504bb28df" prot="private" virt="non-virtual"><scope>SVF::CondVar</scope><name>m_cond</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a26fd04b3f2d45f0c230e1823f3eea49a" prot="private" virt="non-virtual"><scope>SVF::CondVar</scope><name>m_id</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a50321e5ead24c8a9d6c58998072634f0" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1add10a9d6f6a49cbd5dd0f5d47c423d27" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a539bf3722c1ef2887e5459add0abf24c" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a90d6c2204c92db5c78991e6dfdcc5c80" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a7faf827845c5e820f1b63ce6523bc2a9" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1a4baf5fb20288491c96827177f9965cc4" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>toString</name></member>
      <member refid="class_s_v_f_1_1_cond_var_1aad76f894d96617fb153cff0c875899a6" prot="public" virt="non-virtual"><scope>SVF::CondVar</scope><name>~CondVar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
