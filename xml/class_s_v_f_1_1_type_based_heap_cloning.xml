<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_type_based_heap_cloning" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::TypeBasedHeapCloning</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c" prot="public" virt="non-virtual">SVF::FlowSensitiveTBHC</derivedcompoundref>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" prot="protected" static="yes" mutable="no">
        <type>const DIType *</type>
        <definition>const DIType * TypeBasedHeapCloning::undefType</definition>
        <argsstring></argsstring>
        <name>undefType</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The undefined type (â€¢); void. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="31" column="25" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a03ef2decb80ba07f4d98cae0a4497212" prot="protected" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string TypeBasedHeapCloning::derefFnName</definition>
        <argsstring></argsstring>
        <name>derefFnName</name>
        <initializer>= &quot;deref&quot;</initializer>
        <briefdescription>
<para>deref function for TBHC alias tests. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="34" column="30" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1ab1467e374b238b0f68d3fdd8f3ef6596" prot="protected" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string TypeBasedHeapCloning::mangledDerefFnName</definition>
        <argsstring></argsstring>
        <name>mangledDerefFnName</name>
        <initializer>= &quot;_Z5derefv&quot;</initializer>
        <briefdescription>
<para>deref function (mangled) for TBHC alias tests. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="36" column="30" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_d_c_h_graph" kindref="compound">DCHGraph</ref> *</type>
        <definition>DCHGraph* SVF::TypeBasedHeapCloning::dchg</definition>
        <argsstring></argsstring>
        <name>dchg</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Class hierarchy graph built from debug information. Required, CHG from IR is insufficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="47" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a7d3f7d27c9491b099a623ba03b1c4732" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
        <definition>BVDataPTAImpl* SVF::TypeBasedHeapCloning::pta</definition>
        <argsstring></argsstring>
        <name>pta</name>
        <briefdescription>
<para>PTA extending this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="147" column="19" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a6b1b4570c4f674340cb9f3fcc8f3c4eb" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::TypeBasedHeapCloning::ppag</definition>
        <argsstring></argsstring>
        <name>ppag</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> the PTA uses. Just a shortcut for getPAG(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="149" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a477492fb699d742c33007a6ca934b5c1" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, const DIType * &gt;</type>
        <definition>Map&lt;NodeID, const DIType *&gt; SVF::TypeBasedHeapCloning::objToType</definition>
        <argsstring></argsstring>
        <name>objToType</name>
        <briefdescription>
<para>Object -&gt; its type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="152" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a0a768e179a3a0c8c213ecca6f71a64c1" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, NodeID &gt;</type>
        <definition>Map&lt;NodeID, NodeID&gt; SVF::TypeBasedHeapCloning::objToAllocation</definition>
        <argsstring></argsstring>
        <name>objToAllocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object -&gt; allocation site. The value NodeID depends on the pointer analysis (could be an <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node or <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node for example). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="156" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a36d5f03d899dd21392c327115ff2f9d9" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, NodeBS &gt;</type>
        <definition>Map&lt;NodeID, NodeBS&gt; SVF::TypeBasedHeapCloning::objToClones</definition>
        <argsstring></argsstring>
        <name>objToClones</name>
        <briefdescription>
<para>(Original) object -&gt; set of its clones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="158" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1accbf71007be662ee2436ca3d76b903ed" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, NodeID &gt;</type>
        <definition>Map&lt;NodeID, NodeID&gt; SVF::TypeBasedHeapCloning::cloneToOriginalObj</definition>
        <argsstring></argsstring>
        <name>cloneToOriginalObj</name>
        <briefdescription>
<para>(Clone) object -&gt; original object (opposite of objToclones). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="160" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a848e59ab22069367a97009f1fdebc4d9" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, PointsTo &gt;</type>
        <definition>Map&lt;NodeID, PointsTo&gt; SVF::TypeBasedHeapCloning::locToFilterSet</definition>
        <argsstring></argsstring>
        <name>locToFilterSet</name>
        <briefdescription>
<para>Maps nodes (a location like a <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> node or <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node) to their filter set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="162" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1aa9977ed15f500848b23d4df7a44cd204" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeID, NodeBS &gt;</type>
        <definition>Map&lt;NodeID, NodeBS&gt; SVF::TypeBasedHeapCloning::objToGeps</definition>
        <argsstring></argsstring>
        <name>objToGeps</name>
        <briefdescription>
<para>Maps objects to the GEP nodes beneath them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="164" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a882afb13844ed039d18d325e92819f77" prot="private" static="no" mutable="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *, Map&lt; unsigned, NodeBS &gt; &gt;</type>
        <definition>Map&lt;const MemObj *, Map&lt;unsigned, NodeBS&gt; &gt; SVF::TypeBasedHeapCloning::memObjToGeps</definition>
        <argsstring></argsstring>
        <name>memObjToGeps</name>
        <briefdescription>
<para>Maps memory objects to their GEP objects. (memobj -&gt; (fieldidx -&gt; geps)) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="166" column="9" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a4c658be1ade99ad1e848cd80332e38ce" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numInit</definition>
        <argsstring></argsstring>
        <name>numInit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="172" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1ad971bec1a044bbb979b96b0d91278afd" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numTBWU</definition>
        <argsstring></argsstring>
        <name>numTBWU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="173" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1af5cf059dea30a0b422321e3a792ea447" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numTBSSU</definition>
        <argsstring></argsstring>
        <name>numTBSSU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="174" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1ab3fa2223ad8d8b23d78aa02892f0be2c" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numTBSU</definition>
        <argsstring></argsstring>
        <name>numTBSU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="175" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a0b14eb60ddc73654bec24cd8142e447b" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numReuse</definition>
        <argsstring></argsstring>
        <name>numReuse</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="176" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a891a5873205bb98ad494a1c07231dc8a" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numAgg</definition>
        <argsstring></argsstring>
        <name>numAgg</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="177" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a4d6fc7852fc4bfe1d7ba3c0b8602bc8a" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGInit</definition>
        <argsstring></argsstring>
        <name>numSGInit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="180" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1afca6afa06a1072e7a452ed42bcd666d3" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGTBWU</definition>
        <argsstring></argsstring>
        <name>numSGTBWU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="181" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a86a51362c35c4a67fc1d4af655504493" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGTBSSU</definition>
        <argsstring></argsstring>
        <name>numSGTBSSU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="182" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a51d2baff54d05cba59fa270c32cce87c" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGTBSU</definition>
        <argsstring></argsstring>
        <name>numSGTBSU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="183" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1ac44c7746d774af420ff2bc5ce98f5add" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGReuse</definition>
        <argsstring></argsstring>
        <name>numSGReuse</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="184" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_type_based_heap_cloning_1a28653c7757fc31c4b8c1b31ace17eb50" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned SVF::TypeBasedHeapCloning::numSGAgg</definition>
        <argsstring></argsstring>
        <name>numSGAgg</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="185" column="14" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a21d2fd8bbef0c6f6ddddb5387569a7fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const MDNode *</type>
        <definition>const MDNode * TypeBasedHeapCloning::getRawCTirMetadata</definition>
        <argsstring>(const Value *)</argsstring>
        <name>getRawCTirMetadata</name>
        <param>
          <type>const Value *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Returns raw ctir metadata of a Value. Returns null if it doesn&apos;t exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="25" column="25" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="483" bodyend="499"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a8792388cc2fce53db9eea7902723d640" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::TypeBasedHeapCloning::~TypeBasedHeapCloning</definition>
        <argsstring>()</argsstring>
        <name>~TypeBasedHeapCloning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="27" column="13" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="27" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1af4d0abf53755a070478c142add3322d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TypeBasedHeapCloning::TypeBasedHeapCloning</definition>
        <argsstring>(BVDataPTAImpl *pta)</argsstring>
        <name>TypeBasedHeapCloning</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Constructor. pta is the pointer analysis using this object (i.e. that which is extending). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="39" column="5" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a1d48cd7ccbcd9bdf1470a5d9aca3298d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::TypeBasedHeapCloning::backPropagate</definition>
        <argsstring>(NodeID clone)=0</argsstring>
        <name>backPropagate</name>
        <reimplementedby refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a81ce8b1e98db245d3f4ccf189ca11e47">backPropagate</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>clone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Required by user. Handles back-propagation of newly created clone after all metadata has been set. Used by cloneObject. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="43" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1aaaf50870e50b45b44d4ecaaaab662770" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::setDCHG</definition>
        <argsstring>(DCHGraph *dchg)</argsstring>
        <name>setDCHG</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_d_c_h_graph" kindref="compound">DCHGraph</ref> *</type>
          <declname>dchg</declname>
        </param>
        <briefdescription>
<para>DCHG <emphasis>must</emphasis> be set by extending class once the DCHG is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="50" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a4ae27b3d09bbb83b21ed6c7fd6c4e653" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::setPAG</definition>
        <argsstring>(PAG *pag)</argsstring>
        <name>setPAG</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
          <declname>pag</declname>
        </param>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> <emphasis>must</emphasis> be set by extending class once the <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="52" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a59a9c7b8a7ec392ac609f10c8dac8d7f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TypeBasedHeapCloning::isBlkObjOrConstantObj</definition>
        <argsstring>(NodeID o) const</argsstring>
        <name>isBlkObjOrConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if an object is a black hole obj or a constant object. Required since other implementations obviously do not account for clones. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="56" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1add00f1c20a524c0be903af679bd6f638" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TypeBasedHeapCloning::isBase</definition>
        <argsstring>(const DIType *a, const DIType *b) const</argsstring>
        <name>isBase</name>
        <param>
          <type>const DIType *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper around <ref refid="class_s_v_f_1_1_d_c_h_graph_1ab33f9af6ad22eb99dd0d9950fb0e50e6" kindref="member">DCHGraph::isBase</ref>. Purpose is to keep our conditions clean by only passing two parameters like the rules. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="60" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1abce2ba326af69312c5971246cc4c10dc" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TypeBasedHeapCloning::isClone</definition>
        <argsstring>(NodeID o) const</argsstring>
        <name>isClone</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns true if o is a clone. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="63" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ac51cd735739a2499196a87323172a6a6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::setType</definition>
        <argsstring>(NodeID o, const DIType *t)</argsstring>
        <name>setType</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Sets the type (in objToType) of o. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="66" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a219edef6c013a953ed12ee3c56bde6de" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType * TypeBasedHeapCloning::getType</definition>
        <argsstring>(NodeID o) const</argsstring>
        <name>getType</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns the type (from objToType) of o. Asserts existence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="68" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a006243a1416f4950de254d0d62ba40b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::setAllocationSite</definition>
        <argsstring>(NodeID o, NodeID site)</argsstring>
        <name>setAllocationSite</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>site</declname>
        </param>
        <briefdescription>
<para>Sets the allocation site (in objToAllocation) of o. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="71" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a5681d78630ca8770dd493ef3841ec683" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::getAllocationSite</definition>
        <argsstring>(NodeID o) const</argsstring>
        <name>getAllocationSite</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns the allocation site (from objToAllocation) of o. Asserts existence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="73" column="12" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ad1c67da3aac128ca8a69907fdad53fcd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS</type>
        <definition>const NodeBS TypeBasedHeapCloning::getObjsWithClones</definition>
        <argsstring>(void)</argsstring>
        <name>getObjsWithClones</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns objects that have clones (any key in objToClones). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="76" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ae83ef821386b3fd4b86f29477cdda3e1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::addClone</definition>
        <argsstring>(NodeID o, NodeID c)</argsstring>
        <name>addClone</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add a clone c to object o. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="78" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1af127bed600087b1ace26088a76ca8998" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS &amp;</type>
        <definition>const NodeBS &amp; TypeBasedHeapCloning::getClones</definition>
        <argsstring>(NodeID o)</argsstring>
        <name>getClones</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns all the clones of o. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="80" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a14027d92c4f8e33d7487fe81acce6a85" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::setOriginalObj</definition>
        <argsstring>(NodeID c, NodeID o)</argsstring>
        <name>setOriginalObj</name>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="83" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::getOriginalObj</definition>
        <argsstring>(NodeID c) const</argsstring>
        <name>getOriginalObj</name>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the original object c is cloned from. If c is not a clone, returns itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="85" column="12" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="101" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PointsTo &amp;</type>
        <definition>PointsTo &amp; TypeBasedHeapCloning::getFilterSet</definition>
        <argsstring>(NodeID loc)</argsstring>
        <name>getFilterSet</name>
        <param>
          <type>NodeID</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Returns the filter set of a location. Not const; could create empty PointsTo. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="88" column="14" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ad07fb204258fccda89053514338e3804" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::addGepToObj</definition>
        <argsstring>(NodeID gep, NodeID base, unsigned offset)</argsstring>
        <name>addGepToObj</name>
        <param>
          <type>NodeID</type>
          <declname>gep</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>base</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Associates gep with base (through objToGeps and memObjToGeps). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="91" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="118" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ad043ab95900849a5a894ca4bada4e032" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS &amp;</type>
        <definition>const NodeBS &amp; TypeBasedHeapCloning::getGepObjsFromMemObj</definition>
        <argsstring>(const MemObj *memObj, unsigned offset)</argsstring>
        <name>getGepObjsFromMemObj</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>memObj</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all gep objects at a particular offset for memory object. Not const; could create empty set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="94" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1afe416f9ec57923f34ef1db3890a3f9e1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS &amp;</type>
        <definition>const NodeBS &amp; TypeBasedHeapCloning::getGepObjs</definition>
        <argsstring>(NodeID base)</argsstring>
        <name>getGepObjs</name>
        <param>
          <type>NodeID</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all gep objects under an object. Not const; could create empty set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="97" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1aa175b5db473eb57c03b6f908791d1133" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const NodeBS</type>
        <definition>const NodeBS TypeBasedHeapCloning::getGepObjClones</definition>
        <argsstring>(NodeID base, unsigned offset)</argsstring>
        <name>getGepObjClones</name>
        <param>
          <type>NodeID</type>
          <declname>base</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the GEP object node(s) of base for ls. This may include clones. If there are no GEP objects, then getGepObjNode is called on the <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> (through base&apos;s getGepObjNode) which will create one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="102" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="142" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TypeBasedHeapCloning::init</definition>
        <argsstring>(NodeID loc, NodeID p, const DIType *tildet, bool reuse, bool gep=false)</argsstring>
        <name>init</name>
        <param>
          <type>NodeID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>tildet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuse</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gep</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise the pointees of p at loc (which is type tildet *). reuse indicates whether reuse is a possibility for this initialisation. Returns whether p changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="106" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="271" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a11c3d1b7f10e4aad2525d428f5855db5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::cloneObject</definition>
        <argsstring>(NodeID o, const DIType *type, bool reuse)</argsstring>
        <name>cloneObject</name>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const DIType *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a clone of o with type type. reuse indicates whether we are cloning as a result of reuse. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="110" column="12" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="411" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ac6ebb2fd24fc4272faf5db6ddd1e464b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::addCloneDummyObjNode</definition>
        <argsstring>(const MemObj *mem)</argsstring>
        <name>addCloneDummyObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Add clone dummy object node to <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="113" column="19" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a16ad9c601a044731b982305a177dbda3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::addCloneGepObjNode</definition>
        <argsstring>(const MemObj *mem, const LocationSet &amp;l)</argsstring>
        <name>addCloneGepObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Add clone GEP object node to <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="115" column="19" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="507" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a83fb1e2a7b66d5f33fa34698a52250af" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID TypeBasedHeapCloning::addCloneFIObjNode</definition>
        <argsstring>(const MemObj *mem)</argsstring>
        <name>addCloneFIObjNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Add clone FI object node to <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="117" column="19" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="513" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ac4565775cced4444ba007e310c4a02d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType * TypeBasedHeapCloning::getTypeFromCTirMetadata</definition>
        <argsstring>(const Value *)</argsstring>
        <name>getTypeFromCTirMetadata</name>
        <param>
          <type>const Value *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the ctir type attached to the value, nullptr if non-existant. Not static because it needs the DCHG to return the canonical type. Not static because we need dchg&apos;s getCanonicalType. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="122" column="18" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="519" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1ae42ec334a7dfc96a5ead2d2845ca3b22" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::validateTBHCTests</definition>
        <argsstring>(SVFModule *svfMod)</argsstring>
        <name>validateTBHCTests</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfMod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs tests on MAYALIAS, NOALIAS, etc. built from TBHC_MAYALIAS, TBHC_NOALIAS, etc. macros. TBHC_XALIAS macros produce: call XALIAS(...) %1 = load ... ... n = load p store ... n-1, ...* n !ctir !t1 call deref() n+1 = load ... ... n+n = load q store ... n+n-1, ...* n+n !ctir !t2 call deref() We want to test the points-to sets of n and n+n after filtering with !t1 and !t2 respectively. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="140" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="562" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a1a7b51e7d959795c00383721b013834d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TypeBasedHeapCloning::dumpStats</definition>
        <argsstring>(void)</argsstring>
        <name>dumpStats</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Dump some statistics we tracked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="143" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="731" bodyend="794"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_type_based_heap_cloning_1a724cdfa6fbf6b2b401332ea83265c4c2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TypeBasedHeapCloning::isGep</definition>
        <argsstring>(const PAGNode *n) const</argsstring>
        <name>isGep</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Test whether object is a GEP object. For convenience. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/TypeBasedHeapCloning.h" line="169" column="10" bodyfile="lib/Util/TypeBasedHeapCloning.cpp" bodystart="539" bodyend="543"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::TypeBasedHeapCloning</label>
        <link refid="class_s_v_f_1_1_type_based_heap_cloning"/>
      </node>
      <node id="2">
        <label>SVF::FlowSensitiveTBHC</label>
        <link refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::TypeBasedHeapCloning</label>
        <link refid="class_s_v_f_1_1_type_based_heap_cloning"/>
        <childnode refid="2" relation="usage">
          <edgelabel>dchg</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SVF::DCHGraph</label>
        <link refid="class_s_v_f_1_1_d_c_h_graph"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>svfModule</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="5">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="4">
        <label>SVF::GenericGraph&lt; DCHNode, DCHEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </collaborationgraph>
    <location file="include/Util/TypeBasedHeapCloning.h" line="21" column="1" bodyfile="include/Util/TypeBasedHeapCloning.h" bodystart="22" bodyend="186"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ae83ef821386b3fd4b86f29477cdda3e1" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>addClone</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ac6ebb2fd24fc4272faf5db6ddd1e464b" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>addCloneDummyObjNode</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a83fb1e2a7b66d5f33fa34698a52250af" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>addCloneFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a16ad9c601a044731b982305a177dbda3" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>addCloneGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ad07fb204258fccda89053514338e3804" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>addGepToObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a1d48cd7ccbcd9bdf1470a5d9aca3298d" prot="protected" virt="pure-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>backPropagate</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a11c3d1b7f10e4aad2525d428f5855db5" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>cloneObject</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1accbf71007be662ee2436ca3d76b903ed" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>cloneToOriginalObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>dchg</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a03ef2decb80ba07f4d98cae0a4497212" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>derefFnName</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a1a7b51e7d959795c00383721b013834d" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>dumpStats</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a5681d78630ca8770dd493ef3841ec683" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getAllocationSite</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1af127bed600087b1ace26088a76ca8998" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getClones</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getFilterSet</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1aa175b5db473eb57c03b6f908791d1133" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getGepObjClones</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1afe416f9ec57923f34ef1db3890a3f9e1" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getGepObjs</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ad043ab95900849a5a894ca4bada4e032" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getGepObjsFromMemObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ad1c67da3aac128ca8a69907fdad53fcd" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getObjsWithClones</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getOriginalObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a21d2fd8bbef0c6f6ddddb5387569a7fa" prot="public" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getRawCTirMetadata</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a219edef6c013a953ed12ee3c56bde6de" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ac4565775cced4444ba007e310c4a02d8" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>getTypeFromCTirMetadata</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>init</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1add00f1c20a524c0be903af679bd6f638" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>isBase</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a59a9c7b8a7ec392ac609f10c8dac8d7f" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1abce2ba326af69312c5971246cc4c10dc" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>isClone</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a724cdfa6fbf6b2b401332ea83265c4c2" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>isGep</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a848e59ab22069367a97009f1fdebc4d9" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>locToFilterSet</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ab1467e374b238b0f68d3fdd8f3ef6596" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>mangledDerefFnName</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a882afb13844ed039d18d325e92819f77" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>memObjToGeps</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a891a5873205bb98ad494a1c07231dc8a" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numAgg</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a4c658be1ade99ad1e848cd80332e38ce" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numInit</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a0b14eb60ddc73654bec24cd8142e447b" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numReuse</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a28653c7757fc31c4b8c1b31ace17eb50" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGAgg</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a4d6fc7852fc4bfe1d7ba3c0b8602bc8a" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGInit</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ac44c7746d774af420ff2bc5ce98f5add" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGReuse</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a86a51362c35c4a67fc1d4af655504493" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGTBSSU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a51d2baff54d05cba59fa270c32cce87c" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGTBSU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1afca6afa06a1072e7a452ed42bcd666d3" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numSGTBWU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1af5cf059dea30a0b422321e3a792ea447" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numTBSSU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ab3fa2223ad8d8b23d78aa02892f0be2c" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numTBSU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ad971bec1a044bbb979b96b0d91278afd" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>numTBWU</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a0a768e179a3a0c8c213ecca6f71a64c1" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>objToAllocation</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a36d5f03d899dd21392c327115ff2f9d9" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>objToClones</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1aa9977ed15f500848b23d4df7a44cd204" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>objToGeps</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a477492fb699d742c33007a6ca934b5c1" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>objToType</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a6b1b4570c4f674340cb9f3fcc8f3c4eb" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>ppag</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a7d3f7d27c9491b099a623ba03b1c4732" prot="private" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>pta</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a006243a1416f4950de254d0d62ba40b0" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>setAllocationSite</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1aaaf50870e50b45b44d4ecaaaab662770" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>setDCHG</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a14027d92c4f8e33d7487fe81acce6a85" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>setOriginalObj</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a4ae27b3d09bbb83b21ed6c7fd6c4e653" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>setPAG</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ac51cd735739a2499196a87323172a6a6" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>setType</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1af4d0abf53755a070478c142add3322d8" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>TypeBasedHeapCloning</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>undefType</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1ae42ec334a7dfc96a5ead2d2845ca3b22" prot="protected" virt="non-virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>validateTBHCTests</name></member>
      <member refid="class_s_v_f_1_1_type_based_heap_cloning_1a8792388cc2fce53db9eea7902723d640" prot="public" virt="virtual"><scope>SVF::TypeBasedHeapCloning</scope><name>~TypeBasedHeapCloning</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
