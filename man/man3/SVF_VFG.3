.TH "SVF::VFG" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::VFG
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSVF::GenericGraph< NodeTy, EdgeTy >\fP\&.
.PP
Inherited by \fBSVF::SVFG\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBVFGK\fP { \fBORIGSVFGK\fP, \fBPTRONLYSVFGK\fP }"
.br
.RI "\fBVFG\fP kind\&. "
.ti -1c
.RI "typedef Map< NodeID, \fBVFGNode\fP * > \fBVFGNodeIDToNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Set< \fBVFGNode\fP * > \fBVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, NodeID > \fBPAGNodeToDefMapTy\fP"
.br
.ti -1c
.RI "typedef Map< std::pair< NodeID, const \fBCallBlockNode\fP * >, \fBActualParmVFGNode\fP * > \fBPAGNodeToActualParmMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBActualRetVFGNode\fP * > \fBPAGNodeToActualRetMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBFormalParmVFGNode\fP * > \fBPAGNodeToFormalParmMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBFormalRetVFGNode\fP * > \fBPAGNodeToFormalRetMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGEdge\fP *, \fBStmtVFGNode\fP * > \fBPAGEdgeToStmtVFGNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBIntraPHIVFGNode\fP * > \fBPAGNodeToPHIVFGNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBBinaryOPVFGNode\fP * > \fBPAGNodeToBinaryOPVFGNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBUnaryOPVFGNode\fP * > \fBPAGNodeToUnaryOPVFGNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, \fBCmpVFGNode\fP * > \fBPAGNodeToCmpVFGNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, VFGNodeSet > \fBFunToVFGNodesMapTy\fP"
.br
.ti -1c
.RI "typedef FormalParmVFGNode::CallPESet \fBCallPESet\fP"
.br
.ti -1c
.RI "typedef FormalRetVFGNode::RetPESet \fBRetPESet\fP"
.br
.ti -1c
.RI "typedef VFGEdge::VFGEdgeSetTy \fBVFGEdgeSetTy\fP"
.br
.ti -1c
.RI "typedef VFGEdge::SVFGEdgeSetTy \fBSVFGEdgeSetTy\fP"
.br
.ti -1c
.RI "typedef VFGEdge::VFGEdgeSetTy::iterator \fBVFGNodeIter\fP"
.br
.ti -1c
.RI "typedef VFGNodeIDToNodeMapTy::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef VFGNodeIDToNodeMapTy::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef PAG::PAGEdgeSet \fBPAGEdgeSet\fP"
.br
.ti -1c
.RI "typedef Set< const \fBVFGNode\fP * > \fBGlobalVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef Set< const \fBPAGNode\fP * > \fBPAGNodeSet\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVFG\fP (\fBPTACallGraph\fP *callgraph, \fBVFGK\fP k=ORIGSVFGK)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~VFG\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBVFGK\fP \fBgetKind\fP () const"
.br
.RI "Get \fBVFG\fP kind\&. "
.ti -1c
.RI "bool \fBisPtrOnlySVFG\fP () const"
.br
.RI "Return true if this \fBVFG\fP only contains pointer related SVFGNodes for pointer analysis\&. "
.ti -1c
.RI "void \fBsetDumpVFG\fP (bool flag)"
.br
.RI "Whether to dump \fBVFG\fP;\&. "
.ti -1c
.RI "bool \fBgetDumpVFG\fP () const"
.br
.RI "Whether to dump \fBVFG\fP;\&. "
.ti -1c
.RI "\fBPAG\fP * \fBgetPAG\fP () const"
.br
.RI "Return \fBPAG\fP\&. "
.ti -1c
.RI "\fBPTACallGraph\fP * \fBgetCallGraph\fP () const"
.br
.RI "Return CallGraph\&. "
.ti -1c
.RI "\fBVFGNode\fP * \fBgetVFGNode\fP (NodeID id) const"
.br
.RI "Get a \fBVFG\fP node\&. "
.ti -1c
.RI "bool \fBhasVFGNode\fP (NodeID id) const"
.br
.RI "Whether has the \fBVFGNode\fP\&. "
.ti -1c
.RI "GlobalVFGNodeSet & \fBgetGlobalVFGNodes\fP ()"
.br
.RI "Return global stores\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBgetVFGEdge\fP (const \fBVFGNode\fP *src, const \fBVFGNode\fP *dst, \fBVFGEdge::VFGEdgeK\fP kind)"
.br
.RI "Get a \fBSVFG\fP edge according to src and dst\&. "
.ti -1c
.RI "void \fBdump\fP (const std::string &file, bool simple=false)"
.br
.RI "Dump graph into dot file\&. "
.ti -1c
.RI "void \fBupdateCallGraph\fP (\fBPointerAnalysis\fP *pta)"
.br
.RI "Update \fBVFG\fP based on pointer analysis results\&. "
.ti -1c
.RI "virtual void \fBconnectCallerAndCallee\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee, VFGEdgeSetTy &edges)"
.br
.RI "Connect \fBVFG\fP nodes between caller and callee for indirect call site\&. "
.ti -1c
.RI "CallSiteID \fBgetCallSiteID\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *func) const"
.br
.RI "Get callsite given a callsiteID\&. "
.ti -1c
.RI "const \fBCallBlockNode\fP * \fBgetCallSite\fP (CallSiteID id) const"
.br
.ti -1c
.RI "const \fBVFGNode\fP * \fBgetDefVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.RI "Given a pagNode, return its definition site\&. "
.ti -1c
.RI "const \fBPAGNode\fP * \fBgetLHSTopLevPtr\fP (const \fBVFGNode\fP *node) const"
.br
.ti -1c
.RI "\fBStmtVFGNode\fP * \fBgetStmtVFGNode\fP (const \fBPAGEdge\fP *pagEdge) const"
.br
.RI "Get an \fBVFGNode\fP\&. "
.ti -1c
.RI "\fBIntraPHIVFGNode\fP * \fBgetIntraPHIVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "\fBBinaryOPVFGNode\fP * \fBgetBinaryOPVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "\fBUnaryOPVFGNode\fP * \fBgetUnaryOPVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "\fBCmpVFGNode\fP * \fBgetCmpVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "\fBActualParmVFGNode\fP * \fBgetActualParmVFGNode\fP (const \fBPAGNode\fP *aparm, const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "\fBActualRetVFGNode\fP * \fBgetActualRetVFGNode\fP (const \fBPAGNode\fP *aret) const"
.br
.ti -1c
.RI "\fBFormalParmVFGNode\fP * \fBgetFormalParmVFGNode\fP (const \fBPAGNode\fP *fparm) const"
.br
.ti -1c
.RI "\fBFormalRetVFGNode\fP * \fBgetFormalRetVFGNode\fP (const \fBPAGNode\fP *fret) const"
.br
.ti -1c
.RI "const \fBSVFFunction\fP * \fBisFunEntryVFGNode\fP (const \fBVFGNode\fP *node) const"
.br
.RI "Whether a node is function entry \fBVFGNode\fP\&. "
.ti -1c
.RI "bool \fBhasBlackHoleConstObjAddrAsDef\fP (const \fBPAGNode\fP *pagNode) const"
.br
.RI "Whether a \fBPAGNode\fP has a blackhole or const object as its definition\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddIntraDirectVFEdge\fP (NodeID srcId, NodeID dstId)"
.br
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddCallEdge\fP (NodeID srcId, NodeID dstId, CallSiteID csId)"
.br
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddRetEdge\fP (NodeID srcId, NodeID dstId, CallSiteID csId)"
.br
.ti -1c
.RI "void \fBremoveVFGEdge\fP (\fBVFGEdge\fP *edge)"
.br
.RI "Remove a \fBSVFG\fP edge\&. "
.ti -1c
.RI "void \fBremoveVFGNode\fP (\fBVFGNode\fP *node)"
.br
.RI "Remove a \fBVFGNode\fP\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBhasIntraVFGEdge\fP (\fBVFGNode\fP *src, \fBVFGNode\fP *dst, \fBVFGEdge::VFGEdgeK\fP kind)"
.br
.RI "Whether we has a \fBSVFG\fP edge\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBhasInterVFGEdge\fP (\fBVFGNode\fP *src, \fBVFGNode\fP *dst, \fBVFGEdge::VFGEdgeK\fP kind, CallSiteID csId)"
.br
.ti -1c
.RI "\fBVFGEdge\fP * \fBhasThreadVFGEdge\fP (\fBVFGNode\fP *src, \fBVFGNode\fP *dst, \fBVFGEdge::VFGEdgeK\fP kind)"
.br
.ti -1c
.RI "bool \fBaddVFGEdge\fP (\fBVFGEdge\fP *edge)"
.br
.RI "Add \fBVFG\fP edge\&. "
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "VFGNodeSet & \fBgetVFGNodes\fP (const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "bool \fBhasVFGNodes\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "bool \fBVFGNodes\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "VFGNodeSet::const_iterator \fBgetVFGNodeBegin\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "VFGNodeSet::const_iterator \fBgetVFGNodeEnd\fP (const \fBSVFFunction\fP *fun) const"
.br
.in -1c
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.RI "Clean up memory\&. "
.ti -1c
.RI "void \fBcheckIntraEdgeParents\fP (const \fBVFGNode\fP *srcNode, const \fBVFGNode\fP *dstNode)"
.br
.RI "sanitize Intra edges, verify that both nodes belong to the same function\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddInterEdgeFromAPToFP\fP (\fBActualParmVFGNode\fP *src, \fBFormalParmVFGNode\fP *dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from actual to formal parameters\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddInterEdgeFromFRToAR\fP (\fBFormalRetVFGNode\fP *src, \fBActualRetVFGNode\fP *dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from callee return to callsite receive parameter\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddInterEdgeFromAPToFP\fP (NodeID src, NodeID dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from actual to formal parameters\&. "
.ti -1c
.RI "\fBVFGEdge\fP * \fBaddInterEdgeFromFRToAR\fP (NodeID src, NodeID dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from callee return to callsite receive parameter\&. "
.ti -1c
.RI "virtual void \fBconnectAParamAndFParam\fP (const \fBPAGNode\fP *csArg, const \fBPAGNode\fP *funArg, const \fBCallBlockNode\fP *cbn, CallSiteID csId, VFGEdgeSetTy &edges)"
.br
.RI "Connect \fBVFG\fP nodes between caller and callee for indirect call site\&. "
.ti -1c
.RI "virtual void \fBconnectFRetAndARet\fP (const \fBPAGNode\fP *funReturn, const \fBPAGNode\fP *csReturn, CallSiteID csId, VFGEdgeSetTy &edges)"
.br
.RI "Connect formal-ret and actual ret\&. "
.ti -1c
.RI "void \fBsetDef\fP (const \fBPAGNode\fP *pagNode, const \fBVFGNode\fP *node)"
.br
.RI "Given a \fBPAGNode\fP, set/get its def \fBVFG\fP node (definition of top level pointers) "
.ti -1c
.RI "NodeID \fBgetDef\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "bool \fBhasDef\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "void \fBaddVFGNodes\fP ()"
.br
.RI "Create \fBVFG\fP nodes\&. "
.ti -1c
.RI "virtual PAGEdge::PAGEdgeSetTy & \fBgetPAGEdgeSet\fP (\fBPAGEdge::PEDGEK\fP kind)"
.br
.RI "Get \fBPAGEdge\fP set\&. "
.ti -1c
.RI "virtual bool \fBisInterestedPAGNode\fP (const \fBPAGNode\fP *node) const"
.br
.ti -1c
.RI "void \fBconnectDirectVFGEdges\fP ()"
.br
.RI "Create edges between \fBVFG\fP nodes within a function\&. "
.ti -1c
.RI "void \fBaddVFGInterEdges\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee)"
.br
.RI "Create edges between \fBVFG\fP nodes across functions\&. "
.ti -1c
.RI "bool \fBisPhiCopyEdge\fP (const \fBPAGEdge\fP *copy) const"
.br
.ti -1c
.RI "virtual void \fBaddVFGNode\fP (\fBVFGNode\fP *vfgNode, \fBICFGNode\fP *icfgNode)"
.br
.RI "Add a \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddStmtVFGNode\fP (\fBStmtVFGNode\fP *node, const \fBPAGEdge\fP *pagEdge)"
.br
.RI "Add a \fBVFG\fP node for program statement\&. "
.ti -1c
.RI "void \fBaddNullPtrVFGNode\fP (const \fBPAGNode\fP *pagNode)"
.br
.ti -1c
.RI "void \fBaddAddrVFGNode\fP (const \fBAddrPE\fP *addr)"
.br
.RI "Add an Address \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddCopyVFGNode\fP (const \fBCopyPE\fP *copy)"
.br
.RI "Add a Copy \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddGepVFGNode\fP (const \fBGepPE\fP *gep)"
.br
.RI "Add a Gep \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddLoadVFGNode\fP (const \fBLoadPE\fP *load)"
.br
.RI "Add a Load \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddStoreVFGNode\fP (const \fBStorePE\fP *store)"
.br
.ti -1c
.RI "void \fBaddActualParmVFGNode\fP (const \fBPAGNode\fP *aparm, const \fBCallBlockNode\fP *cs)"
.br
.ti -1c
.RI "void \fBaddFormalParmVFGNode\fP (const \fBPAGNode\fP *fparm, const \fBSVFFunction\fP *fun, CallPESet &callPEs)"
.br
.RI "Add a formal parameter \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddFormalRetVFGNode\fP (const \fBPAGNode\fP *uniqueFunRet, const \fBSVFFunction\fP *fun, RetPESet &retPEs)"
.br
.ti -1c
.RI "void \fBaddActualRetVFGNode\fP (const \fBPAGNode\fP *ret, const \fBCallBlockNode\fP *cs)"
.br
.RI "Add a callsite Receive \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddIntraPHIVFGNode\fP (const \fBPAGNode\fP *phiResNode, PAG::CopyPEList &oplist)"
.br
.RI "Add an llvm PHI \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddCmpVFGNode\fP (const \fBPAGNode\fP *resNode, PAG::CmpPEList &oplist)"
.br
.RI "Add a Compare \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddBinaryOPVFGNode\fP (const \fBPAGNode\fP *resNode, PAG::BinaryOPList &oplist)"
.br
.RI "Add a BinaryOperator \fBVFG\fP node\&. "
.ti -1c
.RI "void \fBaddUnaryOPVFGNode\fP (const \fBPAGNode\fP *resNode, PAG::UnaryOPList &oplist)"
.br
.RI "Add a UnaryOperator \fBVFG\fP node\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "NodeID \fBtotalVFGNode\fP"
.br
.ti -1c
.RI "PAGNodeToDefMapTy \fBPAGNodeToDefMap\fP"
.br
.RI "map a pag node to its definition SVG node "
.ti -1c
.RI "PAGNodeToActualParmMapTy \fBPAGNodeToActualParmMap\fP"
.br
.RI "map a \fBPAGNode\fP to an actual parameter "
.ti -1c
.RI "PAGNodeToActualRetMapTy \fBPAGNodeToActualRetMap\fP"
.br
.RI "map a \fBPAGNode\fP to an actual return "
.ti -1c
.RI "PAGNodeToFormalParmMapTy \fBPAGNodeToFormalParmMap\fP"
.br
.RI "map a \fBPAGNode\fP to a formal parameter "
.ti -1c
.RI "PAGNodeToFormalRetMapTy \fBPAGNodeToFormalRetMap\fP"
.br
.RI "map a \fBPAGNode\fP to a formal return "
.ti -1c
.RI "PAGNodeToPHIVFGNodeMapTy \fBPAGNodeToIntraPHIVFGNodeMap\fP"
.br
.RI "map a \fBPAGNode\fP to its \fBPHIVFGNode\fP "
.ti -1c
.RI "PAGNodeToBinaryOPVFGNodeMapTy \fBPAGNodeToBinaryOPVFGNodeMap\fP"
.br
.RI "map a \fBPAGNode\fP to its \fBBinaryOPVFGNode\fP "
.ti -1c
.RI "PAGNodeToUnaryOPVFGNodeMapTy \fBPAGNodeToUnaryOPVFGNodeMap\fP"
.br
.RI "map a \fBPAGNode\fP to its \fBUnaryOPVFGNode\fP "
.ti -1c
.RI "PAGNodeToCmpVFGNodeMapTy \fBPAGNodeToCmpVFGNodeMap\fP"
.br
.RI "map a \fBPAGNode\fP to its \fBCmpVFGNode\fP "
.ti -1c
.RI "PAGEdgeToStmtVFGNodeMapTy \fBPAGEdgeToStmtVFGNodeMap\fP"
.br
.RI "map a \fBPAGEdge\fP to its \fBStmtVFGNode\fP "
.ti -1c
.RI "FunToVFGNodesMapTy \fBfunToVFGNodesMap\fP"
.br
.RI "map a function to its VFGNodes; "
.ti -1c
.RI "GlobalVFGNodeSet \fBglobalVFGNodes\fP"
.br
.RI "set of global store \fBVFG\fP nodes "
.ti -1c
.RI "\fBPTACallGraph\fP * \fBcallgraph\fP"
.br
.ti -1c
.RI "\fBPAG\fP * \fBpag\fP"
.br
.ti -1c
.RI "\fBVFGK\fP \fBkind\fP"
.br
.ti -1c
.RI "bool \fBdumpVFG\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VFG::VFG (\fBPTACallGraph\fP * cg, \fBVFGK\fP k = \fCORIGSVFGK\fP)"

.PP
Constructor\&. Constructor
.IP "\(bu" 2
Build \fBVFG\fP 1) build \fBVFG\fP nodes statements for top level pointers (PAGEdges) 2) connect \fBVFG\fP edges between two statements (PAGEdges) 
.PP

.SH "Member Function Documentation"
.PP 
.SS "void SVF::VFG::addActualParmVFGNode (const \fBPAGNode\fP * aparm, const \fBCallBlockNode\fP * cs)\fC [inline]\fP, \fC [protected]\fP"
Add an actual parameter \fBVFG\fP node To be noted that multiple actual parameters may have same value (\fBPAGNode\fP) So we need to make a pair <PAGNodeID,CallSiteID> to find the right VFGParmNode do not set def here, this node is not a variable definition
.SS "\fBVFGEdge\fP * VFG::addCallEdge (NodeID srcId, NodeID dstId, CallSiteID csId)"
Add interprocedural call edges for top level pointers 
.SS "void SVF::VFG::addFormalRetVFGNode (const \fBPAGNode\fP * uniqueFunRet, const \fBSVFFunction\fP * fun, RetPESet & retPEs)\fC [inline]\fP, \fC [protected]\fP"
Add a callee Return \fBVFG\fP node To be noted that here we assume returns of a procedure have already been unified into one Otherwise, we need to handle formalRet using <PAGNodeID,CallSiteID> pair to find FormalRetVFG node same as handling actual parameters if this uniqueFunRet is a phi node, which means it will receive values from multiple return instructions of fun we will set this phi node's def later
.SS "\fBVFGEdge\fP * VFG::addIntraDirectVFEdge (NodeID srcId, NodeID dstId)"
Add control-flow edges for top level pointers
.PP
Add def-use edges for top level pointers 
.SS "void SVF::VFG::addNullPtrVFGNode (const \fBPAGNode\fP * pagNode)\fC [inline]\fP, \fC [protected]\fP"
Add a Dummy \fBVFG\fP node for null pointer definition To be noted for black hole pointer it has already has address edge connected 
.SS "\fBVFGEdge\fP * VFG::addRetEdge (NodeID srcId, NodeID dstId, CallSiteID csId)"
Add interprocedural return edges for top level pointers 
.SS "void SVF::VFG::addStoreVFGNode (const \fBStorePE\fP * store)\fC [inline]\fP, \fC [protected]\fP"
Add a Store \fBVFG\fP node, To be noted store does not create a new pointer, we do not set def for any \fBPAG\fP node 
.SS "void VFG::addVFGNodes ()\fC [protected]\fP"

.PP
Create \fBVFG\fP nodes\&. Create \fBVFG\fP nodes for top level pointers for external function we do not create acutalRet \fBVFGNode\fP they are in the formal of \fBAddrVFGNode\fP if the external function returns an allocated memory if fun has body, it may also exist in isExtCall, e\&.g\&., xmalloc() in bzip2, spec2000\&.
.SS "virtual void SVF::VFG::connectAParamAndFParam (const \fBPAGNode\fP * csArg, const \fBPAGNode\fP * funArg, const \fBCallBlockNode\fP * cbn, CallSiteID csId, VFGEdgeSetTy & edges)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Connect \fBVFG\fP nodes between caller and callee for indirect call site\&. Connect actual-param and formal param 
.PP
Reimplemented in \fBSVF::SVFGOPT\fP\&.
.SS "void VFG::connectCallerAndCallee (const \fBCallBlockNode\fP * callBlockNode, const \fBSVFFunction\fP * callee, VFGEdgeSetTy & edges)\fC [virtual]\fP"

.PP
Connect \fBVFG\fP nodes between caller and callee for indirect call site\&. Connect actual params/return to formal params/return for top-level variables\&. Also connect indirect actual in/out and formal in/out\&. 
.PP
Reimplemented in \fBSVF::SVFG\fP\&.
.SS "void VFG::connectDirectVFGEdges ()\fC [protected]\fP"

.PP
Create edges between \fBVFG\fP nodes within a function\&. Connect def-use chains for direct value-flow, (value-flow of top level pointers) do not handle AddrSVFG node, as it is already the source of a definition
.PP
for all other cases, like copy/gep/load/ret, connect the RHS pointer to its def
.PP
for store, connect the RHS/LHS pointer to its def
.PP
connect formal ret to its definition node
.PP
connect formal ret to actual ret
.PP
Do not process \fBFormalRetVFGNode\fP, as they are connected by copy within callee We assume one procedure only has unique return
.PP
connect direct value-flow edges (parameter passing) for thread fork/join add fork edge
.PP
add join edge
.SS "void VFG::destroy ()\fC [protected]\fP"

.PP
Clean up memory\&. Memory has been cleaned up at \fBGenericGraph\fP 
.SS "void VFG::dump (const std::string & file, bool simple = \fCfalse\fP)"

.PP
Dump graph into dot file\&. Dump \fBVFG\fP 
.SS "const \fBPAGNode\fP * VFG::getLHSTopLevPtr (const \fBVFGNode\fP * node) const"
Given a \fBVFG\fP node, return its left hand side top level pointer 
.SS "\fBVFGEdge\fP * VFG::getVFGEdge (const \fBVFGNode\fP * src, const \fBVFGNode\fP * dst, \fBVFGEdge::VFGEdgeK\fP kind)"

.PP
Get a \fBSVFG\fP edge according to src and dst\&. Return the corresponding \fBVFGEdge\fP 
.SS "VFGNodeSet& SVF::VFG::getVFGNodes (const \fBSVFFunction\fP * fun)\fC [inline]\fP"
Return all the VFGNodes of a function 
.SS "\fBVFGEdge\fP * VFG::hasInterVFGEdge (\fBVFGNode\fP * src, \fBVFGNode\fP * dst, \fBVFGEdge::VFGEdgeK\fP kind, CallSiteID csId)"
Whether we has an inter \fBVFG\fP edge 
.SS "\fBVFGEdge\fP * VFG::hasIntraVFGEdge (\fBVFGNode\fP * src, \fBVFGNode\fP * dst, \fBVFGEdge::VFGEdgeK\fP kind)"

.PP
Whether we has a \fBSVFG\fP edge\&. Whether we has an intra \fBVFG\fP edge 
.SS "\fBVFGEdge\fP * VFG::hasThreadVFGEdge (\fBVFGNode\fP * src, \fBVFGNode\fP * dst, \fBVFGEdge::VFGEdgeK\fP kind)"
Whether we has an thread \fBVFG\fP edge 
.SS "const \fBSVFFunction\fP * VFG::isFunEntryVFGNode (const \fBVFGNode\fP * node) const"

.PP
Whether a node is function entry \fBVFGNode\fP\&. Whether this is an function entry \fBVFGNode\fP (formal parameter, formal In) 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
