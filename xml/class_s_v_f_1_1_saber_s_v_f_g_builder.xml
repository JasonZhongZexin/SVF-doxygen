<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_saber_s_v_f_g_builder" kind="class" language="C++" prot="public">
    <compoundname>SVF::SaberSVFGBuilder</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_s_v_f_g_builder" prot="public" virt="non-virtual">SVF::SVFGBuilder</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a298a94f9b368e37767935a42e5ba954a" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const SVFGNode*&gt; SVF::SaberSVFGBuilder::SVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="46" column="17" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1ae8c189214a61febd7529ad7209d789f3" prot="public" static="no">
        <type>Map&lt; NodeID, NodeBS &gt;</type>
        <definition>typedef Map&lt;NodeID, NodeBS&gt; SVF::SaberSVFGBuilder::NodeToPTSSMap</definition>
        <argsstring></argsstring>
        <name>NodeToPTSSMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="47" column="17" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a8e07c6afc4ae6e2792431065c2948039" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; NodeID &gt;</type>
        <definition>typedef FIFOWorkList&lt;NodeID&gt; SVF::SaberSVFGBuilder::WorkList</definition>
        <argsstring></argsstring>
        <name>WorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="48" column="26" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1aa17b6decf323982b2efa28c5585b9835" prot="private" static="no" mutable="no">
        <type>NodeBS</type>
        <definition>NodeBS SVF::SaberSVFGBuilder::globs</definition>
        <argsstring></argsstring>
        <name>globs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="92" column="12" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a9431a9dcbcf88b78e721b0347046e997" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::SaberSVFGBuilder::globSVFGNodes</definition>
        <argsstring></argsstring>
        <name>globSVFGNodes</name>
        <briefdescription>
<para>Store all global <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="94" column="17" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1aa66cd30067d39f2083fb671fdc43beb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SaberSVFGBuilder::SaberSVFGBuilder</definition>
        <argsstring>()</argsstring>
        <name>SaberSVFGBuilder</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="51" column="5" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a1400bd13453c77defbd085f5bb334bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::SaberSVFGBuilder::~SaberSVFGBuilder</definition>
        <argsstring>()</argsstring>
        <name>~SaberSVFGBuilder</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="54" column="13" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1afbcd75844af51ff51c09c377f80a49cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberSVFGBuilder::isGlobalSVFGNode</definition>
        <argsstring>(const SVFGNode *node) const</argsstring>
        <name>isGlobalSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="56" column="17" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1ac6a3fe78d1459a79055703ea4afa14c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SaberSVFGBuilder::addActualParmVFGNode</definition>
        <argsstring>(const PAGNode *pagNode, const CallBlockNode *cs)</argsstring>
        <name>addActualParmVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmVFGNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="62" column="17" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="62" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a4d70d1413f42f30437d8eb45ff00b6f6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SaberSVFGBuilder::buildSVFG</definition>
        <argsstring>()</argsstring>
        <name>buildSVFG</name>
        <reimplements refid="class_s_v_f_1_1_s_v_f_g_builder_1ae2d84f7527de200a2f269dc1c056a305">buildSVFG</reimplements>
        <briefdescription>
<para>Re-write create <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="69" column="18" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="37" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1ad8f4f63d2071be4eb5f6fb2fdf29a10a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SaberSVFGBuilder::rmDerefDirSVFGEdges</definition>
        <argsstring>(BVDataPTAImpl *pta)</argsstring>
        <name>rmDerefDirSVFGEdges</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove direct value-flow edge to a dereference point for Saber source-sink memory error detection for example, given two statements: p = alloc; q = *p, the direct <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge between them is deleted Because those edges only stand for values used at the dereference points but they can not pass the value to other definitions </para>
        </detaileddescription>
        <inbodydescription>
<para>for store, connect the RHS/LHS pointer to its def</para>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="75" column="10" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="142" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1ab6870d6f6f5abc5417dcea771eaa31f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SaberSVFGBuilder::AddExtActualParmSVFGNodes</definition>
        <argsstring>(PTACallGraph *callgraph)</argsstring>
        <name>AddExtActualParmSVFGNodes</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
          <declname>callgraph</declname>
        </param>
        <briefdescription>
<para>Add actual parameter SVFGNode for 1st argument of a deallocation like external function. </para>
        </briefdescription>
        <detaileddescription>
<para>Add actual parameter SVFGNode for 1st argument of a deallocation like external function In order to path sensitive leak detection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="79" column="18" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="183" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a2d0492c50159a5f97a587874c6877286" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SaberSVFGBuilder::collectGlobals</definition>
        <argsstring>(BVDataPTAImpl *pta)</argsstring>
        <name>collectGlobals</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect memory pointed global pointers, note that this collection is recursively performed, for example gp--&gt;obj--&gt;obj&apos; obj and obj&apos; are both considered global memory</para>
<para>Recursively collect global memory objects </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="84" column="10" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="63" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a4bfa849a30d1982ae597d26b4a01dd0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SaberSVFGBuilder::accessGlobal</definition>
        <argsstring>(BVDataPTAImpl *pta, const PAGNode *pagNode)</argsstring>
        <name>accessGlobal</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
          <declname>pta</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
<para>Whether points-to of a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> points-to global variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Decide whether the node and its points-to contains a global objects </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="87" column="10" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="132" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_s_v_f_g_builder_1a7ed419e4356c1d9f6235449ab848d2ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeBS &amp;</type>
        <definition>NodeBS &amp; SaberSVFGBuilder::CollectPtsChain</definition>
        <argsstring>(BVDataPTAImpl *pta, NodeID id, NodeToPTSSMap &amp;cachedPtsMap)</argsstring>
        <name>CollectPtsChain</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref> *</type>
          <declname>pta</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>NodeToPTSSMap &amp;</type>
          <declname>cachedPtsMap</declname>
        </param>
        <briefdescription>
<para>Collect objects along points-to chains. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberSVFGBuilder.h" line="90" column="12" bodyfile="lib/SABER/SaberSVFGBuilder.cpp" bodystart="98" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::SaberSVFGBuilder</label>
        <link refid="class_s_v_f_1_1_saber_s_v_f_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFGBuilder</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="22">
        <label>SVF::MRGenerator</label>
        <link refid="class_s_v_f_1_1_m_r_generator"/>
      </node>
      <node id="16">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="7">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="8">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="11">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="17">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="19">
        <label>SVF::MemSSA</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a"/>
        <childnode refid="20" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>mrGen</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mssa</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>SVF::MemSSAStat</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="14">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="10">
        <label>SVF::SVFGStat</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="1">
        <label>SVF::SaberSVFGBuilder</label>
        <link refid="class_s_v_f_1_1_saber_s_v_f_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFGBuilder</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_builder"/>
        <childnode refid="3" relation="usage">
          <edgelabel>globalSvfg</edgelabel>
          <edgelabel>svfg</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="12">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="13" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/SABER/SaberSVFGBuilder.h" line="42" column="1" bodyfile="include/SABER/SaberSVFGBuilder.h" bodystart="43" bodyend="95"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a4bfa849a30d1982ae597d26b4a01dd0f" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>accessGlobal</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1ac6a3fe78d1459a79055703ea4afa14c6" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>addActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1ab6870d6f6f5abc5417dcea771eaa31f7" prot="private" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>AddExtActualParmSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a47591192260ddc3ff0717430f127cc95" prot="protected" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>build</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a54a713e3989597b11cee70864d0197bd" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildFullSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a7a43ae081645eb74fa48c136548f0809" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildFullSVFGWithoutOPT</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a49cee21be46d6a3f65eec638714038ed" prot="public" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildMSSA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1ab7353191edd06568e2598177d253c1d9" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildPTROnlySVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a3b162da8dfb123cada7a13ce0c154a46" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildPTROnlySVFGWithoutOPT</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a4d70d1413f42f30437d8eb45ff00b6f6" prot="protected" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>buildSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1ae12f803f5ccdb47232043c8c5ae129bf" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a77bc88750823c8a0d19aad002e56ce07" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a2d0492c50159a5f97a587874c6877286" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>collectGlobals</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a7ed419e4356c1d9f6235449ab848d2ab" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>CollectPtsChain</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a1f8e21823ddc9eb19e1fe18d9b2b8280" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1ad70dc4134a6290223b4168bde146b6d5" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>getSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a31b754a303116f33d679dfcd886c4bed" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>globalSvfg</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1aa17b6decf323982b2efa28c5585b9835" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>globs</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a9431a9dcbcf88b78e721b0347046e997" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>globSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1afbcd75844af51ff51c09c377f80a49cf" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>isGlobalSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a9e8da6a516ed6598c66d81a0891fbb6e" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>isSpuriousVFEdgeAtIndCallSite</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a3f8fc56d5190ea59d06906b359640dae" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>markValidVFEdge</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1ae8c189214a61febd7529ad7209d789f3" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>NodeToPTSSMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a6e08e6a99f7e743abf35e603e35e54f5" prot="protected" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>releaseMemory</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a9767f95253f02901da757076e3010b37" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>releaseSVFG</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1ad8f4f63d2071be4eb5f6fb2fdf29a10a" prot="private" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>rmDerefDirSVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1aa66cd30067d39f2083fb671fdc43beb4" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>SaberSVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a26bc3b9c07472e454bc567cd8746caef" prot="protected" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>svfg</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a003c6d9e13e5f73e0648d97400f1854e" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>SVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a640158fff237cb5afabdf1c5946550e0" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>SVFGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a298a94f9b368e37767935a42e5ba954a" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>SVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a70de38086437635d2e44d2a0c9fdded9" prot="protected" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>SVFGWithIndCall</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1aa9b432dd72f1a39be142c4e2c2d51247" prot="protected" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>vfEdgesAtIndCallSite</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a8e07c6afc4ae6e2792431065c2948039" prot="public" virt="non-virtual"><scope>SVF::SaberSVFGBuilder</scope><name>WorkList</name></member>
      <member refid="class_s_v_f_1_1_saber_s_v_f_g_builder_1a1400bd13453c77defbd085f5bb334bca" prot="public" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>~SaberSVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1af45232cbcffcaa4c7e05dab96553068f" prot="public" virt="virtual"><scope>SVF::SaberSVFGBuilder</scope><name>~SVFGBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
