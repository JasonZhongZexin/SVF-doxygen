<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_d_d_a_client_8cpp" kind="file" language="C++">
    <compoundname>DDAClient.cpp</compoundname>
    <includes refid="_s_v_f_util_8h" local="yes">Util/SVFUtil.h</includes>
    <includes refid="_c_p_p_util_8h" local="yes">SVF-FE/CPPUtil.h</includes>
    <includes refid="_d_d_a_client_8h" local="yes">DDA/DDAClient.h</includes>
    <includes refid="_flow_d_d_a_8h" local="yes">DDA/FlowDDA.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <incdepgraph>
      <node id="12">
        <label>list</label>
      </node>
      <node id="4">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>WPA/WPASolver.h</label>
        <link refid="_w_p_a_solver_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>system_error</label>
      </node>
      <node id="128">
        <label>iomanip</label>
      </node>
      <node id="81">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="53">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="102">
        <label>Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="78">
        <label>assert.h</label>
      </node>
      <node id="35">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="104">
        <label>Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="9">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="70">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="76">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="41">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="83">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>MemoryModel/PTAStat.h</label>
        <link refid="_p_t_a_stat_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>cassert</label>
      </node>
      <node id="121">
        <label>WPA/WPAFSSolver.h</label>
        <link refid="_w_p_a_f_s_solver_8h_source"/>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>Graphs/ConsGNode.h</label>
        <link refid="_cons_g_node_8h_source"/>
      </node>
      <node id="90">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="72">
        <label>string</label>
      </node>
      <node id="85">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="94">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>map</label>
      </node>
      <node id="42">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="125">
        <label>Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>unordered_set</label>
      </node>
      <node id="93">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="112">
        <label>DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/DDA/DDAClient.cpp</label>
        <link refid="_d_d_a_client_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="7">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="127">
        <label>Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>limits.h</label>
      </node>
      <node id="40">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="54">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="101">
        <label>Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="58">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="69">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>DDA/DDAStat.h</label>
        <link refid="_d_d_a_stat_8h_source"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="24">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="77">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="23">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="27">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="56">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="67">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="80">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="59">
        <label>time.h</label>
      </node>
      <node id="86">
        <label>math.h</label>
      </node>
      <node id="99">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="74">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="51">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="79">
        <label>cstdlib</label>
      </node>
      <node id="115">
        <label>iostream</label>
      </node>
      <node id="57">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="109">
        <label>DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="18">
        <label>deque</label>
      </node>
      <node id="66">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="48">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="6">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="44">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="49">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="119">
        <label>WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="34">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="111">
        <label>algorithm</label>
      </node>
      <node id="98">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="84">
        <label>stdio.h</label>
      </node>
      <node id="20">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="45">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="36">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="97">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>memory</label>
      </node>
      <node id="25">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="105">
        <label>Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="43">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_d_d_a_client_8cpp_1add6044098971d7de6c26bf24b46acc82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; SingleLoad</definition>
        <argsstring>(&quot;single-load&quot;, llvm::cl::init(true), llvm::cl::desc(&quot;Count load pointer with same source operand as one query&quot;))</argsstring>
        <name>SingleLoad</name>
        <param>
          <type>&quot;single-load&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(true)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Count load pointer with same source operand as one query&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="22" column="22" declfile="lib/DDA/DDAClient.cpp" declline="22" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1a40f32de287c69b14ec493a4a531e7c4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; DumpFree</definition>
        <argsstring>(&quot;dump-free&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Dump use after free locations&quot;))</argsstring>
        <name>DumpFree</name>
        <param>
          <type>&quot;dump-free&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Dump use after free locations&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="25" column="22" declfile="lib/DDA/DDAClient.cpp" declline="25" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1afaad130c80ed8b98affc9b1af22a7a05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; DumpUninitVar</definition>
        <argsstring>(&quot;dump-uninit-var&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Dump uninitialised variables&quot;))</argsstring>
        <name>DumpUninitVar</name>
        <param>
          <type>&quot;dump-uninit-var&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Dump uninitialised variables&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="28" column="22" declfile="lib/DDA/DDAClient.cpp" declline="28" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1a0e55a98b349a453f8701bc477bd95210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; DumpUninitPtr</definition>
        <argsstring>(&quot;dump-uninit-ptr&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Dump uninitialised pointers&quot;))</argsstring>
        <name>DumpUninitPtr</name>
        <param>
          <type>&quot;dump-uninit-ptr&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Dump uninitialised pointers&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="31" column="22" declfile="lib/DDA/DDAClient.cpp" declline="31" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1aa68c85a1ce466a2fd379e730d420daae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; DumpSUPts</definition>
        <argsstring>(&quot;dump-su-pts&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Dump strong updates store&quot;))</argsstring>
        <name>DumpSUPts</name>
        <param>
          <type>&quot;dump-su-pts&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Dump strong updates store&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="34" column="22" declfile="lib/DDA/DDAClient.cpp" declline="34" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1aa88aea2b221accdc473c20773e7368d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; DumpSUStore</definition>
        <argsstring>(&quot;dump-su-store&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Dump strong updates store&quot;))</argsstring>
        <name>DumpSUStore</name>
        <param>
          <type>&quot;dump-su-store&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Dump strong updates store&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="37" column="22" declfile="lib/DDA/DDAClient.cpp" declline="37" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1a1483dfc6d7e71422efe3fbf7d653d714" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; MallocOnly</definition>
        <argsstring>(&quot;malloc-only&quot;, llvm::cl::init(true), llvm::cl::desc(&quot;Only add tainted objects for malloc&quot;))</argsstring>
        <name>MallocOnly</name>
        <param>
          <type>&quot;malloc-only&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(true)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Only add tainted objects for malloc&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="40" column="22" declfile="lib/DDA/DDAClient.cpp" declline="40" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1af07459dbd19f37cd0c7899970aa25ba3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; TaintUninitHeap</definition>
        <argsstring>(&quot;uninit-heap&quot;, llvm::cl::init(true), llvm::cl::desc(&quot;detect uninitialized heap variables&quot;))</argsstring>
        <name>TaintUninitHeap</name>
        <param>
          <type>&quot;uninit-heap&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(true)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;detect uninitialized heap variables&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="43" column="22" declfile="lib/DDA/DDAClient.cpp" declline="43" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_d_d_a_client_8cpp_1ad1c27e9410c1b80071148edffbd8fe3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; TaintUninitStack</definition>
        <argsstring>(&quot;uninit-stack&quot;, llvm::cl::init(true), llvm::cl::desc(&quot;detect uninitialized stack variables&quot;))</argsstring>
        <name>TaintUninitStack</name>
        <param>
          <type>&quot;uninit-stack&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(true)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;detect uninitialized stack variables&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/DDA/DDAClient.cpp" line="46" column="22" declfile="lib/DDA/DDAClient.cpp" declline="46" declcolumn="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file:<sp/>DDAClient.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@author:<sp/>yesen</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>@date:<sp/>16<sp/>Feb<sp/>2015</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>LICENSE</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/SVFUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/CPPUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DDA/DDAClient.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DDA/FlowDDA.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::setw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SVFUtil;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>SingleLoad(</highlight><highlight class="stringliteral">&quot;single-load&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Count<sp/>load<sp/>pointer<sp/>with<sp/>same<sp/>source<sp/>operand<sp/>as<sp/>one<sp/>query&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>DumpFree(</highlight><highlight class="stringliteral">&quot;dump-free&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Dump<sp/>use<sp/>after<sp/>free<sp/>locations&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>DumpUninitVar(</highlight><highlight class="stringliteral">&quot;dump-uninit-var&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Dump<sp/>uninitialised<sp/>variables&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>DumpUninitPtr(</highlight><highlight class="stringliteral">&quot;dump-uninit-ptr&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Dump<sp/>uninitialised<sp/>pointers&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>DumpSUPts(</highlight><highlight class="stringliteral">&quot;dump-su-pts&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Dump<sp/>strong<sp/>updates<sp/>store&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>DumpSUStore(</highlight><highlight class="stringliteral">&quot;dump-su-store&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Dump<sp/>strong<sp/>updates<sp/>store&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>MallocOnly(</highlight><highlight class="stringliteral">&quot;malloc-only&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Only<sp/>add<sp/>tainted<sp/>objects<sp/>for<sp/>malloc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>TaintUninitHeap(</highlight><highlight class="stringliteral">&quot;uninit-heap&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;detect<sp/>uninitialized<sp/>heap<sp/>variables&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>TaintUninitStack(</highlight><highlight class="stringliteral">&quot;uninit-stack&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;detect<sp/>uninitialized<sp/>stack<sp/>variables&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DDAClient::answerQueries(<ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_d_d_a_stat" kindref="compound">DDAStat</ref>*<sp/>stat<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_d_d_a_stat" kindref="compound">DDAStat</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" kindref="member">getStat</ref>());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>vmrss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>vmsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>SVFUtil::getMemoryUsageKB(&amp;vmrss,<sp/>&amp;vmsize);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>stat-&gt;setMemUsageBefore(vmrss,<sp/>vmsize);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>collectCandidateQueries(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(OrderedNodeSet::iterator<sp/>nIter<sp/>=<sp/>candidateQueries.begin();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nIter<sp/>!=<sp/>candidateQueries.end();<sp/>++nIter,++count)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(*nIter);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>()-&gt;isValidTopLevelPtr(node))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DGENERAL,outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n@@Computing<sp/>PointsTo<sp/>for<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>+<sp/>1&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>candidateQueries.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBOUT(DDDA,outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n@@Computing<sp/>PointsTo<sp/>for<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>+<sp/>1&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>candidateQueries.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCurrentQueryPtr(node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" kindref="member">computeDDAPts</ref>(node-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>vmrss<sp/>=<sp/>vmsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>SVFUtil::getMemoryUsageKB(&amp;vmrss,<sp/>&amp;vmsize);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>stat-&gt;setMemUsageAfter(vmrss,<sp/>vmsize);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">OrderedNodeSet&amp;<sp/><ref refid="class_s_v_f_1_1_funptr_d_d_a_client_1ac57dc015e4019aef292cb918a0040499" kindref="member">FunptrDDAClient::collectCandidateQueries</ref>(<ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>setPAG(p);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAG::CallSiteToFunPtrMap::const_iterator<sp/>it<sp/>=<sp/>pag-&gt;getIndirectCallsites().begin(),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/>pag-&gt;getIndirectCallsites().end();<sp/>it!=eit;<sp/>++it)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cppUtil::isVirtualCallSite(SVFUtil::getLLVMCallSite(it-&gt;first-&gt;getCallSite())))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*vtblPtr<sp/>=<sp/>cppUtil::getVCallVtblPtr(SVFUtil::getLLVMCallSite(it-&gt;first-&gt;getCallSite()));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pag-&gt;hasValueNode(vtblPtr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>vtable<sp/>pointer?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>vtblId<sp/>=<sp/>pag-&gt;getValueNode(vtblPtr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCandidate(vtblId);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtableToCallSiteMap[vtblId]<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCandidate(it-&gt;second);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidateQueries;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FunptrDDAClient::performStat(<ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff" kindref="compound">AndersenWaveDiff</ref>*<sp/>ander<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff_1a74134978db1c0d9c71122bc63f4b73c1" kindref="member">AndersenWaveDiff::createAndersenWaveDiff</ref>(pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>totalCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>morePreciseCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>zeroTargetCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>oneTargetCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>twoTargetCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>moreThanTwoCallsites<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VTablePtrToCallSiteMap::iterator<sp/>nIter<sp/>=<sp/>vtableToCallSiteMap.begin();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nIter<sp/>!=<sp/>vtableToCallSiteMap.end();<sp/>++nIter)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>vtptr<sp/>=<sp/>nIter-&gt;first;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>ddaPts<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec" kindref="member">getPts</ref>(vtptr);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>anderPts<sp/>=<sp/>ander-&gt;<ref refid="class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639" kindref="member">getPts</ref>(vtptr);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref>*<sp/>callgraph<sp/>=<sp/>ander-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" kindref="member">getPTACallGraph</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn<sp/>=<sp/>nIter-&gt;second;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!callgraph-&gt;hasIndCSCallees(cbn))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//outs()<sp/>&lt;&lt;<sp/>&quot;virtual<sp/>callsite<sp/>has<sp/>no<sp/>callee&quot;<sp/>&lt;&lt;<sp/>*(nIter-&gt;second.getInstruction())<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PTACallGraph::FunctionSet&amp;<sp/>callees<sp/>=<sp/>callgraph-&gt;getIndCSCallees(cbn);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalCallsites++;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callees.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeroTargetCallsites++;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callees.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneTargetCallsites++;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callees.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twoTargetCallsites++;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moreThanTwoCallsites++;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ddaPts.count()<sp/>&gt;=<sp/>anderPts.count()<sp/>||<sp/>ddaPts.empty())</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set&lt;const<sp/>SVFFunction*&gt;<sp/>ander_vfns;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set&lt;const<sp/>SVFFunction*&gt;<sp/>dda_vfns;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ander-&gt;getVFnsFromPts(cbn,anderPts,<sp/>ander_vfns);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pta-&gt;getVFnsFromPts(cbn,ddaPts,<sp/>dda_vfns);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++morePreciseCallsites;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;============more<sp/>precise<sp/>callsite<sp/>=================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/>*(nIter-&gt;second)-&gt;getCallSite()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/>getSourceLoc((nIter-&gt;second)-&gt;getCallSite())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------ander<sp/>pts<sp/>or<sp/>vtable<sp/>num---(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>anderPts.count()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------DDA<sp/>vfn<sp/>num---(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ander_vfns.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ander-&gt;dumpPts(vtptr,<sp/>anderPts);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------DDA<sp/>pts<sp/>or<sp/>vtable<sp/>num---(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ddaPts.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------DDA<sp/>vfn<sp/>num---(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dda_vfns.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pta-&gt;dumpPts(vtptr,<sp/>ddaPts);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-------------------------\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>virtual<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vtableToCallSiteMap.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>analyzed<sp/>virtual<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Indirect<sp/>call<sp/>map<sp/>size:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ander-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" kindref="member">getPTACallGraph</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_t_a_call_graph_1ad49fa2a288945f6910deb11acdf6a42d" kindref="member">getIndCallMap</ref>().size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Precise<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>morePreciseCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>target<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>zeroTargetCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;One<sp/>target<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>oneTargetCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Two<sp/>target<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>twoTargetCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;More<sp/>than<sp/>two<sp/>target<sp/>callsites:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>moreThanTwoCallsites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">OrderedNodeSet&amp;<sp/><ref refid="class_s_v_f_1_1_alias_d_d_a_client_1a44c1426f9d88f399f8a319d6ad0120cf" kindref="member">AliasDDAClient::collectCandidateQueries</ref>(<ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>setPAG(pag);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/>loads<sp/>=<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" kindref="member">getEdgeSet</ref>(PAGEdge::Load);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PAGEdge::PAGEdgeSetTy::iterator<sp/>iter<sp/>=<sp/>loads.begin(),<sp/>eiter<sp/>=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loads.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>loadsrc<sp/>=<sp/>(*iter)-&gt;getSrcNode();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadSrcNodes.insert(loadsrc);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCandidate(loadsrc-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/>stores<sp/>=<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" kindref="member">getEdgeSet</ref>(PAGEdge::Store);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PAGEdge::PAGEdgeSetTy::iterator<sp/>iter<sp/>=<sp/>stores.begin(),<sp/>eiter<sp/>=</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stores.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>storedst<sp/>=<sp/>(*iter)-&gt;getDstNode();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storeDstNodes.insert(storedst);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCandidate(storedst-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>PAGEdge::PAGEdgeSetTy&amp;<sp/>geps<sp/>=<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a4b89e254837eca47e09e41cf67dba722" kindref="member">getEdgeSet</ref>(PAGEdge::NormalGep);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PAGEdge::PAGEdgeSetTy::iterator<sp/>iter<sp/>=<sp/>geps.begin(),<sp/>eiter<sp/>=</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geps.end();<sp/>iter<sp/>!=<sp/>eiter;<sp/>++iter)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>gepsrc<sp/>=<sp/>(*iter)-&gt;getSrcNode();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gepSrcNodes.insert(gepsrc);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCandidate(gepsrc-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidateQueries;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AliasDDAClient::performStat(<ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAGNodeSet::const_iterator<sp/>lit<sp/>=<sp/>loadSrcNodes.begin();<sp/>lit!=loadSrcNodes.end();<sp/>lit++)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(PAGNodeSet::const_iterator<sp/>sit<sp/>=<sp/>storeDstNodes.begin();<sp/>sit!=storeDstNodes.end();<sp/>sit++)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node1<sp/>=<sp/>*lit;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node2<sp/>=<sp/>*sit;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node1-&gt;hasValue()<sp/>&amp;&amp;<sp/>node2-&gt;hasValue())</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AliasResult<sp/>result<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1" kindref="member">alias</ref>(node1-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),node2-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n=================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Alias<sp/>Query<sp/>for<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*node1-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae" kindref="member">getValue</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/>*node2-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a45be6b7b2f1f9754ea47e511e65d46ae" kindref="member">getValue</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[NodeID:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node1-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>NodeID:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node2-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/DDA/DDAClient.cpp"/>
  </compounddef>
</doxygen>
