<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_andersen_s_c_d" xml:lang="en-US">
<title>SVF::AndersenSCD Class Reference</title>
<indexterm><primary>SVF::AndersenSCD</primary></indexterm>
<para>
<computeroutput>#include &lt;AndersenSFR.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::AndersenSCD:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_andersen_s_c_d.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a88ab40d553f49e173f9c53b32575ccda"/>typedef Map&lt; NodeID, NodeID &gt; <emphasis role="strong">NodeToNodeMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a31424d597c1ebeadddcdb1b3b3d94054"/><emphasis role="strong">AndersenSCD</emphasis> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> type=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1">AndersenSCD_WPA</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a3063dda0bb2e16ea206ea7d1607f0a2b"/>static <link linkend="_class_s_v_f_1_1_andersen_s_c_d">AndersenSCD</link> * <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a3063dda0bb2e16ea206ea7d1607f0a2b">createAndersenSCD</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag)</para>

<para>Create an singleton instance directly instead of invoking llvm pass manager. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1ac2003ddf910f55d5c53c762b45964b50"/>static void <emphasis role="strong">releaseAndersenSCD</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1ad8530ce52f87c4ea94cac579288e2689"/>void <emphasis role="strong">addSccCandidate</emphasis> (NodeID nodeId)</para>
</listitem>
            <listitem><para>virtual NodeStack &amp; <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a70f69baf47587b742b5013a63a3ce593">SCCDetect</link> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1af155524f6f78424a846fe2eb575bb40a"/>virtual void <emphasis role="strong">PWCDetect</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a98fac4ecfe203666178e2ace39da81e2"/>virtual void <emphasis role="strong">solveWorklist</emphasis> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a7ae683eb8c607a0e742b44e3019b8cbc">handleLoadStore</link> (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> *node)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a52704e25a1e3b30ddf8676811f4e1584">processAddr</link> (const <link linkend="_class_s_v_f_1_1_addr_c_g_edge">AddrCGEdge</link> *addr)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a0b5990e8b0230c019a2bcedbab354cba">addCopyEdge</link> (NodeID src, NodeID dst)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1a512c636bdaafe6a3ac8f0cc29392c573">updateCallGraph</link> (const CallSiteToFunPtrMap &amp;callsites)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1aaee864bb1fc5b5d4643e145d80ecfb8b"/>virtual void <emphasis role="strong">processPWC</emphasis> (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> *rep)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_andersen_s_c_d_1aa0a496376f7bea2c417ef83c51d19a61">handleCopyGep</link> (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> *node)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1aeb0b3644c3bfbfa5768b92c99aeeef40"/>NodeSet <emphasis role="strong">sccCandidates</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1ac4bf67d35b56f010aeedb59777a83f0e"/>NodeToNodeMap <emphasis role="strong">pwcReps</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a1d143f104c0bfb5258b7129d0eceb4cd"/>static <link linkend="_class_s_v_f_1_1_andersen_s_c_d">AndersenSCD</link> * <emphasis role="strong">scdAndersen</emphasis> = NULL</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Selective Cycle Detection Based <link linkend="_class_s_v_f_1_1_andersen">Andersen</link> Analysis </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a0b5990e8b0230c019a2bcedbab354cba"/>    <section>
    <title>addCopyEdge()</title>
<indexterm><primary>addCopyEdge</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>addCopyEdge</secondary></indexterm>
<para><computeroutput>bool AndersenSCD::addCopyEdge (NodeID src, NodeID dst)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>If one copy edge is successful added, the src node should be added into SCC detection </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a8ba593bd16d4436310f2f25e75687c57">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1aa0a496376f7bea2c417ef83c51d19a61"/>    <section>
    <title>handleCopyGep()</title>
<indexterm><primary>handleCopyGep</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>handleCopyGep</secondary></indexterm>
<para><computeroutput>void AndersenSCD::handleCopyGep (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> * node)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Compute diff points-to set before propagation </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1ab069683dd6ca563113efbde2813ab35e">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a7ae683eb8c607a0e742b44e3019b8cbc"/>    <section>
    <title>handleLoadStore()</title>
<indexterm><primary>handleLoadStore</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>handleLoadStore</secondary></indexterm>
<para><computeroutput>void AndersenSCD::handleLoadStore (<link linkend="_class_s_v_f_1_1_constraint_node">ConstraintNode</link> * node)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Source nodes of new added edges are pushed into sccCandidates. Source nodes of new added edges whose pts differ from those of dst nodes are pushed into worklist. </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a0f32ba8cb1109c257552fa775a007ffd">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a52704e25a1e3b30ddf8676811f4e1584"/>    <section>
    <title>processAddr()</title>
<indexterm><primary>processAddr</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>processAddr</secondary></indexterm>
<para><computeroutput>void AndersenSCD::processAddr (const <link linkend="_class_s_v_f_1_1_addr_c_g_edge">AddrCGEdge</link> * addr)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Initialize worklist via processing addrs </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1aca095e135edb5d27efe76bb7ee71184c">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a70f69baf47587b742b5013a63a3ce593"/>    <section>
    <title>SCCDetect()</title>
<indexterm><primary>SCCDetect</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>SCCDetect</secondary></indexterm>
<para><computeroutput>NodeStack &amp; AndersenSCD::SCCDetect ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>SCC detection for SCD </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a31ea24432ff42ab86a4728f2bde571bc">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_c_d_1a512c636bdaafe6a3ac8f0cc29392c573"/>    <section>
    <title>updateCallGraph()</title>
<indexterm><primary>updateCallGraph</primary><secondary>SVF::AndersenSCD</secondary></indexterm>
<indexterm><primary>SVF::AndersenSCD</primary><secondary>updateCallGraph</secondary></indexterm>
<para><computeroutput>bool AndersenSCD::updateCallGraph (const CallSiteToFunPtrMap &amp; callsites)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Update call graph for the input indirect callsites </para>

<para>nodes as a src of a generated new copy edge</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a6c60b761ddf3d6bf08c8a9c3f6fd9f0b">SVF::Andersen</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/WPA/AndersenSFR.hlib/WPA/AndersenSCD.cpp</section>
</section>
