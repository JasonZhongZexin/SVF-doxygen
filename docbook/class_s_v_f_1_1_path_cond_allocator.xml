<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_path_cond_allocator" xml:lang="en-US">
<title>SVF::PathCondAllocator Class Reference</title>
<indexterm><primary>SVF::PathCondAllocator</primary></indexterm>
<para>
<computeroutput>#include &lt;PathCondAllocator.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a259f9a44936d03ab8bd7455d1058d39d"/>typedef <link linkend="_struct_dd_node">DdNode</link> <emphasis role="strong">Condition</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b"/>typedef Map&lt; u32_t, <link linkend="_struct_dd_node">Condition</link> * &gt; <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b">CondPosMap</link></para>

<para>map a branch to its Condition </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ab95a992cea9ccc23e31d4d48fce01055"/>typedef Map&lt; const BasicBlock *, <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b">CondPosMap</link> &gt; <emphasis role="strong">BBCondMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a286e0aa5122ce38017ffbd4e250acfdf"/>typedef Map&lt; const <link linkend="_struct_dd_node">Condition</link> *, const Instruction * &gt; <emphasis role="strong">CondToTermInstMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1aef4a1396ee439e0d6cd89695a81a7365"/>typedef Set&lt; const BasicBlock * &gt; <emphasis role="strong">BasicBlockSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275"/>typedef Map&lt; const Function *, BasicBlockSet &gt; <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275">FunToExitBBsMap</link></para>

<para>map a function to all its basic blocks calling program exit </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d"/>typedef Map&lt; const BasicBlock *, <link linkend="_struct_dd_node">Condition</link> * &gt; <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d">BBToCondMap</link></para>

<para>map a basic block to its condition during control-flow guard computation </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; const BasicBlock * &gt; <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1">CFWorkList</link></para>

<para>worklist for control-flow guard computation </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a7761a4dd6da8b36b15dcc0b89a9ec6b3"/>typedef Map&lt; u32_t, <link linkend="_struct_dd_node">Condition</link> * &gt; <emphasis role="strong">IndexToConditionMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1"/><link linkend="_class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1">PathCondAllocator</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3"/>virtual <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3">~PathCondAllocator</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a3fce010083b85a4421eed4c17eb54640">allocate</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> *module)</para>

<para>Perform path allocation. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca"/>const Instruction * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca">getCondInst</link> (const <link linkend="_struct_dd_node">Condition</link> *cond) const</para>

<para>Get llvm conditional expression. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88"/>DominatorTree * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88">getDT</link> (const Function *fun)</para>

<para>Get dominators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e"/>PostDominatorTree * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e">getPostDT</link> (const Function *fun)</para>

<para>Get Postdominators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f"/>LoopInfo * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f">getLoopInfo</link> (const Function *f)</para>

<para>Get LoopInfo. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61"/><link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61">condAnd</link> (<link linkend="_struct_dd_node">Condition</link> *lhs, <link linkend="_struct_dd_node">Condition</link> *rhs)</para>

<para>Condition operations. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a5a8c25d74ffc2a8f8dbd20faab4d9803"/><link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">condOr</emphasis> (<link linkend="_struct_dd_node">Condition</link> *lhs, <link linkend="_struct_dd_node">Condition</link> *rhs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ac1ed60a8f59a55811c97c83def3bb739"/><link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">condNeg</emphasis> (<link linkend="_struct_dd_node">Condition</link> *cond)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a1a6bde0db54c91fba7e6bac0acff664a"/><link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">getTrueCond</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a0d059c9adce2c998ddf2489376beb8e2"/><link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">getFalseCond</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2"/><link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2">getCond</link> (u32_t i) const</para>

<para>Given an index, get its condition. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb"/>NodeBS <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb">exactCondElem</link> (<link linkend="_struct_dd_node">Condition</link> *cond)</para>

<para>Iterator every element of the bdd. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9"/>void <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9">markForRelease</link> (<link linkend="_struct_dd_node">Condition</link> *cond)</para>

<para>Decrease reference counting for the bdd. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57"/>void <link linkend="_class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57">printDbg</link> (<link linkend="_struct_dd_node">Condition</link> *cond)</para>

<para>Print debug information for this condition. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1aae773a674331bb80cc589835e0b16e4e"/>std::string <emphasis role="strong">dumpCond</emphasis> (<link linkend="_struct_dd_node">Condition</link> *cond) const</para>
</listitem>
            <listitem><para>virtual <link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a5ab573cce84584c44778611ba6f4d99c">ComputeIntraVFGGuard</link> (const BasicBlock *src, const BasicBlock *dst)</para>

<para>Guard Computation for a value-flow (between two basic blocks) </para>
</listitem>
            <listitem><para>virtual <link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a9c3361e3f37d640b177c3955f3c3667f">ComputeInterCallVFGGuard</link> (const BasicBlock *src, const BasicBlock *dst, const BasicBlock *callBB)</para>
</listitem>
            <listitem><para>virtual <link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a5015e36d00ac59ef2b832019b8f922f5">ComputeInterRetVFGGuard</link> (const BasicBlock *src, const BasicBlock *dst, const BasicBlock *retBB)</para>
</listitem>
            <listitem><para>virtual <link linkend="_struct_dd_node">Condition</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1abef2785eb426d5e1d6f273300c691db6">getPHIComplementCond</link> (const BasicBlock *BB1, const BasicBlock *BB2, const BasicBlock *BB0)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a3462dbe3d0f8df08e3b6a6c6ef0b065c"/>void <emphasis role="strong">clearCFCond</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7"/>void <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7">setCurEvalVal</link> (const Value *val)</para>

<para>Set current value for branch condition evaluation. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e"/>const Value * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e">getCurEvalVal</link> () const</para>

<para>Get current value for branch condition evaluation. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_path_cond_allocator_1a2932b15ef74e46b676075ba1b2e82111">printPathCond</link> ()</para>

<para>Print out the path condition information. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a71e17887254eb38c0317250a19f42a0e"/>static <link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">trueCond</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1abaf3c17264007cfc4a23dc1aaa881e8b"/>static <link linkend="_struct_dd_node">Condition</link> * <emphasis role="strong">falseCond</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb"/>static u32_t <link linkend="_class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb">getMemUsage</link> ()</para>

<para>Statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a2d8c2513c3e25bb8ec2d1e33d844a4c3"/>static u32_t <emphasis role="strong">getCondNum</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1af0584dc9658fd5dc6f6da633d258dfaf"/>static u32_t <emphasis role="strong">getMaxLiveCondNumber</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1ada8a9c85ae34068d5b33547aee7796d9"/>static u32_t <emphasis role="strong">totalCondNum</emphasis> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc"/>BBCondMap <link linkend="_class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc">bbConds</link></para>

<para>map basic block to its successors/predecessors branch conditions </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a27f89f89bd6eda0355ccdcc5c5df6f32"/>IndexToConditionMap <emphasis role="strong">indexToDDNodeMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e"/>static <link linkend="_class_s_v_f_1_1_bdd_cond_manager">BddCondManager</link> * <link linkend="_class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e">bddCondMgr</link> = NULL</para>

<para>bbd manager </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> allocates conditions for each basic block of a certain CFG. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a3fce010083b85a4421eed4c17eb54640"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>allocate</secondary></indexterm>
<para><computeroutput>void PathCondAllocator::allocate (const <link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * M)</computeroutput></para><para>

<para>Perform path allocation. </para>
</para>

<para>Allocate path condition for each branch </para>
    </section><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a9c3361e3f37d640b177c3955f3c3667f"/>    <section>
    <title>ComputeInterCallVFGGuard()</title>
<indexterm><primary>ComputeInterCallVFGGuard</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>ComputeInterCallVFGGuard</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">PathCondAllocator::Condition</link> * PathCondAllocator::ComputeInterCallVFGGuard (const BasicBlock * srcBB, const BasicBlock * dstBB, const BasicBlock * callBB)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Compute calling inter-procedural guards between two SVFGNodes (from caller to callee) src &#8211;c1--&gt; callBB &#8211;true--&gt; funEntryBB &#8211;c2--&gt; dst the InterCallVFGGuard is c1 ^ c2 </para>
    </section><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a5015e36d00ac59ef2b832019b8f922f5"/>    <section>
    <title>ComputeInterRetVFGGuard()</title>
<indexterm><primary>ComputeInterRetVFGGuard</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>ComputeInterRetVFGGuard</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">PathCondAllocator::Condition</link> * PathCondAllocator::ComputeInterRetVFGGuard (const BasicBlock * srcBB, const BasicBlock * dstBB, const BasicBlock * retBB)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Compute return inter-procedural guards between two SVFGNodes (from callee to caller) src &#8211;c1--&gt; funExitBB &#8211;true--&gt; retBB &#8211;c2--&gt; dst the InterRetVFGGuard is c1 ^ c2 </para>
    </section><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a5ab573cce84584c44778611ba6f4d99c"/>    <section>
    <title>ComputeIntraVFGGuard()</title>
<indexterm><primary>ComputeIntraVFGGuard</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>ComputeIntraVFGGuard</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">PathCondAllocator::Condition</link> * PathCondAllocator::ComputeIntraVFGGuard (const BasicBlock * srcBB, const BasicBlock * dstBB)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Guard Computation for a value-flow (between two basic blocks) </para>
</para>

<para>Compute intra-procedural guards between two SVFGNodes (inside same function) </para>

<para>if the dstBB is the eligible loop exit of the current basic block we can early terminate the computation</para>

<para>calculate the branch condition if succ post dominate bb, then we get brCond quicker by using postDT note that we assume loop exit always post dominate loop bodys which means loops are approximated only once.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1abef2785eb426d5e1d6f273300c691db6"/>    <section>
    <title>getPHIComplementCond()</title>
<indexterm><primary>getPHIComplementCond</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>getPHIComplementCond</secondary></indexterm>
<para><computeroutput><link linkend="_struct_dd_node">PathCondAllocator::Condition</link> * PathCondAllocator::getPHIComplementCond (const BasicBlock * BB1, const BasicBlock * BB2, const BasicBlock * BB0)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Get complement condition (from B1 to B0) according to a complementBB (BB2) at a phi e.g., B0: dstBB; B1:incomingBB; B2:complementBB</para>

<para>Get complement phi condition e.g., B0: dstBB; B1:incomingBB; B2:complementBB Assume B0 (phi node) is the successor of both B1 and B2. If B1 dominates B2, and B0 not dominate B2 then condition from B1--&gt;B0 = neg(B1--&gt;B2)^(B1--&gt;B0) </para>

<para>avoid both BB0 and BB1 dominate BB2 (e.g., while loop), then BB2 is not necessaryly a complement BB</para>
    </section><anchor xml:id="_class_s_v_f_1_1_path_cond_allocator_1a2932b15ef74e46b676075ba1b2e82111"/>    <section>
    <title>printPathCond()</title>
<indexterm><primary>printPathCond</primary><secondary>SVF::PathCondAllocator</secondary></indexterm>
<indexterm><primary>SVF::PathCondAllocator</primary><secondary>printPathCond</secondary></indexterm>
<para><computeroutput>void PathCondAllocator::printPathCond ( )</computeroutput></para><para>

<para>Print out the path condition information. </para>
</para>

<para>Print path conditions </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Util/PathCondAllocator.hlib/Util/PathCondAllocator.cpp</section>
</section>
