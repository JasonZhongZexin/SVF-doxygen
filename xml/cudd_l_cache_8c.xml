<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cudd_l_cache_8c" kind="file" language="C++">
    <compoundname>cuddLCache.c</compoundname>
    <includes refid="util_8h" local="yes">CUDD/util.h</includes>
    <includes refid="cudd_int_8h" local="yes">CUDD/cuddInt.h</includes>
    <incdepgraph>
      <node id="8">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="11">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="6">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CUDD/util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="1">
        <label>lib/CUDD/cuddLCache.c</label>
        <link refid="cudd_l_cache_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>unistd.h</label>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>ctype.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="cudd_l_cache_8c_1aa6007145a7784f8348a528e35bfc2f1c" prot="public" static="no">
        <name>DD_MAX_HASHTABLE_DENSITY</name>
        <initializer>2	/* tells when to resize a table */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CFile***********************************************************************</para>
<para>FileName [cuddLCache.c]</para>
<para>PackageName [cudd]</para>
<para>Synopsis [Functions for local caches.]</para>
<para>Description [Internal procedures included in this module: <itemizedlist>
<listitem>
<para>cuddLocalCacheInit() </para>
</listitem>
<listitem>
<para>cuddLocalCacheQuit() </para>
</listitem>
<listitem>
<para>cuddLocalCacheInsert() </para>
</listitem>
<listitem>
<para>cuddLocalCacheLookup() </para>
</listitem>
<listitem>
<para>cuddLocalCacheClearDead() </para>
</listitem>
<listitem>
<para>cuddLocalCacheClearAll() </para>
</listitem>
<listitem>
<para>cuddLocalCacheProfile() </para>
</listitem>
<listitem>
<para>cuddHashTableInit() </para>
</listitem>
<listitem>
<para>cuddHashTableQuit() </para>
</listitem>
<listitem>
<para>cuddHashTableGenericQuit() </para>
</listitem>
<listitem>
<para>cuddHashTableInsert() </para>
</listitem>
<listitem>
<para>cuddHashTableLookup() </para>
</listitem>
<listitem>
<para>cuddHashTableGenericInsert() </para>
</listitem>
<listitem>
<para>cuddHashTableGenericLookup() </para>
</listitem>
<listitem>
<para>cuddHashTableInsert2() </para>
</listitem>
<listitem>
<para>cuddHashTableLookup2() </para>
</listitem>
<listitem>
<para>cuddHashTableInsert3() </para>
</listitem>
<listitem>
<para>cuddHashTableLookup3() </para>
</listitem>
</itemizedlist>
Static procedures included in this module: <itemizedlist>
<listitem>
<para>cuddLocalCacheResize() </para>
</listitem>
<listitem>
<para>ddLCHash() </para>
</listitem>
<listitem>
<para>cuddLocalCacheAddToList() </para>
</listitem>
<listitem>
<para>cuddLocalCacheRemoveFromList() </para>
</listitem>
<listitem>
<para>cuddHashTableResize() </para>
</listitem>
<listitem>
<para>cuddHashTableAlloc() </para>
</listitem>
</itemizedlist>
]</para>
<para>SeeAlso []</para>
<para>Author [Fabio Somenzi]</para>
<para>Copyright [Copyright (c) 1995-2012, Regents of the University of Colorado</para>
<para>All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
<para>Neither the name of the University of Colorado nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="85" column="9" bodyfile="lib/CUDD/cuddLCache.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_l_cache_8c_1a997c2af1fb8a7b00b0231cf30e7de20a" prot="public" static="no">
        <name>ddLCHash1</name>
        <param><defname>f</defname></param>
        <param><defname>shift</defname></param>
        <initializer>(((unsigned)(f) * DD_P1) &gt;&gt; (shift))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes hash function for keys of one operand.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [ddLCHash3 ddLCHash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="124" column="10" bodyfile="lib/CUDD/cuddLCache.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_l_cache_8c_1aa0cf86b29de0675e6432e8df8cbc9e4a" prot="public" static="no">
        <name>ddLCHash2</name>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>shift</defname></param>
        <initializer>((((unsigned)(f) * DD_P1 + (unsigned)(g)) * DD_P2) &gt;&gt; (shift))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes hash function for keys of two operands.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [ddLCHash3 ddLCHash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="145" column="10" bodyfile="lib/CUDD/cuddLCache.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cudd_l_cache_8c_1ac25b081a425460960b2a9db20a6ad00f" prot="public" static="no">
        <name>ddLCHash3</name>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>shift</defname></param>
        <initializer>ddCHash2(f,g,h,shift)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro***********************************************************************</para>
<para>Synopsis [Computes hash function for keys of three operands.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [ddLCHash2 ddLCHash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="161" column="9" bodyfile="lib/CUDD/cuddLCache.c" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cudd_l_cache_8c_1a15755406c65f1ac3ea34ce661b57b54e" prot="public" static="yes" mutable="no">
        <type>char rcsid[]</type>
        <definition>char rcsid [] DD_UNUSED</definition>
        <argsstring></argsstring>
        <name>DD_UNUSED</name>
        <initializer>= &quot;$Id: cuddLCache.c,v 1.27 2012/02/05 01:07:19 fabio Exp $&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="102" column="19" bodyfile="lib/CUDD/cuddLCache.c" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cudd_l_cache_8c_1a5325adbe14e1e1de34ddb6fd5de4ec6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cuddLocalCacheResize</definition>
        <argsstring>(DdLocalCache *cache)</argsstring>
        <name>cuddLocalCacheResize</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart</para>
<para>Function********************************************************************</para>
<para>Synopsis [Resizes a local cache.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1231" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1231" bodyend="1296" declfile="lib/CUDD/cuddLCache.c" declline="170" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ae0366a237153d44d7b77649fa4dde016" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DD_INLINE unsigned int</type>
        <definition>static DD_INLINE unsigned int ddLCHash</definition>
        <argsstring>(DdNodePtr *key, unsigned int keysize, int shift)</argsstring>
        <name>ddLCHash</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keysize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes the hash value for a local cache.]</para>
<para>Description [Computes the hash value for a local cache. Returns the bucket index.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1313" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1313" bodyend="1327" declfile="lib/CUDD/cuddLCache.c" declline="171" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ab6fa61b6c791a7a7fe678994675aef47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cuddLocalCacheAddToList</definition>
        <argsstring>(DdLocalCache *cache)</argsstring>
        <name>cuddLocalCacheAddToList</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts a local cache in the manager list.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1342" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1342" bodyend="1351" declfile="lib/CUDD/cuddLCache.c" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a0ce0bf5ccf36cef240bf9927ed606824" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cuddLocalCacheRemoveFromList</definition>
        <argsstring>(DdLocalCache *cache)</argsstring>
        <name>cuddLocalCacheRemoveFromList</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Removes a local cache from the manager list.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1366" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1366" bodyend="1385" declfile="lib/CUDD/cuddLCache.c" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ac0269abf4cc795878e023811d7fbba1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cuddHashTableResize</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableResize</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Resizes a hash table.]</para>
<para>Description [Resizes a hash table. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1401" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1401" bodyend="1484" declfile="lib/CUDD/cuddLCache.c" declline="174" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1aad2edce57dba0d3c39451c5885f6dd15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DD_INLINE <ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref> *</type>
        <definition>static DD_INLINE DdHashItem * cuddHashTableAlloc</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableAlloc</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Fast storage allocation for items in a hash table.]</para>
<para>Description [Fast storage allocation for items in a hash table. The first 4 bytes of a chunk contain a pointer to the next block; the rest contains DD_MEM_CHUNK spaces for hash items. Returns a pointer to a new item if successful; NULL is memory is full.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddAllocNode cuddDynamicAllocNode] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1503" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1503" bodyend="1557" declfile="lib/CUDD/cuddLCache.c" declline="175" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a04039575e531729b0360e1f77e535ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
        <definition>DdLocalCache* cuddLocalCacheInit</definition>
        <argsstring>(DdManager *manager, unsigned int keySize, unsigned int cacheSize, unsigned int maxCacheSize)</argsstring>
        <name>cuddLocalCacheInit</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keySize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cacheSize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxCacheSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Initializes a local computed table.]</para>
<para>Description [Initializes a computed table. Returns a pointer the the new local cache in case of success; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddInitCache] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="202" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="202" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ad16e373eb982f7c7858f392584ed9f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheQuit</definition>
        <argsstring>(DdLocalCache *cache)</argsstring>
        <name>cuddLocalCacheQuit</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a local computed table.]</para>
<para>Description [Initializes the computed table. It is called by Cudd_Init. Returns a pointer the the new local cache in case of success; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddLocalCacheInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="265" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="265" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1adf77dae50c8fe505edf8ab200a6c9f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheInsert</definition>
        <argsstring>(DdLocalCache *cache, DdNodePtr *key, DdNode *value)</argsstring>
        <name>cuddLocalCacheInsert</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts a result in a local cache.]</para>
<para>Description []</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="291" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="291" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1aba758bb98f9976228aef74176af791fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddLocalCacheLookup</definition>
        <argsstring>(DdLocalCache *cache, DdNodePtr *key)</argsstring>
        <name>cuddLocalCacheLookup</name>
        <param>
          <type><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up in a local cache.]</para>
<para>Description [Looks up in a local cache. Returns the result if found; it returns NULL if no result is found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="324" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="324" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1afcc9444fb15a2e92ec840a1fe3a18afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheClearDead</definition>
        <argsstring>(DdManager *manager)</argsstring>
        <name>cuddLocalCacheClearDead</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Clears the dead entries of the local caches of a manager.]</para>
<para>Description [Clears the dead entries of the local caches of a manager. Used during garbage collection.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="371" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="371" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a9b3e20543e022d0d3092591b73b7b939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddLocalCacheClearAll</definition>
        <argsstring>(DdManager *manager)</argsstring>
        <name>cuddLocalCacheClearAll</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Clears the local caches of a manager.]</para>
<para>Description [Clears the local caches of a manager. Used before reordering.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="423" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="423" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ae76427554fe01c4d539d7de58a9722be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
        <definition>DdHashTable* cuddHashTableInit</definition>
        <argsstring>(DdManager *manager, unsigned int keySize, unsigned int initSize)</argsstring>
        <name>cuddHashTableInit</name>
        <param>
          <type><ref refid="struct_dd_manager" kindref="compound">DdManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keySize</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>initSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes a hash table.]</para>
<para>Description [Initializes a hash table. Returns a pointer to the new table if successful; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableQuit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="557" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="557" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ac48511fd185191433d7f180850e71e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddHashTableQuit</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableQuit</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a hash table.]</para>
<para>Description [Shuts down a hash table, dereferencing all the values.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="607" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="607" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1ad84d79b5775f36fbdeeeb4e8a6bcf159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuddHashTableGenericQuit</definition>
        <argsstring>(DdHashTable *hash)</argsstring>
        <name>cuddHashTableGenericQuit</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Shuts down a hash table.]</para>
<para>Description [Shuts down a hash table, when the values are not <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointers.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInit] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="652" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="652" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a9bf314654e2092980899575ffc3aeaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert</definition>
        <argsstring>(DdHashTable *hash, DdNodePtr *key, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key has more than three pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [[cuddHashTableInsert1 cuddHashTableInsert2 cuddHashTableInsert3 cuddHashTableLookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="693" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="693" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1afd730a2140b0e0009f659f85af2efdfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup</definition>
        <argsstring>(DdHashTable *hash, DdNodePtr *key)</argsstring>
        <name>cuddHashTableLookup</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key in a hash table.]</para>
<para>Description [Looks up a key consisting of more than three pointers in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup1 cuddHashTableLookup2 cuddHashTableLookup3 cuddHashTableInsert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="748" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="748" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a33441f3cc9ba4dcc96433d23adf4b536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert1</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert1</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is one pointer. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert2 cuddHashTableInsert3 cuddHashTableLookup1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="812" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="812" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a10dc94baf12ac76234775b6ba0d04e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup1</definition>
        <argsstring>(DdHashTable *hash, DdNode *f)</argsstring>
        <name>cuddHashTableLookup1</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of one pointer in a hash table.]</para>
<para>Description [Looks up a key consisting of one pointer in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup2 cuddHashTableLookup3 cuddHashTableInsert1] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="864" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="864" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a6587958f56ab14444afd913155472ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableGenericInsert</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, void *value)</argsstring>
        <name>cuddHashTableGenericInsert</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is one pointer and the value is not a <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointer. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert1 cuddHashTableGenericLookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="919" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="919" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1afd62abcd84b35b2762e184be503ae3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cuddHashTableGenericLookup</definition>
        <argsstring>(DdHashTable *hash, DdNode *f)</argsstring>
        <name>cuddHashTableGenericLookup</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of one pointer in a hash table.]</para>
<para>Description [Looks up a key consisting of one pointer in a hash table when the value is not a <ref refid="struct_dd_node" kindref="compound">DdNode</ref> pointer. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup1 cuddHashTableGenericInsert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="966" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="966" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a3bb782d3c2c4225e79f82706ee2bb755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert2</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert2</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is composed of two pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert1 cuddHashTableInsert3 cuddHashTableLookup2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1005" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1005" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a4a672d94fcbd1084a6164da71ece13d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup2</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g)</argsstring>
        <name>cuddHashTableLookup2</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of two pointers in a hash table.]</para>
<para>Description [Looks up a key consisting of two pointer in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup1 cuddHashTableLookup3 cuddHashTableInsert2] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1059" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1059" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a213d89cd581679e29763e8fb6b6ea4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cuddHashTableInsert3</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h, DdNode *value, ptrint count)</argsstring>
        <name>cuddHashTableInsert3</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ptrint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Inserts an item in a hash table.]</para>
<para>Description [Inserts an item in a hash table when the key is composed of three pointers. Returns 1 if successful; 0 otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableInsert cuddHashTableInsert1 cuddHashTableInsert2 cuddHashTableLookup3] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1115" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1115" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="cudd_l_cache_8c_1a3e01ff980c57a850c2ac2e25ba79b3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
        <definition>DdNode* cuddHashTableLookup3</definition>
        <argsstring>(DdHashTable *hash, DdNode *f, DdNode *g, DdNode *h)</argsstring>
        <name>cuddHashTableLookup3</name>
        <param>
          <type><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Looks up a key consisting of three pointers in a hash table.]</para>
<para>Description [Looks up a key consisting of three pointers in a hash table. Returns the value associated to the key if there is an entry for the given key in the table; NULL otherwise. If the entry is present, its reference counter is decremented if not saturated. If the counter reaches 0, the value of the entry is dereferenced, and the entry is returned to the free list.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [cuddHashTableLookup cuddHashTableLookup1 cuddHashTableLookup2 cuddHashTableInsert3] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/cuddLCache.c" line="1171" column="1" bodyfile="lib/CUDD/cuddLCache.c" bodystart="1171" bodyend="1211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CUDD/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CUDD/cuddInt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constant<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_MAX_HASHTABLE_DENSITY<sp/>2<sp/><sp/></highlight><highlight class="comment">/*<sp/>tells<sp/>when<sp/>to<sp/>resize<sp/>a<sp/>table<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stucture<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Variable<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>lint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rcsid[]<sp/>DD_UNUSED<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$Id:<sp/>cuddLCache.c,v<sp/>1.27<sp/>2012/02/05<sp/>01:07:19<sp/>fabio<sp/>Exp<sp/>$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddLCHash1(f,shift)<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor">(((unsigned)(ptruint)(f)<sp/>*<sp/>DD_P1)<sp/>&gt;&gt;<sp/>(shift))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddLCHash1(f,shift)<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor">(((unsigned)(f)<sp/>*<sp/>DD_P1)<sp/>&gt;&gt;<sp/>(shift))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddLCHash2(f,g,shift)<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor">((((unsigned)(ptruint)(f)<sp/>*<sp/>DD_P1<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/>(unsigned)(ptruint)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(shift))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddLCHash2(f,g,shift)<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor">((((unsigned)(f)<sp/>*<sp/>DD_P1<sp/>+<sp/>(unsigned)(g))<sp/>*<sp/>DD_P2)<sp/>&gt;&gt;<sp/>(shift))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ddLCHash3(f,g,h,shift)<sp/>ddCHash2(f,g,h,shift)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Static<sp/>function<sp/>prototypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheResize<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">DD_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ddLCHash<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheAddToList<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cuddLocalCacheRemoveFromList<sp/>(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuddHashTableResize<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">DD_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*<sp/>cuddHashTableAlloc<sp/>(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>exported<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>internal<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="normal">cuddLocalCacheInit(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>manager<sp/></highlight><highlight class="comment">/*<sp/>manager<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>keySize<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>key<sp/>(number<sp/>of<sp/>operands)<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>cacheSize<sp/></highlight><highlight class="comment">/*<sp/>Initial<sp/>size<sp/>of<sp/>the<sp/>cache<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>maxCacheSize<sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>the<sp/>cache<sp/>beyond<sp/>which<sp/>no<sp/>resizing<sp/>occurs<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logSize;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>cache<sp/>=<sp/>ALLOC(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref>,1);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;errorCode<sp/>=<sp/>CUDD_MEMORY_OUT;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;manager<sp/>=<sp/>manager;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;keysize<sp/>=<sp/>keySize;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;itemsize<sp/>=<sp/>(keySize<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;itemsize<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ptrint);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>logSize<sp/>=<sp/>cuddComputeFloorLog2(ddMax(cacheSize,manager-&gt;slots/2));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheSize<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>logSize;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;item<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>cacheSize<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache-&gt;item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;errorCode<sp/>=<sp/>CUDD_MEMORY_OUT;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(cache);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;slots<sp/>=<sp/>cacheSize;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;shift<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>*<sp/>8<sp/>-<sp/>logSize;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;maxslots<sp/>=<sp/>ddMin(maxCacheSize,manager-&gt;slots);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;minHit<sp/>=<sp/>manager-&gt;minHit;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>to<sp/>avoid<sp/>division<sp/>by<sp/>0<sp/>and<sp/>immediate<sp/>resizing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;lookUps<sp/>=<sp/>(double)<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(cacheSize<sp/>*<sp/>cache-&gt;minHit<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;hits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;memused<sp/>+=<sp/>cacheSize<sp/>*<sp/>cache-&gt;itemsize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(cache-&gt;item,<sp/>0,<sp/>cacheSize<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>to<sp/>manager&apos;s<sp/>list<sp/>of<sp/>local<sp/>caches<sp/>for<sp/>GC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddLocalCacheAddToList(cache);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cache);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheInit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">cuddLocalCacheQuit(</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache<sp/></highlight><highlight class="comment">/*<sp/>cache<sp/>to<sp/>be<sp/>shut<sp/>down<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;manager-&gt;memused<sp/>-=</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;slots<sp/>*<sp/>cache-&gt;itemsize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddLocalCacheRemoveFromList(cache);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(cache-&gt;item);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(cache);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheQuit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">cuddLocalCacheInsert(</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>key,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>value)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(key,cache-&gt;keysize,cache-&gt;shift);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>cache-&gt;item<sp/>+</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(entry-&gt;key,key,cache-&gt;keysize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;count++;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheInsert<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*</highlight></codeline>
<codeline lineno="324"><highlight class="normal">cuddLocalCacheLookup(</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>key)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;lookUps++;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(key,cache-&gt;keysize,cache-&gt;shift);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>cache-&gt;item<sp/>+</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;value<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>memcmp(key,entry-&gt;key,cache-&gt;keysize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;hits++;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Cudd_Regular(entry-&gt;value);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value-&gt;ref<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddReclaim(cache-&gt;manager,value);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(entry-&gt;value);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cache<sp/>miss:<sp/>decide<sp/>whether<sp/>to<sp/>resize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache-&gt;slots<sp/>&lt;<sp/>cache-&gt;maxslots<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;hits<sp/>&gt;<sp/>cache-&gt;lookUps<sp/>*<sp/>cache-&gt;minHit)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddLocalCacheResize(cache);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheLookup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">cuddLocalCacheClearDead(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>manager)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache<sp/>=<sp/>manager-&gt;localCaches;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysize;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slots;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cache<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>keysize<sp/>=<sp/>cache-&gt;keysize;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>itemsize<sp/>=<sp/>cache-&gt;itemsize;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>slots<sp/>=<sp/>cache-&gt;slots;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cache-&gt;item;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>slots;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;value<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cudd_Regular(item-&gt;value)-&gt;ref<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>keysize;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cudd_Regular(key[j])-&gt;ref<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+<sp/>itemsize);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>cache<sp/>=<sp/>cache-&gt;next;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheClearDead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">cuddLocalCacheClearAll(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>manager)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*cache<sp/>=<sp/>manager-&gt;localCaches;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cache<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(cache-&gt;item,<sp/>0,<sp/>cache-&gt;slots<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>cache<sp/>=<sp/>cache-&gt;next;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheClearAll<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_CACHE_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DD_HYSTO_BINS<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">cuddLocalCacheProfile(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>count,<sp/>mean,<sp/>meansq,<sp/>stddev,<sp/>expected;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max,<sp/>min;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imax,<sp/>imin;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>retval,<sp/>slots;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*hystogram;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins<sp/>=<sp/>DD_HYSTO_BINS;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>thiscount;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalcount;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nzeroes;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>cache-&gt;manager-&gt;out;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>slots<sp/>=<sp/>cache-&gt;slots;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>meansq<sp/>=<sp/>mean<sp/>=<sp/>expected<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>min<sp/>=<sp/>(long)<sp/>cache-&gt;item[0].count;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>imax<sp/>=<sp/>imin<sp/>=<sp/>nzeroes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>totalcount<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>hystogram<sp/>=<sp/>ALLOC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>nbins);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hystogram<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>hystogram[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>slots;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>cache-&gt;item<sp/>+</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>thiscount<sp/>=<sp/>(long)<sp/>entry-&gt;count;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(thiscount<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>thiscount;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imax<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thiscount<sp/>&lt;<sp/>min)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>thiscount;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imin<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thiscount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzeroes++;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>(double)<sp/>thiscount;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>mean<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>meansq<sp/>+=<sp/>count<sp/>*<sp/>count;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>totalcount<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>+=<sp/>count<sp/>*<sp/>(double)<sp/>i;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>bin<sp/>=<sp/>(i<sp/>*<sp/>nbins)<sp/>/<sp/>slots;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>hystogram[bin]<sp/>+=<sp/>thiscount;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>mean<sp/>/=<sp/>(double)<sp/>slots;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>meansq<sp/>/=<sp/>(double)<sp/>slots;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>stddev<sp/>=<sp/>sqrt(meansq<sp/>-<sp/>mean*mean);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Cache<sp/>stats:<sp/>slots<sp/>=<sp/>%d<sp/>average<sp/>=<sp/>%g<sp/>&quot;</highlight><highlight class="normal">,<sp/>slots,<sp/>mean);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;standard<sp/>deviation<sp/>=<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>stddev);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Cache<sp/>max<sp/>accesses<sp/>=<sp/>%ld<sp/>for<sp/>slot<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>max,<sp/>imax);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Cache<sp/>min<sp/>accesses<sp/>=<sp/>%ld<sp/>for<sp/>slot<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>min,<sp/>imin);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Cache<sp/>unused<sp/>slots<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nzeroes);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totalcount)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>/=<sp/>totalcount;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Cache<sp/>access<sp/>hystogram<sp/>for<sp/>%d<sp/>bins&quot;</highlight><highlight class="normal">,<sp/>nbins);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;<sp/>(expected<sp/>bin<sp/>value<sp/>=<sp/>%g)\n#<sp/>&quot;</highlight><highlight class="normal">,<sp/>expected);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>nbins<sp/>-<sp/>1;<sp/>i&gt;=0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;%ld<sp/>&quot;</highlight><highlight class="normal">,<sp/>hystogram[i]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hystogram);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheProfile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*</highlight></codeline>
<codeline lineno="557"><highlight class="normal">cuddHashTableInit(</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*<sp/>manager,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>keySize,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>initSize)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*hash;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logSize;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>ALLOC(<ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;errorCode<sp/>=<sp/>CUDD_MEMORY_OUT;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;keysize<sp/>=<sp/>keySize;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;manager<sp/>=<sp/>manager;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;memoryList<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;itemsize<sp/>=<sp/>(keySize<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*)<sp/>+</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ptrint)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>to<sp/>guarantee<sp/>that<sp/>the<sp/>shift<sp/>be<sp/>&lt;<sp/>32.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initSize<sp/>&lt;<sp/>2)<sp/>initSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>logSize<sp/>=<sp/>cuddComputeFloorLog2(initSize);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;numBuckets<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>logSize;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;shift<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>*<sp/>8<sp/>-<sp/>logSize;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket<sp/>=<sp/>ALLOC(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*,<sp/>hash-&gt;numBuckets);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;bucket<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;errorCode<sp/>=<sp/>CUDD_MEMORY_OUT;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hash);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(hash-&gt;bucket,<sp/>0,<sp/>hash-&gt;numBuckets<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;maxsize<sp/>=<sp/>hash-&gt;numBuckets<sp/>*<sp/>DD_MAX_HASHTABLE_DENSITY;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableInit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">cuddHashTableQuit(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*dd<sp/>=<sp/>hash-&gt;manager;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*bucket;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**memlist,<sp/>**nextmem;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBuckets<sp/>=<sp/>hash-&gt;numBuckets;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numBuckets;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/>hash-&gt;bucket[i];</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bucket<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cudd_RecursiveDeref(dd,<sp/>bucket-&gt;value);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/>bucket-&gt;next;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>memlist<sp/>=<sp/>hash-&gt;memoryList;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(memlist<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>nextmem<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**)<sp/>memlist[0];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(memlist);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>memlist<sp/>=<sp/>nextmem;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hash-&gt;bucket);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hash);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableQuit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">cuddHashTableGenericQuit(</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__osf__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pointer_size<sp/>save</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pointer_size<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**memlist,<sp/>**nextmem;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>memlist<sp/>=<sp/>hash-&gt;memoryList;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(memlist<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>nextmem<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**)<sp/>memlist[0];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(memlist);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>memlist<sp/>=<sp/>nextmem;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hash-&gt;bucket);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(hash);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__osf__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pointer_size<sp/>restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableGenericQuit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">cuddHashTableInsert(</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>key,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>value,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>ptrint<sp/>count)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>&gt;<sp/>3);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;size<sp/>&gt;<sp/>hash-&gt;maxsize)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cuddHashTableResize(hash);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cuddHashTableAlloc(hash);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size++;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddRef(value);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;count<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hash-&gt;keysize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[i]<sp/>=<sp/>key[i];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(key,hash-&gt;keysize,hash-&gt;shift);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableInsert<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*</highlight></codeline>
<codeline lineno="748"><highlight class="normal">cuddHashTableLookup(</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>key)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item,<sp/>*prev;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>keysize;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>&gt;<sp/>3);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(key,hash-&gt;keysize,hash-&gt;shift);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>keysize<sp/>=<sp/>hash-&gt;keysize;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key2<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>equal<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keysize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key[i]<sp/>!=<sp/>key2[i])<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value<sp/>=<sp/>item-&gt;value;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddSatDec(item-&gt;count);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddDeref(value);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;nextFree;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;size--;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableLookup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">cuddHashTableInsert1(</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>value,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>ptrint<sp/>count)</highlight></codeline>
<codeline lineno="817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;size<sp/>&gt;<sp/>hash-&gt;maxsize)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cuddHashTableResize(hash);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cuddHashTableAlloc(hash);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size++;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddRef(value);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;count<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[0]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash1(f,hash-&gt;shift);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableInsert1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*</highlight></codeline>
<codeline lineno="864"><highlight class="normal">cuddHashTableLookup1(</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item,<sp/>*prev;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash1(f,hash-&gt;shift);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>key[0])<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value<sp/>=<sp/>item-&gt;value;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddSatDec(item-&gt;count);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddDeref(value);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;nextFree;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;size--;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableLookup1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">cuddHashTableGenericInsert(</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>value)</highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;size<sp/>&gt;<sp/>hash-&gt;maxsize)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cuddHashTableResize(hash);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cuddHashTableAlloc(hash);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size++;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*)<sp/>value;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[0]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash1(f,hash-&gt;shift);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableGenericInsert<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="966"><highlight class="normal">cuddHashTableGenericLookup(</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f)</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash1(f,hash-&gt;shift);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>item-&gt;key[0])<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>item-&gt;value);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableGenericLookup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal">cuddHashTableInsert2(</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>g,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>value,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>ptrint<sp/>count)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;size<sp/>&gt;<sp/>hash-&gt;maxsize)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cuddHashTableResize(hash);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cuddHashTableAlloc(hash);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size++;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddRef(value);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;count<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[0]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash2(f,g,hash-&gt;shift);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableInsert2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">cuddHashTableLookup2(</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>g)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item,<sp/>*prev;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash2(f,g,hash-&gt;shift);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>==<sp/>key[0])<sp/>&amp;&amp;<sp/>(g<sp/>==<sp/>key[1]))<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value<sp/>=<sp/>item-&gt;value;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddSatDec(item-&gt;count);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddDeref(value);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;nextFree;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;size--;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableLookup2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">cuddHashTableInsert3(</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>g,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>h,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>value,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>ptrint<sp/>count)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;size<sp/>&gt;<sp/>hash-&gt;maxsize)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cuddHashTableResize(hash);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>cuddHashTableAlloc(hash);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;size++;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>cuddRef(value);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;count<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[0]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;key[2]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash3(f,g,h,hash-&gt;shift);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableInsert3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">cuddHashTableLookup3(</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>g,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*<sp/>h)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item,<sp/>*prev;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hash-&gt;keysize<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash3(f,g,h,hash-&gt;shift);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;bucket[posn];</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>==<sp/>key[0])<sp/>&amp;&amp;<sp/>(g<sp/>==<sp/>key[1])<sp/>&amp;&amp;<sp/>(h<sp/>==<sp/>key[2]))<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*value<sp/>=<sp/>item-&gt;value;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddSatDec(item-&gt;count);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuddDeref(value);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;bucket[posn]<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>hash-&gt;nextFree;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;size--;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableLookup3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>static<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">cuddLocalCacheResize(</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*item,<sp/>*olditem,<sp/>*entry,<sp/>*old;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>shift;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slots,<sp/>oldslots;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>DD_OOMFP<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>DD_OOMFP<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>olditem<sp/>=<sp/>cache-&gt;item;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>oldslots<sp/>=<sp/>cache-&gt;slots;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>slots<sp/>=<sp/>cache-&gt;slots<sp/>=<sp/>oldslots<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_VERBOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fprintf(cache-&gt;manager-&gt;err,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Resizing<sp/>local<sp/>cache<sp/>from<sp/>%d<sp/>to<sp/>%d<sp/>entries\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldslots,<sp/>slots);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fprintf(cache-&gt;manager-&gt;err,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\thits<sp/>=<sp/>%.0f\tlookups<sp/>=<sp/>%.0f\thit<sp/>ratio<sp/>=<sp/>%5.3f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;hits,<sp/>cache-&gt;lookUps,<sp/>cache-&gt;hits<sp/>/<sp/>cache-&gt;lookUps);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>saveHandler<sp/>=<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>Cudd_OutOfMem;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;item<sp/>=<sp/>item<sp/>=</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>ALLOC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>slots<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>fail<sp/>to<sp/>allocate<sp/>the<sp/>new<sp/>table<sp/>we<sp/>just<sp/>give<sp/>up.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DD_VERBOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fprintf(cache-&gt;manager-&gt;err,</highlight><highlight class="stringliteral">&quot;Resizing<sp/>failed.<sp/>Giving<sp/>up.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;slots<sp/>=<sp/>oldslots;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;item<sp/>=<sp/>olditem;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>try<sp/>to<sp/>resize<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;maxslots<sp/>=<sp/>oldslots<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>--(cache-&gt;shift);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;manager-&gt;memused<sp/>+=<sp/>(slots<sp/>-<sp/>oldslots)<sp/>*<sp/>cache-&gt;itemsize;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>new<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(item,<sp/>0,<sp/>slots<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>from<sp/>old<sp/>cache<sp/>to<sp/>new<sp/>one.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>(unsigned)<sp/>i<sp/>&lt;<sp/>oldslots;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>old<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>olditem<sp/>+<sp/>i<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old-&gt;value<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(old-&gt;key,cache-&gt;keysize,shift);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>(<ref refid="struct_dd_local_cache_item" kindref="compound">DdLocalCacheItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>*<sp/>cache-&gt;itemsize);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(entry-&gt;key,old-&gt;key,cache-&gt;keysize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>*));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;value<sp/>=<sp/>old-&gt;value;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(olditem);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reinitialize<sp/>measurements<sp/>so<sp/>as<sp/>to<sp/>avoid<sp/>division<sp/>by<sp/>0<sp/>and</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/><sp/><sp/>**<sp/>immediate<sp/>resizing.</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;lookUps<sp/>=<sp/>(double)<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(slots<sp/>*<sp/>cache-&gt;minHit<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;hits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheResize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal">DD_INLINE</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal">ddLCHash(</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNodePtr</ref><sp/>*<sp/>key,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keysize,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>(ptrint)<sp/>key[0]<sp/>*<sp/>DD_P2;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>keysize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>val<sp/>*<sp/>DD_P1<sp/>+<sp/>(int)<sp/>(ptrint)<sp/>key[i];</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(val<sp/>&gt;&gt;<sp/>shift);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>ddLCHash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">cuddLocalCacheAddToList(</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache)</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager<sp/>=<sp/>cache-&gt;manager;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;next<sp/>=<sp/>manager-&gt;localCaches;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;localCaches<sp/>=<sp/>cache;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheAddToList<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal">cuddLocalCacheRemoveFromList(</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>*<sp/>cache)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_manager" kindref="compound">DdManager</ref><sp/>*manager<sp/>=<sp/>cache-&gt;manager;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_local_cache" kindref="compound">DdLocalCache</ref><sp/>**prevCache,<sp/>*nextCache;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>prevCache<sp/>=<sp/>&amp;(manager-&gt;localCaches);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>nextCache<sp/>=<sp/>manager-&gt;localCaches;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nextCache<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextCache<sp/>==<sp/>cache)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*prevCache<sp/>=<sp/>nextCache-&gt;next;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>prevCache<sp/>=<sp/>&amp;(nextCache-&gt;next);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>nextCache<sp/>=<sp/>nextCache-&gt;next;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>never<sp/>get<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddLocalCacheRemoveFromList<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">cuddHashTableResize(</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posn;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*item;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*next;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/>**key;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBuckets;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**buckets;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**oldBuckets<sp/>=<sp/>hash-&gt;bucket;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldNumBuckets<sp/>=<sp/>hash-&gt;numBuckets;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>DD_OOMFP<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>DD_OOMFP<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>new<sp/>size<sp/>of<sp/>the<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>numBuckets<sp/>=<sp/>oldNumBuckets<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>saveHandler<sp/>=<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>Cudd_OutOfMem;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>buckets<sp/>=<sp/>ALLOC(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*,<sp/>numBuckets);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buckets<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;maxsize<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;bucket<sp/>=<sp/>buckets;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;numBuckets<sp/>=<sp/>numBuckets;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>--(hash-&gt;shift);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;maxsize<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(buckets,<sp/>0,<sp/>numBuckets<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*));</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;keysize<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>oldNumBuckets;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>oldBuckets[j];</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash2(key[0],<sp/>key[0],<sp/>shift);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>buckets[posn];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buckets[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;keysize<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>oldNumBuckets;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>oldBuckets[j];</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash2(key[0],<sp/>key[1],<sp/>shift);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>buckets[posn];</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buckets[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;keysize<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>oldNumBuckets;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>oldBuckets[j];</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>item-&gt;key;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash3(key[0],<sp/>key[1],<sp/>key[2],<sp/>shift);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>buckets[posn];</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buckets[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>oldNumBuckets;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>oldBuckets[j];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(item<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posn<sp/>=<sp/>ddLCHash(item-&gt;key,<sp/>hash-&gt;keysize,<sp/>shift);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>buckets[posn];</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buckets[posn]<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(oldBuckets);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableResize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal">DD_INLINE</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">cuddHashTableAlloc(</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><ref refid="struct_dd_hash_table" kindref="compound">DdHashTable</ref><sp/>*<sp/>hash)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize<sp/>=<sp/>hash-&gt;itemsize;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>DD_OOMFP<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>DD_OOMFP<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**mem,<sp/>*thisOne,<sp/>*next,<sp/>*item;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;nextFree<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>saveHandler<sp/>=<sp/>MMoutOfMemory;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>Cudd_OutOfMem;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**)<sp/>ALLOC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,(DD_MEM_CHUNK+1)<sp/>*<sp/>itemsize);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>MMoutOfMemory<sp/>=<sp/>saveHandler;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash-&gt;manager-&gt;stash<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(hash-&gt;manager-&gt;stash);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;stash<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inhibit<sp/>resizing<sp/>of<sp/>tables.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;maxCacheHard<sp/>=<sp/>hash-&gt;manager-&gt;cacheSlots<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;cacheSlack<sp/>=<sp/>-<sp/>(int)<sp/>(hash-&gt;manager-&gt;cacheSlots<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hash-&gt;manager-&gt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;subtables[i].maxKeys<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;gcFrac<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;minDead<sp/>=</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)<sp/>(0.2<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>hash-&gt;manager-&gt;slots);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>**)<sp/>ALLOC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,(DD_MEM_CHUNK+1)<sp/>*<sp/>itemsize);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*MMoutOfMemory)((long)((DD_MEM_CHUNK<sp/>+<sp/>1)<sp/>*<sp/>itemsize));</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;manager-&gt;errorCode<sp/>=<sp/>CUDD_MEMORY_OUT;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>mem[0]<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*)<sp/>hash-&gt;memoryList;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;memoryList<sp/>=<sp/>mem;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>thisOne<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>mem<sp/>+<sp/>itemsize);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>thisOne;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>DD_MEM_CHUNK;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>(<ref refid="struct_dd_hash_item" kindref="compound">DdHashItem</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>thisOne<sp/>+<sp/>itemsize);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisOne-&gt;next<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisOne<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>thisOne-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>hash-&gt;nextFree;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>hash-&gt;nextFree<sp/>=<sp/>item-&gt;next;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(item);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>cuddHashTableAlloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/CUDD/cuddLCache.c"/>
  </compounddef>
</doxygen>
