<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v" xml:lang="en-US">
<title>SVF::PTASCEV Class Reference</title>
<indexterm><primary>SVF::PTASCEV</primary></indexterm>
<para>
<computeroutput>#include &lt;DataFlowUtil.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a6a134ca4f7f50de053805e75431aa856"/><link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a6a134ca4f7f50de053805e75431aa856">PTASCEV</link> (const Value *p, const SCEV *s, ScalarEvolution *SE)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a3f4fbad38457025f35e151e54ab96b70"/><link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a3f4fbad38457025f35e151e54ab96b70">PTASCEV</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp;ptase)</para>

<para>Copy Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1acb766a793141723a971d87cbc3e5aaac"/>virtual <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1acb766a793141723a971d87cbc3e5aaac">~PTASCEV</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1ad85500e4caaa70ecacfdf5fbbbcc330e">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a144e7fa8c5f4987067914416a85656ca"/><link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp; <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a144e7fa8c5f4987067914416a85656ca">operator=</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a71c30ee51274f2d9b3c202d06f1443f4"/>bool <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a71c30ee51274f2d9b3c202d06f1443f4">operator==</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a0541ce30f889355425d2aaeedbc857b9"/>bool <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a0541ce30f889355425d2aaeedbc857b9">operator!=</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1af1d494e97cfb2f555d47227ca25172b3"/>const SCEV * <emphasis role="strong">scev</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1a0de1531fc72f5aa0bafc59101faae68d"/>const Value * <emphasis role="strong">start</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1aead435732fbb492627f746b3d0654ce2"/>const Value * <emphasis role="strong">step</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1aa6b49b5cbe5057d779685c9ebe763421"/>const Value * <emphasis role="strong">ptr</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1ac6636f0c39ef55e2b5f126532bf2d411"/>bool <emphasis role="strong">inloop</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1aa92f2da24c8b6d3548f8b4920a8d157f"/>unsigned <emphasis role="strong">tripcount</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Wrapper for SCEV collected from function pass ScalarEvolution </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_t_a_s_c_e_v_1ad85500e4caaa70ecacfdf5fbbbcc330e"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::PTASCEV</secondary></indexterm>
<indexterm><primary>SVF::PTASCEV</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::PTASCEV::operator&lt; (const <link linkend="_class_s_v_f_1_1_p_t_a_s_c_e_v">PTASCEV</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/SVF-FE/DataFlowUtil.h</section>
</section>
