.TH "SVF::SVFG" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::SVFG
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SVFG\&.h>\fP
.PP
Inherits \fBSVF::VFG\fP\&.
.PP
Inherited by \fBSVF::SVFGOPT\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef VFGNodeIDToNodeMapTy \fBSVFGNodeIDToNodeMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBPAGNode\fP *, NodeID > \fBPAGNodeToDefMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBMRVer\fP *, NodeID > \fBMSSAVarToDefMapTy\fP"
.br
.ti -1c
.RI "typedef NodeBS \fBActualINSVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef NodeBS \fBActualOUTSVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef NodeBS \fBFormalINSVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef NodeBS \fBFormalOUTSVFGNodeSet\fP"
.br
.ti -1c
.RI "typedef Map< const \fBCallBlockNode\fP *, ActualINSVFGNodeSet > \fBCallSiteToActualINsMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBCallBlockNode\fP *, ActualOUTSVFGNodeSet > \fBCallSiteToActualOUTsMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, FormalINSVFGNodeSet > \fBFunctionToFormalINsMapTy\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, FormalOUTSVFGNodeSet > \fBFunctionToFormalOUTsMapTy\fP"
.br
.ti -1c
.RI "typedef MemSSA::MUSet \fBMUSet\fP"
.br
.ti -1c
.RI "typedef MemSSA::CHISet \fBCHISet\fP"
.br
.ti -1c
.RI "typedef MemSSA::PHISet \fBPHISet\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::MU\fP \fBMU\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::CHI\fP \fBCHI\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::LOADMU\fP \fBLOADMU\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::STORECHI\fP \fBSTORECHI\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::RETMU\fP \fBRETMU\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::ENTRYCHI\fP \fBENTRYCHI\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::CALLCHI\fP \fBCALLCHI\fP"
.br
.ti -1c
.RI "typedef \fBMemSSA::CALLMU\fP \fBCALLMU\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SVFG\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBSVFGStat\fP * \fBgetStat\fP () const"
.br
.RI "Return statistics\&. "
.ti -1c
.RI "void \fBclearMSSA\fP ()"
.br
.RI "Clear MSSA\&. "
.ti -1c
.RI "\fBMemSSA\fP * \fBgetMSSA\fP () const"
.br
.RI "Get \fBSVFG\fP memory SSA\&. "
.ti -1c
.RI "\fBPointerAnalysis\fP * \fBgetPTA\fP () const"
.br
.RI "Get Pointer Analysis\&. "
.ti -1c
.RI "\fBSVFGNode\fP * \fBgetSVFGNode\fP (NodeID id) const"
.br
.RI "Get a \fBSVFG\fP node\&. "
.ti -1c
.RI "bool \fBhasSVFGNode\fP (NodeID id) const"
.br
.RI "Whether has the SVFGNode\&. "
.ti -1c
.RI "\fBSVFGEdge\fP * \fBgetSVFGEdge\fP (const \fBSVFGNode\fP *src, const \fBSVFGNode\fP *dst, \fBSVFGEdge::VFGEdgeK\fP kind)"
.br
.RI "Get a \fBSVFG\fP edge according to src and dst\&. "
.ti -1c
.RI "void \fBgetInterVFEdgesForIndirectCallSite\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee, SVFGEdgeSetTy &edges)"
.br
.RI "Get all inter value flow edges of a indirect call site\&. "
.ti -1c
.RI "void \fBdump\fP (const std::string &file, bool simple=false)"
.br
.RI "Dump graph into dot file\&. "
.ti -1c
.RI "virtual void \fBconnectCallerAndCallee\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee, SVFGEdgeSetTy &edges)"
.br
.RI "Connect \fBSVFG\fP nodes between caller and callee for indirect call site\&. "
.ti -1c
.RI "const \fBSVFGNode\fP * \fBgetDefSVFGNode\fP (const \fBPAGNode\fP *pagNode) const"
.br
.RI "Given a pagNode, return its definition site\&. "
.ti -1c
.RI "void \fBperformStat\fP ()"
.br
.RI "Perform statistics\&. "
.ti -1c
.RI "bool \fBhasActualINSVFGNodes\fP (const \fBCallBlockNode\fP *cs) const"
.br
.RI "Has a SVFGNode\&. "
.ti -1c
.RI "bool \fBhasActualOUTSVFGNodes\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "bool \fBhasFormalINSVFGNodes\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "bool \fBhasFormalOUTSVFGNodes\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "ActualINSVFGNodeSet & \fBgetActualINSVFGNodes\fP (const \fBCallBlockNode\fP *cs)"
.br
.RI "Get SVFGNode set\&. "
.ti -1c
.RI "ActualOUTSVFGNodeSet & \fBgetActualOUTSVFGNodes\fP (const \fBCallBlockNode\fP *cs)"
.br
.ti -1c
.RI "FormalINSVFGNodeSet & \fBgetFormalINSVFGNodes\fP (const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "FormalOUTSVFGNodeSet & \fBgetFormalOUTSVFGNodes\fP (const \fBSVFFunction\fP *fun)"
.br
.ti -1c
.RI "const \fBSVFFunction\fP * \fBisFunEntrySVFGNode\fP (const \fBSVFGNode\fP *node) const"
.br
.RI "Whether a node is function entry SVFGNode\&. "
.ti -1c
.RI "const \fBCallBlockNode\fP * \fBisCallSiteRetSVFGNode\fP (const \fBSVFGNode\fP *node) const"
.br
.RI "Whether a node is callsite return SVFGNode\&. "
.ti -1c
.RI "void \fBremoveSVFGEdge\fP (\fBSVFGEdge\fP *edge)"
.br
.RI "Remove a \fBSVFG\fP edge\&. "
.ti -1c
.RI "void \fBremoveSVFGNode\fP (\fBSVFGNode\fP *node)"
.br
.RI "Remove a SVFGNode\&. "
.ti -1c
.RI "bool \fBaddSVFGEdge\fP (\fBSVFGEdge\fP *edge)"
.br
.RI "Add \fBSVFG\fP edge\&. "
.ti -1c
.RI "u32_t \fBgetSVFGNodeNum\fP () const"
.br
.RI "Return total \fBSVFG\fP node number\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.RI "Clean up memory\&. "
.ti -1c
.RI "\fBSVFG\fP (\fBMemSSA\fP *mssa, \fBVFGK\fP k)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual void \fBbuildSVFG\fP ()"
.br
.RI "Start building \fBSVFG\fP\&. "
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddIntraIndirectVFEdge\fP (NodeID srcId, NodeID dstId, const PointsTo &cpts)"
.br
.RI "Add indirect def-use edges of a memory region between two statements,\&. "
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddCallIndirectVFEdge\fP (NodeID srcId, NodeID dstId, const PointsTo &cpts, CallSiteID csId)"
.br
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddRetIndirectVFEdge\fP (NodeID srcId, NodeID dstId, const PointsTo &cpts, CallSiteID csId)"
.br
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddThreadMHPIndirectVFEdge\fP (NodeID srcId, NodeID dstId, const PointsTo &cpts)"
.br
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddInterIndirectVFCallEdge\fP (const \fBActualINSVFGNode\fP *src, const \fBFormalINSVFGNode\fP *dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from callsite mu to function entry chi\&. "
.ti -1c
.RI "\fBSVFGEdge\fP * \fBaddInterIndirectVFRetEdge\fP (const \fBFormalOUTSVFGNode\fP *src, const \fBActualOUTSVFGNode\fP *dst, CallSiteID csId)"
.br
.RI "Add inter VF edge from function exit mu to callsite chi\&. "
.ti -1c
.RI "virtual void \fBconnectAInAndFIn\fP (const \fBActualINSVFGNode\fP *actualIn, const \fBFormalINSVFGNode\fP *formalIn, CallSiteID csId, SVFGEdgeSetTy &edges)"
.br
.RI "Connect \fBSVFG\fP nodes between caller and callee for indirect call site\&. "
.ti -1c
.RI "virtual void \fBconnectFOutAndAOut\fP (const \fBFormalOUTSVFGNode\fP *formalOut, const \fBActualOUTSVFGNode\fP *actualOut, CallSiteID csId, SVFGEdgeSetTy &edges)"
.br
.RI "Connect formal-out and actual-out\&. "
.ti -1c
.RI "virtual void \fBgetInterVFEdgeAtIndCSFromAPToFP\fP (const \fBPAGNode\fP *cs_arg, const \fBPAGNode\fP *fun_arg, const \fBCallBlockNode\fP *, CallSiteID csId, SVFGEdgeSetTy &edges)"
.br
.RI "Get inter value flow edges between indirect call site and callee\&. "
.ti -1c
.RI "virtual void \fBgetInterVFEdgeAtIndCSFromFRToAR\fP (const \fBPAGNode\fP *fun_ret, const \fBPAGNode\fP *cs_ret, CallSiteID csId, SVFGEdgeSetTy &edges)"
.br
.ti -1c
.RI "virtual void \fBgetInterVFEdgeAtIndCSFromAInToFIn\fP (\fBActualINSVFGNode\fP *actualIn, const \fBSVFFunction\fP *callee, SVFGEdgeSetTy &edges)"
.br
.ti -1c
.RI "virtual void \fBgetInterVFEdgeAtIndCSFromFOutToAOut\fP (\fBActualOUTSVFGNode\fP *actualOut, const \fBSVFFunction\fP *callee, SVFGEdgeSetTy &edges)"
.br
.ti -1c
.RI "void \fBsetDef\fP (const \fBPAGNode\fP *pagNode, const \fBSVFGNode\fP *node)"
.br
.RI "Given a \fBPAGNode\fP, set/get its def \fBSVFG\fP node (definition of top level pointers) "
.ti -1c
.RI "NodeID \fBgetDef\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "bool \fBhasDef\fP (const \fBPAGNode\fP *pagNode) const"
.br
.ti -1c
.RI "void \fBsetDef\fP (const \fBMRVer\fP *mvar, const \fBSVFGNode\fP *node)"
.br
.RI "Given a MSSADef, set/get its def \fBSVFG\fP node (definition of address-taken variables) "
.ti -1c
.RI "NodeID \fBgetDef\fP (const \fBMRVer\fP *mvar) const"
.br
.ti -1c
.RI "void \fBaddSVFGNodesForAddrTakenVars\fP ()"
.br
.RI "Create \fBSVFG\fP nodes for address-taken variables\&. "
.ti -1c
.RI "void \fBconnectIndirectSVFGEdges\fP ()"
.br
.RI "Connect direct \fBSVFG\fP edges between two \fBSVFG\fP nodes (value-flow of top address-taken variables) "
.ti -1c
.RI "void \fBconnectFromGlobalToProgEntry\fP ()"
.br
.RI "Connect indirect \fBSVFG\fP edges from global initializers (store) to main function entry\&. "
.ti -1c
.RI "virtual void \fBaddSVFGNode\fP (\fBSVFGNode\fP *node, \fBICFGNode\fP *icfgNode)"
.br
.RI "Add \fBSVFG\fP node\&. "
.ti -1c
.RI "void \fBaddFormalINSVFGNode\fP (const \fBMemSSA::ENTRYCHI\fP *chi)"
.br
.RI "Add memory Function entry chi \fBSVFG\fP node\&. "
.ti -1c
.RI "void \fBaddFormalOUTSVFGNode\fP (const \fBMemSSA::RETMU\fP *mu)"
.br
.RI "Add memory Function return mu \fBSVFG\fP node\&. "
.ti -1c
.RI "void \fBaddActualINSVFGNode\fP (const \fBMemSSA::CALLMU\fP *mu)"
.br
.RI "Add memory callsite mu \fBSVFG\fP node\&. "
.ti -1c
.RI "void \fBaddActualOUTSVFGNode\fP (const \fBMemSSA::CALLCHI\fP *chi)"
.br
.RI "Add memory callsite chi \fBSVFG\fP node\&. "
.ti -1c
.RI "void \fBaddIntraMSSAPHISVFGNode\fP (const \fBMemSSA::PHI\fP *phi)"
.br
.RI "Add memory SSA PHI \fBSVFG\fP node\&. "
.ti -1c
.RI "bool \fBhasFuncEntryChi\fP (const \fBSVFFunction\fP *func) const"
.br
.RI "Has function for EntryCHI/RetMU/CallCHI/CallMU\&. "
.ti -1c
.RI "bool \fBhasFuncRetMu\fP (const \fBSVFFunction\fP *func) const"
.br
.ti -1c
.RI "bool \fBhasCallSiteChi\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "bool \fBhasCallSiteMu\fP (const \fBCallBlockNode\fP *cs) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "MSSAVarToDefMapTy \fBMSSAVarToDefMap\fP"
.br
.RI "map a memory SSA operator to its definition \fBSVFG\fP node "
.ti -1c
.RI "CallSiteToActualINsMapTy \fBcallSiteToActualINMap\fP"
.br
.ti -1c
.RI "CallSiteToActualOUTsMapTy \fBcallSiteToActualOUTMap\fP"
.br
.ti -1c
.RI "FunctionToFormalINsMapTy \fBfunToFormalINMap\fP"
.br
.ti -1c
.RI "FunctionToFormalOUTsMapTy \fBfunToFormalOUTMap\fP"
.br
.ti -1c
.RI "\fBSVFGStat\fP * \fBstat\fP"
.br
.ti -1c
.RI "\fBMemSSA\fP * \fBmssa\fP"
.br
.ti -1c
.RI "\fBPointerAnalysis\fP * \fBpta\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBSaberSVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBTaintSVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBDDASVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBMTASVFGBuilder\fP"
.br
.ti -1c
.RI "class \fBRcSvfgBuilder\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Sparse value flow graph Each node stands for a definition, each edge stands for value flow relations 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SVFG::SVFG (\fBMemSSA\fP * _mssa, \fBVFGK\fP k)\fC [protected]\fP"

.PP
Constructor\&. Constructor 
.SH "Member Function Documentation"
.PP 
.SS "\fBSVFGEdge\fP * SVFG::addInterIndirectVFRetEdge (const \fBFormalOUTSVFGNode\fP * src, const \fBActualOUTSVFGNode\fP * dst, CallSiteID csId)\fC [protected]\fP"

.PP
Add inter VF edge from function exit mu to callsite chi\&. Add inter VF edge from function exit mu to callsite chi 
.SS "void SVFG::addSVFGNodesForAddrTakenVars ()\fC [protected]\fP"

.PP
Create \fBSVFG\fP nodes for address-taken variables\&. set defs for address-taken vars defined at phi/chi/call create corresponding def and use nodes for address-taken vars (a\&.k\&.a MRVers) initialize memory SSA phi nodes (phi of address-taken variables)
.PP
initialize memory SSA entry chi nodes
.PP
initialize memory SSA return mu nodes
.PP
initialize memory SSA callsite mu nodes
.PP
initialize memory SSA callsite chi nodes
.SS "\fBSVFGEdge\fP * SVFG::addThreadMHPIndirectVFEdge (NodeID srcId, NodeID dstId, const PointsTo & cpts)\fC [protected]\fP"
Add def-use edges of a memory region between two may-happen-in-parallel statements for multithreaded program 
.SS "void SVFG::buildSVFG ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Start building \fBSVFG\fP\&. Build \fBSVFG\fP 1) build \fBSVFG\fP nodes a) statements for top level pointers (PAGEdges) b) operators of address-taken variables (\fBMSSAPHI\fP and \fBMSSACHI\fP) 2) connect \fBSVFG\fP edges a) between two statements (PAGEdges) b) between two memory SSA operators (\fBMSSAPHI\fP \fBMSSAMU\fP and \fBMSSACHI\fP) 
.PP
Reimplemented in \fBSVF::SVFGOPT\fP\&.
.SS "virtual void SVF::SVFG::connectAInAndFIn (const \fBActualINSVFGNode\fP * actualIn, const \fBFormalINSVFGNode\fP * formalIn, CallSiteID csId, SVFGEdgeSetTy & edges)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Connect \fBSVFG\fP nodes between caller and callee for indirect call site\&. Connect actual-in and formal-in 
.PP
Reimplemented in \fBSVF::SVFGOPT\fP\&.
.SS "void SVFG::connectCallerAndCallee (const \fBCallBlockNode\fP * cs, const \fBSVFFunction\fP * callee, SVFGEdgeSetTy & edges)\fC [virtual]\fP"

.PP
Connect \fBSVFG\fP nodes between caller and callee for indirect call site\&. Connect actual params/return to formal params/return for top-level variables\&. Also connect indirect actual in/out and formal in/out\&. 
.PP
Reimplemented from \fBSVF::VFG\fP\&.
.SS "void SVFG::connectFromGlobalToProgEntry ()\fC [protected]\fP"

.PP
Connect indirect \fBSVFG\fP edges from global initializers (store) to main function entry\&. Connect indirect \fBSVFG\fP edges from global initializers (store) to main function entry connect this store to main function entry
.PP
add indirect value flow edge
.SS "void SVFG::connectIndirectSVFGEdges ()\fC [protected]\fP"

.PP
Connect direct \fBSVFG\fP edges between two \fBSVFG\fP nodes (value-flow of top address-taken variables) There's no need to connect actual out node to its definition site in the same function\&.
.SS "void SVFG::destroy ()\fC [protected]\fP"

.PP
Clean up memory\&. Memory has been cleaned up at \fBGenericGraph\fP 
.SS "void SVFG::dump (const std::string & file, bool simple = \fCfalse\fP)"

.PP
Dump graph into dot file\&. Dump \fBSVFG\fP 
.SS "void SVFG::getInterVFEdgesForIndirectCallSite (const \fBCallBlockNode\fP * callBlockNode, const \fBSVFFunction\fP * callee, SVFGEdgeSetTy & edges)"

.PP
Get all inter value flow edges of a indirect call site\&. Get all inter value flow edges at this indirect call site, including call and return edges\&. 
.SS "const \fBCallBlockNode\fP * SVFG::isCallSiteRetSVFGNode (const \fBSVFGNode\fP * node) const"

.PP
Whether a node is callsite return SVFGNode\&. Whether this is an callsite return SVFGNode (actual return, actual out) 
.SS "const \fBSVFFunction\fP * SVFG::isFunEntrySVFGNode (const \fBSVFGNode\fP * node) const"

.PP
Whether a node is function entry SVFGNode\&. Whether this is an function entry SVFGNode (formal parameter, formal In) 
.SS "void SVFG::performStat ()"

.PP
Perform statistics\&. Perform Statistics 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
