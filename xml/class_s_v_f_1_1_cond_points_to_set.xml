<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cond_points_to_set" kind="class" language="C++" prot="public">
    <compoundname>SVF::CondPointsToSet</compoundname>
    <includes refid="_conditional_p_t_8h" local="no">ConditionalPT.h</includes>
    <innerclass refid="class_s_v_f_1_1_cond_points_to_set_1_1_cond_pts_set_iterator" prot="private">SVF::CondPointsToSet::CondPtsSetIterator</innerclass>
    <templateparamlist>
      <param>
        <type>class Cond</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_points_to_set_1aaddc3f78a624de59dda6f078ba63ba52" prot="public" static="no">
        <type>Map&lt; Cond, PointsTo &gt;</type>
        <definition>typedef Map&lt;Cond, PointsTo&gt; SVF::CondPointsToSet&lt; Cond &gt;::CondPts</definition>
        <argsstring></argsstring>
        <name>CondPts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="303" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_points_to_set_1ad9e4dea4b65d5f4a903a3cf89a421077" prot="public" static="no">
        <type>CondPts::iterator</type>
        <definition>typedef CondPts::iterator SVF::CondPointsToSet&lt; Cond &gt;::CondPtsIter</definition>
        <argsstring></argsstring>
        <name>CondPtsIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="304" column="40" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_points_to_set_1aa9d3a8c42b6df3fa9c2e7bcd7af75e16" prot="public" static="no">
        <type>CondPts::const_iterator</type>
        <definition>typedef CondPts::const_iterator SVF::CondPointsToSet&lt; Cond &gt;::CondPtsConstIter</definition>
        <argsstring></argsstring>
        <name>CondPtsConstIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="305" column="46" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_points_to_set_1a0ef73bd2c1b42439ee6f265e07f17514" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cond_var" kindref="compound">CondVar</ref>&lt; Cond &gt;</type>
        <definition>typedef CondVar&lt;Cond&gt; SVF::CondPointsToSet&lt; Cond &gt;::SingleCondVar</definition>
        <argsstring></argsstring>
        <name>SingleCondVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="306" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_cond_points_to_set_1a76d4c06b04161738351a813ae406aa83" prot="public" static="no">
        <type>CondPtsSetIterator</type>
        <definition>typedef CondPtsSetIterator SVF::CondPointsToSet&lt; Cond &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="811" column="32" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cond_points_to_set_1ad0e1a70889a7bf2cb1b201a129128c52" prot="private" static="no" mutable="no">
        <type>CondPts</type>
        <definition>CondPts SVF::CondPointsToSet&lt; Cond &gt;::_condPts</definition>
        <argsstring></argsstring>
        <name>_condPts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="836" column="13" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a3670dc2bb046f2d3e0d27dc02b32e62f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondPointsToSet&lt; Cond &gt;::CondPointsToSet</definition>
        <argsstring>()</argsstring>
        <name>CondPointsToSet</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="310" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a7217769c21c50c44f139006ec44d3a6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondPointsToSet&lt; Cond &gt;::CondPointsToSet</definition>
        <argsstring>(const Cond &amp;cond, const PointsTo &amp;pts)</argsstring>
        <name>CondPointsToSet</name>
        <param>
          <type>const Cond &amp;</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="313" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1aad144061d006968ff4d6d21488b84801" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CondPointsToSet&lt; Cond &gt;::CondPointsToSet</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;cptsSet)</argsstring>
        <name>CondPointsToSet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>cptsSet</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="320" column="5" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="320" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a63f09ca69e00b317de29af6a6a12daac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CondPts &amp;</type>
        <definition>CondPts&amp; SVF::CondPointsToSet&lt; Cond &gt;::pointsTo</definition>
        <argsstring>(void)</argsstring>
        <name>pointsTo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Conditional PointsTo and starndard points-to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="328" column="20" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1ada240bc77570174a1d17ac097583fa78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CondPts &amp;</type>
        <definition>const CondPts&amp; SVF::CondPointsToSet&lt; Cond &gt;::pointsTo</definition>
        <argsstring>(void) const</argsstring>
        <name>pointsTo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="332" column="26" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a03311162626acf16ad05b7b93248a92b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const PointsTo &amp;</type>
        <definition>const PointsTo&amp; SVF::CondPointsToSet&lt; Cond &gt;::pointsTo</definition>
        <argsstring>(Cond cond) const</argsstring>
        <name>pointsTo</name>
        <param>
          <type>Cond</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="336" column="27" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="336" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1ab1d20dfe6f243f7a09a8e2face097cc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::hasPointsTo</definition>
        <argsstring>(Cond cond) const</argsstring>
        <name>hasPointsTo</name>
        <param>
          <type>Cond</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="342" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a8775ef2c073af6c8055c3f5b0035288f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointsTo &amp;</type>
        <definition>PointsTo&amp; SVF::CondPointsToSet&lt; Cond &gt;::pointsTo</definition>
        <argsstring>(Cond cond)</argsstring>
        <name>pointsTo</name>
        <param>
          <type>Cond</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="346" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1acc5c77fbd1a6133d5e80c3f587d49fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CondPtsIter</type>
        <definition>CondPtsIter SVF::CondPointsToSet&lt; Cond &gt;::cptsBegin</definition>
        <argsstring>()</argsstring>
        <name>cptsBegin</name>
        <briefdescription>
<para>iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="354" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a20026db57cfef6bf6a978140b2372cea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CondPtsIter</type>
        <definition>CondPtsIter SVF::CondPointsToSet&lt; Cond &gt;::cptsEnd</definition>
        <argsstring>()</argsstring>
        <name>cptsEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="358" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1ad26570b94c56d6d2ae1cd5093ac66670" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CondPtsConstIter</type>
        <definition>CondPtsConstIter SVF::CondPointsToSet&lt; Cond &gt;::cptsBegin</definition>
        <argsstring>() const</argsstring>
        <name>cptsBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="362" column="29" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1aa4c47630b9a06d70375daf5e9237303d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CondPtsConstIter</type>
        <definition>CondPtsConstIter SVF::CondPointsToSet&lt; Cond &gt;::cptsEnd</definition>
        <argsstring>() const</argsstring>
        <name>cptsEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="366" column="29" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1ad81774f0ad13fb21579180fc15affd7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="372" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a8d8f9e91b62b94d876f34066de7944d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned SVF::CondPointsToSet&lt; Cond &gt;::numElement</definition>
        <argsstring>() const</argsstring>
        <name>numElement</name>
        <briefdescription>
<para>Get number of points-to targets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="378" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="378" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1aca84f0f9e09686d9f30f309d36267aff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if no element in the set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="394" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a42056d7b29e50a3ed8a8db95674d24b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
        <definition>CondPointsToSet&lt;Cond&gt;&amp; SVF::CondPointsToSet&lt; Cond &gt;::operator=</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Overloading operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="402" column="28" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="402" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1abe02e0bdcfddde7251b7d35e916c8f02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::operator==</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator ==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="410" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="410" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1afcbb2cae75a5dd7947cb22c440b8fd0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::aliased</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs) const</argsstring>
        <name>aliased</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two conditional points-to set are aliased when they access the same memory location under the same condition </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="430" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="430" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1acefec4fbacde1099d3dc81ab45ab9b8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::isSubset</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs) const</argsstring>
        <name>isSubset</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Check whether this <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref> is a subset of RHS. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="454" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="454" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a89d24257bd1436286dcbb025dd405b52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::intersects</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; *rhs) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return TRUE if this and RHS share any common element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>if either cpts is empty, just return.</para>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="480" column="10" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="480" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a57fdbfc5bc0bc7eb7a8efefdcc689852" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::intersectWithComplement</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;cpts1, const CondPointsToSet&lt; Cond &gt; &amp;cpts2)</argsstring>
        <name>intersectWithComplement</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>cpts1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>cpts2</declname>
        </param>
        <briefdescription>
<para>Result of cpts1 &amp; ~cpts2 is stored into this bitmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="503" column="10" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="503" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a5a7ab3c22b3726541955b5be8a62aab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::intersectWithComplement</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;cpts1)</argsstring>
        <name>intersectWithComplement</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>cpts1</declname>
        </param>
        <briefdescription>
<para>Result of cur &amp; ~cpts1 is stored into this bitmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>if either cpts is empty, just return.</para>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="536" column="10" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="536" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a089474fea28e27248f5f9d6721726c94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::operator&amp;=</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator &amp;=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="560" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="560" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1af06ca0ddfcdca69199fbc9ab42f98558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::operator!=</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator !=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="597" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a74c50cfaf788a828a4fc97eba703ec4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::operator|=</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overloading operator |= Merge <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref> of RHS into this one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="606" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="606" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a54d9d3f3a38bf4066cd930845f86a63c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::operator&lt;</definition>
        <argsstring>(const CondPointsToSet&lt; Cond &gt; &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref>&lt; Cond &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two <ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref> according to their points-to set size and points-to elements.<orderedlist>
<listitem><para><ref refid="class_s_v_f_1_1_cond_points_to_set" kindref="compound">CondPointsToSet</ref> with smaller points-to set size is smaller than the other;</para>
</listitem><listitem><para>If the sizes are equal, comparing the conditions and real points-to targets in their points-to elements. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="630" column="12" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="630" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1ac29ac1adefca6b34cd8e83fe3f0b4450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::test_and_set</definition>
        <argsstring>(const SingleCondVar &amp;var)</argsstring>
        <name>test_and_set</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">SingleCondVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Test and set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="676" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="676" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a1613b690473a4fcbae7bc41c3c5347d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CondPointsToSet&lt; Cond &gt;::test</definition>
        <argsstring>(const SingleCondVar &amp;var) const</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">SingleCondVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="681" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="681" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1aadf2576b55bbdb82d7affc8466c09861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::set</definition>
        <argsstring>(const SingleCondVar &amp;var)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">SingleCondVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="690" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="690" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1aced740c1aadf06b4a63630844fac2dd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::reset</definition>
        <argsstring>(const SingleCondVar &amp;var)</argsstring>
        <name>reset</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cond_var" kindref="compound">SingleCondVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="695" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="695" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a01762af2a47a55ef7b926a0c682c6333" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CondPointsToSet&lt; Cond &gt;::dump</definition>
        <argsstring>(raw_ostream &amp;O) const</argsstring>
        <name>dump</name>
        <param>
          <type><ref refid="namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71" kindref="member">raw_ostream</ref> &amp;</type>
          <declname>O</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="707" column="17" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="707" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1abcd2c01ec21e30caa91dba06386912cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::CondPointsToSet&lt; Cond &gt;::dumpStr</definition>
        <argsstring>() const</argsstring>
        <name>dumpStr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="719" column="24" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="719" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a3521ec3be48cc03d9d3f562cb088a9ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondPointsToSet&lt; Cond &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="814" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="814" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a5ead697952ada3fbb07da3459a2b1b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondPointsToSet&lt; Cond &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="819" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="819" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1acec077e130e49ac66a5c3e464a73dec2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondPointsToSet&lt; Cond &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="824" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="824" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cond_points_to_set_1a537890d918d23abeea39bc73198f7365" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator SVF::CondPointsToSet&lt; Cond &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/ConditionalPT.h" line="829" column="21" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="829" bodyend="832"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Conditional Points-to set </para>
    </detaileddescription>
    <location file="include/MemoryModel/ConditionalPT.h" line="300" column="1" bodyfile="include/MemoryModel/ConditionalPT.h" bodystart="301" bodyend="837"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ad0e1a70889a7bf2cb1b201a129128c52" prot="private" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>_condPts</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1afcbb2cae75a5dd7947cb22c440b8fd0b" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>aliased</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a3521ec3be48cc03d9d3f562cb088a9ad" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1acec077e130e49ac66a5c3e464a73dec2" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ad81774f0ad13fb21579180fc15affd7b" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>clear</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a3670dc2bb046f2d3e0d27dc02b32e62f" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPointsToSet</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a7217769c21c50c44f139006ec44d3a6f" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPointsToSet</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aad144061d006968ff4d6d21488b84801" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPointsToSet</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aaddc3f78a624de59dda6f078ba63ba52" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPts</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aa9d3a8c42b6df3fa9c2e7bcd7af75e16" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPtsConstIter</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ad9e4dea4b65d5f4a903a3cf89a421077" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>CondPtsIter</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1acc5c77fbd1a6133d5e80c3f587d49fb3" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>cptsBegin</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ad26570b94c56d6d2ae1cd5093ac66670" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>cptsBegin</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a20026db57cfef6bf6a978140b2372cea" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>cptsEnd</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aa4c47630b9a06d70375daf5e9237303d" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>cptsEnd</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a01762af2a47a55ef7b926a0c682c6333" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1abcd2c01ec21e30caa91dba06386912cb" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>dumpStr</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aca84f0f9e09686d9f30f309d36267aff" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>empty</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a5ead697952ada3fbb07da3459a2b1b86" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a537890d918d23abeea39bc73198f7365" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ab1d20dfe6f243f7a09a8e2face097cc0" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>hasPointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a89d24257bd1436286dcbb025dd405b52" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>intersects</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a57fdbfc5bc0bc7eb7a8efefdcc689852" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>intersectWithComplement</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a5a7ab3c22b3726541955b5be8a62aab6" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>intersectWithComplement</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1acefec4fbacde1099d3dc81ab45ab9b8c" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>isSubset</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a76d4c06b04161738351a813ae406aa83" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a8d8f9e91b62b94d876f34066de7944d4" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>numElement</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1af06ca0ddfcdca69199fbc9ab42f98558" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a089474fea28e27248f5f9d6721726c94" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator&amp;=</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a54d9d3f3a38bf4066cd930845f86a63c" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a42056d7b29e50a3ed8a8db95674d24b2" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1abe02e0bdcfddde7251b7d35e916c8f02" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a74c50cfaf788a828a4fc97eba703ec4e" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>operator|=</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a63f09ca69e00b317de29af6a6a12daac" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>pointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ada240bc77570174a1d17ac097583fa78" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>pointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a03311162626acf16ad05b7b93248a92b" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>pointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a8775ef2c073af6c8055c3f5b0035288f" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>pointsTo</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aced740c1aadf06b4a63630844fac2dd8" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>reset</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1aadf2576b55bbdb82d7affc8466c09861" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>set</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a0ef73bd2c1b42439ee6f265e07f17514" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>SingleCondVar</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1a1613b690473a4fcbae7bc41c3c5347d7" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>test</name></member>
      <member refid="class_s_v_f_1_1_cond_points_to_set_1ac29ac1adefca6b34cd8e83fe3f0b4450" prot="public" virt="non-virtual"><scope>SVF::CondPointsToSet</scope><name>test_and_set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
