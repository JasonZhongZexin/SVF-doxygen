<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cxt_thread" xml:lang="en-US">
<title>SVF::CxtThread Class Reference</title>
<indexterm><primary>SVF::CxtThread</primary></indexterm>
<para>
<computeroutput>#include &lt;CxtStmt.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a7f842879cad19328575f33220491352a"/><link linkend="_class_s_v_f_1_1_cxt_thread_1a7f842879cad19328575f33220491352a">CxtThread</link> (const CallStrCxt &amp;c, const CallInst *fork)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1ac6af46ba08bbad4454358298fd2557d3"/><link linkend="_class_s_v_f_1_1_cxt_thread_1ac6af46ba08bbad4454358298fd2557d3">CxtThread</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;ct)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a5792277805336f1c09f4303263521152"/>virtual <link linkend="_class_s_v_f_1_1_cxt_thread_1a5792277805336f1c09f4303263521152">~CxtThread</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a93d75593046e26eafcf1af3a596bba4a"/>const CallStrCxt &amp; <link linkend="_class_s_v_f_1_1_cxt_thread_1a93d75593046e26eafcf1af3a596bba4a">getContext</link> () const</para>

<para>Return context of the thread. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a066ba29a83edc1042139641ca088b038"/>const CallInst * <link linkend="_class_s_v_f_1_1_cxt_thread_1a066ba29a83edc1042139641ca088b038">getThread</link> () const</para>

<para>Return forksite. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cxt_thread_1a60b5b1a47869964fc8b6a27a38d11ae8">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a3c22e59962a9c638a0f1b516c25aec8f"/><link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp; <link linkend="_class_s_v_f_1_1_cxt_thread_1a3c22e59962a9c638a0f1b516c25aec8f">operator=</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1ae39e05ed7673a566708cec682d9b5d24"/>bool <link linkend="_class_s_v_f_1_1_cxt_thread_1ae39e05ed7673a566708cec682d9b5d24">operator==</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1acee7934273db9dde73b25743ed4aa911"/>bool <link linkend="_class_s_v_f_1_1_cxt_thread_1acee7934273db9dde73b25743ed4aa911">operator!=</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1aa07c20dee73682364690c3b454084c47"/>std::string <link linkend="_class_s_v_f_1_1_cxt_thread_1aa07c20dee73682364690c3b454084c47">cxtToStr</link> () const</para>

<para>Return context in string format. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1aa4e1a9babb249a005e8dfae8cb83df21"/>void <link linkend="_class_s_v_f_1_1_cxt_thread_1aa4e1a9babb249a005e8dfae8cb83df21">setInloop</link> (bool in)</para>

<para>inloop, incycle attributes </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a39230596cd1c927353eaaee071eb16c6"/>bool <emphasis role="strong">isInloop</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1adde663205c3ecc5a2e01b18bc305d5cb"/>void <emphasis role="strong">setIncycle</emphasis> (bool in)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a54c95794963cb5a478db7c49c1b8c428"/>bool <emphasis role="strong">isIncycle</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a66709acfa2f5762d86574c9cf7f38a64"/>void <link linkend="_class_s_v_f_1_1_cxt_thread_1a66709acfa2f5762d86574c9cf7f38a64">dump</link> () const</para>

<para>Dump <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1ae8e5c401e008739bf018f1d618c08ea5"/>CallStrCxt <emphasis role="strong">cxt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a6dc6ddb5399c1ddc53db2155943511fd"/>const CallInst * <emphasis role="strong">forksite</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a2066520689094db3c4a88f5a7fc4ec0c"/>bool <emphasis role="strong">inloop</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a97d876697e682b23211a8f930fed7f32"/>bool <emphasis role="strong">incycle</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Context-sensitive thread &lt;c,t&gt; </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cxt_thread_1a60b5b1a47869964fc8b6a27a38d11ae8"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::CxtThread</secondary></indexterm>
<indexterm><primary>SVF::CxtThread</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::CxtThread::operator&lt; (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Util/CxtStmt.h</section>
</section>
