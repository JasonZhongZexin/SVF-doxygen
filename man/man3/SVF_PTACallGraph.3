.TH "SVF::PTACallGraph" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::PTACallGraph
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSVF::GenericGraph< NodeTy, EdgeTy >\fP\&.
.PP
Inherited by \fBSVF::ThreadCallGraph\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCGEK\fP { \fBNormCallGraph\fP, \fBThdCallGraph\fP }"
.br
.ti -1c
.RI "typedef PTACallGraphEdge::CallGraphEdgeSet \fBCallGraphEdgeSet\fP"
.br
.ti -1c
.RI "typedef Map< const \fBSVFFunction\fP *, \fBPTACallGraphNode\fP * > \fBFunToCallGraphNodeMap\fP"
.br
.ti -1c
.RI "typedef Map< const \fBCallBlockNode\fP *, CallGraphEdgeSet > \fBCallInstToCallGraphEdgesMap\fP"
.br
.ti -1c
.RI "typedef std::pair< const \fBCallBlockNode\fP *, const \fBSVFFunction\fP * > \fBCallSitePair\fP"
.br
.ti -1c
.RI "typedef Map< CallSitePair, CallSiteID > \fBCallSiteToIdMap\fP"
.br
.ti -1c
.RI "typedef Map< CallSiteID, CallSitePair > \fBIdToCallSiteMap\fP"
.br
.ti -1c
.RI "typedef Set< const \fBSVFFunction\fP * > \fBFunctionSet\fP"
.br
.ti -1c
.RI "typedef OrderedMap< const \fBCallBlockNode\fP *, FunctionSet > \fBCallEdgeMap\fP"
.br
.ti -1c
.RI "typedef CallGraphEdgeSet::iterator \fBCallGraphEdgeIter\fP"
.br
.ti -1c
.RI "typedef CallGraphEdgeSet::const_iterator \fBCallGraphEdgeConstIter\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPTACallGraph\fP (CGEK k=NormCallGraph)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "void \fBaddCallGraphNode\fP (const \fBSVFFunction\fP *fun)"
.br
.RI "Add callgraph Node\&. "
.ti -1c
.RI "virtual \fB~PTACallGraph\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "CGEK \fBgetKind\fP () const"
.br
.RI "Return type of this callgraph\&. "
.ti -1c
.RI "CallEdgeMap & \fBgetIndCallMap\fP ()"
.br
.RI "Get callees from an indirect callsite\&. "
.ti -1c
.RI "bool \fBhasIndCSCallees\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "const FunctionSet & \fBgetIndCSCallees\fP (const \fBCallBlockNode\fP *cs) const"
.br
.ti -1c
.RI "u32_t \fBgetTotalCallSiteNumber\fP () const"
.br
.ti -1c
.RI "Size_t \fBgetNumOfResolvedIndCallEdge\fP () const"
.br
.ti -1c
.RI "const CallInstToCallGraphEdgesMap & \fBgetCallInstToCallGraphEdgesMap\fP () const"
.br
.ti -1c
.RI "void \fBverifyCallGraph\fP ()"
.br
.RI "Issue a warning if the function which has indirect call sites can not be reached from program entry\&. "
.ti -1c
.RI "\fBPTACallGraphNode\fP * \fBgetCallGraphNode\fP (NodeID id) const"
.br
.RI "Get call graph node\&. "
.ti -1c
.RI "\fBPTACallGraphNode\fP * \fBgetCallGraphNode\fP (const \fBSVFFunction\fP *fun) const"
.br
.ti -1c
.RI "CallSiteID \fBaddCallSite\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee)"
.br
.RI "Add/Get CallSiteID\&. "
.ti -1c
.RI "CallSiteID \fBgetCallSiteID\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee) const"
.br
.ti -1c
.RI "bool \fBhasCallSiteID\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callee) const"
.br
.ti -1c
.RI "const CallSitePair & \fBgetCallSitePair\fP (CallSiteID id) const"
.br
.ti -1c
.RI "const \fBCallBlockNode\fP * \fBgetCallSite\fP (CallSiteID id) const"
.br
.ti -1c
.RI "const \fBSVFFunction\fP * \fBgetCallerOfCallSite\fP (CallSiteID id) const"
.br
.ti -1c
.RI "const \fBSVFFunction\fP * \fBgetCalleeOfCallSite\fP (CallSiteID id) const"
.br
.ti -1c
.RI "\fBPTACallGraphEdge\fP * \fBhasGraphEdge\fP (\fBPTACallGraphNode\fP *src, \fBPTACallGraphNode\fP *dst, PTACallGraphEdge::CEDGEK kind, CallSiteID csId) const"
.br
.RI "Whether we have aleady created this call graph edge\&. "
.ti -1c
.RI "\fBPTACallGraphEdge\fP * \fBgetGraphEdge\fP (\fBPTACallGraphNode\fP *src, \fBPTACallGraphNode\fP *dst, PTACallGraphEdge::CEDGEK kind, CallSiteID csId)"
.br
.RI "Get call graph edge via nodes\&. "
.ti -1c
.RI "void \fBgetCallees\fP (const \fBCallBlockNode\fP *cs, FunctionSet &callees)"
.br
.RI "Get all callees for a callsite\&. "
.ti -1c
.RI "bool \fBhasCallGraphEdge\fP (const \fBCallBlockNode\fP *inst) const"
.br
.RI "Get call graph edge via call instruction\&. "
.ti -1c
.RI "CallGraphEdgeSet::const_iterator \fBgetCallEdgeBegin\fP (const \fBCallBlockNode\fP *inst) const"
.br
.ti -1c
.RI "CallGraphEdgeSet::const_iterator \fBgetCallEdgeEnd\fP (const \fBCallBlockNode\fP *inst) const"
.br
.ti -1c
.RI "void \fBaddEdge\fP (\fBPTACallGraphEdge\fP *edge)"
.br
.RI "Add call graph edge\&. "
.ti -1c
.RI "void \fBaddDirectCallGraphEdge\fP (const \fBCallBlockNode\fP *call, const \fBSVFFunction\fP *callerFun, const \fBSVFFunction\fP *calleeFun)"
.br
.RI "Add direct/indirect call edges\&. "
.ti -1c
.RI "void \fBaddIndirectCallGraphEdge\fP (const \fBCallBlockNode\fP *cs, const \fBSVFFunction\fP *callerFun, const \fBSVFFunction\fP *calleeFun)"
.br
.ti -1c
.RI "void \fBgetAllCallSitesInvokingCallee\fP (const \fBSVFFunction\fP *callee, PTACallGraphEdge::CallInstSet &csSet)"
.br
.RI "Get callsites invoking the callee\&. "
.ti -1c
.RI "void \fBgetDirCallSitesInvokingCallee\fP (const \fBSVFFunction\fP *callee, PTACallGraphEdge::CallInstSet &csSet)"
.br
.ti -1c
.RI "void \fBgetIndCallSitesInvokingCallee\fP (const \fBSVFFunction\fP *callee, PTACallGraphEdge::CallInstSet &csSet)"
.br
.ti -1c
.RI "bool \fBisReachableBetweenFunctions\fP (const \fBSVFFunction\fP *srcFn, const \fBSVFFunction\fP *dstFn) const"
.br
.RI "Whether its reachable between two functions\&. "
.ti -1c
.RI "void \fBdump\fP (const std::string &filename)"
.br
.RI "Dump the graph\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.RI "Clean up memory\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "FunToCallGraphNodeMap \fBfunToCallGraphNodeMap\fP"
.br
.RI "Call Graph node map\&. "
.ti -1c
.RI "CallInstToCallGraphEdgesMap \fBcallinstToCallGraphEdgesMap\fP"
.br
.RI "Map a call instruction to its corresponding call edges\&. "
.ti -1c
.RI "NodeID \fBcallGraphNodeNum\fP"
.br
.ti -1c
.RI "Size_t \fBnumOfResolvedIndCallEdge\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Member Function Documentation"
.PP 
.SS "void PTACallGraph::addCallGraphNode (const \fBSVFFunction\fP * fun)"

.PP
Add callgraph Node\&. Add call graph node 
.SS "void PTACallGraph::addDirectCallGraphEdge (const \fBCallBlockNode\fP * cs, const \fBSVFFunction\fP * callerFun, const \fBSVFFunction\fP * calleeFun)"

.PP
Add direct/indirect call edges\&. Add direct call edges 
.SS "void PTACallGraph::addIndirectCallGraphEdge (const \fBCallBlockNode\fP * cs, const \fBSVFFunction\fP * callerFun, const \fBSVFFunction\fP * calleeFun)"
Add indirect call edge to update call graph 
.SS "void PTACallGraph::destroy ()\fC [protected]\fP"

.PP
Clean up memory\&. Memory has been cleaned up at \fBGenericGraph\fP 
.SS "void PTACallGraph::dump (const std::string & filename)"

.PP
Dump the graph\&. Dump call graph into dot file 
.SS "void PTACallGraph::getAllCallSitesInvokingCallee (const \fBSVFFunction\fP * callee, PTACallGraphEdge::CallInstSet & csSet)"

.PP
Get callsites invoking the callee\&. Get all callsite invoking this callee 
.SS "void PTACallGraph::getDirCallSitesInvokingCallee (const \fBSVFFunction\fP * callee, PTACallGraphEdge::CallInstSet & csSet)"
Get direct callsite invoking this callee 
.SS "\fBPTACallGraphEdge\fP * PTACallGraph::getGraphEdge (\fBPTACallGraphNode\fP * src, \fBPTACallGraphNode\fP * dst, PTACallGraphEdge::CEDGEK kind, CallSiteID csId)"

.PP
Get call graph edge via nodes\&. get CallGraph edge via nodes 
.SS "void PTACallGraph::getIndCallSitesInvokingCallee (const \fBSVFFunction\fP * callee, PTACallGraphEdge::CallInstSet & csSet)"
Get indirect callsite invoking this callee 
.SS "bool SVF::PTACallGraph::hasCallGraphEdge (const \fBCallBlockNode\fP * inst) const\fC [inline]\fP"

.PP
Get call graph edge via call instruction\&. whether this call instruction has a valid call graph edge 
.SS "\fBPTACallGraphEdge\fP * PTACallGraph::hasGraphEdge (\fBPTACallGraphNode\fP * src, \fBPTACallGraphNode\fP * dst, PTACallGraphEdge::CEDGEK kind, CallSiteID csId) const"

.PP
Whether we have aleady created this call graph edge\&. Whether we have already created this call graph edge 
.SS "bool PTACallGraph::isReachableBetweenFunctions (const \fBSVFFunction\fP * srcFn, const \fBSVFFunction\fP * dstFn) const"

.PP
Whether its reachable between two functions\&. Whether its reachable between two functions 
.SS "void PTACallGraph::verifyCallGraph ()"

.PP
Issue a warning if the function which has indirect call sites can not be reached from program entry\&. Issue a warning if the function which has indirect call sites can not be reached from program entry\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
