<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_t_c_t" xml:lang="en-US">
<title>SVF::TCT Class Reference</title>
<indexterm><primary>SVF::TCT</primary></indexterm>
<para>Inheritance diagram for SVF::TCT:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_t_c_t.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a7c53c7ff773a253976374392d4930d6e"/>typedef TCTEdge::ThreadCreateEdgeSet <emphasis role="strong">ThreadCreateEdgeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a6f4ab4fb901620c733d90b380c9db670"/>typedef ThreadCreateEdgeSet::iterator <emphasis role="strong">TCTNodeIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a3123719a96acbefe0e9944c68ba44185"/>typedef Set&lt; const Function * &gt; <emphasis role="strong">FunSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a13d01a1747d8ee1521596aeb36bdb655"/>typedef std::vector&lt; const Instruction * &gt; <emphasis role="strong">InstVec</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a3238d12557309967f8bdfdfc275b6710"/>typedef Set&lt; const Instruction * &gt; <emphasis role="strong">InstSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1afb579a5bdcc0a1c6b075bb9aae36c237"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link> * &gt; <emphasis role="strong">PTACGNodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a7925578e1546df6c3cfb6a62e14b1f6d"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link>, <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * &gt; <emphasis role="strong">CxtThreadToNodeMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a603a3e33152a010ed0ef712e200fd5db"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link>, CallStrCxt &gt; <emphasis role="strong">CxtThreadToForkCxt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a3a7f81c2ef1911c3c4e538108dffe0bf"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link>, const Function * &gt; <emphasis role="strong">CxtThreadToFun</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ab5569ca90951ff0ddeefe005a8506764"/>typedef Map&lt; const Instruction *, const Loop * &gt; <emphasis role="strong">InstToLoopMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a23df579f18d4ea4b0f47272091ddc43e"/>typedef <link linkend="_class_s_v_f_1_1_f_i_f_o_work_list">FIFOWorkList</link>&lt; <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &gt; <emphasis role="strong">CxtThreadProcVec</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ac8a6a5ee40f31f8377945a402ac161ad"/>typedef set&lt; <link linkend="_class_s_v_f_1_1_cxt_thread_proc">CxtThreadProc</link> &gt; <emphasis role="strong">CxtThreadProcSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a71942c7386d094426ae86633a9b1f755"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * &gt; <emphasis role="strong">ThreadCallGraphSCC</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a8eaa746805b0afc17329d0ba4ad6a887"/><link linkend="_class_s_v_f_1_1_t_c_t_1a8eaa746805b0afc17329d0ba4ad6a887">TCT</link> (<link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> *p)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1aee699da702973dd42398b42a2ec65e59"/>virtual <link linkend="_class_s_v_f_1_1_t_c_t_1aee699da702973dd42398b42a2ec65e59">~TCT</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a1602d02773578bca73dcbd29b95c67d0"/><link linkend="_class_s_v_f_1_1_thread_call_graph">ThreadCallGraph</link> * <link linkend="_class_s_v_f_1_1_t_c_t_1a1602d02773578bca73dcbd29b95c67d0">getThreadCallGraph</link> () const</para>

<para>Get TCG. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a5b087b42340d1a1b2ee37339637709d3"/><link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> * <link linkend="_class_s_v_f_1_1_t_c_t_1a5b087b42340d1a1b2ee37339637709d3">getPTA</link> () const</para>

<para>Get PTA. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d"/><link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * <link linkend="_class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d">getTCTNode</link> (NodeID id) const</para>

<para>Get <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> node. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> * <link linkend="_class_s_v_f_1_1_t_c_t_1adb2025048dc69f0689f526c58df29802">hasGraphEdge</link> (<link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *src, <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *dst, TCTEdge::CEDGEK kind) const</para>

<para>Whether we have aleady created this call graph edge. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> * <link linkend="_class_s_v_f_1_1_t_c_t_1a7b40580939dc63f501a32571806c07bc">getGraphEdge</link> (<link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *src, <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *dst, TCTEdge::CEDGEK kind)</para>

<para>Get call graph edge via nodes. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a511c2ee4cfdc01a720135b2cd493fe3b"/>ThreadCreateEdgeSet::const_iterator <link linkend="_class_s_v_f_1_1_t_c_t_1a511c2ee4cfdc01a720135b2cd493fe3b">getChildrenBegin</link> (const <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *node) const</para>

<para>Get children and parent nodes. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1af47837e30a80e8d6684f3ee6001afb7a"/>ThreadCreateEdgeSet::const_iterator <emphasis role="strong">getChildrenEnd</emphasis> (const <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *node) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1afa5bd475c4dc068a0ecc0ec5caab77a9"/>ThreadCreateEdgeSet::const_iterator <emphasis role="strong">getParentsBegin</emphasis> (const <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *node) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a5d6a06c7daff36a14fa1f371a477784d"/>ThreadCreateEdgeSet::const_iterator <emphasis role="strong">getParentsEnd</emphasis> (const <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> *node) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a54cceb577b4fb89c1d84011ec4d2fe2c"/>const FunSet &amp; <link linkend="_class_s_v_f_1_1_t_c_t_1a54cceb577b4fb89c1d84011ec4d2fe2c">getMakredProcs</link> () const</para>

<para>Get marked candidate functions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a692a74188f141ffbdbb859ecae8b07ab"/>const FunSet &amp; <link linkend="_class_s_v_f_1_1_t_c_t_1a692a74188f141ffbdbb859ecae8b07ab">getEntryProcs</link> () const</para>

<para>Get marked candidate functions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1af03bfeae7e09a9f62d96ba59632e588f"/>u32_t <link linkend="_class_s_v_f_1_1_t_c_t_1af03bfeae7e09a9f62d96ba59632e588f">getTCTNodeNum</link> () const</para>

<para>Get Statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a6ac3c91742a6e9088c4e9cf1b7d2f42e"/>u32_t <emphasis role="strong">getTCTEdgeNum</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a49f0672760c29b9be7b6f99a4c82ab7e"/>u32_t <emphasis role="strong">getMaxCxtSize</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a5d5a753b4d2633e3aaf58859274ffe7a"/>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a5d5a753b4d2633e3aaf58859274ffe7a">hasTCTNode</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;ct) const</para>

<para>Find/Get <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1aac9d98a33fbaa6defa3f847d0bbe76d6"/><link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * <emphasis role="strong">getTCTNode</emphasis> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;ct) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ab0abc0713e6b87a8b1453bababced79c"/>bool <link linkend="_class_s_v_f_1_1_t_c_t_1ab0abc0713e6b87a8b1453bababced79c">isCandidateFun</link> (const Function *fun) const</para>

<para>Whether it is a candidate function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a95cd490d37f8831edc6910f7ecdf413e"/>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a95cd490d37f8831edc6910f7ecdf413e">inSameCallGraphSCC</link> (const <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link> *src, const <link linkend="_class_s_v_f_1_1_p_t_a_call_graph_node">PTACallGraphNode</link> *dst)</para>

<para>Whether two functions in the same callgraph scc. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a6855a3a8a98591e58dba07047f7705ce">hasParentThread</link> (NodeID tid) const</para>

<para>Get parent and sibling threads. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a516578af1f8666ff672e6611e61d7152"/>NodeID <link linkend="_class_s_v_f_1_1_t_c_t_1a516578af1f8666ff672e6611e61d7152">getParentThread</link> (NodeID tid) const</para>

<para>Get parent thread. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1aeb7dff0c02a90cb338c8d054d2b78984"/>const NodeBS <link linkend="_class_s_v_f_1_1_t_c_t_1aeb7dff0c02a90cb338c8d054d2b78984">getAncestorThread</link> (NodeID tid) const</para>

<para>Get all ancestor threads. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a60e63f6ddfe78c4cf4fd3a70875b727f"/>const NodeBS <link linkend="_class_s_v_f_1_1_t_c_t_1a60e63f6ddfe78c4cf4fd3a70875b727f">getSiblingThread</link> (NodeID tid) const</para>

<para>Get sibling threads. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ab4bc72ca330b315df06f2d4d2c1a7b4f"/>const CallStrCxt &amp; <link linkend="_class_s_v_f_1_1_t_c_t_1ab4bc72ca330b315df06f2d4d2c1a7b4f">getCxtOfCxtThread</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;ct) const</para>

<para>get the context of a thread at its spawning site (fork site) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a7ccacac1c673b38215b90e4eb480581f"/>const Function * <link linkend="_class_s_v_f_1_1_t_c_t_1a7ccacac1c673b38215b90e4eb480581f">getStartRoutineOfCxtThread</link> (const <link linkend="_class_s_v_f_1_1_cxt_thread">CxtThread</link> &amp;ct) const</para>

<para>get the start routine function of a thread </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a52a707bf6f278e810f440c279f5261dc"/>const Loop * <link linkend="_class_s_v_f_1_1_t_c_t_1a52a707bf6f278e810f440c279f5261dc">getJoinLoop</link> (const Instruction *join)</para>

<para>Get loop for join site. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a65d0260b37ab60debb7fa84fa0b7a5d4">isJoinMustExecutedInLoop</link> (const Loop *lp, const Instruction *join)</para>

<para>Return true if a join instruction must be executed inside a loop. </para>
</listitem>
            <listitem><para>const Loop * <link linkend="_class_s_v_f_1_1_t_c_t_1add9104a3d7a821e9c2f266ae1810d2e3">getLoop</link> (const Instruction *inst)</para>

<para>Get loop for an instruction. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a9b2977014d3c3e7df5cb56cc876ddc70"/>const DominatorTree * <link linkend="_class_s_v_f_1_1_t_c_t_1a9b2977014d3c3e7df5cb56cc876ddc70">getDT</link> (const Function *fun)</para>

<para>Get dominator for a function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ae4d26d2a77e45104523cfc481012bccc"/>const PostDominatorTree * <link linkend="_class_s_v_f_1_1_t_c_t_1ae4d26d2a77e45104523cfc481012bccc">getPostDT</link> (const Function *fun)</para>

<para>Get dominator for a function. </para>
</listitem>
            <listitem><para>const Loop * <link linkend="_class_s_v_f_1_1_t_c_t_1a71249dc399055790d86dcba6d9dd3021">getLoop</link> (const BasicBlock *bb)</para>

<para>Get loop for fork/join site. </para>
</listitem>
            <listitem><para>ScalarEvolution * <link linkend="_class_s_v_f_1_1_t_c_t_1ac66b3a193240c17c3f06437442b2d8bf">getSE</link> (const Instruction *inst)</para>

<para>Get SE for function. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf">getNextInsts</link> (const Instruction *inst, InstVec &amp;instSet)</para>

<para>Get the next instructions following control flow. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e">pushCxt</link> (CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</para>

<para>Push calling context. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e">matchCxt</link> (CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</para>

<para>Match context. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1aa98a5b427a92eca1e043efcdf7945169"/>void <emphasis role="strong">pushCxt</emphasis> (CallStrCxt &amp;cxt, CallSiteID csId)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a4ff016e5933a4d094989c600ad25dd99"/>bool <link linkend="_class_s_v_f_1_1_t_c_t_1a4ff016e5933a4d094989c600ad25dd99">isJoinSiteInRecursion</link> (const Instruction *join) const</para>

<para>Whether a join site is in recursion. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_t_c_t_1aa86c4422e17cf00408444f18687d555b">dumpCxt</link> (CallStrCxt &amp;cxt)</para>

<para>Dump calling context. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_t_c_t_1a716c97a80c483c571ca7a03b9acce3e8">dump</link> (const std::string &amp;filename)</para>

<para>Dump the graph. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_t_c_t_1abf2a992a66de9832915b1f959b8988e4">print</link> () const</para>

<para>Print <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> information. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_t_c_t_1a716c97a80c483c571ca7a03b9acce3e8"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>dump</secondary></indexterm>
<para><computeroutput>void TCT::dump (const std::string &amp; filename)</computeroutput></para><para>

<para>Dump the graph. </para>
</para>

<para>Dump call graph into dot file </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1aa86c4422e17cf00408444f18687d555b"/>    <section>
    <title>dumpCxt()</title>
<indexterm><primary>dumpCxt</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>dumpCxt</secondary></indexterm>
<para><computeroutput>void TCT::dumpCxt (CallStrCxt &amp; cxt)</computeroutput></para><para>

<para>Dump calling context. </para>
</para>

<para>Dump calling context information </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a7b40580939dc63f501a32571806c07bc"/>    <section>
    <title>getGraphEdge()</title>
<indexterm><primary>getGraphEdge</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>getGraphEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> * TCT::getGraphEdge (<link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * src, <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * dst, TCTEdge::CEDGEK kind)</computeroutput></para><para>

<para>Get call graph edge via nodes. </para>
</para>

<para>get CallGraph edge via nodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a71249dc399055790d86dcba6d9dd3021"/>    <section>
    <title>getLoop()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getLoop</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>getLoop</secondary></indexterm>
<para><computeroutput>const Loop * TCT::getLoop (const BasicBlock * bb)</computeroutput></para><para>

<para>Get loop for fork/join site. </para>
</para>

<para>Get loop for fork/join site </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1add9104a3d7a821e9c2f266ae1810d2e3"/>    <section>
    <title>getLoop()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getLoop</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>getLoop</secondary></indexterm>
<para><computeroutput>const Loop * TCT::getLoop (const Instruction * inst)</computeroutput></para><para>

<para>Get loop for an instruction. </para>
</para>

<para>Get loop for fork/join site </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf"/>    <section>
    <title>getNextInsts()</title>
<indexterm><primary>getNextInsts</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>getNextInsts</secondary></indexterm>
<para><computeroutput>void TCT::getNextInsts (const Instruction * curInst, InstVec &amp; instList)</computeroutput></para><para>

<para>Get the next instructions following control flow. </para>
</para>

<para>Get the next instructions following control flow </para>

<para>traverse to successive statements</para>

<para>if we are sitting at the loop header, then go inside the loop but ignore loop exit</para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1ac66b3a193240c17c3f06437442b2d8bf"/>    <section>
    <title>getSE()</title>
<indexterm><primary>getSE</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>getSE</secondary></indexterm>
<para><computeroutput>ScalarEvolution * TCT::getSE (const Instruction * inst)</computeroutput></para><para>

<para>Get SE for function. </para>
</para>

<para>Get SE for function </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1adb2025048dc69f0689f526c58df29802"/>    <section>
    <title>hasGraphEdge()</title>
<indexterm><primary>hasGraphEdge</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>hasGraphEdge</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_t_c_t_edge">TCTEdge</link> * TCT::hasGraphEdge (<link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * src, <link linkend="_class_s_v_f_1_1_t_c_t_node">TCTNode</link> * dst, TCTEdge::CEDGEK kind) const</computeroutput></para><para>

<para>Whether we have aleady created this call graph edge. </para>
</para>

<para>Whether we have already created this call graph edge </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a6855a3a8a98591e58dba07047f7705ce"/>    <section>
    <title>hasParentThread()</title>
<indexterm><primary>hasParentThread</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>hasParentThread</secondary></indexterm>
<para><computeroutput>bool SVF::TCT::hasParentThread (NodeID tid) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get parent and sibling threads. </para>
</para>

<para>Has parent thread </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a65d0260b37ab60debb7fa84fa0b7a5d4"/>    <section>
    <title>isJoinMustExecutedInLoop()</title>
<indexterm><primary>isJoinMustExecutedInLoop</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>isJoinMustExecutedInLoop</secondary></indexterm>
<para><computeroutput>bool TCT::isJoinMustExecutedInLoop (const Loop * lp, const Instruction * join)</computeroutput></para><para>

<para>Return true if a join instruction must be executed inside a loop. </para>
</para>

<para>Return true if a join instruction must be executed inside a loop joinbb should post dominate the successive basic block of a loop header </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e"/>    <section>
    <title>matchCxt()</title>
<indexterm><primary>matchCxt</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>matchCxt</secondary></indexterm>
<para><computeroutput>bool TCT::matchCxt (CallStrCxt &amp; cxt, const Instruction * call, const Function * callee)</computeroutput></para><para>

<para>Match context. </para>
</para>

<para>Match calling context </para>

<para>handle calling context for candidate functions only</para>

<para>partial match</para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1abf2a992a66de9832915b1f959b8988e4"/>    <section>
    <title>print()</title>
<indexterm><primary>print</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void TCT::print ( ) const</computeroutput></para><para>

<para>Print <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> information. </para>
</para>

<para>Print <link linkend="_class_s_v_f_1_1_t_c_t">TCT</link> information </para>
    </section><anchor xml:id="_class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e"/>    <section>
    <title>pushCxt()</title>
<indexterm><primary>pushCxt</primary><secondary>SVF::TCT</secondary></indexterm>
<indexterm><primary>SVF::TCT</primary><secondary>pushCxt</secondary></indexterm>
<para><computeroutput>void TCT::pushCxt (CallStrCxt &amp; cxt, const Instruction * call, const Function * callee)</computeroutput></para><para>

<para>Push calling context. </para>
</para>

<para>Push calling context </para>

<para>handle calling context for candidate functions only</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MTA/TCT.hlib/MTA/TCT.cpp</section>
</section>
