<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="util_8h" kind="file" language="C++">
    <compoundname>util.h</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">ctype.h</includes>
    <includedby refid="cpu__time_8c" local="yes">lib/CUDD/cpu_time.c</includedby>
    <includedby refid="cudd_add_ite_8c" local="yes">lib/CUDD/cuddAddIte.c</includedby>
    <includedby refid="cudd_anneal_8c" local="yes">lib/CUDD/cuddAnneal.c</includedby>
    <includedby refid="cudd_a_p_i_8c" local="yes">lib/CUDD/cuddAPI.c</includedby>
    <includedby refid="cudd_bdd_abs_8c" local="yes">lib/CUDD/cuddBddAbs.c</includedby>
    <includedby refid="cudd_bdd_ite_8c" local="yes">lib/CUDD/cuddBddIte.c</includedby>
    <includedby refid="cudd_cache_8c" local="yes">lib/CUDD/cuddCache.c</includedby>
    <includedby refid="cudd_check_8c" local="yes">lib/CUDD/cuddCheck.c</includedby>
    <includedby refid="cudd_cof_8c" local="yes">lib/CUDD/cuddCof.c</includedby>
    <includedby refid="cudd_exact_8c" local="yes">lib/CUDD/cuddExact.c</includedby>
    <includedby refid="cudd_genetic_8c" local="yes">lib/CUDD/cuddGenetic.c</includedby>
    <includedby refid="cudd_group_8c" local="yes">lib/CUDD/cuddGroup.c</includedby>
    <includedby refid="cudd_init_8c" local="yes">lib/CUDD/cuddInit.c</includedby>
    <includedby refid="cudd_interact_8c" local="yes">lib/CUDD/cuddInteract.c</includedby>
    <includedby refid="cudd_l_cache_8c" local="yes">lib/CUDD/cuddLCache.c</includedby>
    <includedby refid="cudd_linear_8c" local="yes">lib/CUDD/cuddLinear.c</includedby>
    <includedby refid="cudd_ref_8c" local="yes">lib/CUDD/cuddRef.c</includedby>
    <includedby refid="cudd_reorder_8c" local="yes">lib/CUDD/cuddReorder.c</includedby>
    <includedby refid="cudd_sat_8c" local="yes">lib/CUDD/cuddSat.c</includedby>
    <includedby refid="cudd_symmetry_8c" local="yes">lib/CUDD/cuddSymmetry.c</includedby>
    <includedby refid="cudd_table_8c" local="yes">lib/CUDD/cuddTable.c</includedby>
    <includedby refid="cudd_util_8c" local="yes">lib/CUDD/cuddUtil.c</includedby>
    <includedby refid="cudd_window_8c" local="yes">lib/CUDD/cuddWindow.c</includedby>
    <includedby refid="cudd_zdd_funcs_8c" local="yes">lib/CUDD/cuddZddFuncs.c</includedby>
    <includedby refid="cudd_zdd_group_8c" local="yes">lib/CUDD/cuddZddGroup.c</includedby>
    <includedby refid="cudd_zdd_isop_8c" local="yes">lib/CUDD/cuddZddIsop.c</includedby>
    <includedby refid="cudd_zdd_lin_8c" local="yes">lib/CUDD/cuddZddLin.c</includedby>
    <includedby refid="cudd_zdd_reord_8c" local="yes">lib/CUDD/cuddZddReord.c</includedby>
    <includedby refid="cudd_zdd_setop_8c" local="yes">lib/CUDD/cuddZddSetop.c</includedby>
    <includedby refid="cudd_zdd_symm_8c" local="yes">lib/CUDD/cuddZddSymm.c</includedby>
    <includedby refid="epd_8c" local="yes">lib/CUDD/epd.c</includedby>
    <includedby refid="mtr_basic_8c" local="yes">lib/CUDD/mtrBasic.c</includedby>
    <includedby refid="mtr_group_8c" local="yes">lib/CUDD/mtrGroup.c</includedby>
    <includedby refid="safe__mem_8c" local="yes">lib/CUDD/safe_mem.c</includedby>
    <includedby refid="st_8c" local="yes">lib/CUDD/st.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/CUDD/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unistd.h</label>
      </node>
      <node id="4">
        <label>ctype.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="util_8h_1a3f9a7db4d2d7bcc67c240b46c633493a" prot="public" static="no">
        <name>UTIL_INLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="18" column="13" bodyfile="include/CUDD/util.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a87240b9a8c602f39bcbe0246c9e6ec42" prot="public" static="no">
        <name>UTIL_UNUSED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="19" column="12" bodyfile="include/CUDD/util.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a92616c6df51185d4cf143d10fe85739c" prot="public" static="no">
        <name>SIZEOF_VOID_P</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="23" column="9" bodyfile="include/CUDD/util.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a44184cf844a916eee78598ab35fc966b" prot="public" static="no">
        <name>SIZEOF_INT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="26" column="9" bodyfile="include/CUDD/util.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a22aece5d034fd9040a3d01c3797fdfe7" prot="public" static="no">
        <name>SIZEOF_LONG</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="29" column="9" bodyfile="include/CUDD/util.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1aed0348fcfd6ce9ab80a01d192c91fc82" prot="public" static="no">
        <name>strsav</name>
        <initializer>util_strsav</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="41" column="9" bodyfile="include/CUDD/util.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a31bfee01545b78af63301bf9e857218b" prot="public" static="no">
        <name>NIL</name>
        <param><defname>type</defname></param>
        <initializer>((type *) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="44" column="9" bodyfile="include/CUDD/util.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a21755cdb11c76954a33c653579810f3a" prot="public" static="no">
        <name>ALLOC</name>
        <param><defname>type</defname></param>
        <param><defname>num</defname></param>
        <initializer>    ((type *) MMalloc((long) sizeof(type) * (long) (num)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="76" column="9" bodyfile="include/CUDD/util.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1ac3d02b1026db1997f09067d47aed16a8" prot="public" static="no">
        <name>REALLOC</name>
        <param><defname>type</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>num</defname></param>
        <initializer>    ((type *) MMrealloc((char *) (obj), (long) sizeof(type) * (long) (num)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="78" column="9" bodyfile="include/CUDD/util.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1aa279a8302d25fa9dfeb3e00161aee784" prot="public" static="no">
        <name>FREE</name>
        <param><defname>obj</defname></param>
        <initializer>    ((obj) ? (free((char *) (obj)), (obj) = 0) : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="80" column="9" bodyfile="include/CUDD/util.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1ab98c118630d03869c77347eb973ecb0f" prot="public" static="no">
        <name>VOID_OR_INT</name>
        <initializer>int</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="90" column="10" bodyfile="include/CUDD/util.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a97ba5606b96ef10cee313ae47ece8674" prot="public" static="no">
        <name>VOID_OR_CHAR</name>
        <initializer>char</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="91" column="9" bodyfile="include/CUDD/util.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a07d17d6d5d1074c0969bc5d3c3d1d84a" prot="public" static="no">
        <name>assert</name>
        <param><defname>ex</defname></param>
        <initializer>    {\
    if (! (ex)) {\
	(void) fprintf(stderr,\
	    &quot;Assertion failed: file %s, line %d\n\&quot;%s\&quot;\n&quot;,\
	    __FILE__, __LINE__, &quot;ex&quot;);\
	(void) fflush(stdout);\
	abort();\
    }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="141" column="9" bodyfile="include/CUDD/util.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a71a6998301cde817b7ade39eff117424" prot="public" static="no">
        <name>fail</name>
        <param><defname>why</defname></param>
        <initializer>    {\
    (void) fprintf(stderr, &quot;Fatal error: file %s, line %d\n%s\n&quot;,\
	__FILE__, __LINE__, why);\
    (void) fflush(stdout);\
    abort();\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="156" column="9" bodyfile="include/CUDD/util.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1ae2f08dc603ae93c402abd918ba4e23e1" prot="public" static="no">
        <name>ABS</name>
        <param><defname>a</defname></param>
        <initializer>((a) &lt; 0 ? -(a) : (a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="174" column="9" bodyfile="include/CUDD/util.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1afa99ec4acc4ecb2dc3c2d05da15d0e3f" prot="public" static="no">
        <name>MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &gt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="175" column="9" bodyfile="include/CUDD/util.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a3acffbd305ee72dcd4593c0d8af64a4f" prot="public" static="no">
        <name>MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &lt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="176" column="9" bodyfile="include/CUDD/util.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="util_8h_1ab5e824003d402df8f53fcd7bd935ab0f" prot="public" static="no">
        <type>int</type>
        <definition>typedef int util_ptrint</definition>
        <argsstring></argsstring>
        <name>util_ptrint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="35" column="13" bodyfile="include/CUDD/util.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="util_8h_1af76722b9c78f324a2cd1a57318e0eea1" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* MMoutOfMemory) (long)</definition>
        <argsstring>)(long)</argsstring>
        <name>MMoutOfMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="182" column="8" bodyfile="lib/CUDD/safe_mem.c" bodystart="32" bodyend="-1" declfile="include/CUDD/util.h" declline="182" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="util_8h_1a7a377e01cff8d8243569ddc8bfef959b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* popen</definition>
        <argsstring>()</argsstring>
        <name>popen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="102" column="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aea1f76217ad348e25dc0ee4d078554c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * tmpfile</definition>
        <argsstring>()</argsstring>
        <name>tmpfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="102" column="19" declfile="include/CUDD/util.h" declline="102" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a01a6dd34fa639fc5ad5a05b22407a658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pclose</definition>
        <argsstring>()</argsstring>
        <name>pclose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="103" column="12" declfile="include/CUDD/util.h" declline="103" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a23c00958edf66c39625a0d535dee57b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID_OR_INT</type>
        <definition>VOID_OR_INT abort</definition>
        <argsstring>()</argsstring>
        <name>abort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="112" column="24"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a43b6ea6be735bb828bc062c70cadeff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID_OR_INT</type>
        <definition>VOID_OR_INT exit</definition>
        <argsstring>()</argsstring>
        <name>exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="112" column="30" declfile="include/CUDD/util.h" declline="112" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a3110dcad20c2a6616d360901b94e06a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID_OR_INT</type>
        <definition>VOID_OR_INT free</definition>
        <argsstring>(void *)</argsstring>
        <name>free</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="115" column="24" declfile="include/CUDD/util.h" declline="115" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ab2f9b020b045894653b341c1c28fe41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID_OR_CHAR *</type>
        <definition>VOID_OR_CHAR* malloc</definition>
        <argsstring>()</argsstring>
        <name>malloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="116" column="25"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1af6ef63a39a975856bc39bf0f3d13b292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID_OR_CHAR *</type>
        <definition>VOID_OR_CHAR * realloc</definition>
        <argsstring>()</argsstring>
        <name>realloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="116" column="32" declfile="include/CUDD/util.h" declline="116" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aee28fd8a0e40b6d958f7d20348e45368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* getenv</definition>
        <argsstring>()</argsstring>
        <name>getenv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="118" column="15" declfile="include/CUDD/util.h" declline="118" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a6d50e2f4b997abb218cea9a87e543c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int system</definition>
        <argsstring>()</argsstring>
        <name>system</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="119" column="14" declfile="include/CUDD/util.h" declline="119" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad37d469faf1f38a3c35d1253575a513a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double atof</definition>
        <argsstring>()</argsstring>
        <name>atof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="120" column="17" declfile="include/CUDD/util.h" declline="120" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1add539a5755e4c4070b0c8ca97477fe47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* strcpy</definition>
        <argsstring>()</argsstring>
        <name>strcpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="129" column="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a4efaf3b13c65688852ff849a8394c63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strncpy</definition>
        <argsstring>()</argsstring>
        <name>strncpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="129" column="20"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ae726f8c6b65e180aacfb570a35dc8375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strcat</definition>
        <argsstring>()</argsstring>
        <name>strcat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="129" column="28"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a32dde458da69c9bcbc1a9acfdf28099b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strncat</definition>
        <argsstring>()</argsstring>
        <name>strncat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="129" column="35"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a3b960eeb937b0deb53d4a2812d342242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strerror</definition>
        <argsstring>()</argsstring>
        <name>strerror</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="129" column="43" declfile="include/CUDD/util.h" declline="129" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a4a76520d750086a0a28bd5b664d716ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* strpbrk</definition>
        <argsstring>()</argsstring>
        <name>strpbrk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="130" column="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a8bf943e1f78acc0236f9075a94765663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strtok</definition>
        <argsstring>()</argsstring>
        <name>strtok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="130" column="21"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad015a6d0966888e16a0ea0eb360a2be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strchr</definition>
        <argsstring>()</argsstring>
        <name>strchr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="130" column="28"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a306ba5968499f37e3e8017b9266eb0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strrchr</definition>
        <argsstring>()</argsstring>
        <name>strrchr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="130" column="35"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aaaaf5365ac473a2e91c3326c08d4eeb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strstr</definition>
        <argsstring>()</argsstring>
        <name>strstr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="130" column="43" declfile="include/CUDD/util.h" declline="130" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a7f0a2c38f71c3a4d57320f3f07582085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strcoll</definition>
        <argsstring>()</argsstring>
        <name>strcoll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="12"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a7fe8ca5c873ff8cee3918a70f94c1a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strxfrm</definition>
        <argsstring>()</argsstring>
        <name>strxfrm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="20"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a08bcce7a814043fd848fdc0fe52d028e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strncmp</definition>
        <argsstring>()</argsstring>
        <name>strncmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="28"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a492442620ce65db20fe7297b43cbca65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strlen</definition>
        <argsstring>()</argsstring>
        <name>strlen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="36"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1afb090ae58ff51adbf4300bef3e320264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strspn</definition>
        <argsstring>()</argsstring>
        <name>strspn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="43"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a400ca51e66dc11efb3d8ef17ced1ffa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strcspn</definition>
        <argsstring>()</argsstring>
        <name>strcspn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="131" column="50" declfile="include/CUDD/util.h" declline="131" declcolumn="50"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1afb434ca60c6699bb20fd11a71be5b0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* memmove</definition>
        <argsstring>()</argsstring>
        <name>memmove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="132" column="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a0205fb37d444c425e6e4447f2ec2bd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * memccpy</definition>
        <argsstring>()</argsstring>
        <name>memccpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="132" column="21"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a550ca98f8f3cd9b4dc549d9391f7dab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * memchr</definition>
        <argsstring>()</argsstring>
        <name>memchr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="132" column="29"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a13050899d2d81aa69b56529e7264e238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * memcpy</definition>
        <argsstring>()</argsstring>
        <name>memcpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="132" column="36"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a311babf232e543aa49200c238d683486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * memset</definition>
        <argsstring>()</argsstring>
        <name>memset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="132" column="43" declfile="include/CUDD/util.h" declline="132" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a65c3e6b23d6855c86acaf147853c82cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memcmp</definition>
        <argsstring>()</argsstring>
        <name>memcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="133" column="12"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a7e3fe9a43bbdc5abae963874b6a63e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strcmp</definition>
        <argsstring>()</argsstring>
        <name>strcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="133" column="19" declfile="include/CUDD/util.h" declline="133" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a2953fa50b9fc185d81128574151f317f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * MMalloc</definition>
        <argsstring>(long)</argsstring>
        <name>MMalloc</name>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="180" column="13" bodyfile="lib/CUDD/safe_mem.c" bodystart="51" bodyend="67" declfile="include/CUDD/util.h" declline="180" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a91fa18c33c4b7591e0479bad4f455017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MMout_of_memory</definition>
        <argsstring>(long)</argsstring>
        <name>MMout_of_memory</name>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="181" column="13" bodyfile="lib/CUDD/safe_mem.c" bodystart="41" bodyend="47" declfile="include/CUDD/util.h" declline="181" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a22a3800f4699bb89ba29dc8a5a8fdaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * MMrealloc</definition>
        <argsstring>(char *, long)</argsstring>
        <name>MMrealloc</name>
        <param>
          <type>char *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="183" column="13" bodyfile="lib/CUDD/safe_mem.c" bodystart="71" bodyend="88" declfile="include/CUDD/util.h" declline="183" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aafccfc19496a7104d4daf560555e84b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long util_cpu_time</definition>
        <argsstring>(void)</argsstring>
        <name>util_cpu_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="186" column="13" bodyfile="lib/CUDD/cpu_time.c" bodystart="34" bodyend="76" declfile="include/CUDD/util.h" declline="186" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aafc05560be11cd80d7feba8c445b6261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* util_path_search</definition>
        <argsstring>(char const *)</argsstring>
        <name>util_path_search</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="187" column="13" declfile="include/CUDD/util.h" declline="187" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1af330c0149475bb97d4990d5db42edf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* util_file_search</definition>
        <argsstring>(char const *, char *, char const *)</argsstring>
        <name>util_file_search</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="188" column="13" declfile="include/CUDD/util.h" declline="188" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad4bb306f0392528dd7e58c5af064a8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util_pipefork</definition>
        <argsstring>(char *const *, FILE **, FILE **, int *)</argsstring>
        <name>util_pipefork</name>
        <param>
          <type>char *const *</type>
        </param>
        <param>
          <type>FILE **</type>
        </param>
        <param>
          <type>FILE **</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="189" column="12" declfile="include/CUDD/util.h" declline="189" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad63a67f37c9d2cfb5bacb2e8654d3141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util_print_cpu_stats</definition>
        <argsstring>(FILE *)</argsstring>
        <name>util_print_cpu_stats</name>
        <param>
          <type>FILE *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="190" column="13" declfile="include/CUDD/util.h" declline="190" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1afda29b7ef91bd00be48062edb60ea0d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* util_print_time</definition>
        <argsstring>(unsigned long)</argsstring>
        <name>util_print_time</name>
        <param>
          <type>unsigned long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="191" column="13" declfile="include/CUDD/util.h" declline="191" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aa08e75d821a7cf8164ed37b22f956f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util_save_image</definition>
        <argsstring>(char const *, char const *)</argsstring>
        <name>util_save_image</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="192" column="12" declfile="include/CUDD/util.h" declline="192" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ae1e2057aadd8529c8d1771064cd89be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* util_strsav</definition>
        <argsstring>(char const *)</argsstring>
        <name>util_strsav</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="193" column="13" declfile="include/CUDD/util.h" declline="193" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a2e220c83e82a27e39cf2705d737ecd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* util_tilde_expand</definition>
        <argsstring>(char const *)</argsstring>
        <name>util_tilde_expand</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="194" column="13" declfile="include/CUDD/util.h" declline="194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a02747271da8ae34f0d2c4703feb7c013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util_restart</definition>
        <argsstring>(char const *, char const *, int)</argsstring>
        <name>util_restart</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="195" column="13" declfile="include/CUDD/util.h" declline="195" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a483a36453687145fd533bdb6694bad89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long getSoftDataLimit</definition>
        <argsstring>(void)</argsstring>
        <name>getSoftDataLimit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/util.h" line="198" column="22" bodyfile="lib/CUDD/datalimit.c" bodystart="35" bodyend="50" declfile="include/CUDD/util.h" declline="198" declcolumn="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>$Id:<sp/>util.h,v<sp/>1.10<sp/>2012/02/05<sp/>05:34:04<sp/>fabio<sp/>Exp<sp/>fabio<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>UTIL_INLINE<sp/>__inline__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>__GNUC__<sp/>&gt;<sp/>2<sp/>||<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>UTIL_UNUSED<sp/>__attribute__<sp/>((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>UTIL_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>UTIL_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>UTIL_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIZEOF_VOID_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZEOF_VOID_P<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIZEOF_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZEOF_INT<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIZEOF_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZEOF_LONG<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>SIZEOF_INT<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>util_ptrint;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>util_ptrint;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>USE_MM<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>choose<sp/>libmm.a<sp/>as<sp/>the<sp/>memory<sp/>allocator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>too<sp/>entrenched<sp/>to<sp/>get<sp/>away<sp/>with<sp/>changing<sp/>the<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>strsav<sp/><sp/><sp/><sp/><sp/><sp/>util_strsav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NIL(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_MM)<sp/>||<sp/>defined(MNEMOSYNE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>assumes<sp/>the<sp/>memory<sp/>manager<sp/>is<sp/>either<sp/>libmm.a<sp/>or<sp/>libmnem.a</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>libmm.a:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>allows<sp/>malloc(0)<sp/>or<sp/>realloc(obj,<sp/>0)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>catches<sp/>out<sp/>of<sp/>memory<sp/>(and<sp/>calls<sp/>MMout_of_memory())</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>catch<sp/>free(0)<sp/>and<sp/>realloc(0,<sp/>size)<sp/>in<sp/>the<sp/>macros</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>libmnem.a:</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>reports<sp/>memory<sp/>leaks</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>is<sp/>used<sp/>in<sp/>conjunction<sp/>with<sp/>the<sp/>mnemalyse<sp/>postprocessor</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MNEMOSYNE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mnemosyne.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALLOC(type,<sp/>num)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((num)<sp/>?<sp/>((type<sp/>*)<sp/>malloc(sizeof(type)<sp/>*<sp/>(num)))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>malloc(sizeof(long))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALLOC(type,<sp/>num)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>malloc(sizeof(type)<sp/>*<sp/>(num)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALLOC(type,<sp/>obj,<sp/>num)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(obj)<sp/>?<sp/>((type<sp/>*)<sp/>realloc((char<sp/>*)<sp/>obj,<sp/>sizeof(type)<sp/>*<sp/>(num)))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>malloc(sizeof(type)<sp/>*<sp/>(num)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FREE(obj)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((obj)<sp/>?<sp/>(free((char<sp/>*)<sp/>(obj)),<sp/>(obj)<sp/>=<sp/>0)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>enforce<sp/>strict<sp/>semantics<sp/>on<sp/>the<sp/>memory<sp/>allocator</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>when<sp/>in<sp/>doubt,<sp/>delete<sp/>the<sp/>&apos;#define<sp/>USE_MM&apos;<sp/>above</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALLOC(type,<sp/>num)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>MMalloc((long)<sp/>sizeof(type)<sp/>*<sp/>(long)<sp/>(num)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALLOC(type,<sp/>obj,<sp/>num)<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((type<sp/>*)<sp/>MMrealloc((char<sp/>*)<sp/>(obj),<sp/>(long)<sp/>sizeof(type)<sp/>*<sp/>(long)<sp/>(num)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FREE(obj)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((obj)<sp/>?<sp/>(free((char<sp/>*)<sp/>(obj)),<sp/>(obj)<sp/>=<sp/>0)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ultrix<sp/>(and<sp/>SABER)<sp/>have<sp/>&apos;fixed&apos;<sp/>certain<sp/>functions<sp/>which<sp/>used<sp/>to<sp/>be<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ultrix)<sp/>||<sp/>defined(SABER)<sp/>||<sp/>defined(aiws)<sp/>||<sp/>defined(hpux)<sp/>||<sp/>defined(apollo)<sp/>||<sp/>defined(__osf__)<sp/>||<sp/>defined(__SVR4)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VOID_OR_INT<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VOID_OR_CHAR<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VOID_OR_INT<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VOID_OR_CHAR<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>No<sp/>machines<sp/>seem<sp/>to<sp/>have<sp/>much<sp/>of<sp/>a<sp/>problem<sp/>with<sp/>these<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>machines<sp/>fail<sp/>to<sp/>define<sp/>some<sp/>functions<sp/>in<sp/>stdio.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__STDC__)<sp/>&amp;&amp;<sp/>!defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>FILE<sp/>*popen(),<sp/>*tmpfile();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pclose();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>most<sp/>machines<sp/>don&apos;t<sp/>give<sp/>us<sp/>a<sp/>header<sp/>file<sp/>for<sp/>these<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__STDC__)<sp/>||<sp/>defined(__cplusplus)<sp/>||<sp/>defined(ultrix))<sp/>&amp;&amp;<sp/>!defined(MNEMOSYNE)<sp/>||<sp/>defined(__SVR4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>_IBMR2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID_OR_INT<sp/>abort(),<sp/>exit();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(MNEMOSYNE)<sp/>&amp;&amp;<sp/>!defined(_IBMR2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID_OR_INT<sp/>free<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID_OR_CHAR<sp/>*malloc(),<sp/>*realloc();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getenv();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>system();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atof();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>some<sp/>call<sp/>it<sp/>strings.h,<sp/>some<sp/>call<sp/>it<sp/>string.h;<sp/>others,<sp/>also<sp/>have<sp/>memory.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__STDC__)<sp/>||<sp/>defined(__cplusplus)<sp/>||<sp/>defined(_IBMR2)<sp/>||<sp/>defined(ultrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ANSI<sp/>C<sp/>string.h<sp/>--<sp/>1/11/88<sp/>Draft<sp/>Standard<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strcpy(),<sp/>*strncpy(),<sp/>*strcat(),<sp/>*strncat(),<sp/>*strerror();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strpbrk(),<sp/>*strtok(),<sp/>*strchr(),<sp/>*strrchr(),<sp/>*strstr();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strcoll(),<sp/>strxfrm(),<sp/>strncmp(),<sp/>strlen(),<sp/>strspn(),<sp/>strcspn();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*memmove(),<sp/>*memccpy(),<sp/>*memchr(),<sp/>*memcpy(),<sp/>*memset();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memcmp(),<sp/>strcmp();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__STDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assert(ex)<sp/>{\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>(ex))<sp/>{\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>fprintf(stderr,\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Assertion<sp/>failed:<sp/>file<sp/>%s,<sp/>line<sp/>%d\n\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,\</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>&quot;ex&quot;);\</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fflush(stdout);\</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();\</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assert(ex)<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fail(why)<sp/>{\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(void)<sp/>fprintf(stderr,<sp/>&quot;Fatal<sp/>error:<sp/>file<sp/>%s,<sp/>line<sp/>%d\n%s\n&quot;</highlight><highlight class="normal">,\</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>why);\</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>fflush(stdout);\</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();\</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>lint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>putc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>correct<sp/>lint<sp/>&apos;_flsbuf&apos;<sp/>bug<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ALLOC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allow<sp/>for<sp/>lint<sp/>-h<sp/>flag<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>REALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALLOC(type,<sp/>num)<sp/><sp/><sp/><sp/>(((type<sp/>*)<sp/>0)<sp/>+<sp/>(num))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALLOC(type,<sp/>obj,<sp/>num)<sp/>((obj)<sp/>+<sp/>(num))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>arguably<sp/>do<sp/>NOT<sp/>belong<sp/>in<sp/>util.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ABS(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)<sp/>&lt;<sp/>0<sp/>?<sp/>-(a)<sp/>:<sp/>(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)<sp/>&lt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_MM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MMalloc<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MMout_of_memory<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*MMoutOfMemory)<sp/>(long);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MMrealloc<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>util_cpu_time<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*util_path_search<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*util_file_search<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>util_pipefork<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/>FILE<sp/>**,<sp/>FILE<sp/>**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>util_print_cpu_stats<sp/>(FILE<sp/>*);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*util_print_time<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>util_save_image<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*util_strsav<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*util_tilde_expand<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>util_restart<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>getSoftDataLimit<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UTIL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/CUDD/util.h"/>
  </compounddef>
</doxygen>
