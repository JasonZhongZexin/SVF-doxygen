<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_node_i_d_allocator" kind="class" language="C++" prot="public">
    <compoundname>SVF::NodeIDAllocator</compoundname>
    <includes refid="_node_i_d_allocator_8h" local="no">NodeIDAllocator.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1ac223b8eab03df7ccbbe0c37ac29f55ad" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string SVF::NodeIDAllocator::userStrategyDense</definition>
        <argsstring></argsstring>
        <name>userStrategyDense</name>
        <initializer>= &quot;dense&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Option strings as written by the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="36" column="30" bodyfile="include/Util/NodeIDAllocator.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a3147ca964f609da10f323d489669801c" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string SVF::NodeIDAllocator::userStrategyDebug</definition>
        <argsstring></argsstring>
        <name>userStrategyDebug</name>
        <initializer>= &quot;debug&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="37" column="30" bodyfile="include/Util/NodeIDAllocator.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a79ee84d7efb8abbfcd80d31d966ce20b" prot="public" static="yes" mutable="no">
        <type>const NodeID</type>
        <definition>const NodeID SVF::NodeIDAllocator::blackHoleObjectId</definition>
        <argsstring></argsstring>
        <name>blackHoleObjectId</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These nodes, and any nodes before them are assumed allocated as objects and values. For simplicity&apos;s sake, numObjects and numVals thus start at 4 (and the other counters are set appropriately). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="45" column="25" bodyfile="include/Util/NodeIDAllocator.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a6a300a5b455fe4b8bace2f1d66fb5f9d" prot="public" static="yes" mutable="no">
        <type>const NodeID</type>
        <definition>const NodeID SVF::NodeIDAllocator::constantObjectId</definition>
        <argsstring></argsstring>
        <name>constantObjectId</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="46" column="25" bodyfile="include/Util/NodeIDAllocator.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a535be344f97496d8086e2861ea6dc2ea" prot="public" static="yes" mutable="no">
        <type>const NodeID</type>
        <definition>const NodeID SVF::NodeIDAllocator::blackHolePointerId</definition>
        <argsstring></argsstring>
        <name>blackHolePointerId</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="47" column="25" bodyfile="include/Util/NodeIDAllocator.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a1e3a98be74d5dfd3b4c1b5f9c0941353" prot="public" static="yes" mutable="no">
        <type>const NodeID</type>
        <definition>const NodeID SVF::NodeIDAllocator::nullPointerId</definition>
        <argsstring></argsstring>
        <name>nullPointerId</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="48" column="25" bodyfile="include/Util/NodeIDAllocator.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a190c729a3f3f622f82cee4917946b50f" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::numObjects</definition>
        <argsstring></argsstring>
        <name>numObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These are moreso counters than amounts.</para>
<para>Number of memory objects allocated, including specials. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="82" column="12" bodyfile="include/Util/NodeIDAllocator.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a001c25f6998b8b0a9a7e5e00810e155f" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::numValues</definition>
        <argsstring></argsstring>
        <name>numValues</name>
        <briefdescription>
<para>Number of values allocated, including specials. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="84" column="12" bodyfile="include/Util/NodeIDAllocator.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a3a160f4c6e761a130b863a3df0af7f96" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::numSymbols</definition>
        <argsstring></argsstring>
        <name>numSymbols</name>
        <briefdescription>
<para>Number of explicit symbols allocated (e.g., llvm::Values), including specials. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="86" column="12" bodyfile="include/Util/NodeIDAllocator.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a8e76e0da58f0a5bdbd8118ac419cfa62" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::numNodes</definition>
        <argsstring></argsstring>
        <name>numNodes</name>
        <briefdescription>
<para>Total number of objects and values allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="88" column="12" bodyfile="include/Util/NodeIDAllocator.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228" prot="public" static="no" strong="no">
        <type></type>
        <name>Strategy</name>
        <enumvalue id="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a2c3d4f4bad7343cdd57c8bd0dbecd1e3" prot="public">
          <name>NONE</name>
          <briefdescription>
<para>Used to initialise from llvm::cl::opt. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a9df17b1222681bba5e649895deb726f0" prot="public">
          <name>DENSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allocate objects contiguously, separate from values, and vice versa. If [****...*****] is the space of unsigned integers, we allocate as, [ssssooooooo...vvvvvvv] (o = object, v = value, s = special). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a06987883653f3b0961962f2cdda3747f" prot="public">
          <name>DEBUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allocate values and objects as they come in with a single counter. GEP objects are allocated as an offset from their base (see implementation of allocateGepObjectId). The purpose of this allocation strategy is human readability. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Allocation strategy to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="19" column="5" bodyfile="include/Util/NodeIDAllocator.h" bodystart="20" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a44420802f9db288515ee09771c3edd4d" prot="private" static="no" mutable="no">
        <type>enum <ref refid="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228" kindref="member">Strategy</ref></type>
        <definition>enum Strategy SVF::NodeIDAllocator::strategy</definition>
        <argsstring></argsstring>
        <name>strategy</name>
        <briefdescription>
<para>Strategy to allocate with. Initially NONE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="88" column="12" bodyfile="include/Util/NodeIDAllocator.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_node_i_d_allocator_1a67e85749e539ea34146b197668a4ea64" prot="private" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_node_i_d_allocator" kindref="compound">NodeIDAllocator</ref> *</type>
        <definition>NodeIDAllocator * SVF::NodeIDAllocator::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Single allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="95" column="28" bodyfile="include/Util/NodeIDAllocator.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1a2bd3ca30fc9669d9a0327544bdb4557b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_node_i_d_allocator" kindref="compound">NodeIDAllocator</ref> *</type>
        <definition>NodeIDAllocator * SVF::NodeIDAllocator::get</definition>
        <argsstring>(void)</argsstring>
        <name>get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return (singleton) allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="52" column="28" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1af7952ef5667039c9be86a589419b35a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::NodeIDAllocator::unset</definition>
        <argsstring>(void)</argsstring>
        <name>unset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Deletes the (singleton) allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="55" column="17" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1a6ce6b40b8291c6378dda07d943d66e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::allocateObjectId</definition>
        <argsstring>(void)</argsstring>
        <name>allocateObjectId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate an object ID as determined by the strategy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="58" column="12" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="48" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1abaff066537f06c4891c199ebfc9624e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::allocateGepObjectId</definition>
        <argsstring>(NodeID base, u32_t offset, u32_t maxFieldLimit)</argsstring>
        <name>allocateGepObjectId</name>
        <param>
          <type>NodeID</type>
          <declname>base</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>maxFieldLimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a GEP object ID as determined by the strategy. allocateObjectId is still fine for GEP objects, but for some strategies (DEBUG, namely), GEP objects can be allocated differently (more readable, for DEBUG). Regardless, numObjects is shared; there is no special numGepObjects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="66" column="12" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="76" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1a26b5e09e10448694435f74a8b622a7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::NodeIDAllocator::allocateValueId</definition>
        <argsstring>(void)</argsstring>
        <name>allocateValueId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate a value ID as determined by the strategy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="69" column="12" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="110" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1ae42c5bb7db4d2142adc2e7e904eb36c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::NodeIDAllocator::endSymbolAllocation</definition>
        <argsstring>(void)</argsstring>
        <name>endSymbolAllocation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Notify the allocator that all symbols have had IDs allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="72" column="10" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_node_i_d_allocator_1ac8d6abc4ee27ae464f3978e4f4bdc3a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SVF::NodeIDAllocator::NodeIDAllocator</definition>
        <argsstring>(void)</argsstring>
        <name>NodeIDAllocator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Builds a node ID allocator with the strategy specified on the command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/NodeIDAllocator.h" line="76" column="5" bodyfile="lib/Util/NodeIDAllocator.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Allocates node IDs for objects and values, upon request, according to some strategy which can be user-defined. It is the job of <ref refid="class_s_v_f_1_1_symbol_table_info" kindref="compound">SymbolTableInfo</ref> to tell the <ref refid="class_s_v_f_1_1_node_i_d_allocator" kindref="compound">NodeIDAllocator</ref> when all symbols have been allocated through endSymbolAllocation. </para>
    </detaileddescription>
    <location file="include/Util/NodeIDAllocator.h" line="15" column="1" bodyfile="include/Util/NodeIDAllocator.h" bodystart="16" bodyend="96"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1abaff066537f06c4891c199ebfc9624e3" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>allocateGepObjectId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a6ce6b40b8291c6378dda07d943d66e53" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>allocateObjectId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a26b5e09e10448694435f74a8b622a7e8" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>allocateValueId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a67e85749e539ea34146b197668a4ea64" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>allocator</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a79ee84d7efb8abbfcd80d31d966ce20b" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>blackHoleObjectId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a535be344f97496d8086e2861ea6dc2ea" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>blackHolePointerId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a6a300a5b455fe4b8bace2f1d66fb5f9d" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>constantObjectId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a06987883653f3b0961962f2cdda3747f" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>DEBUG</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a9df17b1222681bba5e649895deb726f0" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>DENSE</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1ae42c5bb7db4d2142adc2e7e904eb36c7" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>endSymbolAllocation</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a2bd3ca30fc9669d9a0327544bdb4557b" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>get</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1ac8d6abc4ee27ae464f3978e4f4bdc3a6" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>NodeIDAllocator</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228a2c3d4f4bad7343cdd57c8bd0dbecd1e3" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>NONE</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a1e3a98be74d5dfd3b4c1b5f9c0941353" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>nullPointerId</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a8e76e0da58f0a5bdbd8118ac419cfa62" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>numNodes</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a190c729a3f3f622f82cee4917946b50f" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>numObjects</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a3a160f4c6e761a130b863a3df0af7f96" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>numSymbols</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a001c25f6998b8b0a9a7e5e00810e155f" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>numValues</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a8cf553cd07768aad3f3b91bf3d7c6228" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>Strategy</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a44420802f9db288515ee09771c3edd4d" prot="private" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>strategy</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1af7952ef5667039c9be86a589419b35a8" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>unset</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1a3147ca964f609da10f323d489669801c" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>userStrategyDebug</name></member>
      <member refid="class_s_v_f_1_1_node_i_d_allocator_1ac223b8eab03df7ccbbe0c37ac29f55ad" prot="public" virt="non-virtual"><scope>SVF::NodeIDAllocator</scope><name>userStrategyDense</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
