<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data" xml:lang="en-US">
<title>SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt; Class Template Reference</title>
<indexterm><primary>SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;MutablePointsToDS.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_mutable_versioned_p_t_data.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a5a2dab7bc7b1d6641da9ac8b21c9f43e"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; <emphasis role="strong">BasePTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a513bbb8f8338cad7e3ca8f36bebb4bcf"/>typedef <link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTData</link>&lt; Key, Datum, Data, VersionedKey &gt; <emphasis role="strong">BaseVersionedPTData</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ac272a3454eaa86c1cfe1c3cbf2865211"/>typedef <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">BasePTData::PTDataTy</link> <emphasis role="strong">PTDataTy</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a461e86dbc55cd07e3dcfaea656cf0051"/>typedef BasePTData::KeySet <emphasis role="strong">KeySet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1af010738c337a5777b6f3340883434683"/>typedef BaseVersionedPTData::VersionedKeySet <emphasis role="strong">VersionedKeySet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ad5b20171c380327fd93992c8a5f5cd02"/><emphasis role="strong">MutableVersionedPTData</emphasis> (bool reversePT=true, <link linkend="_class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848">PTDataTy</link> ty=PTDataTy::MutVersioned)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a3b7b4cf2be2c5c560c07fbf37eb7bbe2"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a3b7b4cf2be2c5c560c07fbf37eb7bbe2">clear</link> () override</para>

<para>Clears all points-to sets as if nothing is stored. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a1fc03ad41eed39e45073def0a5cc039f"/>virtual const Data &amp; <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a1fc03ad41eed39e45073def0a5cc039f">getPts</link> (const Key &amp;vk) override</para>

<para>Get points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a8bd59cf022c590261ad770522265538d"/>virtual const Data &amp; <emphasis role="strong">getPts</emphasis> (const VersionedKey &amp;vk) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a84556624efefac28863652a17a69cd4d"/>virtual const KeySet &amp; <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a84556624efefac28863652a17a69cd4d">getRevPts</link> (const Datum &amp;datum) override</para>

<para>Get reverse points-to set of datum. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ae3491bde317f1e6359c2d6a2658c4f18"/>virtual const VersionedKeySet &amp; <emphasis role="strong">getVersionedKeyRevPts</emphasis> (const Datum &amp;datum) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1af3baa17b1844ebfaf551cbf2c759c7fe"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1af3baa17b1844ebfaf551cbf2c759c7fe">addPts</link> (const Key &amp;k, const Datum &amp;element) override</para>

<para>Adds element to the points-to set associated with var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a39bdea088d50ae62994b5fb29940ec85"/>virtual bool <emphasis role="strong">addPts</emphasis> (const VersionedKey &amp;vk, const Datum &amp;element) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a88fe993ecc80719d3c77dd81e721b324"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a88fe993ecc80719d3c77dd81e721b324">unionPts</link> (const Key &amp;dstVar, const Key &amp;srcVar) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U pts(srcVar). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a4b0119e55f672429884e3a5262f0e213"/>virtual bool <emphasis role="strong">unionPts</emphasis> (const VersionedKey &amp;dstVar, const VersionedKey &amp;srcVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1afd1d94c485aac81642ca690e8e1e4d3c"/>virtual bool <emphasis role="strong">unionPts</emphasis> (const VersionedKey &amp;dstVar, const Key &amp;srcVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a24bf9e1d4d8da3bbef9fbb5a671af42d"/>virtual bool <emphasis role="strong">unionPts</emphasis> (const Key &amp;dstVar, const VersionedKey &amp;srcVar) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a74ce39fc0ccd52e6d05da6f561c76e9c"/>virtual bool <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a74ce39fc0ccd52e6d05da6f561c76e9c">unionPts</link> (const Key &amp;dstVar, const Data &amp;srcData) override</para>

<para>Performs pts(dstVar) = pts(dstVar) U srcData. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a5897263968acfa99c0257f9580c196e2"/>virtual bool <emphasis role="strong">unionPts</emphasis> (const VersionedKey &amp;dstVar, const Data &amp;srcData) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1af2259ec9cda00c8421d5a6fa26f526cb"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1af2259ec9cda00c8421d5a6fa26f526cb">clearPts</link> (const Key &amp;k, const Datum &amp;element) override</para>

<para>Clears element from the points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1a3d11f7bb5ec34c8bb7b7f5e0662c2372"/>virtual void <emphasis role="strong">clearPts</emphasis> (const VersionedKey &amp;vk, const Datum &amp;element) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ab77bc3cc94a18e56bbc5091b53f1c946"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ab77bc3cc94a18e56bbc5091b53f1c946">clearFullPts</link> (const Key &amp;k) override</para>

<para>Fully clears the points-to set of var. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ab5bf2dc41daf9a04fac6eac4f66a1b2f"/>virtual void <emphasis role="strong">clearFullPts</emphasis> (const VersionedKey &amp;vk) override</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1aea5eee3d5049a9c17675758f67a255d3"/>virtual void <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1aea5eee3d5049a9c17675758f67a255d3">dumpPTData</link> () override</para>

<para>Dump stored keys and points-to sets. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ab1aba1f44aab56c0474769acb03d88fc">classof</link> (const <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">MutableVersionedPTData</link>&lt; Key, Datum, Data, VersionedKey &gt; *)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1abe766d48ad33ab54b27cbf4f6fc9fdd1"/>static bool <emphasis role="strong">classof</emphasis> (const <link linkend="_class_s_v_f_1_1_p_t_data">PTData</link>&lt; Key, Datum, Data &gt; *ptd)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Datum, typename Data, typename VersionedKey&gt;
class SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</title></simplesect>


<para><link linkend="_class_s_v_f_1_1_versioned_p_t_data">VersionedPTData</link> implemented with mutable points-to set (Data). Implemented as a wrapper around two MutablePTDatas: one for Keys, one for VersionedKeys. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mutable_versioned_p_t_data_1ab1aba1f44aab56c0474769acb03d88fc"/>    <section>
    <title>classof()</title>
<indexterm><primary>classof</primary><secondary>SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</secondary></indexterm>
<indexterm><primary>SVF::MutableVersionedPTData&lt; Key, Datum, Data, VersionedKey &gt;</primary><secondary>classof</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Datum , typename Data , typename VersionedKey &gt; </computeroutput><para><computeroutput>static bool <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">SVF::MutableVersionedPTData</link>&lt; Key, Datum, Data, VersionedKey &gt;::classof (const <link linkend="_class_s_v_f_1_1_mutable_versioned_p_t_data">MutableVersionedPTData</link>&lt; Key, Datum, Data, VersionedKey &gt; * )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Methods to support type inquiry through isa, cast, and dyn_cast: </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/MutablePointsToDS.h</section>
</section>
