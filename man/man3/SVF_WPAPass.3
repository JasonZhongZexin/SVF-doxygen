.TH "SVF::WPAPass" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::WPAPass
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WPAPass\&.h>\fP
.PP
Inherits ModulePass\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAliasCheckRule\fP { \fBConservative\fP, \fBVeto\fP, \fBPrecise\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWPAPass\fP ()"
.br
.RI "Constructor needs TargetLibraryInfo to be passed to the AliasAnalysis\&. "
.ti -1c
.RI "virtual \fB~WPAPass\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "virtual void \fBgetAnalysisUsage\fP (AnalysisUsage &au) const"
.br
.RI "LLVM analysis usage\&. "
.ti -1c
.RI "virtual void * \fBgetAdjustedAnalysisPointer\fP (AnalysisID)"
.br
.RI "Get adjusted analysis for alias analysis\&. "
.ti -1c
.RI "virtual AliasResult \fBalias\fP (const MemoryLocation &LocA, const MemoryLocation &LocB)"
.br
.RI "Interface expose to users of our pointer analysis, given Location infos\&. "
.ti -1c
.RI "virtual AliasResult \fBalias\fP (const Value *V1, const Value *V2)"
.br
.RI "Interface expose to users of our pointer analysis, given Value infos\&. "
.ti -1c
.RI "virtual void \fBPrintAliasPairs\fP (\fBPointerAnalysis\fP *pta)"
.br
.RI "Print all alias pairs\&. "
.ti -1c
.RI "virtual ModRefInfo \fBgetModRefInfo\fP (const CallInst *callInst)"
.br
.RI "Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref any memory location\&. "
.ti -1c
.RI "virtual ModRefInfo \fBgetModRefInfo\fP (const CallInst *callInst, const MemoryLocation &Loc)"
.br
.RI "Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref a specific memory location, given Location infos\&. "
.ti -1c
.RI "virtual ModRefInfo \fBgetModRefInfo\fP (const CallInst *callInst, const Value *V)"
.br
.RI "Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref a specific memory location, given Value infos\&. "
.ti -1c
.RI "virtual ModRefInfo \fBgetModRefInfo\fP (const CallInst *callInst1, const CallInst *callInst2)"
.br
.RI "Interface of mod-ref analysis between two CallSite instructions\&. "
.ti -1c
.RI "virtual void \fBrunOnModule\fP (\fBSVFModule\fP *svfModule)"
.br
.RI "Run pointer analysis on \fBSVFModule\fP\&. "
.ti -1c
.RI "virtual bool \fBrunOnModule\fP (Module &module)"
.br
.RI "Run pointer analysis on LLVM module\&. "
.ti -1c
.RI "virtual StringRef \fBgetPassName\fP () const"
.br
.RI "PTA name\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static char \fBID\fP = 0"
.br
.RI "Pass ID\&. "
.in -1c
.SH "Detailed Description"
.PP 
Whole program pointer analysis\&. This class performs various pointer analysis on the given module\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSVF::WPAPass::AliasCheckRule\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIConservative \fP\fP
return MayAlias if any pta says alias 
.TP
\fB\fIVeto \fP\fP
return NoAlias if any pta says no alias 
.TP
\fB\fIPrecise \fP\fP
return alias result by the most precise pta 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "WPAPass::~WPAPass ()\fC [virtual]\fP"

.PP
Destructor\&. Destructor 
.SH "Member Function Documentation"
.PP 
.SS "AliasResult WPAPass::alias (const Value * V1, const Value * V2)\fC [virtual]\fP"

.PP
Interface expose to users of our pointer analysis, given Value infos\&. Return alias results based on our points-to/alias analysis TODO: Need to handle PartialAlias and MustAlias here\&. TODO: When this method is invoked during compiler optimizations, the IR used for pointer analysis may been changed, so some Values may not find corresponding \fBPAG\fP node\&. In this case, we only check alias between two Values if they both have \fBPAG\fP nodes\&. Otherwise, MayAlias will be returned\&.
.PP
Veto is used by default
.PP
Return NoAlias if any PTA gives NoAlias result
.PP
Return MayAlias if any PTA gives MayAlias result
.SS "virtual void SVF::WPAPass::getAnalysisUsage (AnalysisUsage & au) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
LLVM analysis usage\&. do not intend to change the IR in this pass,
.SS "ModRefInfo WPAPass::getModRefInfo (const CallInst * callInst)\fC [virtual]\fP"

.PP
Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref any memory location\&. Return mod-ref result of a CallInst 
.SS "ModRefInfo WPAPass::getModRefInfo (const CallInst * callInst, const Value * V)\fC [virtual]\fP"

.PP
Interface of mod-ref analysis to determine whether a CallSite instruction can mod or ref a specific memory location, given Value infos\&. Return mod-ref results of a CallInst to a specific memory location 
.SS "ModRefInfo WPAPass::getModRefInfo (const CallInst * callInst1, const CallInst * callInst2)\fC [virtual]\fP"

.PP
Interface of mod-ref analysis between two CallSite instructions\&. Return mod-ref result between two CallInsts 
.SS "bool WPAPass::runOnModule (Module & module)\fC [virtual]\fP"

.PP
Run pointer analysis on LLVM module\&. We start from here 
.SS "void WPAPass::runOnModule (\fBSVFModule\fP * svfModule)\fC [virtual]\fP"

.PP
Run pointer analysis on \fBSVFModule\fP\&. We start from here 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
