<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_inter_disjoint_m_r_g" xml:lang="en-US">
<title>SVF::InterDisjointMRG Class Reference</title>
<indexterm><primary>SVF::InterDisjointMRG</primary></indexterm>
<para>
<computeroutput>#include &lt;MemPartition.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::InterDisjointMRG:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_inter_disjoint_m_r_g.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_inter_disjoint_m_r_g_1a91e89081103f451945baadaea370b428"/><emphasis role="strong">InterDisjointMRG</emphasis> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *p, bool ptrOnly)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_inter_disjoint_m_r_g_1a807cf159e53c2fb2903296207185dda0">partitionMRs</link> ()</para>

<para>Partition regions. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_inter_disjoint_m_r_g_1affab79ce9b1ef9ec7bc04af8ad2954dc">getMRsForLoad</link> (<link linkend="_class_s_v_f_1_1_m_r_generator_1a98ac3bf264e6a85d172c2c4264ea908f">MRSet</link> &amp;aliasMRs, const PointsTo &amp;cpts, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Create memory regions which don&apos;t have intersections with each other in the whole program scope. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_inter_disjoint_m_r_g_1affab79ce9b1ef9ec7bc04af8ad2954dc"/>    <section>
    <title>getMRsForLoad()</title>
<indexterm><primary>getMRsForLoad</primary><secondary>SVF::InterDisjointMRG</secondary></indexterm>
<indexterm><primary>SVF::InterDisjointMRG</primary><secondary>getMRsForLoad</secondary></indexterm>
<para><computeroutput>virtual void SVF::InterDisjointMRG::getMRsForLoad (<link linkend="_class_s_v_f_1_1_m_r_generator_1a98ac3bf264e6a85d172c2c4264ea908f">MRSet</link> &amp; aliasMRs, const PointsTo &amp; cpts, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Get memory regions to be inserted at a load statement. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>cpts</entry>
                                <entry>
<para>The conditional points-to set of load statement. </para>
</entry>
                            </row>
                            <row>
                                <entry>fun</entry>
                                <entry>
<para>The function being analyzed. </para>
</entry>
                            </row>
                            <row>
                                <entry>mrs</entry>
                                <entry>
<para>Memory region set contains all possible target memory regions. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_intra_disjoint_m_r_g_1aa1395f921e2a6e2607a6887f134cb63f">SVF::IntraDisjointMRG</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_inter_disjoint_m_r_g_1a807cf159e53c2fb2903296207185dda0"/>    <section>
    <title>partitionMRs()</title>
<indexterm><primary>partitionMRs</primary><secondary>SVF::InterDisjointMRG</secondary></indexterm>
<indexterm><primary>SVF::InterDisjointMRG</primary><secondary>partitionMRs</secondary></indexterm>
<para><computeroutput>void InterDisjointMRG::partitionMRs ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Partition regions. </para>
</para>

<para>Generate disjoint cpts.</para>

<para>Create memory regions.</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_intra_disjoint_m_r_g_1a6d2434f0e3a318b89b7b9fa4f5613b64">SVF::IntraDisjointMRG</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MSSA/MemPartition.hlib/MSSA/MemPartition.cpp</section>
</section>
