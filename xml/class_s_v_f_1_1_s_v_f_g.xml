<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_s_v_f_g" kind="class" language="C++" prot="public">
    <compoundname>SVF::SVFG</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_v_f_g" prot="public" virt="non-virtual">SVF::VFG</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_g_o_p_t" prot="public" virt="non-virtual">SVF::SVFGOPT</derivedcompoundref>
    <includes refid="_s_v_f_g_8h" local="no">SVFG.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a3d04ce1429b1edf90c9c0833e3b5a4a9" prot="public" static="no">
        <type>VFGNodeIDToNodeMapTy</type>
        <definition>typedef VFGNodeIDToNodeMapTy SVF::SVFG::SVFGNodeIDToNodeMapTy</definition>
        <argsstring></argsstring>
        <name>SVFGNodeIDToNodeMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="75" column="34" bodyfile="include/Graphs/SVFG.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a2590182f3b28c7fc8b2b53c09ec4305c" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *, NodeID &gt;</type>
        <definition>typedef Map&lt;const PAGNode*, NodeID&gt; SVF::SVFG::PAGNodeToDefMapTy</definition>
        <argsstring></argsstring>
        <name>PAGNodeToDefMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="76" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1ac84d3749671f177b14749a825e36efe3" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_m_r_ver" kindref="compound">MRVer</ref> *, NodeID &gt;</type>
        <definition>typedef Map&lt;const MRVer*, NodeID&gt; SVF::SVFG::MSSAVarToDefMapTy</definition>
        <argsstring></argsstring>
        <name>MSSAVarToDefMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="77" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1aa9f520779475e4783eccc45c460e346a" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::SVFG::ActualINSVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>ActualINSVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="78" column="20" bodyfile="include/Graphs/SVFG.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a2f6ed8a9f14657abc1e2a89247a84b99" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::SVFG::ActualOUTSVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>ActualOUTSVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="79" column="20" bodyfile="include/Graphs/SVFG.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a8859409373454b6b3d1252776e169cf5" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::SVFG::FormalINSVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>FormalINSVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="80" column="20" bodyfile="include/Graphs/SVFG.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1acb7262c3b9161c77eb1b491048152fb0" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::SVFG::FormalOUTSVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>FormalOUTSVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="81" column="20" bodyfile="include/Graphs/SVFG.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a9ccf41f90af56c89f2acb59a6ca9b0dc" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, ActualINSVFGNodeSet &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*, ActualINSVFGNodeSet&gt; SVF::SVFG::CallSiteToActualINsMapTy</definition>
        <argsstring></argsstring>
        <name>CallSiteToActualINsMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="82" column="18" bodyfile="include/Graphs/SVFG.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a8c7dea646606e723e6cf5055611e43c8" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, ActualOUTSVFGNodeSet &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*, ActualOUTSVFGNodeSet&gt; SVF::SVFG::CallSiteToActualOUTsMapTy</definition>
        <argsstring></argsstring>
        <name>CallSiteToActualOUTsMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="83" column="18" bodyfile="include/Graphs/SVFG.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a2b4850c833564916c7fce46d55672038" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, FormalINSVFGNodeSet &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*, FormalINSVFGNodeSet&gt; SVF::SVFG::FunctionToFormalINsMapTy</definition>
        <argsstring></argsstring>
        <name>FunctionToFormalINsMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="84" column="18" bodyfile="include/Graphs/SVFG.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1ac4c65501e9beba5495a57dd469f78e5b" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *, FormalOUTSVFGNodeSet &gt;</type>
        <definition>typedef Map&lt;const SVFFunction*, FormalOUTSVFGNodeSet&gt; SVF::SVFG::FunctionToFormalOUTsMapTy</definition>
        <argsstring></argsstring>
        <name>FunctionToFormalOUTsMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="85" column="18" bodyfile="include/Graphs/SVFG.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1acdbe1c510273107b708935061b6c4127" prot="public" static="no">
        <type>MemSSA::MUSet</type>
        <definition>typedef MemSSA::MUSet SVF::SVFG::MUSet</definition>
        <argsstring></argsstring>
        <name>MUSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="86" column="27" bodyfile="include/Graphs/SVFG.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a8843ab4a4608f7f5f46f68ad31314c07" prot="public" static="no">
        <type>MemSSA::CHISet</type>
        <definition>typedef MemSSA::CHISet SVF::SVFG::CHISet</definition>
        <argsstring></argsstring>
        <name>CHISet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="87" column="28" bodyfile="include/Graphs/SVFG.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1aef7ee9d802934d51b3761663bdaf0c05" prot="public" static="no">
        <type>MemSSA::PHISet</type>
        <definition>typedef MemSSA::PHISet SVF::SVFG::PHISet</definition>
        <argsstring></argsstring>
        <name>PHISet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="88" column="28" bodyfile="include/Graphs/SVFG.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a7f4deffe7e13352b8c13eab110c834cc" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MemSSA::MU</ref></type>
        <definition>typedef MemSSA::MU SVF::SVFG::MU</definition>
        <argsstring></argsstring>
        <name>MU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="89" column="24" bodyfile="include/Graphs/SVFG.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a60df52c14b303562ff5d73c7836e3495" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MemSSA::CHI</ref></type>
        <definition>typedef MemSSA::CHI SVF::SVFG::CHI</definition>
        <argsstring></argsstring>
        <name>CHI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="90" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a86d4a41a881a3d2e5def103d7ba8bb2f" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_load_m_u" kindref="compound">MemSSA::LOADMU</ref></type>
        <definition>typedef MemSSA::LOADMU SVF::SVFG::LOADMU</definition>
        <argsstring></argsstring>
        <name>LOADMU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="91" column="28" bodyfile="include/Graphs/SVFG.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1ad14cdbb3f1df1f716aa03b4d39f4e52b" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_store_c_h_i" kindref="compound">MemSSA::STORECHI</ref></type>
        <definition>typedef MemSSA::STORECHI SVF::SVFG::STORECHI</definition>
        <argsstring></argsstring>
        <name>STORECHI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="92" column="30" bodyfile="include/Graphs/SVFG.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a047573d70182da351b9e3bbf66ca0056" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_ret_m_u" kindref="compound">MemSSA::RETMU</ref></type>
        <definition>typedef MemSSA::RETMU SVF::SVFG::RETMU</definition>
        <argsstring></argsstring>
        <name>RETMU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="93" column="27" bodyfile="include/Graphs/SVFG.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a101c5a8b31baf5c5613144f6e277abe9" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_entry_c_h_i" kindref="compound">MemSSA::ENTRYCHI</ref></type>
        <definition>typedef MemSSA::ENTRYCHI SVF::SVFG::ENTRYCHI</definition>
        <argsstring></argsstring>
        <name>ENTRYCHI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="94" column="30" bodyfile="include/Graphs/SVFG.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1a5f3e0fbf83621cc661d2c59800756727" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_call_c_h_i" kindref="compound">MemSSA::CALLCHI</ref></type>
        <definition>typedef MemSSA::CALLCHI SVF::SVFG::CALLCHI</definition>
        <argsstring></argsstring>
        <name>CALLCHI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="95" column="29" bodyfile="include/Graphs/SVFG.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_g_1acd9fd6597e5dedf3c14a430830c7dd08" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">MemSSA::CALLMU</ref></type>
        <definition>typedef MemSSA::CALLMU SVF::SVFG::CALLMU</definition>
        <argsstring></argsstring>
        <name>CALLMU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="96" column="28" bodyfile="include/Graphs/SVFG.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1ab2f81db3935389480baa5cb14e15e9d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SVFGBuilder</definition>
        <argsstring></argsstring>
        <name>SVFGBuilder</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_g_builder" kindref="compound">SVFGBuilder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="67" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1a93a4287b55425abc188e5f5f2de54297" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SaberSVFGBuilder</definition>
        <argsstring></argsstring>
        <name>SaberSVFGBuilder</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_saber_s_v_f_g_builder" kindref="compound">SaberSVFGBuilder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="68" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1a665c93b68f49078c281270a028d04445" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class TaintSVFGBuilder</definition>
        <argsstring></argsstring>
        <name>TaintSVFGBuilder</name>
        <param>
          <type>TaintSVFGBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="69" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1a9ccd530dc4c49b0df372a2ce95b66921" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DDASVFGBuilder</definition>
        <argsstring></argsstring>
        <name>DDASVFGBuilder</name>
        <param>
          <type>DDASVFGBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="70" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1ac0e43f4a2043538c9046f95826caa725" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MTASVFGBuilder</definition>
        <argsstring></argsstring>
        <name>MTASVFGBuilder</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder" kindref="compound">MTASVFGBuilder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="71" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_g_1a67654d252e9e93b74e35ba247048b41a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RcSvfgBuilder</definition>
        <argsstring></argsstring>
        <name>RcSvfgBuilder</name>
        <param>
          <type>RcSvfgBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="72" column="5" bodyfile="include/Graphs/SVFG.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1aafa1b445bd3578daaba8f82e517745f1" prot="protected" static="no" mutable="no">
        <type>MSSAVarToDefMapTy</type>
        <definition>MSSAVarToDefMapTy SVF::SVFG::MSSAVarToDefMap</definition>
        <argsstring></argsstring>
        <name>MSSAVarToDefMap</name>
        <briefdescription>
<para>map a memory SSA operator to its definition <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="99" column="23" bodyfile="include/Graphs/SVFG.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1af9313ebec4a52fd887169b7c6373a7d4" prot="protected" static="no" mutable="no">
        <type>CallSiteToActualINsMapTy</type>
        <definition>CallSiteToActualINsMapTy SVF::SVFG::callSiteToActualINMap</definition>
        <argsstring></argsstring>
        <name>callSiteToActualINMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="100" column="30" bodyfile="include/Graphs/SVFG.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1a39873b954b6e0eb0641f56ca4cd06ef9" prot="protected" static="no" mutable="no">
        <type>CallSiteToActualOUTsMapTy</type>
        <definition>CallSiteToActualOUTsMapTy SVF::SVFG::callSiteToActualOUTMap</definition>
        <argsstring></argsstring>
        <name>callSiteToActualOUTMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="101" column="31" bodyfile="include/Graphs/SVFG.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1ae51cd0493e4e767848b96b69045762fd" prot="protected" static="no" mutable="no">
        <type>FunctionToFormalINsMapTy</type>
        <definition>FunctionToFormalINsMapTy SVF::SVFG::funToFormalINMap</definition>
        <argsstring></argsstring>
        <name>funToFormalINMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="102" column="30" bodyfile="include/Graphs/SVFG.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1a7d58f9fe97071ec9936174689cb99301" prot="protected" static="no" mutable="no">
        <type>FunctionToFormalOUTsMapTy</type>
        <definition>FunctionToFormalOUTsMapTy SVF::SVFG::funToFormalOUTMap</definition>
        <argsstring></argsstring>
        <name>funToFormalOUTMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="103" column="31" bodyfile="include/Graphs/SVFG.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1ad5c1415f488ec4412d5457262269eff3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_g_stat" kindref="compound">SVFGStat</ref> *</type>
        <definition>SVFGStat* SVF::SVFG::stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="104" column="15" bodyfile="include/Graphs/SVFG.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1a6f07410ee34e4bf1079e3b5902c81d28" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_mem_s_s_a" kindref="compound">MemSSA</ref> *</type>
        <definition>MemSSA* SVF::SVFG::mssa</definition>
        <argsstring></argsstring>
        <name>mssa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="105" column="12" bodyfile="include/Graphs/SVFG.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_g_1a0d6cfa496e6885fe31b6b7a651fa01a8" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::SVFG::pta</definition>
        <argsstring></argsstring>
        <name>pta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="106" column="21" bodyfile="include/Graphs/SVFG.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a82a93d9b7fcf1938e3090a0826a1ca7e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Memory has been cleaned up at <ref refid="class_s_v_f_1_1_generic_graph" kindref="compound">GenericGraph</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="109" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a68965c5a9cc5136aa0b593851c60ff12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SVFG::SVFG</definition>
        <argsstring>(MemSSA *mssa, VFGK k)</argsstring>
        <name>SVFG</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_mem_s_s_a" kindref="compound">MemSSA</ref> *</type>
          <declname>mssa</declname>
          <defname>_mssa</defname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" kindref="member">VFGK</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="112" column="5" bodyfile="lib/Graphs/SVFG.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a0920e9f9896531959d74ae61013d96d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SVFG::buildSVFG</definition>
        <argsstring>()</argsstring>
        <name>buildSVFG</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1af4d2c6d2e3b316b256f860801fe3b178">buildSVFG</reimplementedby>
        <briefdescription>
<para>Start building <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Build <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> 1) build <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes a) statements for top level pointers (PAGEdges) b) operators of address-taken variables (<ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> and <ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MSSACHI</ref>) 2) connect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges a) between two statements (PAGEdges) b) between two memory SSA operators (<ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MSSAPHI</ref> <ref refid="class_s_v_f_1_1_m_s_s_a_m_u" kindref="compound">MSSAMU</ref> and <ref refid="class_s_v_f_1_1_m_s_s_a_c_h_i" kindref="compound">MSSACHI</ref>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="115" column="18" bodyfile="lib/Graphs/SVFG.cpp" bodystart="192" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1aa6e855dc13d0e2db44982722409a9d1d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addIntraIndirectVFEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, const PointsTo &amp;cpts)</argsstring>
        <name>addIntraIndirectVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
<para>Add indirect def-use edges of a memory region between two statements,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="262" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="407" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a1484cd0bf03fc336d678d71d045d44c2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addCallIndirectVFEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, const PointsTo &amp;cpts, CallSiteID csId)</argsstring>
        <name>addCallIndirectVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="263" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="449" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a4578b49f6f59367738c3aa57bdaa61c1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addRetIndirectVFEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, const PointsTo &amp;cpts, CallSiteID csId)</argsstring>
        <name>addRetIndirectVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="264" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="469" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ab8b57187140a36077d9a3dd6d0b25858" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addThreadMHPIndirectVFEdge</definition>
        <argsstring>(NodeID srcId, NodeID dstId, const PointsTo &amp;cpts)</argsstring>
        <name>addThreadMHPIndirectVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>cpts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add def-use edges of a memory region between two may-happen-in-parallel statements for multithreaded program </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="265" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="429" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a57629591037e16e57a0178d102a405f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addInterIndirectVFCallEdge</definition>
        <argsstring>(const ActualINSVFGNode *src, const FormalINSVFGNode *dst, CallSiteID csId)</argsstring>
        <name>addInterIndirectVFCallEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_i_n_s_v_f_g_node" kindref="compound">FormalINSVFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from callsite mu to function entry chi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="269" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="489" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ac9666ae7266cf1a9c0a5f7d28b39d1e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * SVFG::addInterIndirectVFRetEdge</definition>
        <argsstring>(const FormalOUTSVFGNode *src, const ActualOUTSVFGNode *dst, CallSiteID csId)</argsstring>
        <name>addInterIndirectVFRetEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node" kindref="compound">FormalOUTSVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node" kindref="compound">ActualOUTSVFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>Add inter VF edge from function exit mu to callsite chi. </para>
        </briefdescription>
        <detaileddescription>
<para>Add inter VF edge from function exit mu to callsite chi </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="272" column="14" bodyfile="lib/Graphs/SVFG.cpp" bodystart="504" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ac9ab2a95cd7a09bbe4b4aa3e6fafaf62" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::connectAInAndFIn</definition>
        <argsstring>(const ActualINSVFGNode *actualIn, const FormalINSVFGNode *formalIn, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectAInAndFIn</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1aa39900e11f5689f8bd70f3ec45865225">connectAInAndFIn</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref> *</type>
          <declname>actualIn</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_i_n_s_v_f_g_node" kindref="compound">FormalINSVFGNode</ref> *</type>
          <declname>formalIn</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes between caller and callee for indirect call site. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect actual-in and formal-in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="277" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="277" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a402dfe93b8692be453c4f76d048b690a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::connectFOutAndAOut</definition>
        <argsstring>(const FormalOUTSVFGNode *formalOut, const ActualOUTSVFGNode *actualOut, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectFOutAndAOut</name>
        <reimplementedby refid="class_s_v_f_1_1_s_v_f_g_o_p_t_1a79ace9bac7f2e075c27209ea56fc6032">connectFOutAndAOut</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node" kindref="compound">FormalOUTSVFGNode</ref> *</type>
          <declname>formalOut</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node" kindref="compound">ActualOUTSVFGNode</ref> *</type>
          <declname>actualOut</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect formal-out and actual-out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="284" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="284" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a9b133773dae3e7c613516ba16cfdfa2c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::getInterVFEdgeAtIndCSFromAPToFP</definition>
        <argsstring>(const PAGNode *cs_arg, const PAGNode *fun_arg, const CallBlockNode *, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>getInterVFEdgeAtIndCSFromAPToFP</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>cs_arg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fun_arg</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Get inter value flow edges between indirect call site and callee. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="294" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ab2b969b7d5922427622dd875e6b8fe14" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::getInterVFEdgeAtIndCSFromFRToAR</definition>
        <argsstring>(const PAGNode *fun_ret, const PAGNode *cs_ret, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>getInterVFEdgeAtIndCSFromFRToAR</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>fun_ret</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>cs_ret</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="303" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1afbaf925e1e165f75161999229fa5f782" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::getInterVFEdgeAtIndCSFromAInToFIn</definition>
        <argsstring>(ActualINSVFGNode *actualIn, const SVFFunction *callee, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>getInterVFEdgeAtIndCSFromAInToFIn</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_actual_i_n_s_v_f_g_node" kindref="compound">ActualINSVFGNode</ref> *</type>
          <declname>actualIn</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="312" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="312" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a7a88391e0c2cf8a57238dec32c2474a3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::getInterVFEdgeAtIndCSFromFOutToAOut</definition>
        <argsstring>(ActualOUTSVFGNode *actualOut, const SVFFunction *callee, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>getInterVFEdgeAtIndCSFromFOutToAOut</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node" kindref="compound">ActualOUTSVFGNode</ref> *</type>
          <declname>actualOut</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="322" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="322" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1accd1cbd26c9b194971f3107a57a0ab2e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::setDef</definition>
        <argsstring>(const PAGNode *pagNode, const SVFGNode *node)</argsstring>
        <name>setDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Given a <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>, set/get its def <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node (definition of top level pointers) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="336" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1abd917826bf50ed409a307ce00562c97d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::SVFG::getDef</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="340" column="19" bodyfile="include/Graphs/SVFG.h" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a926c79813d5cfbd16201832024b95190" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasDef</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>hasDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="344" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1aa3ebc066d376e7ed508d2bce49fa864d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::setDef</definition>
        <argsstring>(const MRVer *mvar, const SVFGNode *node)</argsstring>
        <name>setDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_r_ver" kindref="compound">MRVer</ref> *</type>
          <declname>mvar</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Given a MSSADef, set/get its def <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node (definition of address-taken variables) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="352" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="352" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a55a26b88ffe786b04184a29ae72575e7" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::SVFG::getDef</definition>
        <argsstring>(const MRVer *mvar) const</argsstring>
        <name>getDef</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_r_ver" kindref="compound">MRVer</ref> *</type>
          <declname>mvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="365" column="19" bodyfile="include/Graphs/SVFG.h" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1abddfc95cf644d0729ee29eccf95699f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::addSVFGNodesForAddrTakenVars</definition>
        <argsstring>()</argsstring>
        <name>addSVFGNodesForAddrTakenVars</name>
        <briefdescription>
<para>Create <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes for address-taken variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>set defs for address-taken vars defined at phi/chi/call create corresponding def and use nodes for address-taken vars (a.k.a MRVers) initialize memory SSA phi nodes (phi of address-taken variables)</para>
<para>initialize memory SSA entry chi nodes</para>
<para>initialize memory SSA return mu nodes</para>
<para>initialize memory SSA callsite mu nodes</para>
<para>initialize memory SSA callsite chi nodes</para>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="374" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="213" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a164a3df08fc24bacc0b97aee8b6eec38" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::connectIndirectSVFGEdges</definition>
        <argsstring>()</argsstring>
        <name>connectIndirectSVFGEdges</name>
        <briefdescription>
<para>Connect direct <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges between two <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes (value-flow of top address-taken variables) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>There&apos;s no need to connect actual out node to its definition site in the same function.</para>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="376" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="271" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a5921483cd5e1bf77b1b2bc8fb3250612" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::connectFromGlobalToProgEntry</definition>
        <argsstring>()</argsstring>
        <name>connectFromGlobalToProgEntry</name>
        <briefdescription>
<para>Connect indirect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges from global initializers (store) to main function entry. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect indirect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges from global initializers (store) to main function entry </para>
        </detaileddescription>
        <inbodydescription>
<para>connect this store to main function entry</para>
<para>add indirect value flow edge</para>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="378" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="369" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a88e1f6f77421c5274ceeb14928bdcb43" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SVFG::addSVFGNode</definition>
        <argsstring>(SVFGNode *node, ICFGNode *icfgNode)</argsstring>
        <name>addSVFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_i_c_f_g_node" kindref="compound">ICFGNode</ref> *</type>
          <declname>icfgNode</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="381" column="25" bodyfile="include/Graphs/SVFG.h" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a5936a637df12548f1f7e5f1ecfb5cd0d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::addFormalINSVFGNode</definition>
        <argsstring>(const MemSSA::ENTRYCHI *chi)</argsstring>
        <name>addFormalINSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_entry_c_h_i" kindref="compound">MemSSA::ENTRYCHI</ref> *</type>
          <declname>chi</declname>
        </param>
        <briefdescription>
<para>Add memory Function entry chi <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="387" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="387" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a56111524c2dd12c260e6efc11c463886" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::addFormalOUTSVFGNode</definition>
        <argsstring>(const MemSSA::RETMU *mu)</argsstring>
        <name>addFormalOUTSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_ret_m_u" kindref="compound">MemSSA::RETMU</ref> *</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>Add memory Function return mu <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="395" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1aeb28ef81c525e96113a9d25417660bfd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::addActualINSVFGNode</definition>
        <argsstring>(const MemSSA::CALLMU *mu)</argsstring>
        <name>addActualINSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_m_u" kindref="compound">MemSSA::CALLMU</ref> *</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>Add memory callsite mu <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="402" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="402" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a7c9675943c20c2ca42779f1cf91cb06d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::addActualOUTSVFGNode</definition>
        <argsstring>(const MemSSA::CALLCHI *chi)</argsstring>
        <name>addActualOUTSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_c_h_i" kindref="compound">MemSSA::CALLCHI</ref> *</type>
          <declname>chi</declname>
        </param>
        <briefdescription>
<para>Add memory callsite chi <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="409" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a57f191467850d66c71e1b9768e11fb57" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::addIntraMSSAPHISVFGNode</definition>
        <argsstring>(const MemSSA::PHI *phi)</argsstring>
        <name>addIntraMSSAPHISVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_m_s_s_a_p_h_i" kindref="compound">MemSSA::PHI</ref> *</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Add memory SSA PHI <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="417" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="417" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a23ca21b90feca5e7d00c9ba9f489374a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasFuncEntryChi</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>hasFuncEntryChi</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Has function for EntryCHI/RetMU/CallCHI/CallMU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="428" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a32378226c18a0b1e22271a2338a635f6" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasFuncRetMu</definition>
        <argsstring>(const SVFFunction *func) const</argsstring>
        <name>hasFuncRetMu</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="432" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a1027dcf25e914377e02885b786d00edc" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasCallSiteChi</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasCallSiteChi</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="436" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1afca91771a622290586bfa941132c322e" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasCallSiteMu</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasCallSiteMu</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="440" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="440" bodyend="443"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a710a36fc3f4ad15010c4469abcd032e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::SVFG::~SVFG</definition>
        <argsstring>()</argsstring>
        <name>~SVFG</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="119" column="13" bodyfile="include/Graphs/SVFG.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a8ba934714a7f2caf2e041002fdb66137" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_s_v_f_g_stat" kindref="compound">SVFGStat</ref> *</type>
        <definition>SVFGStat* SVF::SVFG::getStat</definition>
        <argsstring>() const</argsstring>
        <name>getStat</name>
        <briefdescription>
<para>Return statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="125" column="21" bodyfile="include/Graphs/SVFG.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1aeba803e60699f9d9422596d161d44241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::clearMSSA</definition>
        <argsstring>()</argsstring>
        <name>clearMSSA</name>
        <briefdescription>
<para>Clear MSSA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="131" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mem_s_s_a" kindref="compound">MemSSA</ref> *</type>
        <definition>MemSSA* SVF::SVFG::getMSSA</definition>
        <argsstring>() const</argsstring>
        <name>getMSSA</name>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> memory SSA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="138" column="19" bodyfile="include/Graphs/SVFG.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ab6c337637ccc9bbf0bcc7153b427f7ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::SVFG::getPTA</definition>
        <argsstring>() const</argsstring>
        <name>getPTA</name>
        <briefdescription>
<para>Get Pointer Analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="144" column="28" bodyfile="include/Graphs/SVFG.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a7ace06b6c893b31f7dec2abe54e33e11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
        <definition>SVFGNode* SVF::SVFG::getSVFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getSVFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="150" column="21" bodyfile="include/Graphs/SVFG.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a1b9d1ad76785ae0eb07979aa75325640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasSVFGNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>hasSVFGNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Whether has the SVFGNode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="156" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a60271ab47e0736f515a2267fd5c38b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge* SVF::SVFG::getSVFGEdge</definition>
        <argsstring>(const SVFGNode *src, const SVFGNode *dst, SVFGEdge::VFGEdgeK kind)</argsstring>
        <name>getSVFGEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge_1a156ae6a8b3a033f505c18c6b162e7cf5" kindref="member">SVFGEdge::VFGEdgeK</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge according to src and dst. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="162" column="21" bodyfile="include/Graphs/SVFG.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1af3bb18f904512cd6f450853666810229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::getInterVFEdgesForIndirectCallSite</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>getInterVFEdgesForIndirectCallSite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
          <defname>callBlockNode</defname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Get all inter value flow edges of a indirect call site. </para>
        </briefdescription>
        <detaileddescription>
<para>Get all inter value flow edges at this indirect call site, including call and return edges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="168" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="528" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a5fdaddc52e7342b834d76d64c1a1e498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::dump</definition>
        <argsstring>(const std::string &amp;file, bool simple=false)</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dump graph into dot file. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="171" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="520" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a0cebc2ba5ae81a6d45b224a4f94fc8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SVFG::connectCallerAndCallee</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee, SVFGEdgeSetTy &amp;edges)</argsstring>
        <name>connectCallerAndCallee</name>
        <reimplements refid="class_s_v_f_1_1_v_f_g_1aa1e09df7b3724bf18e450b16735998ab">connectCallerAndCallee</reimplements>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>SVFGEdgeSetTy &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> nodes between caller and callee for indirect call site. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect actual params/return to formal params/return for top-level variables. Also connect indirect actual in/out and formal in/out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="174" column="18" bodyfile="lib/Graphs/SVFG.cpp" bodystart="602" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a8e7a945f4266e8dc7dcfff2ad6494bfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
        <definition>const SVFGNode* SVF::SVFG::getDefSVFGNode</definition>
        <argsstring>(const PAGNode *pagNode) const</argsstring>
        <name>getDefSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref> *</type>
          <declname>pagNode</declname>
        </param>
        <briefdescription>
<para>Given a pagNode, return its definition site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="177" column="27" bodyfile="include/Graphs/SVFG.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1adc9fbb4553472b238d6c3bb5062279cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SVFG::performStat</definition>
        <argsstring>()</argsstring>
        <name>performStat</name>
        <briefdescription>
<para>Perform statistics. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform Statistics </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="183" column="10" bodyfile="lib/Graphs/SVFG.cpp" bodystart="702" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1afec2a195b5e367ec0d3f292168d10811" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasActualINSVFGNodes</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasActualINSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Has a SVFGNode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="187" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1abc41243e27c4543ad50b6649839a940c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasActualOUTSVFGNodes</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasActualOUTSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="192" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a65f28035e0fa5bebf76d28612b2f8ba8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasFormalINSVFGNodes</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>hasFormalINSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="197" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a1f8c60ad57bf473e0186b794d666b5c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::hasFormalOUTSVFGNodes</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>hasFormalOUTSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="202" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ab767c329e7fccf9efe16818515199d65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ActualINSVFGNodeSet &amp;</type>
        <definition>ActualINSVFGNodeSet&amp; SVF::SVFG::getActualINSVFGNodes</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>getActualINSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get SVFGNode set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="210" column="32" bodyfile="include/Graphs/SVFG.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1af0c86a9e83a1f2427dd8e80287be37ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ActualOUTSVFGNodeSet &amp;</type>
        <definition>ActualOUTSVFGNodeSet&amp; SVF::SVFG::getActualOUTSVFGNodes</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>getActualOUTSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="215" column="33" bodyfile="include/Graphs/SVFG.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a9d0714075d6071c26d26cf16c4dec7c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FormalINSVFGNodeSet &amp;</type>
        <definition>FormalINSVFGNodeSet&amp; SVF::SVFG::getFormalINSVFGNodes</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFormalINSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="220" column="32" bodyfile="include/Graphs/SVFG.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a287c337697eed7d92889bca0a0e370d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FormalOUTSVFGNodeSet &amp;</type>
        <definition>FormalOUTSVFGNodeSet&amp; SVF::SVFG::getFormalOUTSVFGNodes</definition>
        <argsstring>(const SVFFunction *fun)</argsstring>
        <name>getFormalOUTSVFGNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="225" column="33" bodyfile="include/Graphs/SVFG.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ae2cff3c963136f474fac0a66aa8cff7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
        <definition>const SVFFunction * SVFG::isFunEntrySVFGNode</definition>
        <argsstring>(const SVFGNode *node) const</argsstring>
        <name>isFunEntrySVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether a node is function entry SVFGNode. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether this is an function entry SVFGNode (formal parameter, formal In) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="232" column="23" bodyfile="lib/Graphs/SVFG.cpp" bodystart="650" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ac75b83bdf3bcfecaae579716ab33dd61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
        <definition>const CallBlockNode * SVFG::isCallSiteRetSVFGNode</definition>
        <argsstring>(const SVFGNode *node) const</argsstring>
        <name>isCallSiteRetSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether a node is callsite return SVFGNode. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether this is an callsite return SVFGNode (actual return, actual out) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="235" column="25" bodyfile="lib/Graphs/SVFG.cpp" bodystart="676" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a931d8b82e10a54d68c68cf6bd80264be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::removeSVFGEdge</definition>
        <argsstring>(SVFGEdge *edge)</argsstring>
        <name>removeSVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="238" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a700c5fc6c1cb4136e55196fe3d393b8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SVFG::removeSVFGNode</definition>
        <argsstring>(SVFGNode *node)</argsstring>
        <name>removeSVFGNode</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a SVFGNode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="243" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1a67750c461e3543f6b75d2dd510d67297" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFG::addSVFGEdge</definition>
        <argsstring>(SVFGEdge *edge)</argsstring>
        <name>addSVFGEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="249" column="17" bodyfile="include/Graphs/SVFG.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_g_1ac965abfbe9bdc872f98b36a171a7b5aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SVFG::getSVFGNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getSVFGNodeNum</name>
        <briefdescription>
<para>Return total <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> node number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/SVFG.h" line="255" column="18" bodyfile="include/Graphs/SVFG.h" bodystart="255" bodyend="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Sparse value flow graph Each node stands for a definition, each edge stands for value flow relations </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>SVF::SVFGOPT</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_o_p_t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="20">
        <label>SVF::MRGenerator</label>
        <link refid="class_s_v_f_1_1_m_r_generator"/>
      </node>
      <node id="14">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="5">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="6">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="9">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="15">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="17">
        <label>SVF::MemSSA</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a"/>
        <childnode refid="18" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>mrGen</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mssa</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>SVF::MemSSAStat</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a_stat"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="12">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="8">
        <label>SVF::SVFGStat</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_stat"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="2">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="10">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="11" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/SVFG.h" line="65" column="1" bodyfile="include/Graphs/SVFG.h" bodystart="66" bodyend="445"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa9f520779475e4783eccc45c460e346a" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>ActualINSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2f6ed8a9f14657abc1e2a89247a84b99" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>ActualOUTSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aeb28ef81c525e96113a9d25417660bfd" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addActualINSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7c9675943c20c2ca42779f1cf91cb06d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addActualOUTSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0fabca3c0f9bebe23f66a914dbb99e39" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a71022c8953e89e21b017936286f12251" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7b0d533f3ccce8fc64deae6077f3d959" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addAddrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9f0a280c43a82cb7e01ee8e887a84ad1" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa01f63b17acdd52122a7f1ade329ccea" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addCallEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1484cd0bf03fc336d678d71d045d44c2" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addCallIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a424126e80453d641a7d51aa481a4c843" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afd664fad8aec173f4ed6c4aa588e5c46" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addCopyVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5936a637df12548f1f7e5f1ecfb5cd0d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addFormalINSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a56111524c2dd12c260e6efc11c463886" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addFormalOUTSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1afdb1560eecf692fb646d412dc760088d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aae3bddc73e39d96fcc97d56ea3dec373" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a51b3b232ddda0656bfe0c7d9527b4a84" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addGepVFGNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6fd24c001a6daedf591974ba27140461" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a185ed4079babc0e0f72c4bf223342ee2" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterEdgeFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abd05b599b383c759455aff99963b7b41" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a4ac1cd5f79c9e33ae599f7eb942a6e01" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterEdgeFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a57629591037e16e57a0178d102a405f2" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterIndirectVFCallEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac9666ae7266cf1a9c0a5f7d28b39d1e9" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addInterIndirectVFRetEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3c97d77bc0348471d6c098d5655f15b2" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addIntraDirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa6e855dc13d0e2db44982722409a9d1d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addIntraIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a57f191467850d66c71e1b9768e11fb57" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addIntraMSSAPHISVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a85dc35e83a5699382ead67728e94273c" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adbd7966d18ab50da5a485ba6e043ba61" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addLoadVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a59bc855eb8591d88e0898e14d4f4b607" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addNullPtrVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27ac8d60de7be75e831b4a28f8f8f1d2" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addRetEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a4578b49f6f59367738c3aa57bdaa61c1" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addRetIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6d2a20830533ee40a5757e58e127f927" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa21ad616306c111b77fb3ec8f16b19be" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addStoreVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a67750c461e3543f6b75d2dd510d67297" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a88e1f6f77421c5274ceeb14928bdcb43" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>addSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abddfc95cf644d0729ee29eccf95699f1" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addSVFGNodesForAddrTakenVars</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab8b57187140a36077d9a3dd6d0b25858" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addThreadMHPIndirectVFEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aaeefa7a696350f6573510b670babbe4e" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a84cf5facb15e1d598c2527fba0c7634d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>addVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab1f4c2765af027e903634d5262aea80b" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addVFGInterEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad8c76cdb73541eed5aa1c2ba9de60383" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>addVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3544cc0380964f238c964a0e7b417862" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>addVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a0920e9f9896531959d74ae61013d96d6" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>buildSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5f3e0fbf83621cc661d2c59800756727" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CALLCHI</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c8cf98b652b5eb97d22e2636576f92f" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>callgraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acd9fd6597e5dedf3c14a430830c7dd08" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CALLMU</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade3f735b3c7b1a53cab3d67cd9f7b874" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CallPESet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af9313ebec4a52fd887169b7c6373a7d4" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>callSiteToActualINMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9ccf41f90af56c89f2acb59a6ca9b0dc" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CallSiteToActualINsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a39873b954b6e0eb0641f56ca4cd06ef9" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>callSiteToActualOUTMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8c7dea646606e723e6cf5055611e43c8" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CallSiteToActualOUTsMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43b0c126c2e32cb3d286a78b14e09a96" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>checkIntraEdgeParents</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a60df52c14b303562ff5d73c7836e3495" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8843ab4a4608f7f5f46f68ad31314c07" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>CHISet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aeba803e60699f9d9422596d161d44241" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>clearMSSA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac9ab2a95cd7a09bbe4b4aa3e6fafaf62" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>connectAInAndFIn</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acbc1f5ae3b9016b1ce97314a2b8b54c0" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>connectAParamAndFParam</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a0cebc2ba5ae81a6d45b224a4f94fc8b4" prot="public" virt="virtual"><scope>SVF::SVFG</scope><name>connectCallerAndCallee</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1adedaba0713164e10ce6273b2947535e0" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>connectDirectVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a402dfe93b8692be453c4f76d048b690a" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>connectFOutAndAOut</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab4e8ab307ad6beb46812a60ebd31ae3b" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>connectFRetAndARet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5921483cd5e1bf77b1b2bc8fb3250612" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>connectFromGlobalToProgEntry</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a164a3df08fc24bacc0b97aee8b6eec38" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>connectIndirectSVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a225a91c04afac6a8fe198e9860890a52" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9ccd530dc4c49b0df372a2ce95b66921" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>DDASVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a82a93d9b7fcf1938e3090a0826a1ca7e" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a5fdaddc52e7342b834d76d64c1a1e498" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ae92915ff0535e22f9239fc2a0c7f0265" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>dumpVFG</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a101c5a8b31baf5c5613144f6e277abe9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>ENTRYCHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8859409373454b6b3d1252776e169cf5" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>FormalINSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acb7262c3b9161c77eb1b491048152fb0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>FormalOUTSVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2b4850c833564916c7fce46d55672038" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>FunctionToFormalINsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac4c65501e9beba5495a57dd469f78e5b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>FunctionToFormalOUTsMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ae51cd0493e4e767848b96b69045762fd" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>funToFormalINMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7d58f9fe97071ec9936174689cb99301" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>funToFormalOUTMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a99ae86d16ffe69bff9d52de769d049" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>funToVFGNodesMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63218978f65ab91ae21bc24c882a716" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>FunToVFGNodesMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab767c329e7fccf9efe16818515199d65" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getActualINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af0c86a9e83a1f2427dd8e80287be37ed" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getActualOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a01b8694a5ab7acf8df0213225550791b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getActualParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b072e8e45899b89da0a466140563c38" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getActualRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a27bd4d5ba75d65056d77882869b0c64d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getBinaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1693ccdb6c1b57418316c29cde05cad2" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af04068b6f6beff961f815cc6eae7f5b0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getCallSite</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9bc8e7ee74b652ed7708e95c16a63728" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getCallSiteID</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9215c1d7f1152967f0731057a085e793" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getCmpVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abd917826bf50ed409a307ce00562c97d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>getDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a55a26b88ffe786b04184a29ae72575e7" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>getDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8e7a945f4266e8dc7dcfff2ad6494bfb" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getDefSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad28caacede7ab7f3a6676e37655ee84e" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getDefVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1af44b5295e0a6639f15c969abe78fe688" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9d0714075d6071c26d26cf16c4dec7c5" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getFormalINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a287c337697eed7d92889bca0a0e370d7" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getFormalOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a75eb519e4f89a116db98fccb263af4d6" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getFormalParmVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab7ba9d179504165f277d347a7cb9f5d8" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getFormalRetVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aff291586a4b0c28a6939577d39de5d0a" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getGlobalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afbaf925e1e165f75161999229fa5f782" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>getInterVFEdgeAtIndCSFromAInToFIn</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a9b133773dae3e7c613516ba16cfdfa2c" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>getInterVFEdgeAtIndCSFromAPToFP</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7a88391e0c2cf8a57238dec32c2474a3" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>getInterVFEdgeAtIndCSFromFOutToAOut</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab2b969b7d5922427622dd875e6b8fe14" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>getInterVFEdgeAtIndCSFromFRToAR</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1af3bb18f904512cd6f450853666810229" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getInterVFEdgesForIndirectCallSite</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a688c0cc4a67c7cd9afbef2f0c264c85b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getIntraPHIVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad63c3c11162ba107a6338fb24f9018d7" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1fff5a365e5aa2d99f07f7f64cc35fac" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getLHSTopLevPtr</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getMSSA</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a37239391028cd313eab7110626444682" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>getPAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab6c337637ccc9bbf0bcc7153b427f7ca" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getPTA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a8ba934714a7f2caf2e041002fdb66137" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a32b1586d326fbe47080bd1fa2d3270e6" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getStmtVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a60271ab47e0736f515a2267fd5c38b09" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7ace06b6c893b31f7dec2abe54e33e11" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac965abfbe9bdc872f98b36a171a7b5aa" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getSVFGNodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a1ba67eb17437a1a47c230614c1e3d9fd" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getUnaryOPVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a09e1c7bd4ebda1ad9966fb89e26c1a48" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a915fa50effaeea10716b86528b15c6dc" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a5166be2c1231a93c9b9ce5f272797b94" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getVFGNodeBegin</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28f2bdcbbc0bab00e93df62ea11647a2" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getVFGNodeEnd</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a18ec674e8ab0285ec086df87e5c591c9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>getVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6c3daf2777cc5f76ce07241f803720f3" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>globalVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a113185086912213257b04daa4590bf13" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>GlobalVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afec2a195b5e367ec0d3f292168d10811" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasActualINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1abc41243e27c4543ad50b6649839a940c" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasActualOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a88f6468b9b43bbb06ef757d884580a50" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasBlackHoleConstObjAddrAsDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1027dcf25e914377e02885b786d00edc" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasCallSiteChi</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1afca91771a622290586bfa941132c322e" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasCallSiteMu</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a926c79813d5cfbd16201832024b95190" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a65f28035e0fa5bebf76d28612b2f8ba8" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasFormalINSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1f8c60ad57bf473e0186b794d666b5c2" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasFormalOUTSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a23ca21b90feca5e7d00c9ba9f489374a" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasFuncEntryChi</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a32378226c18a0b1e22271a2338a635f6" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasFuncRetMu</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad86631f70bd702b5635bdbeab7d884b9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasInterVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac34c4529229404617c346f81cc6c141f" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasIntraVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a1b9d1ad76785ae0eb07979aa75325640" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aead3b463d9aa2fae5845d97896bd18ba" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasThreadVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a30eb9d717ad5bc8a9109a7bdef38f4a1" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a76af43e28630eb56a1aa5971f516d43d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>hasVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac75b83bdf3bcfecaae579716ab33dd61" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>isCallSiteRetSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ae2cff3c963136f474fac0a66aa8cff7b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>isFunEntrySVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8994194bca2edfd9528880390de795ab" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>isFunEntryVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0b71873131a63eb6ee47ed2f66e3154a" prot="protected" virt="virtual"><scope>SVF::SVFG</scope><name>isInterestedPAGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8ddf15d89a1b11a7f7720b671f4f0295" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>isPhiCopyEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a268ec1495cbe4adb51fa50d28a4cba3d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>isPtrOnlySVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a241d0489bf0315460e2b07db87e7847c" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3867c591a231bad0aa2e6ab7c095a42f" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>kind</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a86d4a41a881a3d2e5def103d7ba8bb2f" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>LOADMU</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a6f07410ee34e4bf1079e3b5902c81d28" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>mssa</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aafa1b445bd3578daaba8f82e517745f1" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>MSSAVarToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac84d3749671f177b14749a825e36efe3" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>MSSAVarToDefMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ac0e43f4a2043538c9046f95826caa725" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>MTASVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a7f4deffe7e13352b8c13eab110c834cc" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>MU</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1acdbe1c510273107b708935061b6c4127" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>MUSet</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad49dfa7d8b1abaa2efebfdcf461a36b0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>ORIGSVFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad4f5debd234a444516c3a406c464795c" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ade9d05bb026081e9a2c839dd2c56eab9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a462fe6eefc55a436f90f91adeb34726f" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGEdgeToStmtVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab37b067a59b52c472a284eabbeba43ff" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGEdgeToStmtVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab12de81e2912f06551ca7a6693f5046b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a8b256a40e690f31b7a56308d55bad45a" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToActualParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abec730a1ec61532cd164f3d42aa107b0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToActualParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a28c5f7e331a437e09682b972769acf66" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToActualRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a999654aa377639db5c1e40f603e655a7" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToActualRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0f554fd778b338cbd7e4272eaefc96f6" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToBinaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a7cefa553955e208d6eb4fcd01ed3c383" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToBinaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9a16c7a7b0df273c1dcbe6ba3aef8fde" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToCmpVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a9c2446f54d3738b6c0e65632a1200ba0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToCmpVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac89b3917ed73ac70aac6205af8f7a4fe" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToDefMap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a2590182f3b28c7fc8b2b53c09ec4305c" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToDefMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ad014bc47ceba578c368da19e2d86b8f8" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToFormalParmMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a6eb72d2fe080def018d09604fe3affcf" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToFormalParmMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a190a59a119215dbb2556735ba3213a2a" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToFormalRetMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a52dac90d700a2377b657ec34d3ad2241" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToFormalRetMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a598bc7a6863a6eccc3e089b63e9add17" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToIntraPHIVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeed3eca629b10554f40b1d2b478580d4" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToPHIVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac7083aa233d8e3820d6eb8e922f0c051" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToUnaryOPVFGNodeMap</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acfcd84ac6bedde4e7e74abdeb9233474" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PAGNodeToUnaryOPVFGNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1adc9fbb4553472b238d6c3bb5062279cb" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>performStat</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aef7ee9d802934d51b3761663bdaf0c05" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PHISet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a0d6cfa496e6885fe31b6b7a651fa01a8" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>pta</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6ad803e81268c1464f74da7add938e0aef" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>PTRONLYSVFGK</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a67654d252e9e93b74e35ba247048b41a" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>RcSvfgBuilder</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a931d8b82e10a54d68c68cf6bd80264be" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>removeSVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a700c5fc6c1cb4136e55196fe3d393b8b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>removeSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aeb24b155fe31813b2e6dc0564f55738a" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>removeVFGEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a122aa5ad874170ef644cee8705f1ef3e" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>removeVFGNode</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a047573d70182da351b9e3bbf66ca0056" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>RETMU</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1abf966182c28f0521dcd161aa299e453d" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>RetPESet</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a93a4287b55425abc188e5f5f2de54297" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>SaberSVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1accd1cbd26c9b194971f3107a57a0ab2e" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>setDef</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1aa3ebc066d376e7ed508d2bce49fa864d" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>setDef</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1aa70b4c48dc9bb7903bb7f5b485ccd1f4" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>setDumpVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ad5c1415f488ec4412d5457262269eff3" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ad14cdbb3f1df1f716aa03b4d39f4e52b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>STORECHI</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a68965c5a9cc5136aa0b593851c60ff12" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>SVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1ab2f81db3935389480baa5cb14e15e9d7" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>SVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac97ef8c479556f9ca2c40cd4d8a18694" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>SVFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a3d04ce1429b1edf90c9c0833e3b5a4a9" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>SVFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a665c93b68f49078c281270a028d04445" prot="private" virt="non-virtual"><scope>SVF::SVFG</scope><name>TaintSVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1acb181d4f9faa40578c80e2018e2742b8" prot="protected" virt="non-virtual"><scope>SVF::SVFG</scope><name>totalVFGNode</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0c0a7c8f0bd27bc9e88ce54c0809b11b" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3a6eea6d7256eda34e13075c949802d1" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a0bdac7337a393ad2e21a33ec1978ca3f" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGK</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1ab2abe2ba4ac9e3e1d326d042d35acbc0" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGNodeIDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a3037ca34a555ebdb4fbf0e86291dc4ea" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGNodeIter</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a43f4002b0beb00ed2026f7edd9ebbb1c" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGNodes</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a03d388eec513f713f5e0d06f920168db" prot="public" virt="non-virtual"><scope>SVF::SVFG</scope><name>VFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::SVFG</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_1a710a36fc3f4ad15010c4469abcd032e5" prot="public" virt="virtual"><scope>SVF::SVFG</scope><name>~SVFG</name></member>
      <member refid="class_s_v_f_1_1_v_f_g_1a66f439ffebda7a81925514b77199154b" prot="public" virt="virtual"><scope>SVF::SVFG</scope><name>~VFG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
