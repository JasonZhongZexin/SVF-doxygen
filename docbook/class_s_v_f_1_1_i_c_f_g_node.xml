<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_i_c_f_g_node" xml:lang="en-US">
<title>SVF::ICFGNode Class Reference</title>
<indexterm><primary>SVF::ICFGNode</primary></indexterm>
<para>Inheritance diagram for SVF::ICFGNode:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_i_c_f_g_node.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1a74f598c1c86b023680bb2685aa8ab376">ICFGNodeK</link> { 
<emphasis role="strong">IntraBlock</emphasis>
, <emphasis role="strong">FunEntryBlock</emphasis>
, <emphasis role="strong">FunExitBlock</emphasis>
, <emphasis role="strong">FunCallBlock</emphasis>
, 
<emphasis role="strong">FunRetBlock</emphasis>
, <emphasis role="strong">GlobalBlock</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a5a148eccec266a67e4ff5364d7268fff"/>typedef ICFGEdge::ICFGEdgeSetTy::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ac16c5a3227a44d3b9f7c3209156d9df2"/>typedef ICFGEdge::ICFGEdgeSetTy::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ab1a4b4a8dc600ca375d9f5adbd2a5b59"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_call_p_e">CallPE</link> * &gt; <emphasis role="strong">CallPESet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a2c39225f7b5ca0c392ea7afc3cec1fdb"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_ret_p_e">RetPE</link> * &gt; <emphasis role="strong">RetPESet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a53a4a33b8ea241f46b37111905a48169"/>typedef std::list&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * &gt; <emphasis role="strong">VFGNodeList</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a31df97cc8bea7de78c99fcef820e3a96"/>typedef std::list&lt; const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> * &gt; <emphasis role="strong">PAGEdgeList</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ae6fe836e269ac36f14b2d2b1499a11e6"/><link linkend="_class_s_v_f_1_1_i_c_f_g_node_1ae6fe836e269ac36f14b2d2b1499a11e6">ICFGNode</link> (NodeID i, <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1a74f598c1c86b023680bb2685aa8ab376">ICFGNodeK</link> k)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ae526280cca2d6cbb2868c80461bc16da"/>virtual const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1ae526280cca2d6cbb2868c80461bc16da">getFun</link> () const</para>

<para>Return the function of this <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ac1689701c75e04481e2ae2f4482551c4"/>virtual const BasicBlock * <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1ac1689701c75e04481e2ae2f4482551c4">getBB</link> () const</para>

<para>Return the function of this <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1af1b6fd9ea200ab0ff51d48a4872c921a"/>virtual const std::string <emphasis role="strong">toString</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1aff18898b9bbd85d08b00d64d48eea6a5">addVFGNode</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> *vfgNode)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1abcc53637a634f7ec92b9c7861b941601"/>const VFGNodeList &amp; <emphasis role="strong">getVFGNodes</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1aea3e2191d945c2069079db7ff3218ba1">addPAGEdge</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *edge)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a9d195144cc118279695880625615d8ad"/>const PAGEdgeList &amp; <emphasis role="strong">getPAGEdges</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a03587dbd558d8fffe25307b42e3195be"/>const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * <emphasis role="strong">fun</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ad3c5171fed4e28cfd35c1a6fb9697005"/>const BasicBlock * <emphasis role="strong">bb</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a57f9be13188a6cd53b30489f791e40d3"/>VFGNodeList <emphasis role="strong">VFGNodes</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1ab4c08610a97e122bac840e602cbb1cbb"/>PAGEdgeList <emphasis role="strong">pagEdges</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a19844bff2f6a0e90217c7a2ce9bb5184"/><link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1a19844bff2f6a0e90217c7a2ce9bb5184">operator&lt;&lt;</link> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;o, const <link linkend="_class_s_v_f_1_1_i_c_f_g_node">ICFGNode</link> &amp;node)</para>

<para>Overloading operator &lt;&lt; for dumping <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node ID. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1a74f598c1c86b023680bb2685aa8ab376"/>    <section>
    <title>ICFGNodeK</title>
<indexterm><primary>ICFGNodeK</primary><secondary>SVF::ICFGNode</secondary></indexterm>
<indexterm><primary>SVF::ICFGNode</primary><secondary>ICFGNodeK</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_i_c_f_g_node_1a74f598c1c86b023680bb2685aa8ab376">SVF::ICFGNode::ICFGNodeK</link></computeroutput></para>
<para>22 kinds of <link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> node Gep represents offset edge for field sensitivity </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1aea3e2191d945c2069079db7ff3218ba1"/>    <section>
    <title>addPAGEdge()</title>
<indexterm><primary>addPAGEdge</primary><secondary>SVF::ICFGNode</secondary></indexterm>
<indexterm><primary>SVF::ICFGNode</primary><secondary>addPAGEdge</secondary></indexterm>
<para><computeroutput>void SVF::ICFGNode::addPAGEdge (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> * edge)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Set/Get methods of VFGNodes </para>
    </section><anchor xml:id="_class_s_v_f_1_1_i_c_f_g_node_1aff18898b9bbd85d08b00d64d48eea6a5"/>    <section>
    <title>addVFGNode()</title>
<indexterm><primary>addVFGNode</primary><secondary>SVF::ICFGNode</secondary></indexterm>
<indexterm><primary>SVF::ICFGNode</primary><secondary>addVFGNode</secondary></indexterm>
<para><computeroutput>void SVF::ICFGNode::addVFGNode (const <link linkend="_class_s_v_f_1_1_v_f_g_node">VFGNode</link> * vfgNode)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Set/Get methods of VFGNodes </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/ICFGNode.hlib/Graphs/ICFG.cpp</section>
</section>
