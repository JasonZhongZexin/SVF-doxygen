<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_p_t_a_stat" xml:lang="en-US">
<title>SVF::PTAStat Class Reference</title>
<indexterm><primary>SVF::PTAStat</primary></indexterm>
<para>
<computeroutput>#include &lt;PTAStat.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::PTAStat:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_p_t_a_stat.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a7e8f9f9c1662822f3f8bd016db84e1e6"/>typedef Map&lt; const char *, u32_t &gt; <emphasis role="strong">NUMStatMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a28f304e7095f3843ca4cc017bc1f7b10"/>typedef Map&lt; const char *, double &gt; <emphasis role="strong">TIMEStatMap</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ac9b65b591200c16c420fbd26710b448f"/><emphasis role="strong">PTAStat</emphasis> (<link linkend="_class_s_v_f_1_1_pointer_analysis">PointerAnalysis</link> *p)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a5524ff7901659f56e9de343992be8f3b"/>virtual void <emphasis role="strong">startClk</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1afe854f7416ea408104721a083ee9fee0"/>virtual void <emphasis role="strong">endClk</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1acfed70588cf921694db35990ec3c7497"/>virtual void <emphasis role="strong">performStat</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aa5f455bfa79743b8e263431593d29bbf"/>virtual void <emphasis role="strong">printStat</emphasis> (string str=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1adef061d4454a1b1fb46efa4013d9a956"/>virtual void <emphasis role="strong">performStatPerQuery</emphasis> (NodeID)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a7ce0630cfe41448bec002f03a176175d"/>virtual void <emphasis role="strong">printStatPerQuery</emphasis> (NodeID, const PointsTo &amp;)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a1772bc87370b5625f71edd4476277064"/>virtual void <emphasis role="strong">callgraphStat</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a4ddc0ea34909863ca339fcbba2eef278"/>static void <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a4ddc0ea34909863ca339fcbba2eef278">setMarkedClocksOnly</link> (void)</para>

<para>Sets setMarkedClocksOnly through MarkedClocksOnly in PTAStat.cpp. </para>
</listitem>
            <listitem><para>static double <link linkend="_class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4">getClk</link> (bool mark=false)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1afa718535839a939e51afc0f8c1fbdac6"/>NUMStatMap <emphasis role="strong">generalNumMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1afdb975520329be0c33cc7bdd51ba7031"/>NUMStatMap <emphasis role="strong">PTNumStatMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a3724756ac0527ba3d199be32e38c6337"/>TIMEStatMap <emphasis role="strong">timeStatMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a5b4095f427c9c7b9ec0db497ba33baea"/>NodeBS <emphasis role="strong">localVarInRecursion</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a59e0fe6fa506f1cf319b5acaf9d28be9"/>double <emphasis role="strong">startTime</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a267ba4aac2e7ceb65f008f9486d3d9f7"/>double <emphasis role="strong">endTime</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a25001a6d794d91056f37d954d9660910">TotalAnalysisTime</link> = &quot;TotalTime&quot;</para>

<para>Total analysis time. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ad4c1cf3750341f73987c37745f3bd2aa"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ad4c1cf3750341f73987c37745f3bd2aa">SCCDetectionTime</link> = &quot;SCCDetectTime&quot;</para>

<para>Total SCC detection time. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a8c4101e697057269def501d14a987287"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a8c4101e697057269def501d14a987287">SCCMergeTime</link> = &quot;SCCMergeTime&quot;</para>

<para>Total SCC merge time. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1aeb6a52c31ecd004670e85f24b01d75d6">ProcessLoadStoreTime</link> = &quot;LoadStoreTime&quot;</para>

<para>time of processing loads and stores </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a95a0a7861731072baeaf75354531875f">ProcessCopyGepTime</link> = &quot;CopyGepTime&quot;</para>

<para>time of processing copys and geps </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a8aedfeb35f76e6d33135637156468894">UpdateCallGraphTime</link> = &quot;UpdateCGTime&quot;</para>

<para>time of updating call graph </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a1a4d418fd9e5413e7ffbbfe57f5e0560">TotalNumOfPointers</link> = &quot;TotalPointers&quot;</para>

<para>Total <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> value node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1acd9848f15aa359550e86c7b857df84ed"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1acd9848f15aa359550e86c7b857df84ed">TotalNumOfObjects</link> = &quot;TotalObjects&quot;</para>

<para>Total <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ac0e0a1c49d33e02f5cc0f21565ce627d"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ac0e0a1c49d33e02f5cc0f21565ce627d">TotalNumOfFieldObjects</link> = &quot;TotalFieldObjects&quot;</para>

<para>Total <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> field object node. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1af6a6e3ea4c7f8e1c984bea8d5fb9a7c0">MaxStructSize</link> = &quot;MaxStructSize&quot;</para>

<para>Max struct size. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a3afc0a36232a0388d8aa42c68219cb26"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a3afc0a36232a0388d8aa42c68219cb26">TotalNumOfEdges</link> = &quot;TotalPAGEdges&quot;</para>

<para>Total <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edge number. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ac5bf59a0a7a760c9fec5f22dedec5eb6"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ac5bf59a0a7a760c9fec5f22dedec5eb6">NumOfAddrs</link> = &quot;AddrsNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> addr edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a4aa7356142f51d942063be5a2910940f"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a4aa7356142f51d942063be5a2910940f">NumOfLoads</link> = &quot;LoadsNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> load edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a656ad9980ff05af396ed6754c50916e7"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a656ad9980ff05af396ed6754c50916e7">NumOfStores</link> = &quot;StoresNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> store edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a97a8b662356fc89cdd2cb9463fa5578b"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a97a8b662356fc89cdd2cb9463fa5578b">NumOfCopys</link> = &quot;CopysNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> copy edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1acc5e4740e11cb6f9794723e5f61ab63b"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1acc5e4740e11cb6f9794723e5f61ab63b">NumOfGeps</link> = &quot;GepsNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> gep edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a6cbeca77d0681f7da28979cbd0f661b2"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a6cbeca77d0681f7da28979cbd0f661b2">NumOfCalls</link> = &quot;CallsNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> call edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a0a552611fcd20e1310290bdae404a514"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a0a552611fcd20e1310290bdae404a514">NumOfReturns</link> = &quot;ReturnsNum&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> return edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a0de03cdb382b353c6c1495c0f80cfe19">NumOfProcessedAddrs</link> = &quot;AddrProcessed&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed addr edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a17531fa1df42df0b19191d61853380d9">NumOfProcessedLoads</link> = &quot;LoadProcessed&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed load edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a5b9bc0e9dac6ac97199476f6b7ea1edf">NumOfProcessedStores</link> = &quot;StoreProcessed&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed store edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ad30b36fb1884d1ef0b01c3b36a245211">NumOfProcessedCopys</link> = &quot;CopyProcessed&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed copy edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1aaa9d98f868c0724cb57c6934e783d1e5">NumOfProcessedGeps</link> = &quot;GepProcessed&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed gep edge. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a07a1db62ddba50bda787b2985ef8d135">NumOfSfr</link> = &quot;NumOfSFRs&quot;</para>

<para>num of field representatives </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a1745e5c3c026a130a70954da9c0074b1"/>static const char * <emphasis role="strong">NumOfFieldExpand</emphasis> = &quot;NumOfFieldExpand&quot;</para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ae9952b7456b5102113d1fee4d9d7801a">NumOfFunctionObjs</link> = &quot;FunctionObjs&quot;</para>

<para>Function numbers. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a57574c85a5a875a05ef83d3c916cf3e5"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a57574c85a5a875a05ef83d3c916cf3e5">NumOfGlobalObjs</link> = &quot;GlobalObjs&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> global object node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a4aff48eaa2045ee619a8ea793a9234b8"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a4aff48eaa2045ee619a8ea793a9234b8">NumOfHeapObjs</link> = &quot;HeapObjs&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> heap object node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ae05503909688a17dc1f282d1d029d24e"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ae05503909688a17dc1f282d1d029d24e">NumOfStackObjs</link> = &quot;StackObjs&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> stack object node. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a95edd35cec92fa4cacc8b59b5eecc827">NumOfObjsHasVarStruct</link> = &quot;VarStructObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has var struct (maybe nested with array) </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a78693e8bf93d712eb76c9d6dc0c45ae6">NumOfObjsHasVarArray</link> = &quot;VarArrayObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has var array (maybe nested with struct) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a918051b1d0eb4f49c349352408cc9751"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a918051b1d0eb4f49c349352408cc9751">NumOfObjsHasConstStruct</link> = &quot;ConstStructObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has const struct (maybe nested with array) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1adb31b163f0cbb9d9ce207ef5d8c075fa"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1adb31b163f0cbb9d9ce207ef5d8c075fa">NumOfObjsHasConstArray</link> = &quot;ConstArrayObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has const array (maybe nested with struct) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a9014371b8ed95ab8135eed2a7fa945f1"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a9014371b8ed95ab8135eed2a7fa945f1">NumOfNonPtrObjs</link> = &quot;NonPtrObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node which is non pointer type object (do not have pts) </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ae74458d96423e4a7391fe8697d5a9a67">NumOfConstantObjs</link> = &quot;ConstantObj&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node which is purely constant. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ad1a7e7aec8f272017be7d0b6acda86a4"/>static const char * <emphasis role="strong">NumberOfFieldInsensitiveObj</emphasis> = &quot;FIObjNum&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ab62eb21c7dc03f68b0509c31451b2e98"/>static const char * <emphasis role="strong">NumberOfFieldSensitiveObj</emphasis> = &quot;FSObjNum&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a218748b401bdd3d5eebd45eea0026b12"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a218748b401bdd3d5eebd45eea0026b12">NumOfPointers</link> = &quot;Pointers&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> value node, each of them maps to a llvm value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a164249b9d35606387e628529c643d119"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a164249b9d35606387e628529c643d119">NumOfGepFieldPointers</link> = &quot;DYFieldPtrs&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> gep value node (field value, dynamically created dummy node) </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a5c09f41916e40d784a63e301584511f9"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a5c09f41916e40d784a63e301584511f9">NumOfMemObjects</link> = &quot;MemObjects&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node, each of them maps to a llvm value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a16f9bdb5387471d0bd825c4a9cbcb22e"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a16f9bdb5387471d0bd825c4a9cbcb22e">NumOfGepFieldObjects</link> = &quot;DYFieldObjs&quot;</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> gep object node (field obj, dynamically created dummy node) </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1adb0edbe88a74e5e89921bcfafa4759c6">AveragePointsToSetSize</link> = &quot;AvgPtsSetSize&quot;</para>

<para>Average points-to size of all variables. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a1649c9f893c5b9ec2d57a399bc050030">AverageTopLevPointsToSetSize</link> = &quot;AvgTopLvlPtsSize&quot;</para>

<para>Average points-to size of top-level variables. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1af2b45aab2eee96a1cabba3025e4375a2">MaxPointsToSetSize</link> = &quot;MaxPtsSetSize&quot;</para>

<para>Max points-to size. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ae95fb0771a71ead27da79a45cac47a36"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ae95fb0771a71ead27da79a45cac47a36">NumOfIterations</link> = &quot;Iterations&quot;</para>

<para>Number of iterations during resolution. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a618707c52da086e04f5e7bff31794cf3"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a618707c52da086e04f5e7bff31794cf3">NumOfIndirectCallSites</link> = &quot;IndCallSites&quot;</para>

<para>Number of indirect callsites. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ad51d2bd924f049e440b3d0dd0d423524"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ad51d2bd924f049e440b3d0dd0d423524">NumOfIndirectEdgeSolved</link> = &quot;IndEdgeSolved&quot;</para>

<para>Number of indirect calledge resolved. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ad1731b88c24bb79728f62cd3e9c55699"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ad1731b88c24bb79728f62cd3e9c55699">NumOfSCCDetection</link> = &quot;NumOfSCCDetect&quot;</para>

<para>Number of scc detection performed. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ac518843a4148ecc45027ccc19a690c05"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ac518843a4148ecc45027ccc19a690c05">NumOfCycles</link> = &quot;TotalCycleNum&quot;</para>

<para>Number of scc cycles detected. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1aefcc3638fac7034ab3542be8eb01ab58">NumOfPWCCycles</link> = &quot;TotalPWCCycleNum&quot;</para>

<para>Number of scc cycles detected. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aea3e95097b3b9d326bef0d36f17e51a5"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1aea3e95097b3b9d326bef0d36f17e51a5">NumOfNodesInCycles</link> = &quot;NodesInCycles&quot;</para>

<para>Number of nodes in cycles detected. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1ab754f7768ffcd6f232b8cdf0fef6fc4e">MaxNumOfNodesInSCC</link> = &quot;MaxNodesInSCC&quot;</para>

<para>max Number of nodes in one scc </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a1211e1c7f16b715f32ecdef83f39a8c6"/>static const char * <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a1211e1c7f16b715f32ecdef83f39a8c6">NumOfNullPointer</link> = &quot;NullPointer&quot;</para>

<para>Number of pointers points-to null. </para>
</listitem>
            <listitem><para>static bool <link linkend="_class_s_v_f_1_1_p_t_a_stat_1a68c8df7d9fbb4b34254857a432e5d5e8">markedClocksOnly</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Pointer Analysis Statistics </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4"/>    <section>
    <title>getClk()</title>
<indexterm><primary>getClk</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>getClk</secondary></indexterm>
<para><computeroutput>static double SVF::PTAStat::getClk (bool mark = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>When mark is true, real clock is always returned. When mark is false, it is only returned when markedClocksOnly is not set; this is the default case. </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1adb0edbe88a74e5e89921bcfafa4759c6"/>    <section>
    <title>AveragePointsToSetSize</title>
<indexterm><primary>AveragePointsToSetSize</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>AveragePointsToSetSize</secondary></indexterm>
<para><computeroutput>const char * PTAStat::AveragePointsToSetSize = &quot;AvgPtsSetSize&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Average points-to size of all variables. </para>
</para>

<para>Average Points-to set size. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a1649c9f893c5b9ec2d57a399bc050030"/>    <section>
    <title>AverageTopLevPointsToSetSize</title>
<indexterm><primary>AverageTopLevPointsToSetSize</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>AverageTopLevPointsToSetSize</secondary></indexterm>
<para><computeroutput>const char * PTAStat::AverageTopLevPointsToSetSize = &quot;AvgTopLvlPtsSize&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Average points-to size of top-level variables. </para>
</para>

<para>Average Points-to set size of top level pointers. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a68c8df7d9fbb4b34254857a432e5d5e8"/>    <section>
    <title>markedClocksOnly</title>
<indexterm><primary>markedClocksOnly</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>markedClocksOnly</secondary></indexterm>
<para><computeroutput>bool PTAStat::markedClocksOnly = false<computeroutput>[static]</computeroutput></computeroutput></para>
<para>If set, only return the clock when getClk is called as getClk(true). Retrieving the clock is slow but it should be fine for a few calls. This is good for benchmarking when we don&apos;t need to know how long processLoad takes, for example (many calls), but want to know things like total solve time. Does not affect CLOCK_IN_MS. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ab754f7768ffcd6f232b8cdf0fef6fc4e"/>    <section>
    <title>MaxNumOfNodesInSCC</title>
<indexterm><primary>MaxNumOfNodesInSCC</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>MaxNumOfNodesInSCC</secondary></indexterm>
<para><computeroutput>const char * PTAStat::MaxNumOfNodesInSCC = &quot;MaxNodesInSCC&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>max Number of nodes in one scc </para>
</para>

<para>max Number of nodes in one scc cycle </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1af2b45aab2eee96a1cabba3025e4375a2"/>    <section>
    <title>MaxPointsToSetSize</title>
<indexterm><primary>MaxPointsToSetSize</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>MaxPointsToSetSize</secondary></indexterm>
<para><computeroutput>const char * PTAStat::MaxPointsToSetSize = &quot;MaxPtsSetSize&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Max points-to size. </para>
</para>

<para>Max Points-to set size. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1af6a6e3ea4c7f8e1c984bea8d5fb9a7c0"/>    <section>
    <title>MaxStructSize</title>
<indexterm><primary>MaxStructSize</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>MaxStructSize</secondary></indexterm>
<para><computeroutput>const char * PTAStat::MaxStructSize = &quot;MaxStructSize&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Max struct size. </para>
</para>

<para>Max struct size (bytes) </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ae74458d96423e4a7391fe8697d5a9a67"/>    <section>
    <title>NumOfConstantObjs</title>
<indexterm><primary>NumOfConstantObjs</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfConstantObjs</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfConstantObjs = &quot;ConstantObj&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node which is purely constant. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node which is purely scalar. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ae9952b7456b5102113d1fee4d9d7801a"/>    <section>
    <title>NumOfFunctionObjs</title>
<indexterm><primary>NumOfFunctionObjs</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfFunctionObjs</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfFunctionObjs = &quot;FunctionObjs&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Function numbers. </para>
</para>

<para>function numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a78693e8bf93d712eb76c9d6dc0c45ae6"/>    <section>
    <title>NumOfObjsHasVarArray</title>
<indexterm><primary>NumOfObjsHasVarArray</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfObjsHasVarArray</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfObjsHasVarArray = &quot;VarArrayObj&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has var array (maybe nested with struct) </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has array (maybe nested with struct) </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a95edd35cec92fa4cacc8b59b5eecc827"/>    <section>
    <title>NumOfObjsHasVarStruct</title>
<indexterm><primary>NumOfObjsHasVarStruct</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfObjsHasVarStruct</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfObjsHasVarStruct = &quot;VarStructObj&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has var struct (maybe nested with array) </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> object node has struct (maybe nested with array) </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a0de03cdb382b353c6c1495c0f80cfe19"/>    <section>
    <title>NumOfProcessedAddrs</title>
<indexterm><primary>NumOfProcessedAddrs</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfProcessedAddrs</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfProcessedAddrs = &quot;AddrProcessed&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed addr edge. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> addr processed edge. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1ad30b36fb1884d1ef0b01c3b36a245211"/>    <section>
    <title>NumOfProcessedCopys</title>
<indexterm><primary>NumOfProcessedCopys</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfProcessedCopys</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfProcessedCopys = &quot;CopyProcessed&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed copy edge. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> copy processed edge. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aaa9d98f868c0724cb57c6934e783d1e5"/>    <section>
    <title>NumOfProcessedGeps</title>
<indexterm><primary>NumOfProcessedGeps</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfProcessedGeps</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfProcessedGeps = &quot;GepProcessed&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed gep edge. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> gep processed edge. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a17531fa1df42df0b19191d61853380d9"/>    <section>
    <title>NumOfProcessedLoads</title>
<indexterm><primary>NumOfProcessedLoads</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfProcessedLoads</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfProcessedLoads = &quot;LoadProcessed&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed load edge. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> load processed edge. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a5b9bc0e9dac6ac97199476f6b7ea1edf"/>    <section>
    <title>NumOfProcessedStores</title>
<indexterm><primary>NumOfProcessedStores</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfProcessedStores</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfProcessedStores = &quot;StoreProcessed&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> processed store edge. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> store processed edge. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aefcc3638fac7034ab3542be8eb01ab58"/>    <section>
    <title>NumOfPWCCycles</title>
<indexterm><primary>NumOfPWCCycles</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfPWCCycles</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfPWCCycles = &quot;TotalPWCCycleNum&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Number of scc cycles detected. </para>
</para>

<para>Number of pwc scc cycles detected. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a07a1db62ddba50bda787b2985ef8d135"/>    <section>
    <title>NumOfSfr</title>
<indexterm><primary>NumOfSfr</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>NumOfSfr</secondary></indexterm>
<para><computeroutput>const char * PTAStat::NumOfSfr = &quot;NumOfSFRs&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>num of field representatives </para>
</para>

<para>number of field representatives </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a95a0a7861731072baeaf75354531875f"/>    <section>
    <title>ProcessCopyGepTime</title>
<indexterm><primary>ProcessCopyGepTime</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>ProcessCopyGepTime</secondary></indexterm>
<para><computeroutput>const char * PTAStat::ProcessCopyGepTime = &quot;CopyGepTime&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>time of processing copys and geps </para>
</para>

<para>process copy and gep time </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1aeb6a52c31ecd004670e85f24b01d75d6"/>    <section>
    <title>ProcessLoadStoreTime</title>
<indexterm><primary>ProcessLoadStoreTime</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>ProcessLoadStoreTime</secondary></indexterm>
<para><computeroutput>const char * PTAStat::ProcessLoadStoreTime = &quot;LoadStoreTime&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>time of processing loads and stores </para>
</para>

<para>process load and store time </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a25001a6d794d91056f37d954d9660910"/>    <section>
    <title>TotalAnalysisTime</title>
<indexterm><primary>TotalAnalysisTime</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>TotalAnalysisTime</secondary></indexterm>
<para><computeroutput>const char * PTAStat::TotalAnalysisTime = &quot;TotalTime&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Total analysis time. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> value nodes. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a1a4d418fd9e5413e7ffbbfe57f5e0560"/>    <section>
    <title>TotalNumOfPointers</title>
<indexterm><primary>TotalNumOfPointers</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>TotalNumOfPointers</secondary></indexterm>
<para><computeroutput>const char * PTAStat::TotalNumOfPointers = &quot;TotalPointers&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Total <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> value node. </para>
</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> value nodes. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_p_t_a_stat_1a8aedfeb35f76e6d33135637156468894"/>    <section>
    <title>UpdateCallGraphTime</title>
<indexterm><primary>UpdateCallGraphTime</primary><secondary>SVF::PTAStat</secondary></indexterm>
<indexterm><primary>SVF::PTAStat</primary><secondary>UpdateCallGraphTime</secondary></indexterm>
<para><computeroutput>const char * PTAStat::UpdateCallGraphTime = &quot;UpdateCGTime&quot;<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>time of updating call graph </para>
</para>

<para>process copy and gep time </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MemoryModel/PTAStat.hlib/Util/PTAStat.cpp</section>
</section>
