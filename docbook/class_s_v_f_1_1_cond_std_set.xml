<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cond_std_set" xml:lang="en-US">
<title>SVF::CondStdSet&lt; Element &gt; Class Template Reference</title>
<indexterm><primary>SVF::CondStdSet&lt; Element &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;ConditionalPT.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a6d82b5ddafa28542ce65adb0cc56cdce"/>typedef OrderedSet&lt; Element &gt;::iterator <emphasis role="strong">iterator</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a55152b7749868cc25f1c3c33ea57a650"/>typedef OrderedSet&lt; Element &gt;::const_iterator <emphasis role="strong">const_iterator</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a3f1885562bb34c3ccbd15117788725e0"/><link linkend="_class_s_v_f_1_1_cond_std_set_1a3f1885562bb34c3ccbd15117788725e0">CondStdSet</link> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;cptsSet)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a3e72341580263f3a9b48ce0e8c7bbbec"/>bool <link linkend="_class_s_v_f_1_1_cond_std_set_1a3e72341580263f3a9b48ce0e8c7bbbec">test_and_set</link> (const Element &amp;var)</para>

<para>Return true if the element is added. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a6bf6fafc6f8391dbff08a6bd9d07f4d4"/>bool <link linkend="_class_s_v_f_1_1_cond_std_set_1a6bf6fafc6f8391dbff08a6bd9d07f4d4">test</link> (const Element &amp;var) const</para>

<para>Return true if the element is in the set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1ae11deddad534be115d29daad08c90599"/>void <link linkend="_class_s_v_f_1_1_cond_std_set_1ae11deddad534be115d29daad08c90599">set</link> (const Element &amp;var)</para>

<para>Add the element into set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a857396d9e820a9fab8a498d981855e2a"/>void <link linkend="_class_s_v_f_1_1_cond_std_set_1a857396d9e820a9fab8a498d981855e2a">reset</link> (const Element &amp;var)</para>

<para>Remove var from the set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a0305cbf452b4e858e464023727417d76"/>bool <link linkend="_class_s_v_f_1_1_cond_std_set_1a0305cbf452b4e858e464023727417d76">empty</link> () const</para>

<para>Set size. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1afa190562e8b85630845617c23fc5a16b"/>unsigned <emphasis role="strong">size</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1aa19e82905537f3ae41f64fce070ee555"/>unsigned <emphasis role="strong">count</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a4c49e2964276825744ffce26fc43ec36"/>void <link linkend="_class_s_v_f_1_1_cond_std_set_1a4c49e2964276825744ffce26fc43ec36">clear</link> ()</para>

<para>Clear set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1adf095111734d81b6ad1908a7f795b038"/>iterator <link linkend="_class_s_v_f_1_1_cond_std_set_1adf095111734d81b6ad1908a7f795b038">begin</link> ()</para>

<para>Iterators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a93c232ef7e5dea652622da7f994e1dc3"/>iterator <emphasis role="strong">end</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a76fb2382bf424638ed8e03cb48cdc90e"/>iterator <emphasis role="strong">begin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1accc5305781696701c00245ed1e8a25a3"/>iterator <emphasis role="strong">end</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a90e4c4ead1cbdca01c0be801a68b005b"/>bool <link linkend="_class_s_v_f_1_1_cond_std_set_1a90e4c4ead1cbdca01c0be801a68b005b">operator|=</link> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs)</para>

<para>Overload operators. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1aa0ca8da1ee68b34e9515f2ebac55bc91"/>bool <emphasis role="strong">operator&amp;=</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a060a01d33fcd5ed4dfcaecb3d24cda07"/>bool <emphasis role="strong">operator!=</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a6697d9c3d1107db2be430b8e8b670cb5"/>bool <emphasis role="strong">operator==</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a9fa868a473993d0244431d640799ce98"/><link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1ad3c38bb031419dd583a9cb0314e76afd"/>bool <emphasis role="strong">operator&lt;</emphasis> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cond_std_set_1ac422c3fb8bce1378d69c234e6b11fdb1">intersects</link> (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a07267b0a4f7cfeaa6d1f7d722932c4d5"/>std::string <emphasis role="strong">toString</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cond_std_set_1a29892f43cc8420d4d2b4046140476320"/>const ElementSet &amp; <emphasis role="strong">getElementSet</emphasis> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Element&gt;
class SVF::CondStdSet&lt; Element &gt;</title></simplesect>


<para>Conditional variable set </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cond_std_set_1ac422c3fb8bce1378d69c234e6b11fdb1"/>    <section>
    <title>intersects()</title>
<indexterm><primary>intersects</primary><secondary>SVF::CondStdSet&lt; Element &gt;</secondary></indexterm>
<indexterm><primary>SVF::CondStdSet&lt; Element &gt;</primary><secondary>intersects</secondary></indexterm>
<computeroutput>template&lt;class Element &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_s_v_f_1_1_cond_std_set">SVF::CondStdSet</link>&lt; Element &gt;::intersects (const <link linkend="_class_s_v_f_1_1_cond_std_set">CondStdSet</link>&lt; Element &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Return TRUE if this and RHS share common elements. </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/MemoryModel/ConditionalPT.h</section>
</section>
