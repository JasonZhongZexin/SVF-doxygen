<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_lock_analysis" kind="class" language="C++" prot="public">
    <compoundname>SVF::LockAnalysis</compoundname>
    <includes refid="_lock_analysis_8h" local="no">LockAnalysis.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791" prot="public" static="no" strong="no">
        <type></type>
        <name>ValDomain</name>
        <enumvalue id="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791ae16d4995f32298086fd37b4759ec069c" prot="public">
          <name>Empty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791a2709e7eb7ea9829c7e649e6dd86d6a48" prot="public">
          <name>TDLocked</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791ac531588e8556653306e03ccaacb83dac" prot="public">
          <name>TDUnlocked</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>semilattice Empty==&gt;TDUnlocked==&gt;TDLocked </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="31" column="5" bodyfile="include/MTA/LockAnalysis.h" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ab468a6a0f1705c000dc4260097222b06" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref></type>
        <definition>typedef CxtStmt SVF::LockAnalysis::CxtLock</definition>
        <argsstring></argsstring>
        <name>CxtLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="38" column="21" bodyfile="include/MTA/LockAnalysis.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ad855d1de318766ac305a10bfdae4da82" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtProc</ref></type>
        <definition>typedef CxtProc SVF::LockAnalysis::CxtLockProc</definition>
        <argsstring></argsstring>
        <name>CxtLockProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="39" column="21" bodyfile="include/MTA/LockAnalysis.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a4bde0f39a6b5cf83e0011d7ef272c685" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::LockAnalysis::LockSet</definition>
        <argsstring></argsstring>
        <name>LockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="41" column="20" bodyfile="include/MTA/LockAnalysis.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1aeb4b15ecc4ba1a0ca8794d304d1895cb" prot="public" static="no">
        <type>TCT::InstVec</type>
        <definition>typedef TCT::InstVec SVF::LockAnalysis::InstVec</definition>
        <argsstring></argsstring>
        <name>InstVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="42" column="26" bodyfile="include/MTA/LockAnalysis.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ae682eb30763f0f52184eb36c95fc3811" prot="public" static="no">
        <type>Set&lt; const Instruction * &gt;</type>
        <definition>typedef Set&lt;const Instruction*&gt; SVF::LockAnalysis::InstSet</definition>
        <argsstring></argsstring>
        <name>InstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="43" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ae675d0ebf4eac597487ce83e667a8229" prot="public" static="no">
        <type>InstSet</type>
        <definition>typedef InstSet SVF::LockAnalysis::CISpan</definition>
        <argsstring></argsstring>
        <name>CISpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="44" column="21" bodyfile="include/MTA/LockAnalysis.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1acdcc3fc4b90e7f67cfb9601ddc31d5f8" prot="public" static="no">
        <type>Map&lt; const Instruction *, CISpan &gt;</type>
        <definition>typedef Map&lt;const Instruction*, CISpan&gt; SVF::LockAnalysis::CILockToSpan</definition>
        <argsstring></argsstring>
        <name>CILockToSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="45" column="16" bodyfile="include/MTA/LockAnalysis.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a561bb2fbfbeee9117efad7c7c70871d8" prot="public" static="no">
        <type>Set&lt; const Function * &gt;</type>
        <definition>typedef Set&lt;const Function*&gt; SVF::LockAnalysis::FunSet</definition>
        <argsstring></argsstring>
        <name>FunSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="46" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a281e41a6a1cdc21c214aafa6ea23b343" prot="public" static="no">
        <type>Map&lt; const Instruction *, InstSet &gt;</type>
        <definition>typedef Map&lt;const Instruction*, InstSet&gt; SVF::LockAnalysis::InstToInstSetMap</definition>
        <argsstring></argsstring>
        <name>InstToInstSetMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="47" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ab6ee6947515c61c07428e62c267d5412" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>, <ref refid="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791" kindref="member">ValDomain</ref> &gt;</type>
        <definition>typedef Map&lt;const CxtStmt, ValDomain&gt; SVF::LockAnalysis::CxtStmtToLockFlagMap</definition>
        <argsstring></argsstring>
        <name>CxtStmtToLockFlagMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="48" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ae2218961699a4b4385f47fb039005dbe" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &gt;</type>
        <definition>typedef FIFOWorkList&lt;CxtStmt&gt; SVF::LockAnalysis::CxtStmtWorkList</definition>
        <argsstring></argsstring>
        <name>CxtStmtWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="49" column="26" bodyfile="include/MTA/LockAnalysis.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a07b7d49e1fbe3e5dc694b6aadbee05b8" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &gt;</type>
        <definition>typedef Set&lt;CxtStmt&gt; SVF::LockAnalysis::LockSpan</definition>
        <argsstring></argsstring>
        <name>LockSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="50" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a42ed881d4cd79eae099266a9e171aeb2" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &gt;</type>
        <definition>typedef Set&lt;CxtStmt&gt; SVF::LockAnalysis::CxtStmtSet</definition>
        <argsstring></argsstring>
        <name>CxtStmtSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="51" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a0716c155b42b3ae7a6c8d7593bb6ac83" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &gt;</type>
        <definition>typedef Set&lt;CxtLock&gt; SVF::LockAnalysis::CxtLockSet</definition>
        <argsstring></argsstring>
        <name>CxtLockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="52" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a7335d5b13a6cb1dcde9706f30b8a4826" prot="public" static="no">
        <type>Map&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref>, LockSpan &gt;</type>
        <definition>typedef Map&lt;CxtLock, LockSpan&gt; SVF::LockAnalysis::CxtLockToSpan</definition>
        <argsstring></argsstring>
        <name>CxtLockToSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="54" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1ab782401c6521a2810e28ac602710ac22" prot="public" static="no">
        <type>Map&lt; <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref>, NodeBS &gt;</type>
        <definition>typedef Map&lt;CxtLock, NodeBS&gt; SVF::LockAnalysis::CxtLockToLockSet</definition>
        <argsstring></argsstring>
        <name>CxtLockToLockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="55" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a1f9ae41c4ed7450d0d8b29cd20a6ef25" prot="public" static="no">
        <type>Map&lt; const Instruction *, NodeBS &gt;</type>
        <definition>typedef Map&lt;const Instruction*, NodeBS&gt; SVF::LockAnalysis::LockSiteToLockSet</definition>
        <argsstring></argsstring>
        <name>LockSiteToLockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="56" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a32543eb205653a65bb71de55d0471a1d" prot="public" static="no">
        <type>Map&lt; const Instruction *, LockSpan &gt;</type>
        <definition>typedef Map&lt;const Instruction*, LockSpan&gt; SVF::LockAnalysis::InstToCxtStmtSet</definition>
        <argsstring></argsstring>
        <name>InstToCxtStmtSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="57" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a388ab1fdb932d68655fb7032998ab1ba" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref>, CxtLockSet &gt;</type>
        <definition>typedef Map&lt;const CxtStmt, CxtLockSet&gt; SVF::LockAnalysis::CxtStmtToCxtLockSet</definition>
        <argsstring></argsstring>
        <name>CxtStmtToCxtLockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="58" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a058f3518f0b861c46c99095922e373f0" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref> &gt;</type>
        <definition>typedef FIFOWorkList&lt;CxtLockProc&gt; SVF::LockAnalysis::CxtLockProcVec</definition>
        <argsstring></argsstring>
        <name>CxtLockProcVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="59" column="26" bodyfile="include/MTA/LockAnalysis.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a9bd40b3051f60c527eef38ae70cfeb14" prot="public" static="no">
        <type>set&lt; <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref> &gt;</type>
        <definition>typedef set&lt;CxtLockProc&gt; SVF::LockAnalysis::CxtLockProcSet</definition>
        <argsstring></argsstring>
        <name>CxtLockProcSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="60" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1a6029b3e184b169bc8a32bd1ed97148ae" prot="public" static="no">
        <type>std::pair&lt; const Function *, const Function * &gt;</type>
        <definition>typedef std::pair&lt;const Function*,const Function*&gt; SVF::LockAnalysis::FuncPair</definition>
        <argsstring></argsstring>
        <name>FuncPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="62" column="23" bodyfile="include/MTA/LockAnalysis.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_lock_analysis_1aa74d461f9dafa748e558ee120f914ce3" prot="public" static="no">
        <type>Map&lt; FuncPair, bool &gt;</type>
        <definition>typedef Map&lt;FuncPair, bool&gt; SVF::LockAnalysis::FuncPairToBool</definition>
        <argsstring></argsstring>
        <name>FuncPairToBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="63" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a2c4a69b0f2381142c172b3043943c79d" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
        <definition>TCT* SVF::LockAnalysis::tct</definition>
        <argsstring></argsstring>
        <name>tct</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="442" column="9" bodyfile="include/MTA/LockAnalysis.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a109293f282e9b920b0b13c58026f6f1d" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtStmtWorkList</ref></type>
        <definition>CxtStmtWorkList SVF::LockAnalysis::cxtStmtList</definition>
        <argsstring></argsstring>
        <name>cxtStmtList</name>
        <briefdescription>
<para>context-sensitive statement worklist </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="445" column="21" bodyfile="include/MTA/LockAnalysis.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1ae8715683c7dfddc7b30caf6bf2b78296" prot="private" static="no" mutable="no">
        <type>InstToCxtStmtSet</type>
        <definition>InstToCxtStmtSet SVF::LockAnalysis::instToCxtStmtSet</definition>
        <argsstring></argsstring>
        <name>instToCxtStmtSet</name>
        <briefdescription>
<para>Map a statement to all its context-sensitive statements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="448" column="22" bodyfile="include/MTA/LockAnalysis.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a3081e7c7165908ed4aa282f398c5236d" prot="private" static="no" mutable="no">
        <type>CxtLockSet</type>
        <definition>CxtLockSet SVF::LockAnalysis::cxtLockset</definition>
        <argsstring></argsstring>
        <name>cxtLockset</name>
        <briefdescription>
<para>Context-sensitive locks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="452" column="16" bodyfile="include/MTA/LockAnalysis.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a2fd796765f16cc7094f36d68c0ff70a0" prot="private" static="no" mutable="no">
        <type>CxtLockToSpan</type>
        <definition>CxtLockToSpan SVF::LockAnalysis::cxtLocktoSpan</definition>
        <argsstring></argsstring>
        <name>cxtLocktoSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map a context-sensitive lock to its lock span statements Map a context-sensitive statement to its context-sensitive lock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="457" column="19" bodyfile="include/MTA/LockAnalysis.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1ae256a84fd63947a6f81bee030bdbe7fc" prot="private" static="no" mutable="no">
        <type>CxtStmtToCxtLockSet</type>
        <definition>CxtStmtToCxtLockSet SVF::LockAnalysis::cxtStmtToCxtLockSet</definition>
        <argsstring></argsstring>
        <name>cxtStmtToCxtLockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="458" column="25" bodyfile="include/MTA/LockAnalysis.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1afff2c5699e08badf5265e8183b18a02e" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtLockProcVec</ref></type>
        <definition>CxtLockProcVec SVF::LockAnalysis::clpList</definition>
        <argsstring></argsstring>
        <name>clpList</name>
        <briefdescription>
<para>Following data structures are used for collecting context-sensitive locks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="463" column="20" bodyfile="include/MTA/LockAnalysis.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1aa9f27774c021f4d65fb6a97627355bd7" prot="private" static="no" mutable="no">
        <type>CxtLockProcSet</type>
        <definition>CxtLockProcSet SVF::LockAnalysis::visitedCTPs</definition>
        <argsstring></argsstring>
        <name>visitedCTPs</name>
        <briefdescription>
<para>CxtLockProc <ref refid="class_s_v_f_1_1_list" kindref="compound">List</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="464" column="20" bodyfile="include/MTA/LockAnalysis.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a87c412a54f48e5314454cd1d44ef9b0e" prot="private" static="no" mutable="no">
        <type>InstSet</type>
        <definition>InstSet SVF::LockAnalysis::locksites</definition>
        <argsstring></argsstring>
        <name>locksites</name>
        <briefdescription>
<para>Record all visited clps. </para>
        </briefdescription>
        <detaileddescription>
<para>Collecting lock/unlock sites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="469" column="13" bodyfile="include/MTA/LockAnalysis.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1aec459af1d1624df55ffc95cd75655780" prot="private" static="no" mutable="no">
        <type>InstSet</type>
        <definition>InstSet SVF::LockAnalysis::unlocksites</definition>
        <argsstring></argsstring>
        <name>unlocksites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="470" column="13" bodyfile="include/MTA/LockAnalysis.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a484eb7b6f49f47a3e71054c3b798a47a" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::LockAnalysis::lockcandidateFuncSet</definition>
        <argsstring></argsstring>
        <name>lockcandidateFuncSet</name>
        <briefdescription>
<para>Candidate functions which relevant to locks/unlocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="475" column="12" bodyfile="include/MTA/LockAnalysis.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a0eb9ee82e74e0e1646b0259554293a36" prot="private" static="no" mutable="no">
        <type>FuncPairToBool</type>
        <definition>FuncPairToBool SVF::LockAnalysis::nonCandidateFuncLockRelMap</definition>
        <argsstring></argsstring>
        <name>nonCandidateFuncLockRelMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="476" column="20" bodyfile="include/MTA/LockAnalysis.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1afc4212873c3e05ac9506aac0a25f515a" prot="private" static="no" mutable="no">
        <type>CILockToSpan</type>
        <definition>CILockToSpan SVF::LockAnalysis::ciLocktoSpan</definition>
        <argsstring></argsstring>
        <name>ciLocktoSpan</name>
        <briefdescription>
<para>Used for context-insensitive intra-procedural locks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="481" column="18" bodyfile="include/MTA/LockAnalysis.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a277d88153d34cf3eb80272003949e4ef" prot="private" static="no" mutable="no">
        <type>InstToInstSetMap</type>
        <definition>InstToInstSetMap SVF::LockAnalysis::instCILocksMap</definition>
        <argsstring></argsstring>
        <name>instCILocksMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="482" column="22" bodyfile="include/MTA/LockAnalysis.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a5a4167dd5dbd0017a4725c8774a5b522" prot="private" static="no" mutable="no">
        <type>InstToInstSetMap</type>
        <definition>InstToInstSetMap SVF::LockAnalysis::instTocondCILocksMap</definition>
        <argsstring></argsstring>
        <name>instTocondCILocksMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="483" column="22" bodyfile="include/MTA/LockAnalysis.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1adadee129c04b82576b4ca3c7594cdcb2" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double SVF::LockAnalysis::lockTime</definition>
        <argsstring></argsstring>
        <name>lockTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="488" column="12" bodyfile="include/MTA/LockAnalysis.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1ad648ad9cda4070f9aec1addef0067627" prot="public" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::LockAnalysis::numOfTotalQueries</definition>
        <argsstring></argsstring>
        <name>numOfTotalQueries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="489" column="11" bodyfile="include/MTA/LockAnalysis.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a80c56ebc6b9b594e97b56767f451ff8b" prot="public" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::LockAnalysis::numOfLockedQueries</definition>
        <argsstring></argsstring>
        <name>numOfLockedQueries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="490" column="11" bodyfile="include/MTA/LockAnalysis.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_lock_analysis_1a853ab1a953ddcf76841016a833e43f3d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double SVF::LockAnalysis::lockQueriesTime</definition>
        <argsstring></argsstring>
        <name>lockQueriesTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="491" column="12" bodyfile="include/MTA/LockAnalysis.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1af8aff31058caba691c127b8aef297b43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::LockAnalysis::LockAnalysis</definition>
        <argsstring>(TCT *t)</argsstring>
        <name>LockAnalysis</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="65" column="5" bodyfile="include/MTA/LockAnalysis.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ad1516b6cb1dbd06b8dff04ae3c944621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::analyze</definition>
        <argsstring>()</argsstring>
        <name>analyze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>context-sensitive forward traversal from each lock site. Generate following results (1) context-sensitive lock site, (2) maps a context-sensitive lock site to its corresponding lock span. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="72" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="38" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a8a34f7544f22a87e1caf010c34abda75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::analyzeIntraProcedualLock</definition>
        <argsstring>()</argsstring>
        <name>analyzeIntraProcedualLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Analyze intraprocedural locks A lock is intraprocedural if its lock span is within a procedural </para>
        </detaileddescription>
        <inbodydescription>
<para>FIXME:Should we intersect forwardInsts and backwardInsts?</para>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="73" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="139" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a6febb0bb12f4983cd54b3bd310ce65d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::intraForwardTraverse</definition>
        <argsstring>(const Instruction *lock, InstSet &amp;unlockset, InstSet &amp;forwardInsts)</argsstring>
        <name>intraForwardTraverse</name>
        <param>
          <type>const Instruction *</type>
          <declname>lock</declname>
          <defname>lockSite</defname>
        </param>
        <param>
          <type>InstSet &amp;</type>
          <declname>unlockset</declname>
          <defname>unlockSet</defname>
        </param>
        <param>
          <type>InstSet &amp;</type>
          <declname>forwardInsts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intra-procedural forward traversal </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="74" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="167" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a5f693c893f3701e1e025881f91193d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::intraBackwardTraverse</definition>
        <argsstring>(const InstSet &amp;unlockset, InstSet &amp;backwardInsts)</argsstring>
        <name>intraBackwardTraverse</name>
        <param>
          <type>const InstSet &amp;</type>
          <declname>unlockset</declname>
          <defname>unlockSet</defname>
        </param>
        <param>
          <type>InstSet &amp;</type>
          <declname>backwardInsts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intra-procedural backward traversal </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="75" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="210" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ae03db88ef0ad0da2c31cf1623b32165f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::collectCxtLock</definition>
        <argsstring>()</argsstring>
        <name>collectCxtLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="77" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="254" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a00ccd89eff3fe8fec397df101f927cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::analyzeLockSpanCxtStmt</definition>
        <argsstring>()</argsstring>
        <name>analyzeLockSpanCxtStmt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="78" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="326" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1aa8683de99ad02fb75b175b0bb54e5f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::collectLockUnlocksites</definition>
        <argsstring>()</argsstring>
        <name>collectLockUnlocksites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect lock/unlock sites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="80" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="68" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a271506d5032033efae684b0d729f5b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::buildCandidateFuncSetforLock</definition>
        <argsstring>()</argsstring>
        <name>buildCandidateFuncSetforLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect candidate functions for context-sensitive lock analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="81" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="91" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1aa91522e95e8a9450032bfeaf7a3e491c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isIntraLock</definition>
        <argsstring>(const Instruction *lock) const</argsstring>
        <name>isIntraLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Intraprocedural locks. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if the lock is an intra-procedural lock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="86" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ab28428444170091d2c65572263b9f40b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::addIntraLock</definition>
        <argsstring>(const Instruction *lockSite, const InstSet &amp;stmts)</argsstring>
        <name>addIntraLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>lockSite</declname>
        </param>
        <param>
          <type>const InstSet &amp;</type>
          <declname>stmts</declname>
        </param>
        <briefdescription>
<para>Add intra-procedural lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="93" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a0cc6e4b4ab78f3c54b68fe35adb02957" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::addCondIntraLock</definition>
        <argsstring>(const Instruction *lockSite, const InstSet &amp;stmts)</argsstring>
        <name>addCondIntraLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>lockSite</declname>
        </param>
        <param>
          <type>const InstSet &amp;</type>
          <declname>stmts</declname>
        </param>
        <briefdescription>
<para>Add intra-procedural lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="103" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ac33c03c9d4a978891009ae919559d567" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isInsideIntraLock</definition>
        <argsstring>(const Instruction *stmt) const</argsstring>
        <name>isInsideIntraLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
<para>Return true if a statement is inside an intra-procedural lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="112" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1af3b0c1b628bac48d07c24008fd9edc4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isInsideCondIntraLock</definition>
        <argsstring>(const Instruction *stmt) const</argsstring>
        <name>isInsideCondIntraLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
<para>Return true if a statement is inside a partial lock/unlock pair (conditional lock with unconditional unlock) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="118" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ad8e7c32cb1163f4917124fed5cf6c3ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const InstSet &amp;</type>
        <definition>const InstSet&amp; SVF::LockAnalysis::getIntraLockSet</definition>
        <argsstring>(const Instruction *stmt) const</argsstring>
        <name>getIntraLockSet</name>
        <param>
          <type>const Instruction *</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="123" column="26" bodyfile="include/MTA/LockAnalysis.h" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a177b10a617c275a9c2c2ed5e9b10d78a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::addCxtLock</definition>
        <argsstring>(const CallStrCxt &amp;cxt, const Instruction *inst)</argsstring>
        <name>addCxtLock</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Context-sensitive locks. </para>
        </briefdescription>
        <detaileddescription>
<para>Add inter-procedural context-sensitive lock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="134" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a6c918786d065309e8a7b13759f410a09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasCxtLock</definition>
        <argsstring>(const CxtLock &amp;cxtLock) const</argsstring>
        <name>hasCxtLock</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cxtLock</declname>
        </param>
        <briefdescription>
<para>Get context-sensitive lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="142" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1af45f3c22edce16913ccbdd7015a06076" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::intersects</definition>
        <argsstring>(const CxtLockSet &amp;lockset1, const CxtLockSet &amp;lockset2) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const CxtLockSet &amp;</type>
          <declname>lockset1</declname>
        </param>
        <param>
          <type>const CxtLockSet &amp;</type>
          <declname>lockset2</declname>
        </param>
        <briefdescription>
<para>Return true if the intersection of two locksets is not empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="148" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="148" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a4424f27444c12dce8071c56a95c664bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::alias</definition>
        <argsstring>(const CxtLockSet &amp;lockset1, const CxtLockSet &amp;lockset2)</argsstring>
        <name>alias</name>
        <param>
          <type>const CxtLockSet &amp;</type>
          <declname>lockset1</declname>
        </param>
        <param>
          <type>const CxtLockSet &amp;</type>
          <declname>lockset2</declname>
        </param>
        <briefdescription>
<para>Return true if two locksets has at least one alias lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="162" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="162" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a4c76b3fb18248081dc1affbc33940164" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isLockCandidateFun</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>isLockCandidateFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if it is a candidate function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="178" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a0af0f5bf91f4ae175b89ef24c27c987a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasCxtStmtfromInst</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>hasCxtStmtfromInst</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Context-sensitive statement and lock spans. </para>
        </briefdescription>
        <detaileddescription>
<para>Get LockSet and LockSpan </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="186" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1afc8c13fcff7c1199f63efc198a3b5a6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CxtStmtSet &amp;</type>
        <definition>const CxtStmtSet&amp; SVF::LockAnalysis::getCxtStmtfromInst</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>getCxtStmtfromInst</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="191" column="29" bodyfile="include/MTA/LockAnalysis.h" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a395df7174e06cad1971e6a81587ca043" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasCxtLockfromCxtStmt</definition>
        <argsstring>(const CxtStmt &amp;cts) const</argsstring>
        <name>hasCxtLockfromCxtStmt</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="197" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a4b55036dae224c83b650389a409d9b96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CxtLockSet &amp;</type>
        <definition>const CxtLockSet&amp; SVF::LockAnalysis::getCxtLockfromCxtStmt</definition>
        <argsstring>(const CxtStmt &amp;cts) const</argsstring>
        <name>getCxtLockfromCxtStmt</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="202" column="29" bodyfile="include/MTA/LockAnalysis.h" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a0809f300ab80173523b34226bb832bd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CxtLockSet &amp;</type>
        <definition>CxtLockSet&amp; SVF::LockAnalysis::getCxtLockfromCxtStmt</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>getCxtLockfromCxtStmt</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="208" column="23" bodyfile="include/MTA/LockAnalysis.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a718d6f2f55c1e2e7eb619c3e056ab458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::addCxtStmtToSpan</definition>
        <argsstring>(const CxtStmt &amp;cts, const CxtLock &amp;cl)</argsstring>
        <name>addCxtStmtToSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
<para>Add context-sensitive statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="215" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a0b21446e6d5dfc1b5d0ebd75895225dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::removeCxtStmtToSpan</definition>
        <argsstring>(CxtStmt &amp;cts, const CxtLock &amp;cl)</argsstring>
        <name>removeCxtStmtToSpan</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
<para>Add context-sensitive statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="221" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="221" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1aaa0f33f19d9f80eee98289119ba907d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::touchCxtStmt</definition>
        <argsstring>(CxtStmt &amp;cts)</argsstring>
        <name>touchCxtStmt</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Touch this context statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="233" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1af8ada4a73bf132e1adeef7aa0522f596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasSpanfromCxtLock</definition>
        <argsstring>(const CxtLock &amp;cl)</argsstring>
        <name>hasSpanfromCxtLock</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="237" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ae7942c801e05357bb63f08c24489daf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LockSpan &amp;</type>
        <definition>LockSpan&amp; SVF::LockAnalysis::getSpanfromCxtLock</definition>
        <argsstring>(const CxtLock &amp;cl)</argsstring>
        <name>getSpanfromCxtLock</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="241" column="21" bodyfile="include/MTA/LockAnalysis.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a86f06a790cf90ec897b896a79956e5b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasOneCxtInLockSpan</definition>
        <argsstring>(const Instruction *I, LockSpan lspan) const</argsstring>
        <name>hasOneCxtInLockSpan</name>
        <param>
          <type>const Instruction *</type>
          <declname>I</declname>
        </param>
        <param>
          <type>LockSpan</type>
          <declname>lspan</declname>
        </param>
        <briefdescription>
<para>Check if one instruction&apos;s context stmt is in a lock span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="251" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="251" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a33740d6dc51d24af2d0c8cb2fbf27db6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::hasAllCxtInLockSpan</definition>
        <argsstring>(const Instruction *I, LockSpan lspan) const</argsstring>
        <name>hasAllCxtInLockSpan</name>
        <param>
          <type>const Instruction *</type>
          <declname>I</declname>
        </param>
        <param>
          <type>LockSpan</type>
          <declname>lspan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="266" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="266" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a4d4501d62bf51475662b6ba66e6380aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isProtectedByCommonLock</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>isProtectedByCommonLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two Instructions are protected by common locks echo inst may have multiple cxt stmt we check whether every cxt stmt of instructions is protected by a common lock.</para>
<para>Protected by at least one common lock under every context </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="285" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="552" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isProtectedByCommonCxtLock</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>isProtectedByCommonCxtLock</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protected by at least one common context-sensitive lock under each context </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="286" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="606" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a3e2e629a588b44ed39e529babb59a4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isProtectedByCommonCxtLock</definition>
        <argsstring>(const CxtStmt &amp;cxtStmt1, const CxtStmt &amp;cxtStmt2)</argsstring>
        <name>isProtectedByCommonCxtLock</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cxtStmt1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cxtStmt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protected by at least one common context-sensitive lock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="287" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="591" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a842ddef4d1cb9c45555d949375627a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isProtectedByCommonCILock</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>isProtectedByCommonCILock</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protected by at least one common context-insensitive lock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="288" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="569" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1af30d0dad3d17188de8c2cea9b004f3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isInSameSpan</definition>
        <argsstring>(const Instruction *I1, const Instruction *I2)</argsstring>
        <name>isInSameSpan</name>
        <param>
          <type>const Instruction *</type>
          <declname>I1</declname>
          <defname>i1</defname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>I2</declname>
          <defname>i2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if two instructions are inside at least one common lock span </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="290" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="630" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isInSameCSSpan</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2) const</argsstring>
        <name>isInSameCSSpan</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
          <defname>I1</defname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
          <defname>I2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if two instructions are inside at least one common contex-sensitive lock span </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="291" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="683" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a8595b976bf60d161561e5494257aa179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isInSameCSSpan</definition>
        <argsstring>(const CxtStmt &amp;cxtStmt1, const CxtStmt &amp;cxtStmt2) const</argsstring>
        <name>isInSameCSSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cxtStmt1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cxtStmt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if two context-sensitive instructions are inside same context-insensitive lock spa </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="292" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="669" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a65aca2bc12fc34203b16549653943eae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::isInSameCISpan</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2) const</argsstring>
        <name>isInSameCISpan</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if two instructions are inside same context-insensitive lock span </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="293" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="648" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a3df63f936d488166109d73bdcf0437d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::LockAnalysis::getNumOfCxtLocks</definition>
        <argsstring>()</argsstring>
        <name>getNumOfCxtLocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="295" column="18" bodyfile="include/MTA/LockAnalysis.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ac1b42b0a53feae04f848e5b0828ff01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::printLocks</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>printLocks</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Print locks and spans. </para>
        </briefdescription>
        <detaileddescription>
<para>Print context-insensitive and context-sensitive locks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="300" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="389" bodyend="397"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a52e79d50288bfa2d146072be53ed058b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::handleFork</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleFork</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle fork. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="304" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="402" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a97b186f9417144557bb17c41d515a9f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::handleCall</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleCall</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="307" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="423" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1acc3d402c68b9c22ab6d576b38c994fc6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::handleRet</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleRet</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="310" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="446" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a711760ebaed0437176f4f9d314e9929c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::handleIntra</definition>
        <argsstring>(const CxtStmt &amp;cts)</argsstring>
        <name>handleIntra</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cts</declname>
        </param>
        <briefdescription>
<para>Handle intra. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="313" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="492" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ab99ef73905f35d4c20ca408586fc8680" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::handleCallRelation</definition>
        <argsstring>(CxtLockProc &amp;clp, const PTACallGraphEdge *cgEdge, CallSite call)</argsstring>
        <name>handleCallRelation</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref> &amp;</type>
          <declname>clp</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge" kindref="compound">PTACallGraphEdge</ref> *</type>
          <declname>cgEdge</declname>
        </param>
        <param>
          <type>CallSite</type>
          <declname>call</declname>
          <defname>cs</defname>
        </param>
        <briefdescription>
<para>Handle call relations. </para>
        </briefdescription>
        <detaileddescription>
<para>Handling call relations when collecting context-sensitive locks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="316" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="302" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1add9272ead87ca994ee4e08dfa30fa0f4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isAliasedLocks</definition>
        <argsstring>(const CxtLock &amp;cl1, const CxtLock &amp;cl2)</argsstring>
        <name>isAliasedLocks</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtLock</ref> &amp;</type>
          <declname>cl2</declname>
        </param>
        <briefdescription>
<para>Return true it a lock matches an unlock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="319" column="10" bodyfile="include/MTA/LockAnalysis.h" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ab5a541fb1585d475a89590cce66ba3b4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isAliasedLocks</definition>
        <argsstring>(const Instruction *i1, const Instruction *i2)</argsstring>
        <name>isAliasedLocks</name>
        <param>
          <type>const Instruction *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>todo: must alias</para>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="323" column="10" bodyfile="include/MTA/LockAnalysis.h" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a375cb175ec0068bacaa64cf40a49d485" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::markCxtStmtFlag</definition>
        <argsstring>(const CxtStmt &amp;tgr, const CxtStmt &amp;src)</argsstring>
        <name>markCxtStmtFlag</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>tgr</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Mark thread flags for cxtStmt. </para>
        </briefdescription>
        <detaileddescription>
<para>Transfer function for marking context-sensitive statement </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="332" column="10" bodyfile="include/MTA/LockAnalysis.h" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1aeb479eeac0fdde1486c78da68fc82383" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::intersect</definition>
        <argsstring>(CxtLockSet &amp;tgrlockset, const CxtLockSet &amp;srclockset)</argsstring>
        <name>intersect</name>
        <param>
          <type>CxtLockSet &amp;</type>
          <declname>tgrlockset</declname>
        </param>
        <param>
          <type>const CxtLockSet &amp;</type>
          <declname>srclockset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="349" column="10" bodyfile="include/MTA/LockAnalysis.h" bodystart="349" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1adffd808458057544e3492c7afffeeebe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::LockAnalysis::clearFlagMap</definition>
        <argsstring>()</argsstring>
        <name>clearFlagMap</name>
        <briefdescription>
<para>Clear flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="367" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a8a6559c998c0b6f8e851d10ae2ab4171" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::pushToCTPWorkList</definition>
        <argsstring>(const CxtLockProc &amp;clp)</argsstring>
        <name>pushToCTPWorkList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref> &amp;</type>
          <declname>clp</declname>
        </param>
        <briefdescription>
<para>WorkList helper functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="375" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="375" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ac3de5acfb887c17ebf1213a1c2c38b58" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref></type>
        <definition>CxtLockProc SVF::LockAnalysis::popFromCTPWorkList</definition>
        <argsstring>()</argsstring>
        <name>popFromCTPWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="384" column="24" bodyfile="include/MTA/LockAnalysis.h" bodystart="384" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ad459afc7dd1e6620739eeee2bc4c570e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isVisitedCTPs</definition>
        <argsstring>(const CxtLockProc &amp;clp) const</argsstring>
        <name>isVisitedCTPs</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_proc" kindref="compound">CxtLockProc</ref> &amp;</type>
          <declname>clp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="389" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1aa5b3666fbaef262981626952f1658736" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::pushToCTSWorkList</definition>
        <argsstring>(const CxtStmt &amp;cs)</argsstring>
        <name>pushToCTSWorkList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Worklist operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="397" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a469bf90e852061a7cd8551066d6be0d1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_stmt" kindref="compound">CxtStmt</ref></type>
        <definition>CxtStmt SVF::LockAnalysis::popFromCTSWorkList</definition>
        <argsstring>()</argsstring>
        <name>popFromCTSWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="401" column="20" bodyfile="include/MTA/LockAnalysis.h" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a7d9fd3ddcadd84969b57491181983b17" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::pushCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>pushCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Push calling context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="409" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="508" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a3299f1fe234e1d6b4341498575bddcbb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LockAnalysis::matchCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>matchCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Match context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>partial match</para>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="411" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="524" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a935128c9952714fcc98febed491ee85d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LockAnalysis::validateResults</definition>
        <argsstring>()</argsstring>
        <name>validateResults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="413" column="10" bodyfile="lib/MTA/LockAnalysis.cpp" bodystart="704" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a6e34f3138e8ee558bb00d9d808afba16" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isTDFork</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDFork</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a lock site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="416" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a5521de9933ce74d0954a942dfceae772" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isTDAcquire</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDAcquire</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a lock site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="421" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1ae312fa9ddb320674f7bc31e29aa474ed" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::LockAnalysis::isTDRelease</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>isTDRelease</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Whether it is a unlock site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="426" column="17" bodyfile="include/MTA/LockAnalysis.h" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a785616f9c744d7249fd1080e5ed04d29" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::LockAnalysis::getLockVal</definition>
        <argsstring>(const Instruction *call)</argsstring>
        <name>getLockVal</name>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <briefdescription>
<para>Get lock value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="431" column="24" bodyfile="include/MTA/LockAnalysis.h" bodystart="431" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_lock_analysis_1a96a6cfddc8f7115294e8ad49a097b938" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::LockAnalysis::getTCG</definition>
        <argsstring>() const</argsstring>
        <name>getTCG</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/LockAnalysis.h" line="436" column="28" bodyfile="include/MTA/LockAnalysis.h" bodystart="436" bodyend="439"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Lock analysis </para>
    </detaileddescription>
    <location file="include/MTA/LockAnalysis.h" line="26" column="1" bodyfile="include/MTA/LockAnalysis.h" bodystart="27" bodyend="492"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0cc6e4b4ab78f3c54b68fe35adb02957" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>addCondIntraLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a177b10a617c275a9c2c2ed5e9b10d78a" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>addCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a718d6f2f55c1e2e7eb619c3e056ab458" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>addCxtStmtToSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab28428444170091d2c65572263b9f40b" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>addIntraLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4424f27444c12dce8071c56a95c664bf" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ad1516b6cb1dbd06b8dff04ae3c944621" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a8a34f7544f22a87e1caf010c34abda75" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>analyzeIntraProcedualLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a00ccd89eff3fe8fec397df101f927cbe" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>analyzeLockSpanCxtStmt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a271506d5032033efae684b0d729f5b3e" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>buildCandidateFuncSetforLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1afc4212873c3e05ac9506aac0a25f515a" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>ciLocktoSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1acdcc3fc4b90e7f67cfb9601ddc31d5f8" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CILockToSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae675d0ebf4eac597487ce83e667a8229" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CISpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1adffd808458057544e3492c7afffeeebe" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>clearFlagMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1afff2c5699e08badf5265e8183b18a02e" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>clpList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae03db88ef0ad0da2c31cf1623b32165f" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>collectCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aa8683de99ad02fb75b175b0bb54e5f7d" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>collectLockUnlocksites</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab468a6a0f1705c000dc4260097222b06" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ad855d1de318766ac305a10bfdae4da82" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockProc</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a9bd40b3051f60c527eef38ae70cfeb14" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockProcSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a058f3518f0b861c46c99095922e373f0" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockProcVec</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a3081e7c7165908ed4aa282f398c5236d" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>cxtLockset</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0716c155b42b3ae7a6c8d7593bb6ac83" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab782401c6521a2810e28ac602710ac22" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockToLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a7335d5b13a6cb1dcde9706f30b8a4826" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtLockToSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a2fd796765f16cc7094f36d68c0ff70a0" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>cxtLocktoSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a109293f282e9b920b0b13c58026f6f1d" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>cxtStmtList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a42ed881d4cd79eae099266a9e171aeb2" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtStmtSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a388ab1fdb932d68655fb7032998ab1ba" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtStmtToCxtLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae256a84fd63947a6f81bee030bdbe7fc" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>cxtStmtToCxtLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab6ee6947515c61c07428e62c267d5412" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtStmtToLockFlagMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae2218961699a4b4385f47fb039005dbe" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>CxtStmtWorkList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791ae16d4995f32298086fd37b4759ec069c" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>Empty</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a6029b3e184b169bc8a32bd1ed97148ae" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>FuncPair</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aa74d461f9dafa748e558ee120f914ce3" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>FuncPairToBool</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a561bb2fbfbeee9117efad7c7c70871d8" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>FunSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4b55036dae224c83b650389a409d9b96" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getCxtLockfromCxtStmt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0809f300ab80173523b34226bb832bd2" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getCxtLockfromCxtStmt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1afc8c13fcff7c1199f63efc198a3b5a6d" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getCxtStmtfromInst</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ad8e7c32cb1163f4917124fed5cf6c3ab" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getIntraLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a785616f9c744d7249fd1080e5ed04d29" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getLockVal</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a3df63f936d488166109d73bdcf0437d5" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getNumOfCxtLocks</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae7942c801e05357bb63f08c24489daf6" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getSpanfromCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a96a6cfddc8f7115294e8ad49a097b938" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>getTCG</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a97b186f9417144557bb17c41d515a9f4" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>handleCall</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab99ef73905f35d4c20ca408586fc8680" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>handleCallRelation</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a52e79d50288bfa2d146072be53ed058b" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>handleFork</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a711760ebaed0437176f4f9d314e9929c" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>handleIntra</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1acc3d402c68b9c22ab6d576b38c994fc6" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>handleRet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a33740d6dc51d24af2d0c8cb2fbf27db6" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasAllCxtInLockSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a6c918786d065309e8a7b13759f410a09" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a395df7174e06cad1971e6a81587ca043" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasCxtLockfromCxtStmt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0af0f5bf91f4ae175b89ef24c27c987a" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasCxtStmtfromInst</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a86f06a790cf90ec897b896a79956e5b4" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasOneCxtInLockSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1af8ada4a73bf132e1adeef7aa0522f596" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>hasSpanfromCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a277d88153d34cf3eb80272003949e4ef" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>instCILocksMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae682eb30763f0f52184eb36c95fc3811" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>InstSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a5a4167dd5dbd0017a4725c8774a5b522" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>instTocondCILocksMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a32543eb205653a65bb71de55d0471a1d" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>InstToCxtStmtSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae8715683c7dfddc7b30caf6bf2b78296" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>instToCxtStmtSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a281e41a6a1cdc21c214aafa6ea23b343" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>InstToInstSetMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aeb4b15ecc4ba1a0ca8794d304d1895cb" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>InstVec</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aeb479eeac0fdde1486c78da68fc82383" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>intersect</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1af45f3c22edce16913ccbdd7015a06076" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>intersects</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a5f693c893f3701e1e025881f91193d53" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>intraBackwardTraverse</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a6febb0bb12f4983cd54b3bd310ce65d2" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>intraForwardTraverse</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1add9272ead87ca994ee4e08dfa30fa0f4" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isAliasedLocks</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ab5a541fb1585d475a89590cce66ba3b4" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isAliasedLocks</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a65aca2bc12fc34203b16549653943eae" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInSameCISpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4245d946dd694b59b5c8ef30b08cb1dd" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInSameCSSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a8595b976bf60d161561e5494257aa179" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInSameCSSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1af30d0dad3d17188de8c2cea9b004f3d3" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInSameSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1af3b0c1b628bac48d07c24008fd9edc4f" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInsideCondIntraLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac33c03c9d4a978891009ae919559d567" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isInsideIntraLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aa91522e95e8a9450032bfeaf7a3e491c" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isIntraLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4c76b3fb18248081dc1affbc33940164" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isLockCandidateFun</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a842ddef4d1cb9c45555d949375627a48" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isProtectedByCommonCILock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a56405fa1fec68717958ed1c05dd34287" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isProtectedByCommonCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a3e2e629a588b44ed39e529babb59a4f9" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isProtectedByCommonCxtLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4d4501d62bf51475662b6ba66e6380aa" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isProtectedByCommonLock</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a5521de9933ce74d0954a942dfceae772" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isTDAcquire</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a6e34f3138e8ee558bb00d9d808afba16" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isTDFork</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ae312fa9ddb320674f7bc31e29aa474ed" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isTDRelease</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ad459afc7dd1e6620739eeee2bc4c570e" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>isVisitedCTPs</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1af8aff31058caba691c127b8aef297b43" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>LockAnalysis</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a484eb7b6f49f47a3e71054c3b798a47a" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>lockcandidateFuncSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a853ab1a953ddcf76841016a833e43f3d" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>lockQueriesTime</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a4bde0f39a6b5cf83e0011d7ef272c685" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>LockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a87c412a54f48e5314454cd1d44ef9b0e" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>locksites</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a1f9ae41c4ed7450d0d8b29cd20a6ef25" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>LockSiteToLockSet</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a07b7d49e1fbe3e5dc694b6aadbee05b8" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>LockSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1adadee129c04b82576b4ca3c7594cdcb2" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>lockTime</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a375cb175ec0068bacaa64cf40a49d485" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>markCxtStmtFlag</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a3299f1fe234e1d6b4341498575bddcbb" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>matchCxt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0eb9ee82e74e0e1646b0259554293a36" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>nonCandidateFuncLockRelMap</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a80c56ebc6b9b594e97b56767f451ff8b" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>numOfLockedQueries</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ad648ad9cda4070f9aec1addef0067627" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>numOfTotalQueries</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac3de5acfb887c17ebf1213a1c2c38b58" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>popFromCTPWorkList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a469bf90e852061a7cd8551066d6be0d1" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>popFromCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac1b42b0a53feae04f848e5b0828ff01a" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>printLocks</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a7d9fd3ddcadd84969b57491181983b17" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>pushCxt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a8a6559c998c0b6f8e851d10ae2ab4171" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>pushToCTPWorkList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aa5b3666fbaef262981626952f1658736" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>pushToCTSWorkList</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a0b21446e6d5dfc1b5d0ebd75895225dd" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>removeCxtStmtToSpan</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a2c4a69b0f2381142c172b3043943c79d" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>tct</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791a2709e7eb7ea9829c7e649e6dd86d6a48" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>TDLocked</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791ac531588e8556653306e03ccaacb83dac" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>TDUnlocked</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aaa0f33f19d9f80eee98289119ba907d2" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>touchCxtStmt</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aec459af1d1624df55ffc95cd75655780" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>unlocksites</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1ac2fbbabca4506e28f706cf54b1614791" prot="public" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>ValDomain</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1a935128c9952714fcc98febed491ee85d" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>validateResults</name></member>
      <member refid="class_s_v_f_1_1_lock_analysis_1aa9f27774c021f4d65fb6a97627355bd7" prot="private" virt="non-virtual"><scope>SVF::LockAnalysis</scope><name>visitedCTPs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
