<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_src_snk_d_d_a" xml:lang="en-US">
<title>SVF::SrcSnkDDA Class Reference</title>
<indexterm><primary>SVF::SrcSnkDDA</primary></indexterm>
<para>
<computeroutput>#include &lt;SrcSnkDDA.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::SrcSnkDDA:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_src_snk_d_d_a.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a19f02a14ee669fadc37fde3816fa2f84"/>typedef ProgSlice::SVFGNodeSet <emphasis role="strong">SVFGNodeSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ac96c2f09dee260b4378eae7eb67b21e4"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *, <link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> * &gt; <emphasis role="strong">SVFGNodeToSliceMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad6935e27bbd95d26a01b22b879efed58"/>typedef SVFGNodeSet::const_iterator <emphasis role="strong">SVFGNodeSetIter</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a83d5ccf0836f8f751aff078f88328cca"/>typedef <link linkend="_class_s_v_f_1_1_cxt_d_p_item">CxtDPItem</link> <emphasis role="strong">DPIm</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &gt; <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a">DPImSet</link></para>

<para>dpitem set </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a4f9de61860db86668606f0c276ce8117"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *, <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a">DPImSet</link> &gt; <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a4f9de61860db86668606f0c276ce8117">SVFGNodeToDPItemsMap</link></para>

<para>map a SVFGNode to its visited dpitems </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1af254f2a00cabb91c61a0a592bdb7f0f1"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt; <emphasis role="strong">CallSiteSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a70cff8ea7c033c01400935c9e446f2c6"/>typedef NodeBS <emphasis role="strong">SVFGNodeBS</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a3c0d8850c4dae49a760ce5f80fb8822a"/>typedef <link linkend="_class_s_v_f_1_1_prog_slice_1a684e44ade783439c6f77a8d84eed282c">ProgSlice::VFWorkList</link> <emphasis role="strong">WorkList</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a73f6ddd4ba868e203109c52e4f3600bd"/><link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a73f6ddd4ba868e203109c52e4f3600bd">SrcSnkDDA</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a0181630a05f915eb35a88540af6919df">~SrcSnkDDA</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ac12d813bcba4ec70de5e9048bbe16afc">analyze</link> (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> *module)</para>

<para>Start analysis here. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a8883b9a42106ed8c55835d2ba9a579cd">initialize</link> (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> *module)</para>

<para>Initialize analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1af6ee1f79b67c736ceeb591d0cdba4b06"/>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1af6ee1f79b67c736ceeb591d0cdba4b06">finalize</link> ()</para>

<para>Finalize analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1af55a78139e0bde3e166b0d43e5890c98"/><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1af55a78139e0bde3e166b0d43e5890c98">getPAG</link> () const</para>

<para>Get <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a529b40c870c74309440f025e490bb161"/>const <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a529b40c870c74309440f025e490bb161">getSVFG</link> () const</para>

<para>Get <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad445032e9b2027b3c990ce2a250257f8"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ad445032e9b2027b3c990ce2a250257f8">getCallgraph</link> () const</para>

<para>Get Callgraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a391bb031b2f244e930b266a29cda0af7"/>bool <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a391bb031b2f244e930b266a29cda0af7">isGlobalSVFGNode</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node) const</para>

<para>Whether this svfg node may access global variable. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ab35c0d1f02c83a2c10717905f1abf5cd">setCurSlice</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src)</para>

<para>Slice operations. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad50e479db8f0733326974709d6ffe653"/><link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> * <emphasis role="strong">getCurSlice</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a6caea43079963b13e9a7a017074bdbb7"/>void <emphasis role="strong">addSinkToCurSlice</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a4bde70a5d9dbf5a9234a93aaeaaacb94"/>bool <emphasis role="strong">isInCurForwardSlice</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a4cb2c14431fc432e84d382f8eeb24fe2"/>bool <emphasis role="strong">isInCurBackwardSlice</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a57262e29e81cf71a40d4feb87b92925f"/>void <emphasis role="strong">addToCurForwardSlice</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad28ffe435790d36ad872cddc213ea799"/>void <emphasis role="strong">addToCurBackwardSlice</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1afc75e55af839ef535d80555fd422342c">isInAWrapper</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *src, CallSiteSet &amp;csIdSet)</para>

<para>Identify allocation wrappers. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1aa87e9ca3c9a9dc6ae5cc88a0182a8154"/>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1aa87e9ca3c9a9dc6ae5cc88a0182a8154">reportBug</link> (<link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> *slice)=0</para>

<para>report bug on the current analyzed slice </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a0c3d3b5ac74aa933178fa46b949d8bef"/>const SVFGNodeSet &amp; <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a0c3d3b5ac74aa933178fa46b949d8bef">getSources</link> () const</para>

<para>Get sources/sinks. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a0515c9079f28f8c5d4f0f9a2fc39a137"/>SVFGNodeSetIter <emphasis role="strong">sourcesBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad0cb9de24cbc99d148f63b694dc3908e"/>SVFGNodeSetIter <emphasis role="strong">sourcesEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1acdffb63fd5ae67306640bfe2fcfc3a79"/>void <emphasis role="strong">addToSources</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a1145c601df2e3dec1e32e43613447b96"/>const SVFGNodeSet &amp; <emphasis role="strong">getSinks</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a79833c0cf1916d63e1dd32c2220056dd"/>SVFGNodeSetIter <emphasis role="strong">sinksBegin</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1aaabc8d3aed17c8a35ef37d878f141412"/>SVFGNodeSetIter <emphasis role="strong">sinksEnd</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a9c276e24d13cd1e8e5fbad10b46047f8"/>void <emphasis role="strong">addToSinks</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a1a6ae6b1f6864057067d0e5533ea801e"/><link linkend="_class_s_v_f_1_1_path_cond_allocator">PathCondAllocator</link> * <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a1a6ae6b1f6864057067d0e5533ea801e">getPathAllocator</link> () const</para>

<para>Get path condition allocator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a1c8f91ffa0b9f01d51c8cd5e14f076d5">initSrcs</link> ()=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a0f6cfa30c346aab1fb03a44e47c32559"/>virtual void <emphasis role="strong">initSnks</emphasis> ()=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1af363509d2eae46391f99b0c99bea2899"/>virtual bool <emphasis role="strong">isSourceLikeFun</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a15cddcb6159d70b682b66251c715ca49"/>virtual bool <emphasis role="strong">isSinkLikeFun</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a5a3fbadaabb707dfb4849bad80ba35c4"/>virtual bool <emphasis role="strong">isSource</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a6958090c1daa148ff17bb6ea013dfae1"/>virtual bool <emphasis role="strong">isSink</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)=0</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1abf20d02932b7ca983b9bd790812b1f40"/>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1abf20d02932b7ca983b9bd790812b1f40">FWProcessCurNode</link> (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item)</para>

<para>Forward traverse. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1adc2ac209e2d5e561bcb594db4c77051b"/>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1adc2ac209e2d5e561bcb594db4c77051b">BWProcessCurNode</link> (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item)</para>

<para>Backward traverse. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1ad2203ca5bd08c6fbebd31a8a010edebb">FWProcessOutgoingEdge</link> (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item, <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *edge)</para>

<para>Propagate information forward by matching context. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a1ea0d4c4e53ff6986dd50d624ba2bff5">BWProcessIncomingEdge</link> (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item, <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> *edge)</para>

<para>Propagate information backward without matching context, as forward analysis already did it. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a8c86d30498e86745883fbaea4f530eae"/>bool <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a8c86d30498e86745883fbaea4f530eae">forwardVisited</link> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node, const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item)</para>

<para>Whether has been visited or not, in order to avoid recursion on <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a51c65cb4b8ea107161e112a8fd3fb7d4"/>void <emphasis role="strong">addForwardVisited</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node, const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp;item)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a32cc8a131b2448b5e8e1fe65d99fd286"/>bool <emphasis role="strong">backwardVisited</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1aa061e2d72d3045c9712512c6df002544"/>void <emphasis role="strong">addBackwardVisited</emphasis> (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> *node)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1af048c70d7e68da22835570a3381eb14d"/>void <emphasis role="strong">clearVisitedMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a6ae0d47bac09163e90b8b2e773ad69f0"/>virtual bool <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a6ae0d47bac09163e90b8b2e773ad69f0">isAllPathReachable</link> ()</para>

<para>Whether it is all path reachable from a source. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a19ab6f6df2a67b294268cfe7f4287fd7"/>virtual bool <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1a19ab6f6df2a67b294268cfe7f4287fd7">isSomePathReachable</link> ()</para>

<para>Whether it is some path reachable from a source. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1acae985068ff1c20fb81c4c9ba730aaba"/>void <link linkend="_class_s_v_f_1_1_src_snk_d_d_a_1acae985068ff1c20fb81c4c9ba730aaba">dumpSlices</link> ()</para>

<para>Dump <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> with annotated slice informaiton. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a8817604b20724703121e9466e5cdb4cd"/>void <emphasis role="strong">annotateSlice</emphasis> (<link linkend="_class_s_v_f_1_1_prog_slice">ProgSlice</link> *slice)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ae3d665ff1e796348131e797eb0283bfb"/>void <emphasis role="strong">printBDDStat</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ab6803f0a2b3507213ad2979b9b12f700"/><link linkend="_class_s_v_f_1_1_saber_s_v_f_g_builder">SaberSVFGBuilder</link> <emphasis role="strong">memSSA</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ae657ebdeae8a083cfec210859a0023e4"/><link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> * <emphasis role="strong">svfg</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a97be553370acf305f86e903bc3f0bb1a"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <emphasis role="strong">ptaCallGraph</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>General source-sink analysis, which serves as a base analysis to be extended for various clients </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a0181630a05f915eb35a88540af6919df"/>    <section>
    <title>~SrcSnkDDA()</title>
<indexterm><primary>~SrcSnkDDA</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>~SrcSnkDDA</secondary></indexterm>
<para><computeroutput>virtual SVF::SrcSnkDDA::~SrcSnkDDA ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>the following shared by multiple checkers, thus can not be released.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ac12d813bcba4ec70de5e9048bbe16afc"/>    <section>
    <title>analyze()</title>
<indexterm><primary>analyze</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>analyze</secondary></indexterm>
<para><computeroutput>void SrcSnkDDA::analyze (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * module)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Start analysis here. </para>
</para>

<para>do not consider there is bug when reaching a global SVFGNode if we touch a global, then we assume the client uses this memory until the program exits.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a1ea0d4c4e53ff6986dd50d624ba2bff5"/>    <section>
    <title>BWProcessIncomingEdge()</title>
<indexterm><primary>BWProcessIncomingEdge</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>BWProcessIncomingEdge</secondary></indexterm>
<para><computeroutput>void SrcSnkDDA::BWProcessIncomingEdge (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp; item, <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> * edge)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Propagate information backward without matching context, as forward analysis already did it. </para>
</para>

<para>Propagate information backward without matching context, as forward analysis already did it </para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ad2203ca5bd08c6fbebd31a8a010edebb"/>    <section>
    <title>FWProcessOutgoingEdge()</title>
<indexterm><primary>FWProcessOutgoingEdge</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>FWProcessOutgoingEdge</secondary></indexterm>
<para><computeroutput>void SrcSnkDDA::FWProcessOutgoingEdge (const <link linkend="_class_s_v_f_1_1_cxt_d_p_item">DPIm</link> &amp; item, <link linkend="_class_s_v_f_1_1_v_f_g_edge">SVFGEdge</link> * edge)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Propagate information forward by matching context. </para>
</para>

<para>Propagate information forward by matching context </para>

<para>handle globals here</para>

<para>perform context sensitive reachability</para>

<para>whether this dstNode has been visited or not</para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a8883b9a42106ed8c55835d2ba9a579cd"/>    <section>
    <title>initialize()</title>
<indexterm><primary>initialize</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>initialize</secondary></indexterm>
<para><computeroutput>void SrcSnkDDA::initialize (<link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * module)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Initialize analysis. </para>
</para>

<para>allocate control-flow graph branch conditions</para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1a1c8f91ffa0b9f01d51c8cd5e14f076d5"/>    <section>
    <title>initSrcs()</title>
<indexterm><primary>initSrcs</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>initSrcs</secondary></indexterm>
<para><computeroutput>virtual void SVF::SrcSnkDDA::initSrcs ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Initialize sources and sinks </para>
<para>
Implemented in <link linkend="_class_s_v_f_1_1_leak_checker_1a459205dd6bb225e48bfd0ef274555e47">SVF::LeakChecker</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1afc75e55af839ef535d80555fd422342c"/>    <section>
    <title>isInAWrapper()</title>
<indexterm><primary>isInAWrapper</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>isInAWrapper</secondary></indexterm>
<para><computeroutput>bool SrcSnkDDA::isInAWrapper (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> * src, CallSiteSet &amp; csIdSet)</computeroutput></para><para>

<para>Identify allocation wrappers. </para>
</para>

<para>determine whether a SVFGNode n is in a allocation wrapper function, if so, return all SVFGNodes which receive the value of node n </para>
    </section><anchor xml:id="_class_s_v_f_1_1_src_snk_d_d_a_1ab35c0d1f02c83a2c10717905f1abf5cd"/>    <section>
    <title>setCurSlice()</title>
<indexterm><primary>setCurSlice</primary><secondary>SVF::SrcSnkDDA</secondary></indexterm>
<indexterm><primary>SVF::SrcSnkDDA</primary><secondary>setCurSlice</secondary></indexterm>
<para><computeroutput>void SrcSnkDDA::setCurSlice (const <link linkend="_class_s_v_f_1_1_v_f_g_node">SVFGNode</link> * src)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Slice operations. </para>
</para>

<para>Set current slice. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/SABER/SrcSnkDDA.hlib/SABER/SrcSnkDDA.cpp</section>
</section>
