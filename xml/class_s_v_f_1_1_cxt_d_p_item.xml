<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_d_p_item" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtDPItem</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_d_p_item" prot="public" virt="non-virtual">SVF::DPItem</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_d_p_item_1ab89e9f588054ad8a99d9af8e756c951b" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_context_cond" kindref="compound">ContextCond</ref></type>
        <definition>ContextCond SVF::CxtDPItem::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="725" column="17" bodyfile="include/Util/DPItem.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a673749f246b002b33ca3718a566779ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtDPItem::CxtDPItem</definition>
        <argsstring>(NodeID c, const ContextCond &amp;cxt)</argsstring>
        <name>CxtDPItem</name>
        <param>
          <type>NodeID</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_context_cond" kindref="compound">ContextCond</ref> &amp;</type>
          <declname>cxt</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="729" column="5" bodyfile="include/Util/DPItem.h" bodystart="729" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a1c2b14fd60bd4902bfc520c9ba08c6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtDPItem::CxtDPItem</definition>
        <argsstring>(const CxtVar &amp;var)</argsstring>
        <name>CxtDPItem</name>
        <param>
          <type>const <ref refid="namespace_s_v_f_1ab3532a31724d8719d29aa4c3521ca215" kindref="member">CxtVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="732" column="5" bodyfile="include/Util/DPItem.h" bodystart="732" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a53fa464132d5e51e832158d2e928db32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtDPItem::CxtDPItem</definition>
        <argsstring>(const CxtDPItem &amp;dps)</argsstring>
        <name>CxtDPItem</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
          <declname>dps</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="736" column="5" bodyfile="include/Util/DPItem.h" bodystart="736" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1ab53f35a96c5fd3a750fd6fa6ea971a36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtDPItem::~CxtDPItem</definition>
        <argsstring>()</argsstring>
        <name>~CxtDPItem</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="741" column="13" bodyfile="include/Util/DPItem.h" bodystart="741" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a1dea25cd5d72c52cef1cff23b832a196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_context_cond" kindref="compound">ContextCond</ref> &amp;</type>
        <definition>const ContextCond&amp; SVF::CxtDPItem::getContexts</definition>
        <argsstring>() const</argsstring>
        <name>getContexts</name>
        <briefdescription>
<para>Get context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="746" column="30" bodyfile="include/Util/DPItem.h" bodystart="746" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a31a33a291b4bb688f54572c986c0b845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtDPItem::pushContext</definition>
        <argsstring>(NodeID cxt)</argsstring>
        <name>pushContext</name>
        <param>
          <type>NodeID</type>
          <declname>cxt</declname>
        </param>
        <briefdescription>
<para>Push context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="751" column="17" bodyfile="include/Util/DPItem.h" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1ad386861998e54ec754ca62f358f03e6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::CxtDPItem::matchContext</definition>
        <argsstring>(NodeID cxt)</argsstring>
        <name>matchContext</name>
        <param>
          <type>NodeID</type>
          <declname>cxt</declname>
        </param>
        <briefdescription>
<para>Match context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="757" column="25" bodyfile="include/Util/DPItem.h" bodystart="757" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1aa2841c6ef632e747357ebcde0118ec49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtDPItem::operator&lt;</definition>
        <argsstring>(const CxtDPItem &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="764" column="12" bodyfile="include/Util/DPItem.h" bodystart="764" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1abe0913f8d672a079fa674dbcc3e1b3db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
        <definition>CxtDPItem&amp; SVF::CxtDPItem::operator=</definition>
        <argsstring>(const CxtDPItem &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="772" column="22" bodyfile="include/Util/DPItem.h" bodystart="772" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1a52003b33daa4902545159cf4e225d6ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtDPItem::operator==</definition>
        <argsstring>(const CxtDPItem &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="782" column="17" bodyfile="include/Util/DPItem.h" bodystart="782" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_d_p_item_1ac4c40bac3d914c61db60751503201c57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtDPItem::operator!=</definition>
        <argsstring>(const CxtDPItem &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading Operator!=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="787" column="17" bodyfile="include/Util/DPItem.h" bodystart="787" bodyend="790"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::DPItem</label>
        <link refid="class_s_v_f_1_1_d_p_item"/>
      </node>
      <node id="1">
        <label>SVF::CxtDPItem</label>
        <link refid="class_s_v_f_1_1_cxt_d_p_item"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::DPItem</label>
        <link refid="class_s_v_f_1_1_d_p_item"/>
      </node>
      <node id="1">
        <label>SVF::CxtDPItem</label>
        <link refid="class_s_v_f_1_1_cxt_d_p_item"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Util/DPItem.h" line="722" column="1" bodyfile="include/Util/DPItem.h" bodystart="723" bodyend="792"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1ab89e9f588054ad8a99d9af8e756c951b" prot="private" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>context</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a82d2a11fb456192ec88fcb5ffe239d80" prot="protected" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>cur</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a673749f246b002b33ca3718a566779ca" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>CxtDPItem</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a1c2b14fd60bd4902bfc520c9ba08c6e8" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>CxtDPItem</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a53fa464132d5e51e832158d2e928db32" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>CxtDPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1ac5dbe11ebf512e6dccdfa1eceba04fe8" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>DPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a715b7de4a392d8c389e611e27f8b9184" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>DPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a6048fa772b5023710c34687c4f047d44" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a1dea25cd5d72c52cef1cff23b832a196" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>getContexts</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a03a90eca842c0e83d874902103f6fdb2" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>getCurNodeID</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1af9d8f95249190e164131dc19b6db1b67" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>getMaxBudget</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1ad386861998e54ec754ca62f358f03e6a" prot="public" virt="virtual"><scope>SVF::CxtDPItem</scope><name>matchContext</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a5dbb0e6010b38c5b937ff06cb40cd0ef" prot="protected" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>maximumBudget</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1ac4c40bac3d914c61db60751503201c57" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1add804064ca2bfaa16bcc25503698a1ea" prot="public" virt="non-virtual" ambiguityscope="SVF::DPItem::"><scope>SVF::CxtDPItem</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1aa2841c6ef632e747357ebcde0118ec49" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a639c757076141a14bedc26c73f875ffe" prot="public" virt="non-virtual" ambiguityscope="SVF::DPItem::"><scope>SVF::CxtDPItem</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1abe0913f8d672a079fa674dbcc3e1b3db" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a10226d37dfef045bec9f7cfb78315440" prot="public" virt="non-virtual" ambiguityscope="SVF::DPItem::"><scope>SVF::CxtDPItem</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a52003b33daa4902545159cf4e225d6ea" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1ad67fcd340351360555b0cb88f57b183a" prot="public" virt="non-virtual" ambiguityscope="SVF::DPItem::"><scope>SVF::CxtDPItem</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1a31a33a291b4bb688f54572c986c0b845" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>pushContext</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a5fbde30cae2cb09bd9dc9a6969ea4b90" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>setCurNodeID</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a687ef8944ccb55b826508c47ea5b9240" prot="public" virt="non-virtual"><scope>SVF::CxtDPItem</scope><name>setMaxBudget</name></member>
      <member refid="class_s_v_f_1_1_cxt_d_p_item_1ab53f35a96c5fd3a750fd6fa6ea971a36" prot="public" virt="virtual"><scope>SVF::CxtDPItem</scope><name>~CxtDPItem</name></member>
      <member refid="class_s_v_f_1_1_d_p_item_1a1df86140eee6015369836d20d509f14d" prot="public" virt="virtual"><scope>SVF::CxtDPItem</scope><name>~DPItem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
