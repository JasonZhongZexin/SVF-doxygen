<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_path_cond_allocator_8h" kind="file" language="C++">
    <compoundname>PathCondAllocator.h</compoundname>
    <includes refid="_s_v_f_module_8h" local="yes">Util/SVFModule.h</includes>
    <includes refid="_data_flow_util_8h" local="yes">SVF-FE/DataFlowUtil.h</includes>
    <includes refid="_conditions_8h" local="yes">Util/Conditions.h</includes>
    <includes refid="_work_list_8h" local="yes">Util/WorkList.h</includes>
    <includedby refid="_pointer_analysis_8h" local="yes">include/MemoryModel/PointerAnalysis.h</includedby>
    <includedby refid="_prog_slice_8h" local="yes">include/SABER/ProgSlice.h</includedby>
    <includedby refid="_d_p_item_8h" local="yes">include/Util/DPItem.h</includedby>
    <includedby refid="_path_cond_allocator_8cpp" local="yes">lib/Util/PathCondAllocator.cpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>list</label>
      </node>
      <node id="27">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>system_error</label>
      </node>
      <node id="53">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="51">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="63">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="68">
        <label>assert.h</label>
      </node>
      <node id="33">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="36">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="7">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="6">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="50">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="1">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="39">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="59">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="61">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="40">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="12">
        <label>unordered_set</label>
      </node>
      <node id="20">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="5">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="38">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="52">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="28">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="2">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="29">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="22">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="67">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stack</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="21">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="25">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="54">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="8">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="19">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="62">
        <label>math.h</label>
      </node>
      <node id="58">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="49">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="69">
        <label>cstdlib</label>
      </node>
      <node id="55">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="48">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="16">
        <label>deque</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="46">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="4">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="42">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="47">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="44">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="32">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="57">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="60">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="43">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="34">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="56">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="23">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="37">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="41">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="25">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="43">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/Util/CFLSolver.h</label>
        <link refid="_c_f_l_solver_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="45">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="28">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="34">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="22">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="12">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="11">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="38">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="39">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="14">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="23">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="15">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="40">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="27">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="31">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>include/Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="33">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="42">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_v_f_1_1_path_cond_allocator" prot="public">SVF::PathCondAllocator</innerclass>
    <innernamespace refid="namespace_s_v_f">SVF</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>PathCondAllocator.h<sp/>--<sp/>Path<sp/>condition<sp/>manipulation---------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2017&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>PathAllocator.h</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>3,<sp/>2014</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Yulei<sp/>Sui</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PATHALLOCATOR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PATHALLOCATOR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/SVFModule.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/DataFlowUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/Conditions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/WorkList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_s_v_f_1_1_path_cond_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u32_t<sp/>totalCondNum;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">DdNode</ref><sp/><ref refid="struct_dd_node" kindref="compound">Condition</ref>;</highlight></codeline>
<codeline lineno="51" refid="class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;u32_t,Condition*&gt;<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b" kindref="member">CondPosMap</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>BasicBlock*,<sp/>CondPosMap<sp/>&gt;<sp/>BBCondMap;<sp/><sp/></highlight><highlight class="comment">//<sp/>map<sp/>bb<sp/>to<sp/>a<sp/>Condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>Condition*,<sp/>const<sp/>Instruction*<sp/>&gt;<sp/>CondToTermInstMap;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>map<sp/>a<sp/>condition<sp/>to<sp/>its<sp/>branch<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set&lt;const<sp/>BasicBlock*&gt;<sp/>BasicBlockSet;</highlight></codeline>
<codeline lineno="55" refid="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>Function*,<sp/><sp/>BasicBlockSet&gt;<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" kindref="member">FunToExitBBsMap</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;const<sp/>BasicBlock*,<sp/>Condition*&gt;<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" kindref="member">BBToCondMap</ref>;<sp/></highlight></codeline>
<codeline lineno="57" refid="class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList&lt;const BasicBlock*&gt;</ref><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1" kindref="member">CFWorkList</ref>;<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map&lt;u32_t,Condition*&gt;<sp/>IndexToConditionMap;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1" kindref="member">PathCondAllocator</ref>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getBddCondManager();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67" refid="class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3" kindref="member">~PathCondAllocator</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>trueCond()</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBddCondManager()-&gt;getTrueCond();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>falseCond()</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBddCondManager()-&gt;getFalseCond();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"></codeline>
<codeline lineno="83" refid="class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>u32_t<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb" kindref="member">getMemUsage</ref>()</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBddCondManager()-&gt;getBDDMemUsage();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>u32_t<sp/>getCondNum()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBddCondManager()-&gt;getCondNumber();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>u32_t<sp/>getMaxLiveCondNumber()</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBddCondManager()-&gt;getMaxLiveCondNumber();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a3fce010083b85a4421eed4c17eb54640" kindref="member">allocate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SVFModule*<sp/>module);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca" kindref="member">getCondInst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>cond)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="102"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CondToTermInstMap::const_iterator<sp/>it<sp/>=<sp/>condToInstMap.find(cond);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=condToInstMap.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;this<sp/>should<sp/>be<sp/>a<sp/>fresh<sp/>condition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DominatorTree*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88" kindref="member">getDT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cfInfoBuilder.<ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder_1afb3864bae4ac95c7d3b731634c1abdab" kindref="member">getDT</ref>(fun);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114" refid="class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PostDominatorTree*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e" kindref="member">getPostDT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cfInfoBuilder.<ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder_1a00e3339dab62325354e8ecd8251da0f1" kindref="member">getPostDT</ref>(fun);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119" refid="class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>LoopInfo*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f" kindref="member">getLoopInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>f)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cfInfoBuilder.<ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder_1a418e6009760a7c9a048d2ffd9cd29956" kindref="member">getLoopInfo</ref>(f);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"></codeline>
<codeline lineno="126" refid="class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61" kindref="member">condAnd</ref>(<ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>lhs,<sp/><ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>rhs)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;<ref refid="class_s_v_f_1_1_bdd_cond_manager_1a7439d48e29f497c5a1606dec0288ee40" kindref="member">AND</ref>(lhs,rhs);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>condOr(Condition*<sp/>lhs,<sp/>Condition*<sp/>rhs)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;<ref refid="class_s_v_f_1_1_bdd_cond_manager_1adfe12ffee44c87abc5b10ab184454bc4" kindref="member">OR</ref>(lhs,rhs);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>condNeg(Condition*<sp/>cond)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;NEG(cond);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>getTrueCond()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="139"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;getTrueCond();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>getFalseCond()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="143"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;getFalseCond();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147" refid="class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2" kindref="member">getCond</ref>(u32_t<sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="148"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexToConditionMap::const_iterator<sp/>it<sp/>=<sp/>indexToDDNodeMap.find(i);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(it!=indexToDDNodeMap.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;condition<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154" refid="class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodeBS<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb" kindref="member">exactCondElem</ref>(<ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>cond)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeBS<sp/>elems;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;BddSupport(cond,elems);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elems;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161" refid="class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9" kindref="member">markForRelease</ref>(<ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>cond)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;markForRelease(cond);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166" refid="class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57" kindref="member">printDbg</ref>(<ref refid="struct_dd_node" kindref="compound">Condition</ref>*<sp/>cond)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;printDbg(cond);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>dumpCond(Condition*<sp/>cond)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="171"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;<ref refid="class_s_v_f_1_1_bdd_cond_manager_1abb0a08b6b2e0c599fd3d9a57ba751943" kindref="member">dumpStr</ref>(cond);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"></codeline>
<codeline lineno="177"></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Condition*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a5ab573cce84584c44778611ba6f4d99c" kindref="member">ComputeIntraVFGGuard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>dst);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Condition*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a9c3361e3f37d640b177c3955f3c3667f" kindref="member">ComputeInterCallVFGGuard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>callBB);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Condition*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a5015e36d00ac59ef2b832019b8f922f5" kindref="member">ComputeInterRetVFGGuard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>retBB);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Condition*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1abef2785eb426d5e1d6f273300c691db6" kindref="member">getPHIComplementCond</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>BB1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>BB2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>BB0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearCFCond()</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbToCondMap.clear();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191" refid="class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7" kindref="member">setCurEvalVal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curEvalVal<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196" refid="class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e" kindref="member">getCurEvalVal</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curEvalVal;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a2932b15ef74e46b676075ba1b2e82111" kindref="member">printPathCond</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocateForBB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock&amp;<sp/>bb);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBranchCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ,<sp/>Condition*<sp/>cond);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition*<sp/>getBranchCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>getEvalBrCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val<sp/>=<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e" kindref="member">getCurEvalVal</ref>())</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateBranchCond(bb,<sp/>succ,<sp/>val);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getBranchCond(bb,succ);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition*<sp/>evaluateBranchCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)<sp/>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition*<sp/>evaluateLoopExitBranch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*<sp/>bb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition*<sp/>evaluateTestNullLikeExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BranchInst*<sp/>brInst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition*<sp/>evaluateProgExit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BranchInst*<sp/>brInst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock<sp/>*succ);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>collectBBCallingProgExit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock&amp;<sp/>bb);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBBCallsProgExit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb);</highlight></codeline>
<codeline lineno="239"></codeline>
<codeline lineno="241"></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEQCmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmpInst*<sp/>cmp)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNECmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmpInst*<sp/>cmp)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTestNullExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>test,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTestNotNullExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>test,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTestContainsNullAndTheValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CmpInst*<sp/>cmp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>val)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setCFCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb,<sp/>Condition*<sp/>cond)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBToCondMap::iterator<sp/>it<sp/>=<sp/>bbToCondMap.find(bb);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it!=bbToCondMap.end()<sp/>&amp;&amp;<sp/>it-&gt;second<sp/>==<sp/>cond)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbToCondMap[bb]<sp/>=<sp/>cond;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>getCFCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicBlock*<sp/>bb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="267"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBToCondMap::const_iterator<sp/>it<sp/>=<sp/>bbToCondMap.find(bb);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it==bbToCondMap.end())</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFalseCond();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>createNewCond(u32_t<sp/>i)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(indexToDDNodeMap.find(i)==indexToDDNodeMap.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>be<sp/>fresh<sp/>index<sp/>to<sp/>create<sp/>new<sp/>BDD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition*<sp/>d<sp/>=<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>-&gt;Cudd_bdd(i);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexToDDNodeMap[i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Condition*<sp/>newCond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction*<sp/>inst)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition*<sp/>cond<sp/>=<sp/>createNewCond(totalCondNum++);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(condToInstMap.find(cond)==condToInstMap.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;this<sp/>should<sp/>be<sp/>a<sp/>fresh<sp/>condition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condToInstMap[cond]<sp/>=<sp/>inst;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cond;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BddCondManager*<sp/>getBddCondManager()</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>==NULL)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BddCondManager();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>CondToTermInstMap<sp/>condToInstMap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>PTACFInfoBuilder<sp/>cfInfoBuilder;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" kindref="member">FunToExitBBsMap</ref><sp/>funToExitBBsMap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" kindref="member">BBToCondMap</ref><sp/>bbToCondMap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>curEvalVal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312" refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_bdd_cond_manager" kindref="compound">BddCondManager</ref>*<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" kindref="member">bddCondMgr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313" refid="class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BBCondMap<sp/><ref refid="class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc" kindref="member">bbConds</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>IndexToConditionMap<sp/>indexToDDNodeMap;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>namespace<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PATHALLOCATOR_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/Util/PathCondAllocator.h"/>
  </compounddef>
</doxygen>
