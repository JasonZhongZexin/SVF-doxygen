<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_cxt_stmt" xml:lang="en-US">
<title>SVF::CxtStmt Class Reference</title>
<indexterm><primary>SVF::CxtStmt</primary></indexterm>
<para>
<computeroutput>#include &lt;CxtStmt.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::CxtStmt:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_cxt_stmt.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1ac11734a3e0db8415fdf55157b20b56a4"/><link linkend="_class_s_v_f_1_1_cxt_stmt_1ac11734a3e0db8415fdf55157b20b56a4">CxtStmt</link> (const CallStrCxt &amp;c, const Instruction *f)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1ad976db5b794019bb68ccc9a35349fb41"/><link linkend="_class_s_v_f_1_1_cxt_stmt_1ad976db5b794019bb68ccc9a35349fb41">CxtStmt</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;ctm)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a47425e8de39da25ffd9fe5a8e51584f7"/>virtual <link linkend="_class_s_v_f_1_1_cxt_stmt_1a47425e8de39da25ffd9fe5a8e51584f7">~CxtStmt</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28"/>const CallStrCxt &amp; <link linkend="_class_s_v_f_1_1_cxt_stmt_1a3ce19b8f2de2e199ed4165dbe9d21f28">getContext</link> () const</para>

<para>Return current context. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6"/>const Instruction * <link linkend="_class_s_v_f_1_1_cxt_stmt_1a5e8c4b10eb5c3240d2e21a020ed834a6">getStmt</link> () const</para>

<para>Return current statement. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_cxt_stmt_1a8492998e88e895945845f5c666e86888">operator&lt;</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a4f431c7b6f3434eff34b4cea6853066b"/><link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; <link linkend="_class_s_v_f_1_1_cxt_stmt_1a4f431c7b6f3434eff34b4cea6853066b">operator=</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;rhs)</para>

<para>Overloading operator=. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1af7b0afe54ce69ec8f753d701818a7eca"/>bool <link linkend="_class_s_v_f_1_1_cxt_stmt_1af7b0afe54ce69ec8f753d701818a7eca">operator==</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a2a9aa82c6d4b95c6f1af0332666d8070"/>bool <link linkend="_class_s_v_f_1_1_cxt_stmt_1a2a9aa82c6d4b95c6f1af0332666d8070">operator!=</link> (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp;rhs) const</para>

<para>Overloading operator==. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a85aa14770cec41503d674958f64c43ee"/>std::string <link linkend="_class_s_v_f_1_1_cxt_stmt_1a85aa14770cec41503d674958f64c43ee">cxtToStr</link> () const</para>

<para>Return context in string format. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a56e2767c327a383db09dca96edb19614"/>void <link linkend="_class_s_v_f_1_1_cxt_stmt_1a56e2767c327a383db09dca96edb19614">dump</link> () const</para>

<para>Dump <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1ae451ee5a61dbdd2367a04cee304bbcb1"/>CallStrCxt <emphasis role="strong">cxt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a237b8738885e57d5a9b984221f611567"/>const Instruction * <emphasis role="strong">inst</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Context-sensitive thread statement &lt;c,s&gt; </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_cxt_stmt_1a8492998e88e895945845f5c666e86888"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>SVF::CxtStmt</secondary></indexterm>
<indexterm><primary>SVF::CxtStmt</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool SVF::CxtStmt::operator&lt; (const <link linkend="_class_s_v_f_1_1_cxt_stmt">CxtStmt</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/Util/CxtStmt.h</section>
</section>
