<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_src_snk_d_d_a" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::SrcSnkDDA</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_c_f_l_solver" prot="public" virt="non-virtual">SVF::CFLSolver&lt; SVFG *, CxtDPItem &gt;</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_leak_checker" prot="public" virt="non-virtual">SVF::LeakChecker</derivedcompoundref>
    <includes refid="_src_snk_d_d_a_8h" local="no">SrcSnkDDA.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a1c8f91ffa0b9f01d51c8cd5e14f076d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::initSrcs</definition>
        <argsstring>()=0</argsstring>
        <name>initSrcs</name>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1a459205dd6bb225e48bfd0ef274555e47">initSrcs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize sources and sinks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="170" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a0f6cfa30c346aab1fb03a44e47c32559" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::initSnks</definition>
        <argsstring>()=0</argsstring>
        <name>initSnks</name>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1a5a40ee40e8e780f316f9f7cfadd655c2">initSnks</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="171" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1af363509d2eae46391f99b0c99bea2899" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isSourceLikeFun</definition>
        <argsstring>(const SVFFunction *fun)=0</argsstring>
        <name>isSourceLikeFun</name>
        <reimplementedby refid="class_s_v_f_1_1_file_checker_1ab2ed4c1d3aa00ac663441f32d9f3115f">isSourceLikeFun</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1ad837e251ec0d3aa1f04748a59930fd7c">isSourceLikeFun</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="172" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a15cddcb6159d70b682b66251c715ca49" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isSinkLikeFun</definition>
        <argsstring>(const SVFFunction *fun)=0</argsstring>
        <name>isSinkLikeFun</name>
        <reimplementedby refid="class_s_v_f_1_1_file_checker_1aac61c4566cd79827879f4862664a432e">isSinkLikeFun</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1aed909eededb365814a625abf9039d3a7">isSinkLikeFun</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="173" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a5a3fbadaabb707dfb4849bad80ba35c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isSource</definition>
        <argsstring>(const SVFGNode *node)=0</argsstring>
        <name>isSource</name>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1af792e4592732e0bb935f893405a9e2f3">isSource</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="174" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a6958090c1daa148ff17bb6ea013dfae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isSink</definition>
        <argsstring>(const SVFGNode *node)=0</argsstring>
        <name>isSink</name>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1ad3fc1b8ff5d6042ca18e7ce563c33694">isSink</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="175" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1a19f02a14ee669fadc37fde3816fa2f84" prot="public" static="no">
        <type>ProgSlice::SVFGNodeSet</type>
        <definition>typedef ProgSlice::SVFGNodeSet SVF::SrcSnkDDA::SVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="51" column="36" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1ac96c2f09dee260b4378eae7eb67b21e4" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *, <ref refid="class_s_v_f_1_1_prog_slice" kindref="compound">ProgSlice</ref> * &gt;</type>
        <definition>typedef Map&lt;const SVFGNode*,ProgSlice*&gt; SVF::SrcSnkDDA::SVFGNodeToSliceMap</definition>
        <argsstring></argsstring>
        <name>SVFGNodeToSliceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="52" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1ad6935e27bbd95d26a01b22b879efed58" prot="public" static="no">
        <type>SVFGNodeSet::const_iterator</type>
        <definition>typedef SVFGNodeSet::const_iterator SVF::SrcSnkDDA::SVFGNodeSetIter</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSetIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="53" column="41" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1a83d5ccf0836f8f751aff078f88328cca" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">CxtDPItem</ref></type>
        <definition>typedef CxtDPItem SVF::SrcSnkDDA::DPIm</definition>
        <argsstring></argsstring>
        <name>DPIm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="54" column="23" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a" prot="public" static="no">
        <type>Set&lt; <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &gt;</type>
        <definition>typedef Set&lt;DPIm&gt; SVF::SrcSnkDDA::DPImSet</definition>
        <argsstring></argsstring>
        <name>DPImSet</name>
        <briefdescription>
<para>dpitem set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="55" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1a4f9de61860db86668606f0c276ce8117" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *, <ref refid="class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a" kindref="member">DPImSet</ref> &gt;</type>
        <definition>typedef Map&lt;const SVFGNode*, DPImSet&gt; SVF::SrcSnkDDA::SVFGNodeToDPItemsMap</definition>
        <argsstring></argsstring>
        <name>SVFGNodeToDPItemsMap</name>
        <briefdescription>
<para>map a SVFGNode to its visited dpitems </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="56" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1af254f2a00cabb91c61a0a592bdb7f0f1" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const CallBlockNode*&gt; SVF::SrcSnkDDA::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="57" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1a70cff8ea7c033c01400935c9e446f2c6" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::SrcSnkDDA::SVFGNodeBS</definition>
        <argsstring></argsstring>
        <name>SVFGNodeBS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="58" column="20" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_src_snk_d_d_a_1a3c0d8850c4dae49a760ce5f80fb8822a" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_prog_slice_1a684e44ade783439c6f77a8d84eed282c" kindref="member">ProgSlice::VFWorkList</ref></type>
        <definition>typedef ProgSlice::VFWorkList SVF::SrcSnkDDA::WorkList</definition>
        <argsstring></argsstring>
        <name>WorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="59" column="35" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a60dcf333cb36230d5f3070e8d238ad6d" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_prog_slice" kindref="compound">ProgSlice</ref> *</type>
        <definition>ProgSlice* SVF::SrcSnkDDA::_curSlice</definition>
        <argsstring></argsstring>
        <name>_curSlice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="62" column="15" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a96c41d03d2615f952b58dca327a2866c" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::SrcSnkDDA::sources</definition>
        <argsstring></argsstring>
        <name>sources</name>
        <briefdescription>
<para>current program slice </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="63" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1aaffd4b48be1f99e0450b23f20f034b1e" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::SrcSnkDDA::sinks</definition>
        <argsstring></argsstring>
        <name>sinks</name>
        <briefdescription>
<para>source nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="64" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a3008dc334d4500516507544a86ec6d9c" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> *</type>
        <definition>PathCondAllocator* SVF::SrcSnkDDA::pathCondAllocator</definition>
        <argsstring></argsstring>
        <name>pathCondAllocator</name>
        <briefdescription>
<para>source nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="65" column="23" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a5f4f97bc480e899004b0432a78fd94a4" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_src_snk_d_d_a_1a4f9de61860db86668606f0c276ce8117" kindref="member">SVFGNodeToDPItemsMap</ref></type>
        <definition>SVFGNodeToDPItemsMap SVF::SrcSnkDDA::nodeToDPItemsMap</definition>
        <argsstring></argsstring>
        <name>nodeToDPItemsMap</name>
        <briefdescription>
<para>record forward visited dpitems </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="66" column="26" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a2349db6c540e418600e2fdbe2e665628" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::SrcSnkDDA::visitedSet</definition>
        <argsstring></argsstring>
        <name>visitedSet</name>
        <briefdescription>
<para>record backward visited nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="67" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1ab6803f0a2b3507213ad2979b9b12f700" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_saber_s_v_f_g_builder" kindref="compound">SaberSVFGBuilder</ref></type>
        <definition>SaberSVFGBuilder SVF::SrcSnkDDA::memSSA</definition>
        <argsstring></argsstring>
        <name>memSSA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="70" column="22" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1ae657ebdeae8a083cfec210859a0023e4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> *</type>
        <definition>SVFG* SVF::SrcSnkDDA::svfg</definition>
        <argsstring></argsstring>
        <name>svfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="71" column="10" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_src_snk_d_d_a_1a97be553370acf305f86e903bc3f0bb1a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::SrcSnkDDA::ptaCallGraph</definition>
        <argsstring></argsstring>
        <name>ptaCallGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="72" column="18" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a73f6ddd4ba868e203109c52e4f3600bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SrcSnkDDA::SrcSnkDDA</definition>
        <argsstring>()</argsstring>
        <name>SrcSnkDDA</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="77" column="5" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a0181630a05f915eb35a88540af6919df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::SrcSnkDDA::~SrcSnkDDA</definition>
        <argsstring>()</argsstring>
        <name>~SrcSnkDDA</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>the following shared by multiple checkers, thus can not be released.</para>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="82" column="13" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="82" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ac12d813bcba4ec70de5e9048bbe16afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::analyze</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>analyze</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Start analysis here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>do not consider there is bug when reaching a global SVFGNode if we touch a global, then we assume the client uses this memory until the program exits.</para>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="103" column="18" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="62" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a8883b9a42106ed8c55835d2ba9a579cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::initialize</definition>
        <argsstring>(SVFModule *module)</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Initialize analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>allocate control-flow graph branch conditions</para>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="106" column="18" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="45" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1af6ee1f79b67c736ceeb591d0cdba4b06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Finalize analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="109" column="18" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1af55a78139e0bde3e166b0d43e5890c98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
        <definition>PAG* SVF::SrcSnkDDA::getPAG</definition>
        <argsstring>() const</argsstring>
        <name>getPAG</name>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="115" column="9" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a529b40c870c74309440f025e490bb161" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> *</type>
        <definition>const SVFG* SVF::SrcSnkDDA::getSVFG</definition>
        <argsstring>() const</argsstring>
        <name>getSVFG</name>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="121" column="23" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ad445032e9b2027b3c990ce2a250257f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
        <definition>PTACallGraph* SVF::SrcSnkDDA::getCallgraph</definition>
        <argsstring>() const</argsstring>
        <name>getCallgraph</name>
        <briefdescription>
<para>Get Callgraph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="127" column="25" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a391bb031b2f244e930b266a29cda0af7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SrcSnkDDA::isGlobalSVFGNode</definition>
        <argsstring>(const SVFGNode *node) const</argsstring>
        <name>isGlobalSVFGNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether this svfg node may access global variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="133" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ab35c0d1f02c83a2c10717905f1abf5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::setCurSlice</definition>
        <argsstring>(const SVFGNode *src)</argsstring>
        <name>setCurSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Slice operations. </para>
        </briefdescription>
        <detaileddescription>
<para>Set current slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="139" column="18" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ad50e479db8f0733326974709d6ffe653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_prog_slice" kindref="compound">ProgSlice</ref> *</type>
        <definition>ProgSlice* SVF::SrcSnkDDA::getCurSlice</definition>
        <argsstring>() const</argsstring>
        <name>getCurSlice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="141" column="22" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a6caea43079963b13e9a7a017074bdbb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addSinkToCurSlice</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addSinkToCurSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="145" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a4bde70a5d9dbf5a9234a93aaeaaacb94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SrcSnkDDA::isInCurForwardSlice</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>isInCurForwardSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="150" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a4cb2c14431fc432e84d382f8eeb24fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SrcSnkDDA::isInCurBackwardSlice</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>isInCurBackwardSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="154" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a57262e29e81cf71a40d4feb87b92925f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addToCurForwardSlice</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addToCurForwardSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="158" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ad28ffe435790d36ad872cddc213ea799" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addToCurBackwardSlice</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addToCurBackwardSlice</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="162" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1afc75e55af839ef535d80555fd422342c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SrcSnkDDA::isInAWrapper</definition>
        <argsstring>(const SVFGNode *src, CallSiteSet &amp;csIdSet)</argsstring>
        <name>isInAWrapper</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>CallSiteSet &amp;</type>
          <declname>csIdSet</declname>
        </param>
        <briefdescription>
<para>Identify allocation wrappers. </para>
        </briefdescription>
        <detaileddescription>
<para>determine whether a SVFGNode n is in a allocation wrapper function, if so, return all SVFGNodes which receive the value of node n </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="179" column="10" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="119" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1aa87e9ca3c9a9dc6ae5cc88a0182a8154" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::reportBug</definition>
        <argsstring>(ProgSlice *slice)=0</argsstring>
        <name>reportBug</name>
        <reimplementedby refid="class_s_v_f_1_1_double_free_checker_1aa6bde3be780876317dcdcdf26d2ece2a">reportBug</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_file_checker_1a88ffc46ca954b77463de4c94c4eace54">reportBug</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_leak_checker_1a5d8f0d698b354f4c28fef9c51ac39bb6">reportBug</reimplementedby>
        <param>
          <type><ref refid="class_s_v_f_1_1_prog_slice" kindref="compound">ProgSlice</ref> *</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
<para>report bug on the current analyzed slice </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="182" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a0c3d3b5ac74aa933178fa46b949d8bef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SVFGNodeSet &amp;</type>
        <definition>const SVFGNodeSet&amp; SVF::SrcSnkDDA::getSources</definition>
        <argsstring>() const</argsstring>
        <name>getSources</name>
        <briefdescription>
<para>Get sources/sinks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="186" column="30" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a0515c9079f28f8c5d4f0f9a2fc39a137" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SVFGNodeSetIter</type>
        <definition>SVFGNodeSetIter SVF::SrcSnkDDA::sourcesBegin</definition>
        <argsstring>() const</argsstring>
        <name>sourcesBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="190" column="28" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ad0cb9de24cbc99d148f63b694dc3908e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SVFGNodeSetIter</type>
        <definition>SVFGNodeSetIter SVF::SrcSnkDDA::sourcesEnd</definition>
        <argsstring>() const</argsstring>
        <name>sourcesEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="194" column="28" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1acdffb63fd5ae67306640bfe2fcfc3a79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addToSources</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addToSources</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="198" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a1145c601df2e3dec1e32e43613447b96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SVFGNodeSet &amp;</type>
        <definition>const SVFGNodeSet&amp; SVF::SrcSnkDDA::getSinks</definition>
        <argsstring>() const</argsstring>
        <name>getSinks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="202" column="30" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a79833c0cf1916d63e1dd32c2220056dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SVFGNodeSetIter</type>
        <definition>SVFGNodeSetIter SVF::SrcSnkDDA::sinksBegin</definition>
        <argsstring>() const</argsstring>
        <name>sinksBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="206" column="28" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1aaabc8d3aed17c8a35ef37d878f141412" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SVFGNodeSetIter</type>
        <definition>SVFGNodeSetIter SVF::SrcSnkDDA::sinksEnd</definition>
        <argsstring>() const</argsstring>
        <name>sinksEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="210" column="28" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a9c276e24d13cd1e8e5fbad10b46047f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addToSinks</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addToSinks</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="214" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a1a6ae6b1f6864057067d0e5533ea801e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> *</type>
        <definition>PathCondAllocator* SVF::SrcSnkDDA::getPathAllocator</definition>
        <argsstring>() const</argsstring>
        <name>getPathAllocator</name>
        <briefdescription>
<para>Get path condition allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="221" column="23" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="221" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1abf20d02932b7ca983b9bd790812b1f40" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::FWProcessCurNode</definition>
        <argsstring>(const DPIm &amp;item)</argsstring>
        <name>FWProcessCurNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Forward traverse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="228" column="25" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="228" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1adc2ac209e2d5e561bcb594db4c77051b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::SrcSnkDDA::BWProcessCurNode</definition>
        <argsstring>(const DPIm &amp;item)</argsstring>
        <name>BWProcessCurNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Backward traverse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="240" column="25" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="240" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ad2203ca5bd08c6fbebd31a8a010edebb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::FWProcessOutgoingEdge</definition>
        <argsstring>(const DPIm &amp;item, SVFGEdge *edge)</argsstring>
        <name>FWProcessOutgoingEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Propagate information forward by matching context. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate information forward by matching context </para>
        </detaileddescription>
        <inbodydescription>
<para>handle globals here</para>
<para>perform context sensitive reachability</para>
<para>whether this dstNode has been visited or not</para>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="249" column="18" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="179" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a1ea0d4c4e53ff6986dd50d624ba2bff5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::BWProcessIncomingEdge</definition>
        <argsstring>(const DPIm &amp;item, SVFGEdge *edge)</argsstring>
        <name>BWProcessIncomingEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Propagate information backward without matching context, as forward analysis already did it. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate information backward without matching context, as forward analysis already did it </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="251" column="18" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="244" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a8c86d30498e86745883fbaea4f530eae" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SrcSnkDDA::forwardVisited</definition>
        <argsstring>(const SVFGNode *node, const DPIm &amp;item)</argsstring>
        <name>forwardVisited</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Whether has been visited or not, in order to avoid recursion on <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="254" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="254" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a51c65cb4b8ea107161e112a8fd3fb7d4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addForwardVisited</definition>
        <argsstring>(const SVFGNode *node, const DPIm &amp;item)</argsstring>
        <name>addForwardVisited</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_d_p_item" kindref="compound">DPIm</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="262" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a32cc8a131b2448b5e8e1fe65d99fd286" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SrcSnkDDA::backwardVisited</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>backwardVisited</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="266" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1aa061e2d72d3045c9712512c6df002544" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::addBackwardVisited</definition>
        <argsstring>(const SVFGNode *node)</argsstring>
        <name>addBackwardVisited</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="270" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1af048c70d7e68da22835570a3381eb14d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SrcSnkDDA::clearVisitedMap</definition>
        <argsstring>()</argsstring>
        <name>clearVisitedMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="274" column="17" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a6ae0d47bac09163e90b8b2e773ad69f0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isAllPathReachable</definition>
        <argsstring>()</argsstring>
        <name>isAllPathReachable</name>
        <briefdescription>
<para>Whether it is all path reachable from a source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="282" column="18" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a19ab6f6df2a67b294268cfe7f4287fd7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::SrcSnkDDA::isSomePathReachable</definition>
        <argsstring>()</argsstring>
        <name>isSomePathReachable</name>
        <briefdescription>
<para>Whether it is some path reachable from a source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="287" column="18" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1acae985068ff1c20fb81c4c9ba730aaba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::dumpSlices</definition>
        <argsstring>()</argsstring>
        <name>dumpSlices</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> with annotated slice informaiton. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="293" column="10" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1a8817604b20724703121e9466e5cdb4cd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::annotateSlice</definition>
        <argsstring>(ProgSlice *slice)</argsstring>
        <name>annotateSlice</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_prog_slice" kindref="compound">ProgSlice</ref> *</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="294" column="10" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="271" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_src_snk_d_d_a_1ae3d665ff1e796348131e797eb0283bfb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SrcSnkDDA::printBDDStat</definition>
        <argsstring>()</argsstring>
        <name>printBDDStat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SrcSnkDDA.h" line="295" column="10" bodyfile="lib/SABER/SrcSnkDDA.cpp" bodystart="289" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>General source-sink analysis, which serves as a base analysis to be extended for various clients </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>SVF::DoubleFreeChecker</label>
        <link refid="class_s_v_f_1_1_double_free_checker"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::FileChecker</label>
        <link refid="class_s_v_f_1_1_file_checker"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::LeakChecker</label>
        <link refid="class_s_v_f_1_1_leak_checker"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::SrcSnkDDA</label>
        <link refid="class_s_v_f_1_1_src_snk_d_d_a"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CFLSrcSnkSolver</label>
        <link refid="class_s_v_f_1_1_c_f_l_solver"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="22">
        <label>SVF::MRGenerator</label>
        <link refid="class_s_v_f_1_1_m_r_generator"/>
      </node>
      <node id="16">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="4">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="8">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="11">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="17">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="19">
        <label>SVF::MemSSA</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a"/>
        <childnode refid="20" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>mrGen</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mssa</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>SVF::MemSSAStat</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="14">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="10">
        <label>SVF::SVFGStat</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="23">
        <label>SVF::SaberSVFGBuilder</label>
        <link refid="class_s_v_f_1_1_saber_s_v_f_g_builder"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>SVF::SVFGBuilder</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_builder"/>
        <childnode refid="5" relation="usage">
          <edgelabel>globalSvfg</edgelabel>
          <edgelabel>svfg</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>SVF::SrcSnkDDA</label>
        <link refid="class_s_v_f_1_1_src_snk_d_d_a"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>svfg</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>memSSA</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CFLSrcSnkSolver</label>
        <link refid="class_s_v_f_1_1_c_f_l_solver"/>
      </node>
      <node id="3">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="12">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="13" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/SABER/SrcSnkDDA.h" line="47" column="1" bodyfile="include/SABER/SrcSnkDDA.h" bodystart="48" bodyend="298"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a60dcf333cb36230d5f3070e8d238ad6d" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>_curSlice</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1aa061e2d72d3045c9712512c6df002544" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addBackwardVisited</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a51c65cb4b8ea107161e112a8fd3fb7d4" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addForwardVisited</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a6caea43079963b13e9a7a017074bdbb7" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addSinkToCurSlice</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad28ffe435790d36ad872cddc213ea799" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addToCurBackwardSlice</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a57262e29e81cf71a40d4feb87b92925f" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addToCurForwardSlice</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a9c276e24d13cd1e8e5fbad10b46047f8" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addToSinks</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1acdffb63fd5ae67306640bfe2fcfc3a79" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>addToSources</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ac12d813bcba4ec70de5e9048bbe16afc" prot="public" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a8817604b20724703121e9466e5cdb4cd" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>annotateSlice</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1abf651315ae100f9d4df5d183f7d43c68" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>backwardTraverse</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a32cc8a131b2448b5e8e1fe65d99fd286" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>backwardVisited</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1adc2ac209e2d5e561bcb594db4c77051b" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>BWProcessCurNode</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ab444cce6a5c75c7e6c65d47039e567a8" prot="protected" virt="virtual" ambiguityscope="SVF::CFLSolver::"><scope>SVF::SrcSnkDDA</scope><name>BWProcessCurNode</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a1ea0d4c4e53ff6986dd50d624ba2bff5" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>BWProcessIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a3d5550fbb149297022d5a1852f3229b3" prot="protected" virt="virtual" ambiguityscope="SVF::CFLSolver::"><scope>SVF::SrcSnkDDA</scope><name>BWProcessIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1af254f2a00cabb91c61a0a592bdb7f0f1" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ab339e69dd2f2aa2f98fb549e979838af" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>CFLSolver</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1adf0b96a758a29d5c3c46fcc48081b62c" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>child_iterator</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1af048c70d7e68da22835570a3381eb14d" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>clearVisitedMap</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a83d5ccf0836f8f751aff078f88328cca" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>DPIm</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ab3cc8f13ea8de2db4ba874280802667a" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>DPImSet</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1acae985068ff1c20fb81c4c9ba730aaba" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>dumpSlices</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1af6ee1f79b67c736ceeb591d0cdba4b06" prot="public" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>finalize</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ac9dc4e29fde45a19d42987360ee5f528" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>forwardTraverse</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a8c86d30498e86745883fbaea4f530eae" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>forwardVisited</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1abf20d02932b7ca983b9bd790812b1f40" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>FWProcessCurNode</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a6d7361281bbf666a2f5da87f7ea869d2" prot="protected" virt="virtual" ambiguityscope="SVF::CFLSolver::"><scope>SVF::SrcSnkDDA</scope><name>FWProcessCurNode</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad2203ca5bd08c6fbebd31a8a010edebb" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>FWProcessOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a39b079c9b8a1b4570176028de79e85a4" prot="protected" virt="virtual" ambiguityscope="SVF::CFLSolver::"><scope>SVF::SrcSnkDDA</scope><name>FWProcessOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1aaddd6c593ad39c117bd35ede711b9f36" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>GEDGE</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad445032e9b2027b3c990ce2a250257f8" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getCallgraph</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad50e479db8f0733326974709d6ffe653" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getCurSlice</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1adaa8ca9296ec3e9b6ec544a105296d22" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getNode</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a31199503d0ed7aff97d4620b3599dea6" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>getNodeIDFromItem</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1af55a78139e0bde3e166b0d43e5890c98" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a1a6ae6b1f6864057067d0e5533ea801e" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getPathAllocator</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a1145c601df2e3dec1e32e43613447b96" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getSinks</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a0c3d3b5ac74aa933178fa46b949d8bef" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getSources</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a529b40c870c74309440f025e490bb161" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>getSVFG</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a7a180d7878fc7b4c055fa72298398127" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>GNODE</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a9fc4cbe8985d4c25845d408ffcac13e4" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>graph</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1afdead1450dbc71d4430ab660733ff85c" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>GTraits</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a8883b9a42106ed8c55835d2ba9a579cd" prot="public" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>initialize</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a0f6cfa30c346aab1fb03a44e47c32559" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>initSnks</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a1c8f91ffa0b9f01d51c8cd5e14f076d5" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>initSrcs</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a98613e4d455a53183d1f16a58de6244e" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>inv_child_iterator</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ae507eecc97716000324820bb1a7a9573" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>InvGTraits</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a6ae0d47bac09163e90b8b2e773ad69f0" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>isAllPathReachable</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a391bb031b2f244e930b266a29cda0af7" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isGlobalSVFGNode</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1afc75e55af839ef535d80555fd422342c" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isInAWrapper</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a4cb2c14431fc432e84d382f8eeb24fe2" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isInCurBackwardSlice</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a4bde70a5d9dbf5a9234a93aaeaaacb94" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isInCurForwardSlice</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a435454f52e5be39c960052f1947b984d" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isInWorklist</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a6958090c1daa148ff17bb6ea013dfae1" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>isSink</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a15cddcb6159d70b682b66251c715ca49" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>isSinkLikeFun</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a19ab6f6df2a67b294268cfe7f4287fd7" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>isSomePathReachable</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a5a3fbadaabb707dfb4849bad80ba35c4" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>isSource</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1af363509d2eae46391f99b0c99bea2899" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>isSourceLikeFun</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a4f35edfc7c4e4a35c9948ab5abd1a6ad" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>isWorklistEmpty</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ab6803f0a2b3507213ad2979b9b12f700" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>memSSA</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a586cfb2dd110d1853e70e534e0f66624" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>node_iterator</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a5f4f97bc480e899004b0432a78fd94a4" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>nodeToDPItemsMap</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a3008dc334d4500516507544a86ec6d9c" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>pathCondAllocator</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a88f770b4762d44e50d72cd50bb504078" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>popFromWorklist</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ae3d665ff1e796348131e797eb0283bfb" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>printBDDStat</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a97be553370acf305f86e903bc3f0bb1a" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>ptaCallGraph</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1a28cd2677717b19c9cd8ab3c1c441d409" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>pushIntoWorklist</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1aa87e9ca3c9a9dc6ae5cc88a0182a8154" prot="public" virt="pure-virtual"><scope>SVF::SrcSnkDDA</scope><name>reportBug</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ab35c0d1f02c83a2c10717905f1abf5cd" prot="public" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>setCurSlice</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ae0a02179b2489f65988819666ec52a7c" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>setGraph</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1aaffd4b48be1f99e0450b23f20f034b1e" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sinks</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a79833c0cf1916d63e1dd32c2220056dd" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sinksBegin</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1aaabc8d3aed17c8a35ef37d878f141412" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sinksEnd</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a96c41d03d2615f952b58dca327a2866c" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sources</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a0515c9079f28f8c5d4f0f9a2fc39a137" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sourcesBegin</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad0cb9de24cbc99d148f63b694dc3908e" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>sourcesEnd</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a73f6ddd4ba868e203109c52e4f3600bd" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SrcSnkDDA</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ae657ebdeae8a083cfec210859a0023e4" prot="protected" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>svfg</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a70cff8ea7c033c01400935c9e446f2c6" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SVFGNodeBS</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a19f02a14ee669fadc37fde3816fa2f84" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ad6935e27bbd95d26a01b22b879efed58" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SVFGNodeSetIter</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a4f9de61860db86668606f0c276ce8117" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SVFGNodeToDPItemsMap</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1ac96c2f09dee260b4378eae7eb67b21e4" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>SVFGNodeToSliceMap</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a2349db6c540e418600e2fdbe2e665628" prot="private" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>visitedSet</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a3c0d8850c4dae49a760ce5f80fb8822a" prot="public" virt="non-virtual"><scope>SVF::SrcSnkDDA</scope><name>WorkList</name></member>
      <member refid="class_s_v_f_1_1_c_f_l_solver_1ac37d5e6e81edcc0a6c53e02d7d343f5b" prot="protected" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>~CFLSolver</name></member>
      <member refid="class_s_v_f_1_1_src_snk_d_d_a_1a0181630a05f915eb35a88540af6919df" prot="public" virt="virtual"><scope>SVF::SrcSnkDDA</scope><name>~SrcSnkDDA</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
