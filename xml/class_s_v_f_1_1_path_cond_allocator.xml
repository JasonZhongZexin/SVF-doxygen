<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_path_cond_allocator" kind="class" language="C++" prot="public">
    <compoundname>SVF::PathCondAllocator</compoundname>
    <includes refid="_path_cond_allocator_8h" local="no">PathCondAllocator.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1a259f9a44936d03ab8bd7455d1058d39d" prot="public" static="no">
        <type><ref refid="struct_dd_node" kindref="compound">DdNode</ref></type>
        <definition>typedef DdNode SVF::PathCondAllocator::Condition</definition>
        <argsstring></argsstring>
        <name>Condition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="50" column="20" bodyfile="include/Util/PathCondAllocator.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b" prot="public" static="no">
        <type>Map&lt; u32_t, <ref refid="struct_dd_node" kindref="compound">Condition</ref> * &gt;</type>
        <definition>typedef Map&lt;u32_t,Condition*&gt; SVF::PathCondAllocator::CondPosMap</definition>
        <argsstring></argsstring>
        <name>CondPosMap</name>
        <briefdescription>
<para>map a branch to its Condition </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="51" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1ab95a992cea9ccc23e31d4d48fce01055" prot="public" static="no">
        <type>Map&lt; const BasicBlock *, <ref refid="class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b" kindref="member">CondPosMap</ref> &gt;</type>
        <definition>typedef Map&lt;const BasicBlock*, CondPosMap &gt; SVF::PathCondAllocator::BBCondMap</definition>
        <argsstring></argsstring>
        <name>BBCondMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="52" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1a286e0aa5122ce38017ffbd4e250acfdf" prot="public" static="no">
        <type>Map&lt; const <ref refid="struct_dd_node" kindref="compound">Condition</ref> *, const Instruction * &gt;</type>
        <definition>typedef Map&lt;const Condition*, const Instruction* &gt; SVF::PathCondAllocator::CondToTermInstMap</definition>
        <argsstring></argsstring>
        <name>CondToTermInstMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="53" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1aef4a1396ee439e0d6cd89695a81a7365" prot="public" static="no">
        <type>Set&lt; const BasicBlock * &gt;</type>
        <definition>typedef Set&lt;const BasicBlock*&gt; SVF::PathCondAllocator::BasicBlockSet</definition>
        <argsstring></argsstring>
        <name>BasicBlockSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="54" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" prot="public" static="no">
        <type>Map&lt; const Function *, BasicBlockSet &gt;</type>
        <definition>typedef Map&lt;const Function*, BasicBlockSet&gt; SVF::PathCondAllocator::FunToExitBBsMap</definition>
        <argsstring></argsstring>
        <name>FunToExitBBsMap</name>
        <briefdescription>
<para>map a function to all its basic blocks calling program exit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="55" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" prot="public" static="no">
        <type>Map&lt; const BasicBlock *, <ref refid="struct_dd_node" kindref="compound">Condition</ref> * &gt;</type>
        <definition>typedef Map&lt;const BasicBlock*, Condition*&gt; SVF::PathCondAllocator::BBToCondMap</definition>
        <argsstring></argsstring>
        <name>BBToCondMap</name>
        <briefdescription>
<para>map a basic block to its condition during control-flow guard computation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="56" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; const BasicBlock * &gt;</type>
        <definition>typedef FIFOWorkList&lt;const BasicBlock*&gt; SVF::PathCondAllocator::CFWorkList</definition>
        <argsstring></argsstring>
        <name>CFWorkList</name>
        <briefdescription>
<para>worklist for control-flow guard computation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="57" column="26" bodyfile="include/Util/PathCondAllocator.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_path_cond_allocator_1a7761a4dd6da8b36b15dcc0b89a9ec6b3" prot="public" static="no">
        <type>Map&lt; u32_t, <ref refid="struct_dd_node" kindref="compound">Condition</ref> * &gt;</type>
        <definition>typedef Map&lt;u32_t,Condition*&gt; SVF::PathCondAllocator::IndexToConditionMap</definition>
        <argsstring></argsstring>
        <name>IndexToConditionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="59" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1ada8a9c85ae34068d5b33547aee7796d9" prot="public" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t PathCondAllocator::totalCondNum</definition>
        <argsstring></argsstring>
        <name>totalCondNum</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="48" column="18" bodyfile="include/Util/PathCondAllocator.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1a143e4b84c549f23621c27fd7baddfe4f" prot="private" static="no" mutable="no">
        <type>CondToTermInstMap</type>
        <definition>CondToTermInstMap SVF::PathCondAllocator::condToInstMap</definition>
        <argsstring></argsstring>
        <name>condToInstMap</name>
        <briefdescription>
<para>map a condition to its corresponding llvm instruction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="305" column="23" bodyfile="include/Util/PathCondAllocator.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1a4949fb25fe4cd461de8aec90756b1fea" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder" kindref="compound">PTACFInfoBuilder</ref></type>
        <definition>PTACFInfoBuilder SVF::PathCondAllocator::cfInfoBuilder</definition>
        <argsstring></argsstring>
        <name>cfInfoBuilder</name>
        <briefdescription>
<para>map a function to its loop info </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="306" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1ad35f1bdb406a85c5bfdcbbc15642853b" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" kindref="member">FunToExitBBsMap</ref></type>
        <definition>FunToExitBBsMap SVF::PathCondAllocator::funToExitBBsMap</definition>
        <argsstring></argsstring>
        <name>funToExitBBsMap</name>
        <briefdescription>
<para>map a function to all its basic blocks calling program exit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="307" column="21" bodyfile="include/Util/PathCondAllocator.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1ac3a0aa27f317d7d9214181b599f19f24" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" kindref="member">BBToCondMap</ref></type>
        <definition>BBToCondMap SVF::PathCondAllocator::bbToCondMap</definition>
        <argsstring></argsstring>
        <name>bbToCondMap</name>
        <briefdescription>
<para>map a basic block to its path condition starting from root </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="308" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1aa1e1b83c3a2c760a00bcd6bf5e63482b" prot="private" static="no" mutable="no">
        <type>const Value *</type>
        <definition>const Value* SVF::PathCondAllocator::curEvalVal</definition>
        <argsstring></argsstring>
        <name>curEvalVal</name>
        <briefdescription>
<para>current llvm value to evaluate branch condition when computing guards </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="309" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_bdd_cond_manager" kindref="compound">BddCondManager</ref> *</type>
        <definition>BddCondManager * PathCondAllocator::bddCondMgr</definition>
        <argsstring></argsstring>
        <name>bddCondMgr</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>bbd manager </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="312" column="27" bodyfile="include/Util/PathCondAllocator.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc" prot="protected" static="no" mutable="no">
        <type>BBCondMap</type>
        <definition>BBCondMap SVF::PathCondAllocator::bbConds</definition>
        <argsstring></argsstring>
        <name>bbConds</name>
        <briefdescription>
<para>map basic block to its successors/predecessors branch conditions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="313" column="15" bodyfile="include/Util/PathCondAllocator.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_path_cond_allocator_1a27f89f89bd6eda0355ccdcc5c5df6f32" prot="protected" static="no" mutable="no">
        <type>IndexToConditionMap</type>
        <definition>IndexToConditionMap SVF::PathCondAllocator::indexToDDNodeMap</definition>
        <argsstring></argsstring>
        <name>indexToDDNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="314" column="25" bodyfile="include/Util/PathCondAllocator.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::PathCondAllocator::PathCondAllocator</definition>
        <argsstring>()</argsstring>
        <name>PathCondAllocator</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="62" column="5" bodyfile="include/Util/PathCondAllocator.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::PathCondAllocator::~PathCondAllocator</definition>
        <argsstring>()</argsstring>
        <name>~PathCondAllocator</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="67" column="13" bodyfile="include/Util/PathCondAllocator.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a3fce010083b85a4421eed4c17eb54640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathCondAllocator::allocate</definition>
        <argsstring>(const SVFModule *module)</argsstring>
        <name>allocate</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>module</declname>
          <defname>M</defname>
        </param>
        <briefdescription>
<para>Perform path allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate path condition for each branch </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="98" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="54" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Instruction *</type>
        <definition>const Instruction* SVF::PathCondAllocator::getCondInst</definition>
        <argsstring>(const Condition *cond) const</argsstring>
        <name>getCondInst</name>
        <param>
          <type>const <ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Get llvm conditional expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="101" column="30" bodyfile="include/Util/PathCondAllocator.h" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DominatorTree *</type>
        <definition>DominatorTree* SVF::PathCondAllocator::getDT</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getDT</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get dominators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="109" column="26" bodyfile="include/Util/PathCondAllocator.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PostDominatorTree *</type>
        <definition>PostDominatorTree* SVF::PathCondAllocator::getPostDT</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getPostDT</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get Postdominators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="114" column="30" bodyfile="include/Util/PathCondAllocator.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LoopInfo *</type>
        <definition>LoopInfo* SVF::PathCondAllocator::getLoopInfo</definition>
        <argsstring>(const Function *f)</argsstring>
        <name>getLoopInfo</name>
        <param>
          <type>const Function *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Get LoopInfo. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="119" column="21" bodyfile="include/Util/PathCondAllocator.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::condAnd</definition>
        <argsstring>(Condition *lhs, Condition *rhs)</argsstring>
        <name>condAnd</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Condition operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="126" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a5a8c25d74ffc2a8f8dbd20faab4d9803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::condOr</definition>
        <argsstring>(Condition *lhs, Condition *rhs)</argsstring>
        <name>condOr</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="130" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ac1ed60a8f59a55811c97c83def3bb739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::condNeg</definition>
        <argsstring>(Condition *cond)</argsstring>
        <name>condNeg</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="134" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a1a6bde0db54c91fba7e6bac0acff664a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::getTrueCond</definition>
        <argsstring>() const</argsstring>
        <name>getTrueCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="138" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a0d059c9adce2c998ddf2489376beb8e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::getFalseCond</definition>
        <argsstring>() const</argsstring>
        <name>getFalseCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="142" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::getCond</definition>
        <argsstring>(u32_t i) const</argsstring>
        <name>getCond</name>
        <param>
          <type>u32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Given an index, get its condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="147" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeBS</type>
        <definition>NodeBS SVF::PathCondAllocator::exactCondElem</definition>
        <argsstring>(Condition *cond)</argsstring>
        <name>exactCondElem</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Iterator every element of the bdd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="154" column="19" bodyfile="include/Util/PathCondAllocator.h" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PathCondAllocator::markForRelease</definition>
        <argsstring>(Condition *cond)</argsstring>
        <name>markForRelease</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Decrease reference counting for the bdd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="161" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PathCondAllocator::printDbg</definition>
        <argsstring>(Condition *cond)</argsstring>
        <name>printDbg</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Print debug information for this condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="166" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1aae773a674331bb80cc589835e0b16e4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::PathCondAllocator::dumpCond</definition>
        <argsstring>(Condition *cond) const</argsstring>
        <name>dumpCond</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="170" column="24" bodyfile="include/Util/PathCondAllocator.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a5ab573cce84584c44778611ba6f4d99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::ComputeIntraVFGGuard</definition>
        <argsstring>(const BasicBlock *src, const BasicBlock *dst)</argsstring>
        <name>ComputeIntraVFGGuard</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>src</declname>
          <defname>srcBB</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>dst</declname>
          <defname>dstBB</defname>
        </param>
        <briefdescription>
<para>Guard Computation for a value-flow (between two basic blocks) </para>
        </briefdescription>
        <detaileddescription>
<para>Compute intra-procedural guards between two SVFGNodes (inside same function) </para>
        </detaileddescription>
        <inbodydescription>
<para>if the dstBB is the eligible loop exit of the current basic block we can early terminate the computation</para>
<para>calculate the branch condition if succ post dominate bb, then we get brCond quicker by using postDT note that we assume loop exit always post dominate loop bodys which means loops are approximated only once.</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="178" column="23" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="448" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a9c3361e3f37d640b177c3955f3c3667f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::ComputeInterCallVFGGuard</definition>
        <argsstring>(const BasicBlock *src, const BasicBlock *dst, const BasicBlock *callBB)</argsstring>
        <name>ComputeInterCallVFGGuard</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>src</declname>
          <defname>srcBB</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>dst</declname>
          <defname>dstBB</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>callBB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute calling inter-procedural guards between two SVFGNodes (from caller to callee) src <ndash/>c1--&gt; callBB <ndash/>true--&gt; funEntryBB <ndash/>c2--&gt; dst the InterCallVFGGuard is c1 ^ c2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="179" column="23" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="420" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a5015e36d00ac59ef2b832019b8f922f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::ComputeInterRetVFGGuard</definition>
        <argsstring>(const BasicBlock *src, const BasicBlock *dst, const BasicBlock *retBB)</argsstring>
        <name>ComputeInterRetVFGGuard</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>src</declname>
          <defname>srcBB</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>dst</declname>
          <defname>dstBB</defname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>retBB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute return inter-procedural guards between two SVFGNodes (from callee to caller) src <ndash/>c1--&gt; funExitBB <ndash/>true--&gt; retBB <ndash/>c2--&gt; dst the InterRetVFGGuard is c1 ^ c2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="180" column="23" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="435" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1abef2785eb426d5e1d6f273300c691db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::getPHIComplementCond</definition>
        <argsstring>(const BasicBlock *BB1, const BasicBlock *BB2, const BasicBlock *BB0)</argsstring>
        <name>getPHIComplementCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB1</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB2</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>BB0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get complement condition (from B1 to B0) according to a complementBB (BB2) at a phi e.g., B0: dstBB; B1:incomingBB; B2:complementBB</para>
<para>Get complement phi condition e.g., B0: dstBB; B1:incomingBB; B2:complementBB Assume B0 (phi node) is the successor of both B1 and B2. If B1 dominates B2, and B0 not dominate B2 then condition from B1--&gt;B0 = neg(B1--&gt;B2)^(B1--&gt;B0) </para>
        </detaileddescription>
        <inbodydescription>
<para>avoid both BB0 and BB1 dominate BB2 (e.g., while loop), then BB2 is not necessaryly a complement BB</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="184" column="23" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="400" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a3462dbe3d0f8df08e3b6a6c6ef0b065c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PathCondAllocator::clearCFCond</definition>
        <argsstring>()</argsstring>
        <name>clearCFCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="186" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::PathCondAllocator::setCurEvalVal</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>setCurEvalVal</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set current value for branch condition evaluation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="191" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::PathCondAllocator::getCurEvalVal</definition>
        <argsstring>() const</argsstring>
        <name>getCurEvalVal</name>
        <briefdescription>
<para>Get current value for branch condition evaluation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="196" column="24" bodyfile="include/Util/PathCondAllocator.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a2932b15ef74e46b676075ba1b2e82111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathCondAllocator::printPathCond</definition>
        <argsstring>()</argsstring>
        <name>printPathCond</name>
        <briefdescription>
<para>Print out the path condition information. </para>
        </briefdescription>
        <detaileddescription>
<para>Print path conditions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="203" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="513" bodyend="537"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a71e17887254eb38c0317250a19f42a0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>static Condition* SVF::PathCondAllocator::trueCond</definition>
        <argsstring>()</argsstring>
        <name>trueCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="71" column="29" bodyfile="include/Util/PathCondAllocator.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1abaf3c17264007cfc4a23dc1aaa881e8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>static Condition* SVF::PathCondAllocator::falseCond</definition>
        <argsstring>()</argsstring>
        <name>falseCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="76" column="29" bodyfile="include/Util/PathCondAllocator.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>static u32_t SVF::PathCondAllocator::getMemUsage</definition>
        <argsstring>()</argsstring>
        <name>getMemUsage</name>
        <briefdescription>
<para>Statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="83" column="25" bodyfile="include/Util/PathCondAllocator.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a2d8c2513c3e25bb8ec2d1e33d844a4c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>static u32_t SVF::PathCondAllocator::getCondNum</definition>
        <argsstring>()</argsstring>
        <name>getCondNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="87" column="25" bodyfile="include/Util/PathCondAllocator.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1af0584dc9658fd5dc6f6da633d258dfaf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>static u32_t SVF::PathCondAllocator::getMaxLiveCondNumber</definition>
        <argsstring>()</argsstring>
        <name>getMaxLiveCondNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="91" column="25" bodyfile="include/Util/PathCondAllocator.h" bodystart="91" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1af854f880e76738a13d6cb937a257828f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PathCondAllocator::allocateForBB</definition>
        <argsstring>(const BasicBlock &amp;bb)</argsstring>
        <name>allocateForBB</name>
        <param>
          <type>const BasicBlock &amp;</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Allocate path condition for every basic block. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate conditions for a basic block and propagate its condition to its successors. </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: handle BranchInst and SwitchInst individually here!!</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="208" column="18" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="82" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1aaec323fc8a3f83da4596ed7d447ab6f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathCondAllocator::setBranchCond</definition>
        <argsstring>(const BasicBlock *bb, const BasicBlock *succ, Condition *cond)</argsstring>
        <name>setBranchCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Get/Set a branch condition, and its terminator instruction. </para>
        </briefdescription>
        <detaileddescription>
<para>Set branch condition</para>
<para>Set a branch condition </para>
        </detaileddescription>
        <inbodydescription>
<para>we only care about basic blocks have more than one successor</para>
<para>FIXME: llvm getNumSuccessors allows duplicated block in the successors, it makes this assertion fail In this case we may waste a condition allocation, because the overwrite of the previous cond</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="213" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="156" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a4d00c3306b92e59568b54a6a72afdb74" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::getBranchCond</definition>
        <argsstring>(const BasicBlock *bb, const BasicBlock *succ) const</argsstring>
        <name>getBranchCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <briefdescription>
<para>Get branch condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a branch condition </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="215" column="15" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="138" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a169280fcaaab36ff616707bf3dd3e4a3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::getEvalBrCond</definition>
        <argsstring>(const BasicBlock *bb, const BasicBlock *succ)</argsstring>
        <name>getEvalBrCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <briefdescription>
<para>Get a condition, evaluate the value for conditions if necessary (e.g., testNull like express) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="217" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a9df1090bd2bb8a2a83de9b953c265952" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::evaluateBranchCond</definition>
        <argsstring>(const BasicBlock *bb, const BasicBlock *succ, const Value *val)</argsstring>
        <name>evaluateBranchCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Evaluate branch conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>Evaluate the branch condtion</para>
<para>(1) Evaluate a branch when it reaches a program exit (2) Evaluate a branch when it is loop exit branch (3) Evaluate a branch when it is a test null like condition </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="228" column="15" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="287" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a623e6ec670e5f6aeedee26b146ad5a0d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::evaluateLoopExitBranch</definition>
        <argsstring>(const BasicBlock *bb, const BasicBlock *succ)</argsstring>
        <name>evaluateLoopExitBranch</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
          <defname>dst</defname>
        </param>
        <briefdescription>
<para>Evaluate loop exit branch. </para>
        </briefdescription>
        <detaileddescription>
<para>Evaluate loop exit branch to be true if bb is loop header and succ is the only exit basic block outside the loop (excluding exit bbs which call program exit) for all other case, we conservatively evaluate false for now </para>
        </detaileddescription>
        <inbodydescription>
<para>exclude exit bb which calls program exit</para>
<para>if the dst dominate all other loop exit bbs, then dst can certainly be reached</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="230" column="15" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="247" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a5fac99dfe91009ab948ac8c60359dd8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::evaluateTestNullLikeExpr</definition>
        <argsstring>(const BranchInst *brInst, const BasicBlock *succ, const Value *val)</argsstring>
        <name>evaluateTestNullLikeExpr</name>
        <param>
          <type>const BranchInst *</type>
          <declname>brInst</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return branch condition after evaluating test null like expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Evaluate null like expression for source-sink related bug detection in SABER </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="232" column="15" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="173" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a9dbca0e012336e20064693f508bc54b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>PathCondAllocator::Condition * PathCondAllocator::evaluateProgExit</definition>
        <argsstring>(const BranchInst *brInst, const BasicBlock *succ)</argsstring>
        <name>evaluateProgExit</name>
        <param>
          <type>const BranchInst *</type>
          <declname>brInst</declname>
        </param>
        <param>
          <type>const BasicBlock *</type>
          <declname>succ</declname>
        </param>
        <briefdescription>
<para>Return condition when there is a branch calls program exit. </para>
        </briefdescription>
        <detaileddescription>
<para>Evaluate condition for program exit (e.g., exit(0)) </para>
        </detaileddescription>
        <inbodydescription>
<para>then branch calls program exit</para>
<para>else branch calls program exit</para>
<para>no branch call program exit</para>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="234" column="15" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="203" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a391cb347cf98f33c261e59975900048e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathCondAllocator::collectBBCallingProgExit</definition>
        <argsstring>(const BasicBlock &amp;bb)</argsstring>
        <name>collectBBCallingProgExit</name>
        <param>
          <type>const BasicBlock &amp;</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Collect basic block contains program exit function call. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether this basic block contains program exit function call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="236" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="361" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a39c0cc9dec89b0b52bf9f1026da942e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isBBCallsProgExit</definition>
        <argsstring>(const BasicBlock *bb)</argsstring>
        <name>isBBCallsProgExit</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this basic block contains program exit function call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="237" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="378" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1af93358a02bf4ef8020091532e0c5b5af" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isEQCmp</definition>
        <argsstring>(const CmpInst *cmp) const</argsstring>
        <name>isEQCmp</name>
        <param>
          <type>const CmpInst *</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
<para>Evaluate test null/not null like expressions. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if the predicate of this compare instruction is equal </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="243" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1aff24f70f9aa07b9f89c25bedab0e5a71" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isNECmp</definition>
        <argsstring>(const CmpInst *cmp) const</argsstring>
        <name>isNECmp</name>
        <param>
          <type>const CmpInst *</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
<para>Return true if the predicate of this compare instruction is not equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="245" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1ab98df8029c871685679c886dfa941b67" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isTestNullExpr</definition>
        <argsstring>(const Value *test, const Value *val) const</argsstring>
        <name>isTestNullExpr</name>
        <param>
          <type>const Value *</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if this is a test null expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="247" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="328" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a434bb1a39de7940199c61273f4e14c5a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isTestNotNullExpr</definition>
        <argsstring>(const Value *test, const Value *val) const</argsstring>
        <name>isTestNotNullExpr</name>
        <param>
          <type>const Value *</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if this is a test not null expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="249" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="337" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a7030db6e26a6eb5b7831d4da9728a1c7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PathCondAllocator::isTestContainsNullAndTheValue</definition>
        <argsstring>(const CmpInst *cmp, const Value *val) const</argsstring>
        <name>isTestContainsNullAndTheValue</name>
        <param>
          <type>const CmpInst *</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return true if two values on the predicate are what we want. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="251" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="346" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a4cb61914dff693e284091e97ab8c8878" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::PathCondAllocator::setCFCond</definition>
        <argsstring>(const BasicBlock *bb, Condition *cond)</argsstring>
        <name>setCFCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Get/Set control-flow conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="257" column="17" bodyfile="include/Util/PathCondAllocator.h" bodystart="257" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a8c926057571ca14743e106a5a6ce7ae9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::getCFCond</definition>
        <argsstring>(const BasicBlock *bb) const</argsstring>
        <name>getCFCond</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="266" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1afa69abd947fcacc9e54206fee62f5057" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::createNewCond</definition>
        <argsstring>(u32_t i)</argsstring>
        <name>createNewCond</name>
        <param>
          <type>u32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create new BDD condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="278" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="278" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a3cd08242b82129e6074b2f30a19b5c17" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">Condition</ref> *</type>
        <definition>Condition* SVF::PathCondAllocator::newCond</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>newCond</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Allocate a new condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="286" column="22" bodyfile="include/Util/PathCondAllocator.h" bodystart="286" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a76ddfe7426ec5878b6c6295da601d2c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathCondAllocator::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Release memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Release memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="303" column="10" bodyfile="lib/Util/PathCondAllocator.cpp" bodystart="504" bodyend="508"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_path_cond_allocator_1a8b15775ff6ac1d6e117ea15d18b12396" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_bdd_cond_manager" kindref="compound">BddCondManager</ref> *</type>
        <definition>static BddCondManager* SVF::PathCondAllocator::getBddCondManager</definition>
        <argsstring>()</argsstring>
        <name>getBddCondManager</name>
        <briefdescription>
<para>Used internally, not supposed to be exposed to other classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/PathCondAllocator.h" line="295" column="27" bodyfile="include/Util/PathCondAllocator.h" bodystart="295" bodyend="300"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> allocates conditions for each basic block of a certain CFG. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>SVF::BddCondManager</label>
        <link refid="class_s_v_f_1_1_bdd_cond_manager"/>
      </node>
      <node id="1">
        <label>SVF::PathCondAllocator</label>
        <link refid="class_s_v_f_1_1_path_cond_allocator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>bddCondMgr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Util/PathCondAllocator.h" line="44" column="1" bodyfile="include/Util/PathCondAllocator.h" bodystart="45" bodyend="316"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a3fce010083b85a4421eed4c17eb54640" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>allocate</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1af854f880e76738a13d6cb937a257828f" prot="private" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>allocateForBB</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aef4a1396ee439e0d6cd89695a81a7365" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>BasicBlockSet</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ab95a992cea9ccc23e31d4d48fce01055" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>BBCondMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aff611b2797d61155c8c2f9d8ac4030bc" prot="protected" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>bbConds</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ae3edcb70d9f0d65089f39147a635526d" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>BBToCondMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ac3a0aa27f317d7d9214181b599f19f24" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>bbToCondMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aac3256105c22a02ad791000fd591562e" prot="protected" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>bddCondMgr</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a4949fb25fe4cd461de8aec90756b1fea" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>cfInfoBuilder</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ac578894f959845164e1343384d60def1" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>CFWorkList</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a3462dbe3d0f8df08e3b6a6c6ef0b065c" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>clearCFCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a391cb347cf98f33c261e59975900048e" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>collectBBCallingProgExit</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a9c3361e3f37d640b177c3955f3c3667f" prot="public" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>ComputeInterCallVFGGuard</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a5015e36d00ac59ef2b832019b8f922f5" prot="public" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>ComputeInterRetVFGGuard</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a5ab573cce84584c44778611ba6f4d99c" prot="public" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>ComputeIntraVFGGuard</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ab0e41d1eacfc6ee2cf42a9ce69cdcb61" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>condAnd</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a259f9a44936d03ab8bd7455d1058d39d" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>Condition</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ac1ed60a8f59a55811c97c83def3bb739" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>condNeg</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a5a8c25d74ffc2a8f8dbd20faab4d9803" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>condOr</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a0d685cfd0f0652a0ff839969f763371b" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>CondPosMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a143e4b84c549f23621c27fd7baddfe4f" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>condToInstMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a286e0aa5122ce38017ffbd4e250acfdf" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>CondToTermInstMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1afa69abd947fcacc9e54206fee62f5057" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>createNewCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aa1e1b83c3a2c760a00bcd6bf5e63482b" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>curEvalVal</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a76ddfe7426ec5878b6c6295da601d2c9" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aae773a674331bb80cc589835e0b16e4e" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>dumpCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a9df1090bd2bb8a2a83de9b953c265952" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>evaluateBranchCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a623e6ec670e5f6aeedee26b146ad5a0d" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>evaluateLoopExitBranch</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a9dbca0e012336e20064693f508bc54b8" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>evaluateProgExit</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a5fac99dfe91009ab948ac8c60359dd8c" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>evaluateTestNullLikeExpr</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a61095843f86d1c5c14750a635fb3aacb" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>exactCondElem</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1abaf3c17264007cfc4a23dc1aaa881e8b" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>falseCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ad35f1bdb406a85c5bfdcbbc15642853b" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>funToExitBBsMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a0753fb35cb8fd37cfe8fd795d01e5275" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>FunToExitBBsMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a8b15775ff6ac1d6e117ea15d18b12396" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getBddCondManager</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a4d00c3306b92e59568b54a6a72afdb74" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getBranchCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a8c926057571ca14743e106a5a6ce7ae9" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getCFCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ad1fdfabb37f6bb5da6724b95404739e2" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1adf65b74b89fca76c0cf5ea5dbd6dc4ca" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getCondInst</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a2d8c2513c3e25bb8ec2d1e33d844a4c3" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getCondNum</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a44568cacc5dfa248020aaf5dd340829e" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getCurEvalVal</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a496a23bc37dfdea32c536e9ebe9a4b88" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getDT</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a169280fcaaab36ff616707bf3dd3e4a3" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getEvalBrCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a0d059c9adce2c998ddf2489376beb8e2" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getFalseCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a10ddc3b02b2baad2edd72fe429113b0f" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getLoopInfo</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1af0584dc9658fd5dc6f6da633d258dfaf" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getMaxLiveCondNumber</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aae9b2455330dc89960b146c0a80512cb" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getMemUsage</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1abef2785eb426d5e1d6f273300c691db6" prot="public" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>getPHIComplementCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a1295e2c2c0a9c1a3744ba3927b95363e" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getPostDT</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a1a6bde0db54c91fba7e6bac0acff664a" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>getTrueCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a7761a4dd6da8b36b15dcc0b89a9ec6b3" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>IndexToConditionMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a27f89f89bd6eda0355ccdcc5c5df6f32" prot="protected" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>indexToDDNodeMap</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a39c0cc9dec89b0b52bf9f1026da942e1" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isBBCallsProgExit</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1af93358a02bf4ef8020091532e0c5b5af" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isEQCmp</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aff24f70f9aa07b9f89c25bedab0e5a71" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isNECmp</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a7030db6e26a6eb5b7831d4da9728a1c7" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isTestContainsNullAndTheValue</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a434bb1a39de7940199c61273f4e14c5a" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isTestNotNullExpr</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ab98df8029c871685679c886dfa941b67" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>isTestNullExpr</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a56b3391b06c89c38e58ba0184774eaf9" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>markForRelease</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a3cd08242b82129e6074b2f30a19b5c17" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>newCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ad7ff43210c36654ae775e0542be79da1" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>PathCondAllocator</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ac8549ab97649f36191e8322e942b9c57" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>printDbg</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a2932b15ef74e46b676075ba1b2e82111" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>printPathCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1aaec323fc8a3f83da4596ed7d447ab6f1" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>setBranchCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a4cb61914dff693e284091e97ab8c8878" prot="private" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>setCFCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a03181424d76aa68e634e0f8e155feec7" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>setCurEvalVal</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ada8a9c85ae34068d5b33547aee7796d9" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>totalCondNum</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1a71e17887254eb38c0317250a19f42a0e" prot="public" virt="non-virtual"><scope>SVF::PathCondAllocator</scope><name>trueCond</name></member>
      <member refid="class_s_v_f_1_1_path_cond_allocator_1ab9215223c463ef43f18f5151d6cd0fe3" prot="public" virt="virtual"><scope>SVF::PathCondAllocator</scope><name>~PathCondAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
