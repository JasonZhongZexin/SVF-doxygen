<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_v_f_path_cond" kind="class" language="C++" prot="public">
    <compoundname>SVF::VFPathCond</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_context_cond" prot="public" virt="non-virtual">SVF::ContextCond</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_path_cond_1aa3b138bed5ec7f1c7533cf6ac5571310" prot="public" static="no">
        <type><ref refid="struct_dd_node" kindref="compound">PathCondAllocator::Condition</ref></type>
        <definition>typedef PathCondAllocator::Condition SVF::VFPathCond::PathCond</definition>
        <argsstring></argsstring>
        <name>PathCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="444" column="42" bodyfile="include/Util/DPItem.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_v_f_path_cond_1a17f76b046c8f968b559b2d3e4b2ddf57" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; NodeID, NodeID &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::pair&lt;NodeID,NodeID&gt; &gt; SVF::VFPathCond::EdgeSet</definition>
        <argsstring></argsstring>
        <name>EdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="445" column="25" bodyfile="include/Util/DPItem.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_path_cond_1a1c7866468d55fe6bcb4e0a3225e8dbe8" prot="private" static="no" mutable="no">
        <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
        <definition>PathCond* SVF::VFPathCond::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="610" column="14" bodyfile="include/Util/DPItem.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_path_cond_1acb14b65214b69176a9174ca76526d7a0" prot="private" static="no" mutable="no">
        <type>EdgeSet</type>
        <definition>EdgeSet SVF::VFPathCond::edges</definition>
        <argsstring></argsstring>
        <name>edges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="611" column="13" bodyfile="include/Util/DPItem.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_path_cond_1a77e82176297f79a8942c73c38e4221b9" prot="private" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t VFPathCond::maximumPathLen</definition>
        <argsstring></argsstring>
        <name>maximumPathLen</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="612" column="18" bodyfile="include/Util/DPItem.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_v_f_path_cond_1aa02a7074d4bfa09996006f04bbfb57a6" prot="public" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t VFPathCond::maximumPath</definition>
        <argsstring></argsstring>
        <name>maximumPath</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="614" column="18" bodyfile="include/Util/DPItem.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1ac103b1478b15083b989969d5461db212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::VFPathCond::VFPathCond</definition>
        <argsstring>(PathCond *p=PathCondAllocator::trueCond())</argsstring>
        <name>VFPathCond</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
          <declname>p</declname>
          <defval>PathCondAllocator::trueCond()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="449" column="5" bodyfile="include/Util/DPItem.h" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1ab6826c1ee28ed96fa736cdf7323f600c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::VFPathCond::VFPathCond</definition>
        <argsstring>(const VFPathCond &amp;cond)</argsstring>
        <name>VFPathCond</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="453" column="5" bodyfile="include/Util/DPItem.h" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a6d8d2ec399adff481ddc6e9210614e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::VFPathCond::~VFPathCond</definition>
        <argsstring>()</argsstring>
        <name>~VFPathCond</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="457" column="13" bodyfile="include/Util/DPItem.h" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a802d1c1f0114b5adf179dd09b765c666" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::VFPathCond::getMaxPathLen</definition>
        <argsstring>() const</argsstring>
        <name>getMaxPathLen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="465" column="18" bodyfile="include/Util/DPItem.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a8e9b42c314d4d182252e171b5b7f8cc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
        <definition>PathCond* SVF::VFPathCond::getPaths</definition>
        <argsstring>() const</argsstring>
        <name>getPaths</name>
        <briefdescription>
<para>Return paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="470" column="21" bodyfile="include/Util/DPItem.h" bodystart="470" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a451e3476a1d20f232f401d74b2e91589" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const EdgeSet &amp;</type>
        <definition>const EdgeSet&amp; SVF::VFPathCond::getVFEdges</definition>
        <argsstring>() const</argsstring>
        <name>getVFEdges</name>
        <briefdescription>
<para>Return paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="475" column="26" bodyfile="include/Util/DPItem.h" bodystart="475" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a77e2e07d2c428ac80fe6edafbbb3986b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFPathCond::setPaths</definition>
        <argsstring>(PathCond *p, const EdgeSet &amp;e)</argsstring>
        <name>setPaths</name>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const EdgeSet &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Set paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="480" column="17" bodyfile="include/Util/DPItem.h" bodystart="480" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a8fc62f3aa9faf26b2618ab13dade33b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::VFPathCond::pathLen</definition>
        <argsstring>() const</argsstring>
        <name>pathLen</name>
        <briefdescription>
<para>Get path length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="486" column="18" bodyfile="include/Util/DPItem.h" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1adbf3026a7f2a9cbbb1de55159e264263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFPathCond::addVFEdge</definition>
        <argsstring>(NodeID from, NodeID to)</argsstring>
        <name>addVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>from</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> Edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="491" column="17" bodyfile="include/Util/DPItem.h" bodystart="491" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a64edbab728287b8a263ea25670671724" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::hasVFEdge</definition>
        <argsstring>(NodeID from, NodeID to) const</argsstring>
        <name>hasVFEdge</name>
        <param>
          <type>NodeID</type>
          <declname>from</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Has <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> Edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="500" column="17" bodyfile="include/Util/DPItem.h" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1abb236b6b551cb58e4fb483c07aa5aa77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::hasIncomingEdge</definition>
        <argsstring>(NodeID node) const</argsstring>
        <name>hasIncomingEdge</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether Node dst has incoming edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="505" column="17" bodyfile="include/Util/DPItem.h" bodystart="505" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a86e063928329b21cce0a319efac56fb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::hasOutgoingEdge</definition>
        <argsstring>(NodeID node) const</argsstring>
        <name>hasOutgoingEdge</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Whether Node dst has outgoing edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="515" column="17" bodyfile="include/Util/DPItem.h" bodystart="515" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1aaaff4d4ebd59e3310175e3f672809a16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::addPath</definition>
        <argsstring>(PathCondAllocator *allocator, PathCond *c, NodeID from, NodeID to)</argsstring>
        <name>addPath</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>from</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>drop condition when existing a loop (vf cycle)</para>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="524" column="17" bodyfile="include/Util/DPItem.h" bodystart="524" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a30d0d29c2ca641335bc82bfda6031a17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::condAnd</definition>
        <argsstring>(PathCondAllocator *allocator, PathCond *c)</argsstring>
        <name>condAnd</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Condition operatoration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="542" column="17" bodyfile="include/Util/DPItem.h" bodystart="542" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a3b41fe4efc9382e045d2ec0122bb37d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::VFPathCond::condOr</definition>
        <argsstring>(PathCondAllocator *allocator, PathCond *c)</argsstring>
        <name>condOr</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_path_cond_allocator" kindref="compound">PathCondAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="struct_dd_node" kindref="compound">PathCond</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="547" column="17" bodyfile="include/Util/DPItem.h" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1adfec3fe0885067b6bd4455d9c12609b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::operator&lt;</definition>
        <argsstring>(const VFPathCond &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="555" column="12" bodyfile="include/Util/DPItem.h" bodystart="555" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a4bc59244e43d7db4478b0b9f868a0dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
        <definition>VFPathCond&amp; SVF::VFPathCond::operator=</definition>
        <argsstring>(const VFPathCond &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="563" column="23" bodyfile="include/Util/DPItem.h" bodystart="563" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a475c7d4b05dbde2dc9aed2699dacc2bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::operator==</definition>
        <argsstring>(const VFPathCond &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="574" column="17" bodyfile="include/Util/DPItem.h" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a6511e52c695247cd887f04ef37de15ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::VFPathCond::operator!=</definition>
        <argsstring>(const VFPathCond &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_v_f_path_cond" kindref="compound">VFPathCond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator!=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="579" column="17" bodyfile="include/Util/DPItem.h" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a9b7b81222fc7a128f9f48034d050ce06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::VFPathCond::vfEdgesTrace</definition>
        <argsstring>() const</argsstring>
        <name>vfEdgesTrace</name>
        <briefdescription>
<para>Get value-flow edge traces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="584" column="24" bodyfile="include/Util/DPItem.h" bodystart="584" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1a21665a89c2ba52de5754c2faad53166c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::VFPathCond::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Dump context condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="595" column="24" bodyfile="include/Util/DPItem.h" bodystart="595" bodyend="607"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_v_f_path_cond_1ab1ad3045a8a42ce75fcfaba9b5c0ec63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void SVF::VFPathCond::setMaxPathLen</definition>
        <argsstring>(u32_t max)</argsstring>
        <name>setMaxPathLen</name>
        <param>
          <type>u32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>set max path limit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/DPItem.h" line="461" column="24" bodyfile="include/Util/DPItem.h" bodystart="461" bodyend="464"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::VFPathCond</label>
        <link refid="class_s_v_f_1_1_v_f_path_cond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::ContextCond</label>
        <link refid="class_s_v_f_1_1_context_cond"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::VFPathCond</label>
        <link refid="class_s_v_f_1_1_v_f_path_cond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::ContextCond</label>
        <link refid="class_s_v_f_1_1_context_cond"/>
      </node>
    </collaborationgraph>
    <location file="include/Util/DPItem.h" line="440" column="1" bodyfile="include/Util/DPItem.h" bodystart="441" bodyend="616"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1aaaff4d4ebd59e3310175e3f672809a16" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>addPath</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1adbf3026a7f2a9cbbb1de55159e264263" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>addVFEdge</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a4ae7e2236708b0d205f393cdce75c8d1" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a30d0d29c2ca641335bc82bfda6031a17" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>condAnd</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a3b41fe4efc9382e045d2ec0122bb37d7" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>condOr</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a101bc917679a9d8ee7badb3c9e8c12e3" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a6f5b0bbc0978220aaa990f5fd0ddce8d" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>containCallStr</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ac431eae00244cc7792b6e7e00634d535" prot="protected" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>context</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a9b81bf11679645d32d50b91bdb6d2dc1" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>ContextCond</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a5f31275f74ff9eb5734481f36275c6d9" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>ContextCond</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a20f15a1661f928ab80bacaf8f5c497b1" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>cxtSize</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1acb14b65214b69176a9174ca76526d7a0" prot="private" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>edges</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a17f76b046c8f968b559b2d3e4b2ddf57" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>EdgeSet</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a4b56b54896a1241032d7614309829399" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a73d4d6ed38898b912926d044268fd35b" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>getContexts</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a2af7a9769d97ddb4a217d0baaf7c03a3" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>getContexts</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a802d1c1f0114b5adf179dd09b765c666" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>getMaxPathLen</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a8e9b42c314d4d182252e171b5b7f8cc4" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>getPaths</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a451e3476a1d20f232f401d74b2e91589" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>getVFEdges</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1abb236b6b551cb58e4fb483c07aa5aa77" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>hasIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a86e063928329b21cce0a319efac56fb9" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>hasOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a64edbab728287b8a263ea25670671724" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>hasVFEdge</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ac5f7388c0bbcee1878201819b9cd199f" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>isConcreteCxt</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ab816f854687999b8c01f5c02fcf6b8af" prot="public" virt="virtual"><scope>SVF::VFPathCond</scope><name>matchContext</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a151b9f21eedd4fdd8f46b78bb456582d" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>maximumCxt</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1aa02a7074d4bfa09996006f04bbfb57a6" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>maximumPath</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a77e82176297f79a8942c73c38e4221b9" prot="private" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>maximumPathLen</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a6511e52c695247cd887f04ef37de15ff" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a357317ef5f0a848a30eb38eec8c8a0f8" prot="public" virt="non-virtual" ambiguityscope="SVF::ContextCond::"><scope>SVF::VFPathCond</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1adfec3fe0885067b6bd4455d9c12609b5" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a53e0a8ac864e15edf0de827bdbb4eb01" prot="public" virt="non-virtual" ambiguityscope="SVF::ContextCond::"><scope>SVF::VFPathCond</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a4bc59244e43d7db4478b0b9f868a0dab" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ae4d1bb47d0c8ef4d8b31ffaeb83edf04" prot="public" virt="non-virtual" ambiguityscope="SVF::ContextCond::"><scope>SVF::VFPathCond</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a475c7d4b05dbde2dc9aed2699dacc2bb" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a69b8789b4815f2958afe67028640bfc5" prot="public" virt="non-virtual" ambiguityscope="SVF::ContextCond::"><scope>SVF::VFPathCond</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a62cc1c7c01d454e9cbebd3f7f5f3aa1f" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>operator[]</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a1c7866468d55fe6bcb4e0a3225e8dbe8" prot="private" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>path</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1aa3b138bed5ec7f1c7533cf6ac5571310" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>PathCond</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a8fc62f3aa9faf26b2618ab13dade33b8" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>pathLen</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ad16644f61728fbb166ce80957b17d884" prot="public" virt="virtual"><scope>SVF::VFPathCond</scope><name>pushContext</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1a92e89bbae0f31bb9eb971ab3edcc8071" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>setMaxCxtLen</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1ab1ad3045a8a42ce75fcfaba9b5c0ec63" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>setMaxPathLen</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1ac80892cbef7a5d2c949e5f07682bc885" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>setNonConcreteCxt</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a77e2e07d2c428ac80fe6edafbbb3986b" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>setPaths</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a21665a89c2ba52de5754c2faad53166c" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>toString</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a9b7b81222fc7a128f9f48034d050ce06" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>vfEdgesTrace</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1ac103b1478b15083b989969d5461db212" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>VFPathCond</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1ab6826c1ee28ed96fa736cdf7323f600c" prot="public" virt="non-virtual"><scope>SVF::VFPathCond</scope><name>VFPathCond</name></member>
      <member refid="class_s_v_f_1_1_context_cond_1acacf53982ab08b9f0fcfbd1e941b3365" prot="public" virt="virtual"><scope>SVF::VFPathCond</scope><name>~ContextCond</name></member>
      <member refid="class_s_v_f_1_1_v_f_path_cond_1a6d8d2ec399adff481ddc6e9210614e06" prot="public" virt="virtual"><scope>SVF::VFPathCond</scope><name>~VFPathCond</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
