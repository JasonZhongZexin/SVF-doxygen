<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_mem_s_s_a" xml:lang="en-US">
<title>SVF::MemSSA Class Reference</title>
<indexterm><primary>SVF::MemSSA</primary></indexterm>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a"/>typedef <link linkend="_struct_dd_node">MemRegion::Condition</link> <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link></para>

<para>define condition here changes needed if we add new type </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a2b4f3b19b32ac61dd1932faa82b93d8b"/>typedef <link linkend="_class_s_v_f_1_1_m_s_s_a_m_u">MSSAMU</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">MU</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a953a56a65ee36fd1c78b29179cd3f33a"/>typedef <link linkend="_class_s_v_f_1_1_ret_m_u">RetMU</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">RETMU</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a4717016109fd3bc80f3095d11afff5b1"/>typedef <link linkend="_class_s_v_f_1_1_load_m_u">LoadMU</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">LOADMU</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a7be50dd82679b45a8c400f5a12056a25"/>typedef <link linkend="_class_s_v_f_1_1_call_m_u">CallMU</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">CALLMU</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a503f2fda873c330ef2cc5561f396ea6e"/>typedef <link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">MSSACHI</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">CHI</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a6a20da24d82ace1888be49a2ae0f6bd5"/>typedef <link linkend="_class_s_v_f_1_1_entry_c_h_i">EntryCHI</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">ENTRYCHI</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a150e9d53ced1c143bba2d1026f739fa4"/>typedef <link linkend="_class_s_v_f_1_1_store_c_h_i">StoreCHI</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">STORECHI</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a56ffeb1f76c73766d06aedd60235c8d9"/>typedef <link linkend="_class_s_v_f_1_1_call_c_h_i">CallCHI</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">CALLCHI</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a8e948ea7778158107657fdd8195530e1"/>typedef <link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">MSSAPHI</link>&lt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac0c8f70b6283e26e70dafe02fcb5180a">Condition</link> &gt; <emphasis role="strong">PHI</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a57e68097212e88568eea829fb998fe0c"/>typedef <link linkend="_class_s_v_f_1_1_m_s_s_a_d_e_f">MSSADEF</link> <emphasis role="strong">MDEF</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a81bba824495a882b49e687683954b112"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_m_s_s_a_m_u">MU</link> * &gt; <emphasis role="strong">MUSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1af9cf084e3070456d8cca491e1391b0c4"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">CHI</link> * &gt; <emphasis role="strong">CHISet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a8a5d3597f3dba9744e170cc8c32bf25f"/>typedef Set&lt; <link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">PHI</link> * &gt; <emphasis role="strong">PHISet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1"/>typedef <link linkend="_class_s_v_f_1_1_m_r_generator_1a98ac3bf264e6a85d172c2c4264ea908f">MRGenerator::MRSet</link> <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1">MRSet</link></para>

<para>Define mem region set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a7c3fda6f082231350524c2d7c16f067e"/>typedef std::vector&lt; const <link linkend="_class_s_v_f_1_1_mem_region">MemRegion</link> * &gt; <emphasis role="strong">MRVector</emphasis></para>
</listitem>
            <listitem><para>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_load_p_e">LoadPE</link> *, MUSet &gt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b">LoadToMUSetMap</link></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a00fc1f85bd92da6f0033a1a385c792ad"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_store_p_e">StorePE</link> *, CHISet &gt; <emphasis role="strong">StoreToChiSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1af7d3abb0b38f83c6f0a3c6a9e1ebff97"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *, MUSet &gt; <emphasis role="strong">CallSiteToMUSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ab985012d7730beed71a5e77595d29548"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *, CHISet &gt; <emphasis role="strong">CallSiteToCHISetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a59cca6cbd8f18c9521027d8ddd13ffc5"/>typedef Map&lt; const BasicBlock *, PHISet &gt; <emphasis role="strong">BBToPhiSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *, CHISet &gt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca">FunToEntryChiSetMap</link></para>

<para>Map from fun to its entry chi set and return mu set. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a3cfc6d7134f98e5876c16c6c043a3d92"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *, MUSet &gt; <emphasis role="strong">FunToReturnMuSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a66e693af7b37e4e58b4834898d6a34fa"/>typedef std::vector&lt; const BasicBlock * &gt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a66e693af7b37e4e58b4834898d6a34fa">BBList</link></para>

<para>For phi insertion. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a4d4f7039c2972e671dc15b8c75abad14"/>typedef Map&lt; const BasicBlock *, <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a37b84780f57cbee50cf957cfbab195c1">MRSet</link> &gt; <emphasis role="strong">BBToMRSetMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a8d0c1a00d7db194da66c685d79e73de5"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_mem_region">MemRegion</link> *, <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a66e693af7b37e4e58b4834898d6a34fa">BBList</link> &gt; <emphasis role="strong">MemRegToBBsMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1aa9dbaf51f0498f3bd878827744208899"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_mem_region">MemRegion</link> *, std::vector&lt; <link linkend="_class_s_v_f_1_1_m_r_ver">MRVer</link> * &gt; &gt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1aa9dbaf51f0498f3bd878827744208899">MemRegToVerStackMap</link></para>

<para>For SSA renaming. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ae1aca020147c270deca2a1241e3847d0"/>typedef Map&lt; const <link linkend="_class_s_v_f_1_1_mem_region">MemRegion</link> *, MRVERSION &gt; <emphasis role="strong">MemRegToCounterMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ac04de5e349ced05d7289b8ee55c86e34"/>typedef PAG::PAGEdgeList <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac04de5e349ced05d7289b8ee55c86e34">PAGEdgeList</link></para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> edge list. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static double <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a37dca8a7d155de4870358146d219b5e5">timeOfGeneratingMemRegions</link> = 0</para>

<para>Statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a4d2418b7df74f23d8fd328f66e29f198"/>static double <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a4d2418b7df74f23d8fd328f66e29f198">timeOfCreateMUCHI</link> = 0</para>

<para>Time for generating mu/chi for load/store/calls. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a3c7b5fa73fdc7c805ee3673fbe812b44"/>static double <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a3c7b5fa73fdc7c805ee3673fbe812b44">timeOfInsertingPHI</link> = 0</para>

<para>Time for inserting phis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a97ccd5e0b9ab6144415e26bdf95cbabd"/>static double <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a97ccd5e0b9ab6144415e26bdf95cbabd">timeOfSSARenaming</link> = 0</para>

<para>Time for SSA rename. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a695adf83e8c40b9628b1866053f68033">createMUCHI</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp;fun)</para>

<para>Create mu chi for candidate regions in a function. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1acc6f72d96cf29e36093ba08ea86b8983"/>virtual void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1acc6f72d96cf29e36093ba08ea86b8983">insertPHI</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp;fun)</para>

<para>Insert phi for candidate regions in a fucntion. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a16114eb55775f6ee812c1648dcaede0c">SSARename</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp;fun)</para>

<para>SSA rename for a function. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a271c20725d49dd65b95c062938ffde4c">SSARenameBB</link> (const BasicBlock &amp;bb)</para>

<para>SSA rename for a basic block. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a468e1481926df6865678b7232bb79bf3"/><link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> * <emphasis role="strong">pta</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a213ebe634bbdbe33460ccd941c1dc6a5"/><link linkend="_class_s_v_f_1_1_m_r_generator">MRGenerator</link> * <emphasis role="strong">mrGen</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ac0aeb79ec4f86f55c97bd397509acd05"/><link linkend="_namespace_s_v_f_1ab44d20f806be99699895260b14a942d7">DominanceFrontier</link> * <emphasis role="strong">df</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a52b1598f44fe6a6e30095f596bf85cb0"/>DominatorTree * <emphasis role="strong">dt</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a4fc930040ec54eb60629da18fb6a4d04"/><link linkend="_class_s_v_f_1_1_mem_s_s_a_stat">MemSSAStat</link> * <emphasis role="strong">stat</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_mem_s_s_a_1a6bd57451370f5f4c92ce212be4cddd15">MemSSA</link> (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> *p, bool ptrOnlyMSSA)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ae09603b40c7359c4cd2f644d3efc40cc"/>virtual <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ae09603b40c7359c4cd2f644d3efc40cc">~MemSSA</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a37ba6ead86bce47f97adeff1e8cdb564"/><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a37ba6ead86bce47f97adeff1e8cdb564">getPAG</link> ()</para>

<para>Return <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ad40617a1907b9a6b8cc24888ce54a0ac"/><link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> * <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ad40617a1907b9a6b8cc24888ce54a0ac">getPTA</link> () const</para>

<para>Return PTA. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09"/><link linkend="_class_s_v_f_1_1_m_r_generator">MRGenerator</link> * <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09">getMRGenerator</link> ()</para>

<para>Return <link linkend="_class_s_v_f_1_1_m_r_generator">MRGenerator</link>. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ae56d1878046c119d1857727ca3609d74">buildMemSSA</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp;fun, <link linkend="_namespace_s_v_f_1ab44d20f806be99699895260b14a942d7">DominanceFrontier</link> *, DominatorTree *)</para>

<para>We start from here. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a89c40c8fad70f3aead6531261e5a3cc3">performStat</link> ()</para>

<para>Perform statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1af5e356e82c3f93b65bd89908e0f465dc"/>bool <link linkend="_class_s_v_f_1_1_mem_s_s_a_1af5e356e82c3f93b65bd89908e0f465dc">hasMU</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *inst) const</para>

<para>Has mu/chi methods. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1abfb338ce36ad46a9654d50dd6e2b07f1"/>bool <emphasis role="strong">hasCHI</emphasis> (const <link linkend="_class_s_v_f_1_1_p_a_g_edge">PAGEdge</link> *inst) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a480f37f70e9c3ff8ce7750a4d5f6f05b"/>bool <emphasis role="strong">hasMU</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a51b8381b80b23590e638489c2a6760a4"/>bool <emphasis role="strong">hasCHI</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1aec75259d035e3b5589e6fcbbcdfe4b2c"/>bool <link linkend="_class_s_v_f_1_1_mem_s_s_a_1aec75259d035e3b5589e6fcbbcdfe4b2c">hasFuncEntryChi</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>

<para>Has function entry chi or return mu. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a3400d9a921672b3872656acecc3eac9f"/>bool <emphasis role="strong">hasReturnMu</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a10743fe9c116ee624387c0473815b800"/>CHISet &amp; <emphasis role="strong">getFuncEntryChiSet</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1af8c38a7ff8da4206f19c038024606d93"/>MUSet &amp; <emphasis role="strong">getReturnMuSet</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1aea0fc1d2e5407f86e0211d8e253fa24e"/>MUSet &amp; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1aea0fc1d2e5407f86e0211d8e253fa24e">getMUSet</link> (const <link linkend="_class_s_v_f_1_1_load_p_e">LoadPE</link> *ld)</para>

<para>Get methods of mu/chi/phi. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a24dd10cbd41df4f57d8d6fa9ca6a3083"/>CHISet &amp; <emphasis role="strong">getCHISet</emphasis> (const <link linkend="_class_s_v_f_1_1_store_p_e">StorePE</link> *st)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a59392ba4cc987f5fefa4eca0ebe411fe"/>MUSet &amp; <emphasis role="strong">getMUSet</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ae7b0f618fb36bbc8e9439d70b377cf6b"/>CHISet &amp; <emphasis role="strong">getCHISet</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a964f3fe39ece9a7b8b2033428b75a274"/>PHISet &amp; <emphasis role="strong">getPHISet</emphasis> (const BasicBlock *bb)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a552bb17f0435e012b7393fb641c19298"/>bool <emphasis role="strong">hasPHISet</emphasis> (const BasicBlock *bb) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a70dd35ef458c452330dfebcdde17b84c"/><link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b">LoadToMUSetMap</link> &amp; <emphasis role="strong">getLoadToMUSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a97166aa7102816a16734d7e2f1c130b0"/>StoreToChiSetMap &amp; <emphasis role="strong">getStoreToChiSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a44cbdb1231c2709c24d19ad2bae2475a"/>FunToReturnMuSetMap &amp; <emphasis role="strong">getFunToRetMuSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1afd4787df4466c24948d8384e3a756198"/><link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac34aa1ac96600bfc27b3c2eb0b1510ca">FunToEntryChiSetMap</link> &amp; <emphasis role="strong">getFunToEntryChiSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a06081aa029b1fe3f9427f85a0261fd43"/>CallSiteToMUSetMap &amp; <emphasis role="strong">getCallSiteToMuSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a8f88acad31782bfa962e4349d8f4185d"/>CallSiteToCHISetMap &amp; <emphasis role="strong">getCallSiteToChiSetMap</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a966477062a453901da3631015fcf737d"/>BBToPhiSetMap &amp; <emphasis role="strong">getBBToPhiSetMap</emphasis> ()</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1aafc83f7f22ebf3b3683607440c488bef">getLoadMuNum</link> () const</para>

<para>Stat methods. </para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1aa8c45b455e6fc60cab955534c3e50bfa">getStoreChiNum</link> () const</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a15272a4ed019d1c323d1826c1bedb70f">getFunEntryChiNum</link> () const</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a67175188232e08f5c5374f92ff61810f">getFunRetMuNum</link> () const</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a9e8c5b85957485635d0f72c2f48bb8b5">getCallSiteMuNum</link> () const</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a2c65795ca63a53c833f5ac17a752b6dc">getCallSiteChiNum</link> () const</para>
</listitem>
            <listitem><para>u32_t <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a9bb6512999cbf9c7c03153be77c8af20">getBBPhiNum</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_mem_s_s_a_1a9f9ac433d9c9348ceb5be8893d814ebd">dumpMSSA</link> (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp;Out=SVFUtil::outs())</para>

<para>Print Memory SSA. </para>
</listitem>
        </itemizedlist>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b"/>    <section>
    <title>LoadToMUSetMap</title>
<indexterm><primary>LoadToMUSetMap</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>LoadToMUSetMap</secondary></indexterm>
<para><computeroutput>typedef Map&lt;const <link linkend="_class_s_v_f_1_1_load_p_e">LoadPE</link>*, MUSet&gt; <link linkend="_class_s_v_f_1_1_mem_s_s_a_1ac5a9b2218c946ec17b478a95ab60ec6b">SVF::MemSSA::LoadToMUSetMap</link></computeroutput></para>
<para>Map loads/stores to its mem regions, TODO:visitAtomicCmpXchgInst, visitAtomicRMWInst?? </para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a6bd57451370f5f4c92ce212be4cddd15"/>    <section>
    <title>MemSSA()</title>
<indexterm><primary>MemSSA</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>MemSSA</secondary></indexterm>
<para><computeroutput>MemSSA::MemSSA (<link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> * p, bool ptrOnlyMSSA)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor </para>

<para>Generate whole program memory regions</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1ae56d1878046c119d1857727ca3609d74"/>    <section>
    <title>buildMemSSA()</title>
<indexterm><primary>buildMemSSA</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>buildMemSSA</secondary></indexterm>
<para><computeroutput>void MemSSA::buildMemSSA (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp; fun, <link linkend="_namespace_s_v_f_1ab44d20f806be99699895260b14a942d7">DominanceFrontier</link> * f, DominatorTree * t)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>We start from here. </para>
</para>

<para>Start building memory SSA </para>

<para>Create mus/chis for loads/stores/calls for memory regions</para>

<para>Insert PHI for memory regions</para>

<para>SSA rename for memory regions</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a695adf83e8c40b9628b1866053f68033"/>    <section>
    <title>createMUCHI()</title>
<indexterm><primary>createMUCHI</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>createMUCHI</secondary></indexterm>
<para><computeroutput>void MemSSA::createMUCHI (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp; fun)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Create mu chi for candidate regions in a function. </para>
</para>

<para>Create mu/chi according to memory regions collect used mrs in usedRegs and construction map from region to BB for prune SSA phi insertion </para>

<para>get all reachable basic blocks from function entry ignore dead basic blocks</para>

<para>if the function does not have a reachable return instruction from function entry then we won&apos;t create return mu for it</para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a9f9ac433d9c9348ceb5be8893d814ebd"/>    <section>
    <title>dumpMSSA()</title>
<indexterm><primary>dumpMSSA</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>dumpMSSA</secondary></indexterm>
<para><computeroutput>void MemSSA::dumpMSSA (<link linkend="_namespace_s_v_f_1a424cc053c29ad7303699c529d1a2cc71">raw_ostream</link> &amp; Out = <computeroutput>SVFUtil::outs()</computeroutput>
)</computeroutput></para><para>

<para>Print Memory SSA. </para>
</para>

<para>Print SSA </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a9bb6512999cbf9c7c03153be77c8af20"/>    <section>
    <title>getBBPhiNum()</title>
<indexterm><primary>getBBPhiNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getBBPhiNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getBBPhiNum ( ) const</computeroutput></para>
<para>Get PHI numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a2c65795ca63a53c833f5ac17a752b6dc"/>    <section>
    <title>getCallSiteChiNum()</title>
<indexterm><primary>getCallSiteChiNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getCallSiteChiNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getCallSiteChiNum ( ) const</computeroutput></para>
<para>Get <link linkend="_class_s_v_f_1_1_call_c_h_i">CallCHI</link> numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a9e8c5b85957485635d0f72c2f48bb8b5"/>    <section>
    <title>getCallSiteMuNum()</title>
<indexterm><primary>getCallSiteMuNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getCallSiteMuNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getCallSiteMuNum ( ) const</computeroutput></para>
<para>Get <link linkend="_class_s_v_f_1_1_call_m_u">CallMU</link> numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a15272a4ed019d1c323d1826c1bedb70f"/>    <section>
    <title>getFunEntryChiNum()</title>
<indexterm><primary>getFunEntryChiNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getFunEntryChiNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getFunEntryChiNum ( ) const</computeroutput></para>
<para>Get <link linkend="_class_s_v_f_1_1_entry_c_h_i">EntryCHI</link> numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a67175188232e08f5c5374f92ff61810f"/>    <section>
    <title>getFunRetMuNum()</title>
<indexterm><primary>getFunRetMuNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getFunRetMuNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getFunRetMuNum ( ) const</computeroutput></para>
<para>Get <link linkend="_class_s_v_f_1_1_ret_m_u">RetMU</link> numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1aafc83f7f22ebf3b3683607440c488bef"/>    <section>
    <title>getLoadMuNum()</title>
<indexterm><primary>getLoadMuNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getLoadMuNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getLoadMuNum ( ) const</computeroutput></para><para>

<para>Stat methods. </para>
</para>

<para>Get loadMU numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1aa8c45b455e6fc60cab955534c3e50bfa"/>    <section>
    <title>getStoreChiNum()</title>
<indexterm><primary>getStoreChiNum</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>getStoreChiNum</secondary></indexterm>
<para><computeroutput>u32_t MemSSA::getStoreChiNum ( ) const</computeroutput></para>
<para>Get <link linkend="_class_s_v_f_1_1_store_c_h_i">StoreCHI</link> numbers </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a89c40c8fad70f3aead6531261e5a3cc3"/>    <section>
    <title>performStat()</title>
<indexterm><primary>performStat</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>performStat</secondary></indexterm>
<para><computeroutput>void MemSSA::performStat ( )</computeroutput></para><para>

<para>Perform statistics. </para>
</para>

<para>Perform statistics </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a16114eb55775f6ee812c1648dcaede0c"/>    <section>
    <title>SSARename()</title>
<indexterm><primary>SSARename</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>SSARename</secondary></indexterm>
<para><computeroutput>void MemSSA::SSARename (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> &amp; fun)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>SSA rename for a function. </para>
</para>

<para>SSA construction algorithm </para>
    </section><anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a271c20725d49dd65b95c062938ffde4c"/>    <section>
    <title>SSARenameBB()</title>
<indexterm><primary>SSARenameBB</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>SSARenameBB</secondary></indexterm>
<para><computeroutput>void MemSSA::SSARenameBB (const BasicBlock &amp; bb)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>SSA rename for a basic block. </para>
</para>

<para>Renaming for each memory regions See the renaming algorithm in book Engineering A Compiler (Figure 9.12) </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_mem_s_s_a_1a37dca8a7d155de4870358146d219b5e5"/>    <section>
    <title>timeOfGeneratingMemRegions</title>
<indexterm><primary>timeOfGeneratingMemRegions</primary><secondary>SVF::MemSSA</secondary></indexterm>
<indexterm><primary>SVF::MemSSA</primary><secondary>timeOfGeneratingMemRegions</secondary></indexterm>
<para><computeroutput>double MemSSA::timeOfGeneratingMemRegions = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Statistics. </para>
</para>

<para>Time for allocating regions.</para>

<para>Time for allocating regions </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MSSA/MemSSA.hlib/MSSA/MemSSA.cpp</section>
</section>
