.TH "SVF::SVFGBuilder" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::SVFGBuilder
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SVFGBuilder\&.h>\fP
.PP
Inherited by \fBSVF::MTASVFGBuilder\fP, and \fBSVF::SaberSVFGBuilder\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef PointerAnalysis::CallSiteSet \fBCallSiteSet\fP"
.br
.ti -1c
.RI "typedef PointerAnalysis::CallEdgeMap \fBCallEdgeMap\fP"
.br
.ti -1c
.RI "typedef PointerAnalysis::FunctionSet \fBFunctionSet\fP"
.br
.ti -1c
.RI "typedef SVFG::SVFGEdgeSetTy \fBSVFGEdgeSet\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSVFGBuilder\fP (bool _SVFGWithIndCall=false)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~SVFGBuilder\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBSVFG\fP * \fBbuildPTROnlySVFG\fP (\fBBVDataPTAImpl\fP *pta)"
.br
.ti -1c
.RI "\fBSVFG\fP * \fBbuildPTROnlySVFGWithoutOPT\fP (\fBBVDataPTAImpl\fP *pta)"
.br
.ti -1c
.RI "\fBSVFG\fP * \fBbuildFullSVFG\fP (\fBBVDataPTAImpl\fP *pta)"
.br
.ti -1c
.RI "\fBSVFG\fP * \fBbuildFullSVFGWithoutOPT\fP (\fBBVDataPTAImpl\fP *pta)"
.br
.ti -1c
.RI "\fBSVFG\fP * \fBgetSVFG\fP () const"
.br
.RI "Get \fBSVFG\fP instance\&. "
.ti -1c
.RI "void \fBmarkValidVFEdge\fP (SVFGEdgeSet &edges)"
.br
.RI "Mark feasible VF edge by removing it from set vfEdgesAtIndCallSite\&. "
.ti -1c
.RI "bool \fBisSpuriousVFEdgeAtIndCallSite\fP (const \fBSVFGEdge\fP *edge)"
.br
.RI "Return true if this is an VF Edge pre-connected by \fBAndersen\fP's analysis\&. "
.ti -1c
.RI "virtual \fBMemSSA\fP * \fBbuildMSSA\fP (\fBBVDataPTAImpl\fP *pta, bool ptrOnlyMSSA)"
.br
.RI "Build Memory SSA\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBreleaseSVFG\fP ()"
.br
.RI "Clean up\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBSVFG\fP * \fBglobalSvfg\fP = NULL"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSVFG\fP * \fBbuild\fP (\fBBVDataPTAImpl\fP *pta, \fBVFG::VFGK\fP kind)"
.br
.RI "Create a DDA \fBSVFG\fP\&. By default actualOut and FormalIN are removed, unless withAOFI is set true\&. "
.ti -1c
.RI "virtual void \fBbuildSVFG\fP ()"
.br
.RI "Can be rewritten by subclasses\&. "
.ti -1c
.RI "virtual void \fBreleaseMemory\fP ()"
.br
.RI "Release global \fBSVFG\fP\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "SVFGEdgeSet \fBvfEdgesAtIndCallSite\fP"
.br
.RI "\fBSVFG\fP Edges connected at indirect call/ret sites\&. "
.ti -1c
.RI "\fBSVFG\fP * \fBsvfg\fP"
.br
.ti -1c
.RI "bool \fBSVFGWithIndCall\fP"
.br
.RI "\fBSVFG\fP with precomputed indirect call edges\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBSVFG\fP Builder 
.SH "Member Function Documentation"
.PP 
.SS "\fBSVFG\fP * SVFGBuilder::build (\fBBVDataPTAImpl\fP * pta, \fBVFG::VFGK\fP kind)\fC [protected]\fP"

.PP
Create a DDA \fBSVFG\fP\&. By default actualOut and FormalIN are removed, unless withAOFI is set true\&. Create DDA \fBSVFG\fP\&. Note that we use callgraph from andersen analysis here
.PP
Update call graph using pre-analysis results
.SS "void SVFGBuilder::buildSVFG ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Can be rewritten by subclasses\&. Create \fBSVFG\fP 
.PP
Reimplemented in \fBSVF::SaberSVFGBuilder\fP, and \fBSVF::MTASVFGBuilder\fP\&.
.SS "void SVFGBuilder::releaseMemory ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Release global \fBSVFG\fP\&. Release memory 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
