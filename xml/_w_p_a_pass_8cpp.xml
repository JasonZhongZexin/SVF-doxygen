<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_w_p_a_pass_8cpp" kind="file" language="C++">
    <compoundname>WPAPass.cpp</compoundname>
    <includes refid="_s_v_f_module_8h" local="yes">Util/SVFModule.h</includes>
    <includes refid="_pointer_analysis_impl_8h" local="yes">MemoryModel/PointerAnalysisImpl.h</includes>
    <includes refid="_w_p_a_pass_8h" local="yes">WPA/WPAPass.h</includes>
    <includes refid="_andersen_8h" local="yes">WPA/Andersen.h</includes>
    <includes refid="_andersen_s_f_r_8h" local="yes">WPA/AndersenSFR.h</includes>
    <includes refid="_flow_sensitive_8h" local="yes">WPA/FlowSensitive.h</includes>
    <includes refid="_flow_sensitive_t_b_h_c_8h" local="yes">WPA/FlowSensitiveTBHC.h</includes>
    <includes refid="_versioned_flow_sensitive_8h" local="yes">WPA/VersionedFlowSensitive.h</includes>
    <includes refid="_type_analysis_8h" local="yes">WPA/TypeAnalysis.h</includes>
    <includes refid="_steensgaard_8h" local="yes">WPA/Steensgaard.h</includes>
    <includes refid="_p_a_g_builder_8h" local="yes">SVF-FE/PAGBuilder.h</includes>
    <incdepgraph>
      <node id="65">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>list</label>
      </node>
      <node id="61">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>WPA/WPASolver.h</label>
        <link refid="_w_p_a_solver_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>SVF-FE/DCHG.h</label>
        <link refid="_d_c_h_g_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>system_error</label>
      </node>
      <node id="57">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="51">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="108">
        <label>Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="79">
        <label>assert.h</label>
      </node>
      <node id="33">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="110">
        <label>Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="7">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="6">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="71">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="77">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="39">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="82">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>MemoryModel/PTAStat.h</label>
        <link refid="_p_t_a_stat_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>cassert</label>
      </node>
      <node id="125">
        <label>WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>WPA/WPAFSSolver.h</label>
        <link refid="_w_p_a_f_s_solver_8h_source"/>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>Graphs/ConsGNode.h</label>
        <link refid="_cons_g_node_8h_source"/>
      </node>
      <node id="89">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="73">
        <label>string</label>
      </node>
      <node id="99">
        <label>WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="93">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="40">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="120">
        <label>Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>unordered_set</label>
      </node>
      <node id="130">
        <label>WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="115">
        <label>MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>WPA/CSC.h</label>
        <link refid="_c_s_c_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="5">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="122">
        <label>Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>limits.h</label>
      </node>
      <node id="38">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="52">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="107">
        <label>Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="2">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="70">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="1">
        <label>lib/WPA/WPAPass.cpp</label>
        <link refid="_w_p_a_pass_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="78">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stack</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="21">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="25">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="54">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="68">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="56">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="66">
        <label>time.h</label>
      </node>
      <node id="85">
        <label>math.h</label>
      </node>
      <node id="98">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="75">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="49">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="80">
        <label>cstdlib</label>
      </node>
      <node id="103">
        <label>iostream</label>
      </node>
      <node id="55">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="48">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="16">
        <label>deque</label>
      </node>
      <node id="67">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="46">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="4">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="42">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="47">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="101">
        <label>WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>SVF-FE/CommonCHG.h</label>
        <link refid="_common_c_h_g_8h_source"/>
      </node>
      <node id="44">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="32">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="123">
        <label>WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="83">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="43">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="34">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="96">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>SVF-FE/PAGBuilder.h</label>
        <link refid="_p_a_g_builder_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="23">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="111">
        <label>Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>SVF-FE/ICFGBuilder.h</label>
        <link refid="_i_c_f_g_builder_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="41">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_w_p_a_pass_8cpp_1a9d97e267cd20f2606c3db3be833f6e1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::RegisterPass&lt; <ref refid="class_s_v_f_1_1_w_p_a_pass" kindref="compound">WPAPass</ref> &gt;</type>
        <definition>static llvm::RegisterPass&lt;WPAPass&gt; WHOLEPROGRAMPA</definition>
        <argsstring>(&quot;wpa&quot;, &quot;Whole Program Pointer Analysis Pass&quot;)</argsstring>
        <name>WHOLEPROGRAMPA</name>
        <param>
          <type>&quot;wpa&quot;</type>
        </param>
        <param>
          <type>&quot;Whole Program Pointer Analysis Pass&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/WPAPass.cpp" line="52" column="27" declfile="lib/WPA/WPAPass.cpp" declline="52" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="_w_p_a_pass_8cpp_1aaf12071a891ae9bed1cdd1527aaf6fa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::bits&lt; <ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PointerAnalysis::PTATY</ref> &gt;</type>
        <definition>static llvm::cl::bits&lt;PointerAnalysis::PTATY&gt; PASelected</definition>
        <argsstring>(llvm::cl::desc(&quot;Select pointer analysis&quot;), llvm::cl::values(clEnumValN(PointerAnalysis::Andersen_WPA, &quot;nander&quot;, &quot;Standard inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenLCD_WPA, &quot;lander&quot;, &quot;Lazy cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenHCD_WPA, &quot;hander&quot;, &quot;Hybrid cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenHLCD_WPA, &quot;hlander&quot;, &quot;Hybrid lazy cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenSCD_WPA, &quot;sander&quot;, &quot;Selective cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenSFR_WPA, &quot;sfrander&quot;, &quot;Stride-based field representation includion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenWaveDiff_WPA, &quot;wander&quot;, &quot;Wave propagation inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenWaveDiff_WPA, &quot;ander&quot;, &quot;Diff wave propagation inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::Steensgaard_WPA, &quot;steens&quot;, &quot;Steensgaard&apos;s pointer analysis&quot;), clEnumValN(PointerAnalysis::FSSPARSE_WPA, &quot;fspta&quot;, &quot;Sparse flow sensitive pointer analysis&quot;), clEnumValN(PointerAnalysis::FSTBHC_WPA, &quot;fstbhc&quot;, &quot;Sparse flow-sensitive type-based heap cloning pointer analysis&quot;), clEnumValN(PointerAnalysis::VFS_WPA, &quot;vfspta&quot;, &quot;Versioned sparse flow-sensitive points-to analysis&quot;), clEnumValN(PointerAnalysis::TypeCPP_WPA, &quot;type&quot;, &quot;Type-based fast analysis for Callgraph, PAG and CHA&quot;)))</argsstring>
        <name>PASelected</name>
        <param>
          <type>llvm::cl::desc(&quot;Select pointer analysis&quot;)</type>
        </param>
        <param>
          <type>llvm::cl::values(clEnumValN(PointerAnalysis::Andersen_WPA, &quot;nander&quot;, &quot;Standard inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenLCD_WPA, &quot;lander&quot;, &quot;Lazy cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenHCD_WPA, &quot;hander&quot;, &quot;Hybrid cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenHLCD_WPA, &quot;hlander&quot;, &quot;Hybrid lazy cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenSCD_WPA, &quot;sander&quot;, &quot;Selective cycle detection inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenSFR_WPA, &quot;sfrander&quot;, &quot;Stride-based field representation includion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenWaveDiff_WPA, &quot;wander&quot;, &quot;Wave propagation inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::AndersenWaveDiff_WPA, &quot;ander&quot;, &quot;Diff wave propagation inclusion-based analysis&quot;), clEnumValN(PointerAnalysis::Steensgaard_WPA, &quot;steens&quot;, &quot;<ref refid="class_s_v_f_1_1_steensgaard" kindref="compound">Steensgaard</ref>&apos;s pointer analysis&quot;), clEnumValN(PointerAnalysis::FSSPARSE_WPA, &quot;fspta&quot;, &quot;Sparse flow sensitive pointer analysis&quot;), clEnumValN(PointerAnalysis::FSTBHC_WPA, &quot;fstbhc&quot;, &quot;Sparse flow-sensitive type-based heap cloning pointer analysis&quot;), clEnumValN(PointerAnalysis::VFS_WPA, &quot;vfspta&quot;, &quot;Versioned sparse flow-sensitive points-to analysis&quot;), clEnumValN(PointerAnalysis::TypeCPP_WPA, &quot;type&quot;, &quot;Type-based fast analysis for Callgraph, <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> and CHA&quot;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>register this into alias analysis group static RegisterAnalysisGroup&lt;AliasAnalysis&gt; AA_GROUP(WHOLEPROGRAMPA); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/WPAPass.cpp" line="58" column="23" declfile="lib/WPA/WPAPass.cpp" declline="58" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="_w_p_a_pass_8cpp_1a0a6be5aa7c0dac932c03a67b42eeca2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::bits&lt; <ref refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394d" kindref="member">WPAPass::AliasCheckRule</ref> &gt;</type>
        <definition>static llvm::cl::bits&lt;WPAPass::AliasCheckRule&gt; AliasRule</definition>
        <argsstring>(llvm::cl::desc(&quot;Select alias check rule&quot;), llvm::cl::values(clEnumValN(WPAPass::Conservative, &quot;conservative&quot;, &quot;return MayAlias if any pta says alias&quot;), clEnumValN(WPAPass::Veto, &quot;veto&quot;, &quot;return NoAlias if any pta says no alias&quot;)))</argsstring>
        <name>AliasRule</name>
        <param>
          <type>llvm::cl::desc(&quot;Select alias check rule&quot;)</type>
        </param>
        <param>
          <type>llvm::cl::values(clEnumValN(WPAPass::Conservative, &quot;conservative&quot;, &quot;return MayAlias if any pta says alias&quot;), clEnumValN(WPAPass::Veto, &quot;veto&quot;, &quot;return NoAlias if any pta says no alias&quot;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/WPAPass.cpp" line="78" column="23" declfile="lib/WPA/WPAPass.cpp" declline="78" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="_w_p_a_pass_8cpp_1a00078c8abe8272d3a768aac7ee1d7e3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; anderSVFG</definition>
        <argsstring>(&quot;svfg&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Generate SVFG after Andersen&apos;s Analysis&quot;))</argsstring>
        <name>anderSVFG</name>
        <param>
          <type>&quot;svfg&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Generate <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> after <ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref>&apos;s Analysis&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/WPAPass.cpp" line="84" column="22" declfile="lib/WPA/WPAPass.cpp" declline="84" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_w_p_a_pass_8cpp_1a5513889ee463aa48a4d0773f3fa5ff5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; printAliases</definition>
        <argsstring>(&quot;print-aliases&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Print results for all pair aliases&quot;))</argsstring>
        <name>printAliases</name>
        <param>
          <type>&quot;print-aliases&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Print results for all pair aliases&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/WPAPass.cpp" line="87" column="22" declfile="lib/WPA/WPAPass.cpp" declline="87" declcolumn="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>WPAPass.cpp<sp/>--<sp/>Whole<sp/>program<sp/>analysis<sp/>pass------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVF:<sp/>Static<sp/>Value-Flow<sp/>Analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>&lt;2013-2017&gt;<sp/><sp/>&lt;Yulei<sp/>Sui&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//===-----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>@file:<sp/>WPA.cpp</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>@author:<sp/>yesen</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>@date:<sp/>10/06/2014</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>@version:<sp/>1.0</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@section<sp/>LICENSE</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>@section<sp/>DESCRIPTION</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Util/SVFModule.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MemoryModel/PointerAnalysisImpl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/WPAPass.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/Andersen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/AndersenSFR.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/FlowSensitive.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/FlowSensitiveTBHC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/VersionedFlowSensitive.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/TypeAnalysis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/Steensgaard.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/PAGBuilder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a2674527c92cdef223e655d449f0811d4" kindref="member">WPAPass::ID</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::RegisterPass&lt;WPAPass&gt;<sp/>WHOLEPROGRAMPA(</highlight><highlight class="stringliteral">&quot;wpa&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Whole<sp/>Program<sp/>Pointer<sp/>Analysis<sp/>Pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::bits&lt;PointerAnalysis::PTATY&gt;<sp/>PASelected(llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Select<sp/>pointer<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::values(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" kindref="member">PointerAnalysis::Andersen_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;nander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Standard<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" kindref="member">PointerAnalysis::AndersenLCD_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;lander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Lazy<sp/>cycle<sp/>detection<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" kindref="member">PointerAnalysis::AndersenHCD_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;hander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hybrid<sp/>cycle<sp/>detection<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" kindref="member">PointerAnalysis::AndersenHLCD_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;hlander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hybrid<sp/>lazy<sp/>cycle<sp/>detection<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" kindref="member">PointerAnalysis::AndersenSCD_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;sander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Selective<sp/>cycle<sp/>detection<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" kindref="member">PointerAnalysis::AndersenSFR_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;sfrander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Stride-based<sp/>field<sp/>representation<sp/>includion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;wander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Wave<sp/>propagation<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ander&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Diff<sp/>wave<sp/>propagation<sp/>inclusion-based<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" kindref="member">PointerAnalysis::Steensgaard_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;steens&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Steensgaard&apos;s<sp/>pointer<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disabled<sp/>till<sp/>further<sp/>work<sp/>is<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clEnumValN(PointerAnalysis::AndersenWaveDiffWithType_WPA,<sp/>&quot;andertype&quot;,<sp/>&quot;Diff<sp/>wave<sp/>propagation<sp/>with<sp/>type<sp/>inclusion-based<sp/>analysis&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" kindref="member">PointerAnalysis::FSSPARSE_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;fspta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sparse<sp/>flow<sp/>sensitive<sp/>pointer<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" kindref="member">PointerAnalysis::FSTBHC_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;fstbhc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sparse<sp/>flow-sensitive<sp/>type-based<sp/>heap<sp/>cloning<sp/>pointer<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" kindref="member">PointerAnalysis::VFS_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vfspta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Versioned<sp/>sparse<sp/>flow-sensitive<sp/>points-to<sp/>analysis&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" kindref="member">PointerAnalysis::TypeCPP_WPA</ref>,<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type-based<sp/>fast<sp/>analysis<sp/>for<sp/>Callgraph,<sp/>PAG<sp/>and<sp/>CHA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::bits&lt;WPAPass::AliasCheckRule&gt;<sp/>AliasRule(llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Select<sp/>alias<sp/>check<sp/>rule&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::values(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394da498ba80d25733b291f391a94500dd4c7" kindref="member">WPAPass::Conservative</ref>,<sp/></highlight><highlight class="stringliteral">&quot;conservative&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;return<sp/>MayAlias<sp/>if<sp/>any<sp/>pta<sp/>says<sp/>alias&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clEnumValN(<ref refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394dabb45a604558e2ebff460adb77b4a5d7c" kindref="member">WPAPass::Veto</ref>,<sp/></highlight><highlight class="stringliteral">&quot;veto&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;return<sp/>NoAlias<sp/>if<sp/>any<sp/>pta<sp/>says<sp/>no<sp/>alias&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>anderSVFG(</highlight><highlight class="stringliteral">&quot;svfg&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Generate<sp/>SVFG<sp/>after<sp/>Andersen&apos;s<sp/>Analysis&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>printAliases(</highlight><highlight class="stringliteral">&quot;print-aliases&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Print<sp/>results<sp/>for<sp/>all<sp/>pair<sp/>aliases&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="class_s_v_f_1_1_w_p_a_pass_1a7ea8006b7e9237a470dfd34ad633826b" kindref="member">WPAPass::~WPAPass</ref>()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAVector::const_iterator<sp/>it<sp/>=<sp/>ptaVector.begin();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAVector::const_iterator<sp/>eit<sp/>=<sp/>ptaVector.end();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pta;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ptaVector.clear();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a394dcd976c1ef08d9cadcba8f5d07c75" kindref="member">WPAPass::runOnModule</ref>(<ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref>*<sp/>svfModule)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(u32_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" kindref="member">PointerAnalysis::Default_PTA</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PASelected.isSet(i))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runPointerAnalysis(svfModule,<sp/>i);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ptaVector.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>pointer<sp/>analysis<sp/>is<sp/>specified.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a394dcd976c1ef08d9cadcba8f5d07c75" kindref="member">WPAPass::runOnModule</ref>(Module&amp;<sp/>module)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref>*<sp/>svfModule<sp/>=<sp/>LLVMModuleSet::getLLVMModuleSet()-&gt;buildSVFModule(module);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a394dcd976c1ef08d9cadcba8f5d07c75" kindref="member">runOnModule</ref>(svfModule);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WPAPass::runPointerAnalysis(<ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref>*<sp/>svfModule,<sp/>u32_t<sp/>kind)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_builder" kindref="compound">PAGBuilder</ref><sp/>builder;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag<sp/>=<sp/>builder.<ref refid="class_s_v_f_1_1_p_a_g_builder_1a757ab2c9481467842e1ad4c46a1f6291" kindref="member">build</ref>(svfModule);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(kind)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" kindref="member">PointerAnalysis::Andersen_WPA</ref>:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref>(pag);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" kindref="member">PointerAnalysis::AndersenLCD_WPA</ref>:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_l_c_d" kindref="compound">AndersenLCD</ref>(pag);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" kindref="member">PointerAnalysis::AndersenHCD_WPA</ref>:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_h_c_d" kindref="compound">AndersenHCD</ref>(pag);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" kindref="member">PointerAnalysis::AndersenHLCD_WPA</ref>:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_h_l_c_d" kindref="compound">AndersenHLCD</ref>(pag);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" kindref="member">PointerAnalysis::AndersenSCD_WPA</ref>:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_s_c_d" kindref="compound">AndersenSCD</ref>(pag);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" kindref="member">PointerAnalysis::AndersenSFR_WPA</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_s_f_r" kindref="compound">AndersenSFR</ref>(pag);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff" kindref="compound">AndersenWaveDiff</ref>(pag);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" kindref="member">PointerAnalysis::AndersenWaveDiffWithType_WPA</ref>:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff_with_type" kindref="compound">AndersenWaveDiffWithType</ref>(pag);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" kindref="member">PointerAnalysis::Steensgaard_WPA</ref>:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_steensgaard" kindref="compound">Steensgaard</ref>(pag);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" kindref="member">PointerAnalysis::FSSPARSE_WPA</ref>:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive" kindref="compound">FlowSensitive</ref>(pag);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" kindref="member">PointerAnalysis::FSTBHC_WPA</ref>:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c" kindref="compound">FlowSensitiveTBHC</ref>(pag);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" kindref="member">PointerAnalysis::VFS_WPA</ref>:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_versioned_flow_sensitive" kindref="compound">VersionedFlowSensitive</ref>(pag);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" kindref="member">PointerAnalysis::TypeCPP_WPA</ref>:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_type_analysis" kindref="compound">TypeAnalysis</ref>(pag);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>pointer<sp/>analysis<sp/>has<sp/>not<sp/>been<sp/>implemented<sp/>yet.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>ptaVector.push_back(_pta);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>_pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6" kindref="member">analyze</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(anderSVFG)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_s_v_f_g_builder" kindref="compound">SVFGBuilder</ref><sp/>memSSA(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(SVFUtil::isa&lt;AndersenBase&gt;(_pta)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;supports<sp/>only<sp/>andersen/steensgaard<sp/>for<sp/>pre-computed<sp/>SVFG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref><sp/>*svfg<sp/>=<sp/>memSSA.buildFullSVFG((<ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl" kindref="compound">BVDataPTAImpl</ref>*)_pta);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PASelected.isSet(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>))</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_svfg<sp/>=<sp/>svfg;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printAliases)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1abb6e0c5cc5de312ee0285d1854550752" kindref="member">PrintAliasPairs</ref>(_pta);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1abb6e0c5cc5de312ee0285d1854550752" kindref="member">WPAPass::PrintAliasPairs</ref>(<ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref>*<sp/>pta)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" kindref="member">PAG::iterator</ref><sp/>lit<sp/>=<sp/>pag-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>(),<sp/>elit<sp/>=<sp/>pag-&gt;end();<sp/>lit<sp/>!=<sp/>elit;<sp/>++lit)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node1<sp/>=<sp/>lit-&gt;second;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref>*<sp/>node2<sp/>=<sp/>node1;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" kindref="member">PAG::iterator</ref><sp/>rit<sp/>=<sp/>lit,<sp/>erit<sp/>=<sp/>pag-&gt;end();<sp/>rit<sp/>!=<sp/>erit;<sp/>++rit)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node2<sp/>=<sp/>rit-&gt;second;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node1==node2)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun1<sp/>=<sp/>node1-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a1697d70ee484569bbd7557cf99b223dc" kindref="member">getFunction</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Function*<sp/>fun2<sp/>=<sp/>node2-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a1697d70ee484569bbd7557cf99b223dc" kindref="member">getFunction</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AliasResult<sp/>result<sp/>=<sp/>pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1" kindref="member">alias</ref>(node1-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>node2-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVFUtil::outs()<sp/>&lt;&lt;<sp/>(result<sp/>==<sp/>AliasResult::NoAlias<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;NoAlias&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;MayAlias&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>var&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node1-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node1-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a32174f36da4ceeecd0f094b2f8321598" kindref="member">getValueName</ref>()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(fun1==NULL?</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:fun1-&gt;getName())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>--&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>var&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node2-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node2-&gt;<ref refid="class_s_v_f_1_1_p_a_g_node_1a32174f36da4ceeecd0f094b2f8321598" kindref="member">getValueName</ref>()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(fun2==NULL?</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:fun2-&gt;getName())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">AliasResult<sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1af339db8bffc554be7dd5cb6b100649e7" kindref="member">WPAPass::alias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>V1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>V2)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>AliasResult<sp/>result<sp/>=<sp/>llvm::MayAlias;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>pag<sp/>=<sp/>_pta-&gt;<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pag-&gt;hasValueNode(V1)<sp/>&amp;&amp;<sp/>pag-&gt;hasValueNode(V2))</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AliasRule.getBits()<sp/>==<sp/>0<sp/>||<sp/>AliasRule.isSet(<ref refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394dabb45a604558e2ebff460adb77b4a5d7c" kindref="member">Veto</ref>))</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>llvm::MayAlias;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTAVector::const_iterator<sp/>it<sp/>=<sp/>ptaVector.begin(),<sp/>eit<sp/>=<sp/>ptaVector.end();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;alias(V1,<sp/>V2)<sp/>==<sp/>llvm::NoAlias)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>llvm::NoAlias;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AliasRule.isSet(<ref refid="class_s_v_f_1_1_w_p_a_pass_1a4505a1882956feda3cf83c788149394da498ba80d25733b291f391a94500dd4c7" kindref="member">Conservative</ref>))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>llvm::NoAlias;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PTAVector::const_iterator<sp/>it<sp/>=<sp/>ptaVector.begin(),<sp/>eit<sp/>=<sp/>ptaVector.end();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>++it)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;alias(V1,<sp/>V2)<sp/>==<sp/>llvm::MayAlias)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>llvm::MayAlias;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">ModRefInfo<sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a567f818fa7b29142b18cb39e5c063a4e" kindref="member">WPAPass::getModRefInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>callInst)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PASelected.isSet(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>)<sp/>&amp;&amp;<sp/>anderSVFG<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;mod-ref<sp/>query<sp/>is<sp/>only<sp/>support<sp/>with<sp/>-ander<sp/>and<sp/>-svfg<sp/>turned<sp/>on&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref>*<sp/>icfg<sp/>=<sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn<sp/>=<sp/>icfg-&gt;getCallBlockNode(callInst);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" kindref="member">getMSSA</ref>()-&gt;<ref refid="class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09" kindref="member">getMRGenerator</ref>()-&gt;<ref refid="class_s_v_f_1_1_m_r_generator_1a455e0ba173141ac8ce76a655ac52205f" kindref="member">getModRefInfo</ref>(cbn);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">ModRefInfo<sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a567f818fa7b29142b18cb39e5c063a4e" kindref="member">WPAPass::getModRefInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>callInst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>V)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PASelected.isSet(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>)<sp/>&amp;&amp;<sp/>anderSVFG<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;mod-ref<sp/>query<sp/>is<sp/>only<sp/>support<sp/>with<sp/>-ander<sp/>and<sp/>-svfg<sp/>turned<sp/>on&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref>*<sp/>icfg<sp/>=<sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn<sp/>=<sp/>icfg-&gt;getCallBlockNode(callInst);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" kindref="member">getMSSA</ref>()-&gt;<ref refid="class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09" kindref="member">getMRGenerator</ref>()-&gt;<ref refid="class_s_v_f_1_1_m_r_generator_1a455e0ba173141ac8ce76a655ac52205f" kindref="member">getModRefInfo</ref>(cbn,<sp/>V);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">ModRefInfo<sp/><ref refid="class_s_v_f_1_1_w_p_a_pass_1a567f818fa7b29142b18cb39e5c063a4e" kindref="member">WPAPass::getModRefInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>callInst1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CallInst*<sp/>callInst2)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PASelected.isSet(<ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" kindref="member">PointerAnalysis::AndersenWaveDiff_WPA</ref>)<sp/>&amp;&amp;<sp/>anderSVFG<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;mod-ref<sp/>query<sp/>is<sp/>only<sp/>support<sp/>with<sp/>-ander<sp/>and<sp/>-svfg<sp/>turned<sp/>on&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref>*<sp/>icfg<sp/>=<sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_v_f_g_1a560e0d31a6a9ba4c2b0ac540c233fef1" kindref="member">getPAG</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1ad274c5c15ac51cea5d09ad08febe8c14" kindref="member">getICFG</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn1<sp/>=<sp/>icfg-&gt;getCallBlockNode(callInst1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref>*<sp/>cbn2<sp/>=<sp/>icfg-&gt;getCallBlockNode(callInst2);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_svfg-&gt;<ref refid="class_s_v_f_1_1_s_v_f_g_1a49a910bc4ea6e98d1584e74a018badc9" kindref="member">getMSSA</ref>()-&gt;<ref refid="class_s_v_f_1_1_mem_s_s_a_1ab2dfdcf6fb50ba6cacad1254350a5b09" kindref="member">getMRGenerator</ref>()-&gt;<ref refid="class_s_v_f_1_1_m_r_generator_1a455e0ba173141ac8ce76a655ac52205f" kindref="member">getModRefInfo</ref>(cbn1,<sp/>cbn2);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/WPA/WPAPass.cpp"/>
  </compounddef>
</doxygen>
