<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_saber_checker_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>SVF::SaberCheckerAPI</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056" prot="public" static="no" strong="no">
        <type></type>
        <name>CHECKER_TYPE</name>
        <enumvalue id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a7e06261f283161194d11f4d27c417c45" prot="public">
          <name>CK_DUMMY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056acd7e3bca6e36e08205576482b1b0221e" prot="public">
          <name>CK_ALLOC</name>
          <briefdescription>
<para>dummy type </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a0fa2e38d001b233c6563822491adf507" prot="public">
          <name>CK_FREE</name>
          <briefdescription>
<para>memory allocation </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a75cc4daa228ceb26f63cb1825da8a73e" prot="public">
          <name>CK_FOPEN</name>
          <briefdescription>
<para>memory deallocation </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a731dcaf32786abf31c43be180dd366cb" prot="public">
          <name>CK_FCLOSE</name>
          <briefdescription>
<para>File open. </para>
          </briefdescription>
          <detaileddescription>
<para>File close </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="48" column="5" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_saber_checker_a_p_i_1a3115116dc595c4b157f2cfc0a6ea89fc" prot="public" static="no">
        <type>llvm::StringMap&lt; <ref refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056" kindref="member">CHECKER_TYPE</ref> &gt;</type>
        <definition>typedef llvm::StringMap&lt;CHECKER_TYPE&gt; SVF::SaberCheckerAPI::TDAPIMap</definition>
        <argsstring></argsstring>
        <name>TDAPIMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="57" column="29" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_saber_checker_a_p_i_1a62471599cba4bde20d2696a91fa064ec" prot="private" static="no" mutable="no">
        <type>TDAPIMap</type>
        <definition>TDAPIMap SVF::SaberCheckerAPI::tdAPIMap</definition>
        <argsstring></argsstring>
        <name>tdAPIMap</name>
        <briefdescription>
<para>API map, from a string to threadAPI type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="61" column="14" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_saber_checker_a_p_i_1a3e54cae9b4259da2332c7fc87d3df347" prot="private" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_saber_checker_a_p_i" kindref="compound">SaberCheckerAPI</ref> *</type>
        <definition>SaberCheckerAPI * SaberCheckerAPI::ckAPI</definition>
        <argsstring></argsstring>
        <name>ckAPI</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Static reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="73" column="28" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1afdd2f15bb46594a61a3c552899215806" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SaberCheckerAPI::SaberCheckerAPI</definition>
        <argsstring>()</argsstring>
        <name>SaberCheckerAPI</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="64" column="5" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a5771df69ffa75b6103a32c8bd48ef488" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SaberCheckerAPI::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>Initialize the map. </para>
        </briefdescription>
        <detaileddescription>
<para>initialize the map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="70" column="10" bodyfile="lib/SABER/SaberCheckerAPI.cpp" bodystart="142" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1ab0cdd9671c406e8d881f0a057fe44081" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056" kindref="member">CHECKER_TYPE</ref></type>
        <definition>CHECKER_TYPE SVF::SaberCheckerAPI::getType</definition>
        <argsstring>(const SVFFunction *F) const</argsstring>
        <name>getType</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Get the function type of a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="76" column="25" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="76" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1acf41a2b6de063da9ed492ef0da129036" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_saber_checker_a_p_i" kindref="compound">SaberCheckerAPI</ref> *</type>
        <definition>static SaberCheckerAPI* SVF::SaberCheckerAPI::getCheckerAPI</definition>
        <argsstring>()</argsstring>
        <name>getCheckerAPI</name>
        <briefdescription>
<para>Return a static reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="89" column="28" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="89" bodyend="96"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a71cbe5fbf582d0801f604595d3dfb416" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemAlloc</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>isMemAlloc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if this call is a memory allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="100" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a8a96f6ee7bd9be1abfa89b05d773539f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemAlloc</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>isMemAlloc</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="104" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a0e485cc7410e7a1ea68fb59dfdff1ff4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemAlloc</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>isMemAlloc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="108" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1ab6d9c2435bdb1c01542cc75e9eef0a4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemDealloc</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>isMemDealloc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if this call is a memory deallocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="116" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a3b9d60c60d518a8abe2951ccc627fe33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemDealloc</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>isMemDealloc</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="120" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1abe9fee725114243e16db4c2fd1abf3fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isMemDealloc</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>isMemDealloc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="124" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a0977378f6f2a782041c97912762deb5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFOpen</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>isFOpen</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if this call is a file open. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="132" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1ad7308258d0186a99325adf030c1138a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFOpen</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>isFOpen</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="136" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1aa0996d51dc3fc3e98d8572fbae88186a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFOpen</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>isFOpen</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="140" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1a970676d884d66da9fce00fe5b60c96ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFClose</definition>
        <argsstring>(const SVFFunction *fun) const</argsstring>
        <name>isFClose</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Return true if this call is a file close. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="148" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1ad029e2f347ee2aeb5b0abb928a552789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFClose</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>isFClose</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="152" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_saber_checker_a_p_i_1ac176579c004a0bf210bbcc5bc7f0f250" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SaberCheckerAPI::isFClose</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>isFClose</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SABER/SaberCheckerAPI.h" line="156" column="17" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="156" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/SABER/SaberCheckerAPI.h" line="44" column="1" bodyfile="include/SABER/SaberCheckerAPI.h" bodystart="45" bodyend="162"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CHECKER_TYPE</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056acd7e3bca6e36e08205576482b1b0221e" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CK_ALLOC</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a7e06261f283161194d11f4d27c417c45" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CK_DUMMY</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a731dcaf32786abf31c43be180dd366cb" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CK_FCLOSE</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a75cc4daa228ceb26f63cb1825da8a73e" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CK_FOPEN</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a32f3c37a5957dc7533f7e82617d5d056a0fa2e38d001b233c6563822491adf507" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>CK_FREE</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a3e54cae9b4259da2332c7fc87d3df347" prot="private" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>ckAPI</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1acf41a2b6de063da9ed492ef0da129036" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>getCheckerAPI</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1ab0cdd9671c406e8d881f0a057fe44081" prot="private" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a5771df69ffa75b6103a32c8bd48ef488" prot="private" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>init</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a970676d884d66da9fce00fe5b60c96ba" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFClose</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1ad029e2f347ee2aeb5b0abb928a552789" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFClose</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1ac176579c004a0bf210bbcc5bc7f0f250" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFClose</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a0977378f6f2a782041c97912762deb5f" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFOpen</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1ad7308258d0186a99325adf030c1138a6" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFOpen</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1aa0996d51dc3fc3e98d8572fbae88186a" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isFOpen</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a71cbe5fbf582d0801f604595d3dfb416" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemAlloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a8a96f6ee7bd9be1abfa89b05d773539f" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemAlloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a0e485cc7410e7a1ea68fb59dfdff1ff4" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemAlloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1ab6d9c2435bdb1c01542cc75e9eef0a4e" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemDealloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a3b9d60c60d518a8abe2951ccc627fe33" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemDealloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1abe9fee725114243e16db4c2fd1abf3fa" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>isMemDealloc</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1afdd2f15bb46594a61a3c552899215806" prot="private" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>SaberCheckerAPI</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a3115116dc595c4b157f2cfc0a6ea89fc" prot="public" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>TDAPIMap</name></member>
      <member refid="class_s_v_f_1_1_saber_checker_a_p_i_1a62471599cba4bde20d2696a91fa064ec" prot="private" virt="non-virtual"><scope>SVF::SaberCheckerAPI</scope><name>tdAPIMap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
