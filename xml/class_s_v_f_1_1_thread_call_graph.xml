<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_thread_call_graph" kind="class" language="C++" prot="public">
    <compoundname>SVF::ThreadCallGraph</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_p_t_a_call_graph" prot="public" virt="non-virtual">SVF::PTACallGraph</basecompoundref>
    <includes refid="_thread_call_graph_8h" local="no">ThreadCallGraph.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1af1146c3d8e8b8885a1c48701e5b5a27f" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_thread_a_p_i" kindref="compound">ThreadAPI</ref> *</type>
        <definition>ThreadAPI* SVF::ThreadCallGraph::tdAPI</definition>
        <argsstring></argsstring>
        <name>tdAPI</name>
        <briefdescription>
<para>Thread API. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="409" column="15" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1a69b86668a04dc3e5bb85ab4f3f0fce27" prot="private" static="no" mutable="no">
        <type>CallSiteSet</type>
        <definition>CallSiteSet SVF::ThreadCallGraph::forksites</definition>
        <argsstring></argsstring>
        <name>forksites</name>
        <briefdescription>
<para>all thread fork sites </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="410" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1aab32b67b314b31d67d58efded50e8f45" prot="private" static="no" mutable="no">
        <type>CallSiteSet</type>
        <definition>CallSiteSet SVF::ThreadCallGraph::joinsites</definition>
        <argsstring></argsstring>
        <name>joinsites</name>
        <briefdescription>
<para>all thread fork sites </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="411" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1a6c47e8d4e328bf20d676913f39d842c2" prot="private" static="no" mutable="no">
        <type>CallSiteSet</type>
        <definition>CallSiteSet SVF::ThreadCallGraph::parForSites</definition>
        <argsstring></argsstring>
        <name>parForSites</name>
        <briefdescription>
<para>all parallel for sites </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="412" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1a79ba3df9d85eed3c9a55e6797fdcb9b9" prot="private" static="no" mutable="no">
        <type>CallInstToForkEdgesMap</type>
        <definition>CallInstToForkEdgesMap SVF::ThreadCallGraph::callinstToThreadForkEdgesMap</definition>
        <argsstring></argsstring>
        <name>callinstToThreadForkEdgesMap</name>
        <briefdescription>
<para>Map a call instruction to its corresponding fork edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="413" column="28" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1af2009968716a3785322e664a712cbb60" prot="private" static="no" mutable="no">
        <type>CallInstToJoinEdgesMap</type>
        <definition>CallInstToJoinEdgesMap SVF::ThreadCallGraph::callinstToThreadJoinEdgesMap</definition>
        <argsstring></argsstring>
        <name>callinstToThreadJoinEdgesMap</name>
        <briefdescription>
<para>Map a call instruction to its corresponding join edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="414" column="28" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_thread_call_graph_1a42a088dba9cda7a7718685f80f52c928" prot="private" static="no" mutable="no">
        <type>CallInstToParForEdgesMap</type>
        <definition>CallInstToParForEdgesMap SVF::ThreadCallGraph::callinstToHareParForEdgesMap</definition>
        <argsstring></argsstring>
        <name>callinstToHareParForEdgesMap</name>
        <briefdescription>
<para>Map a call instruction to its corresponding hare_parallel_for edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="415" column="30" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1aa5c29ac668359942a9bc31cacd0cd9c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::isForksite</definition>
        <argsstring>(const CallBlockNode *csInst)</argsstring>
        <name>isForksite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>csInst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a callsite is a fork or join or hare_parallel_for </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="255" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ac9dde4936d04321a17656af1af1108da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::isJoinsite</definition>
        <argsstring>(const CallBlockNode *csInst)</argsstring>
        <name>isJoinsite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>csInst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="259" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1af5ad00c7a5362aa288bddf4824601ab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::isParForSite</definition>
        <argsstring>(const CallBlockNode *csInst)</argsstring>
        <name>isParForSite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>csInst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="263" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a37f2e076713a9aeb0e4313fb05dfb92e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::forksitesBegin</definition>
        <argsstring>() const</argsstring>
        <name>forksitesBegin</name>
        <briefdescription>
<para>Fork sites iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="271" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a1ebbd26c17cff1c1a1bee9caa9a8f825" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::forksitesEnd</definition>
        <argsstring>() const</argsstring>
        <name>forksitesEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="275" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a98ecfe14be2d38d292b5919716cdd29d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::joinsitesBegin</definition>
        <argsstring>() const</argsstring>
        <name>joinsitesBegin</name>
        <briefdescription>
<para>Join sites iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="283" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a50502f398e5eac9c6da3e26ea6052057" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::joinsitesEnd</definition>
        <argsstring>() const</argsstring>
        <name>joinsitesEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="287" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a29c74634b17007e5bef6fb48e1f3839f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::parForSitesBegin</definition>
        <argsstring>() const</argsstring>
        <name>parForSitesBegin</name>
        <briefdescription>
<para>hare_parallel_for sites iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="295" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a506343bcd23ba71d2db915ff7c58e728" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CallSiteSet::const_iterator</type>
        <definition>CallSiteSet::const_iterator SVF::ThreadCallGraph::parForSitesEnd</definition>
        <argsstring>() const</argsstring>
        <name>parForSitesEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="299" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1aa847760765aae18bcb93b260a881441b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::ThreadCallGraph::getNumOfForksite</definition>
        <argsstring>() const</argsstring>
        <name>getNumOfForksite</name>
        <briefdescription>
<para>Num of fork/join sites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="307" column="18" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a733bf08c7a496435ad09a41e6b0343ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::ThreadCallGraph::getNumOfJoinsite</definition>
        <argsstring>() const</argsstring>
        <name>getNumOfJoinsite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="311" column="18" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ad883eb92aece6818a3a0a261fa3407ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::ThreadCallGraph::getNumOfParForSite</definition>
        <argsstring>() const</argsstring>
        <name>getNumOfParForSite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="315" column="18" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_a_p_i" kindref="compound">ThreadAPI</ref> *</type>
        <definition>ThreadAPI* SVF::ThreadCallGraph::getThreadAPI</definition>
        <argsstring>() const</argsstring>
        <name>getThreadAPI</name>
        <briefdescription>
<para>Thread API. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="322" column="22" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a6e2ebab64fd01e40e7100162fe544b04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::addForksite</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>addForksite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add fork sites which directly or indirectly create a thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="329" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ae72e4e29bfda892f059f719454f6fcd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::addJoinsite</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>addJoinsite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="334" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="334" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a9daa0817e1f88a2478d7094646c72e13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::addParForSite</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>addParForSite</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="339" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="339" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a92e5a3154a98e12bdbbe4e0d39e62b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::addDirectForkEdge</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>addDirectForkEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add direct/indirect thread fork edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Add direct fork edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="348" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="147" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a2b0ccaaf219533907c0733b050628100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::addIndirectForkEdge</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee)</argsstring>
        <name>addIndirectForkEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
          <defname>calleefun</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add indirect fork edge to update call graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="349" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="171" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a62476a033fb54314da61dff6981bf229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::addDirectJoinEdge</definition>
        <argsstring>(const CallBlockNode *cs, const CallSiteSet &amp;forksite)</argsstring>
        <name>addDirectJoinEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const CallSiteSet &amp;</type>
          <declname>forksite</declname>
          <defname>forkset</defname>
        </param>
        <briefdescription>
<para>Add thread join edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Add direct fork edges As join edge is a special return which is back to join site(s) rather than its fork site A <ref refid="class_s_v_f_1_1_thread_join_edge" kindref="compound">ThreadJoinEdge</ref> is created from the functions where join sites reside in to the start routine function But we don&apos;t invoke <ref refid="class_s_v_f_1_1_p_t_a_call_graph_1a3154bbc421fc85649e786ed67ca03750" kindref="member">addEdge()</ref> method to add the edge to src and dst, otherwise it makes a scc cycle </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="354" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="196" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a700ec3fd1c9d89a7176e05b2f1949aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::addDirectParForEdge</definition>
        <argsstring>(const CallBlockNode *cs)</argsstring>
        <name>addDirectParForEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Add direct/indirect parallel for edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a direct ParFor edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="359" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="224" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a349b7fce76822de0c13118d9fdcd3db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::addIndirectParForEdge</definition>
        <argsstring>(const CallBlockNode *cs, const SVFFunction *callee)</argsstring>
        <name>addIndirectParForEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>callee</declname>
          <defname>calleefun</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an indirect ParFor edge to update call graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="360" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="251" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a29d3e4d720f61b4c29fee9691cedff96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ThreadCallGraph::addThreadForkEdgeSetMap</definition>
        <argsstring>(const CallBlockNode *cs, ThreadForkEdge *edge)</argsstring>
        <name>addThreadForkEdgeSetMap</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_thread_fork_edge" kindref="compound">ThreadForkEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>map call instruction to its CallGraphEdge map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="365" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="365" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a70a03bcaa6386ef39188acb6b2aa9d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ThreadCallGraph::addThreadJoinEdgeSetMap</definition>
        <argsstring>(const CallBlockNode *cs, ThreadJoinEdge *edge)</argsstring>
        <name>addThreadJoinEdgeSetMap</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_thread_join_edge" kindref="compound">ThreadJoinEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>map call instruction to its CallGraphEdge map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="375" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="375" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a845258d0d19de3dda573521a34dbf705" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ThreadCallGraph::addHareParForEdgeSetMap</definition>
        <argsstring>(const CallBlockNode *cs, HareParForEdge *edge)</argsstring>
        <name>addHareParForEdgeSetMap</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_hare_par_for_edge" kindref="compound">HareParForEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>map call instruction to its CallGraphEdge map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="385" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="385" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a10f3f07059d0534e391093372fcd708d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_join_edge" kindref="compound">ThreadJoinEdge</ref> *</type>
        <definition>ThreadJoinEdge* SVF::ThreadCallGraph::hasThreadJoinEdge</definition>
        <argsstring>(const CallBlockNode *call, PTACallGraphNode *joinFunNode, PTACallGraphNode *threadRoutineFunNode, CallSiteID csId) const</argsstring>
        <name>hasThreadJoinEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>call</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> *</type>
          <declname>joinFunNode</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> *</type>
          <declname>threadRoutineFunNode</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
<para>has thread join edge </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="395" column="27" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="395" bodyend="406"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1ad48fad1fec75346c9eb79bbd6e8caee4" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const CallBlockNode*&gt; SVF::ThreadCallGraph::InstSet</definition>
        <argsstring></argsstring>
        <name>InstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="162" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1a0d560b811f8df1a710c627e1ac100155" prot="public" static="no">
        <type>InstSet</type>
        <definition>typedef InstSet SVF::ThreadCallGraph::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="163" column="21" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1af952209ad8f7ae0c0f58c87d97f57ee9" prot="public" static="no">
        <type>std::vector&lt; const Instruction * &gt;</type>
        <definition>typedef std::vector&lt;const Instruction*&gt; SVF::ThreadCallGraph::InstVector</definition>
        <argsstring></argsstring>
        <name>InstVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="164" column="25" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1a8c6eef5a291bd0c65cc2f816767795f1" prot="public" static="no">
        <type>Map&lt; const Instruction *, InstSet &gt;</type>
        <definition>typedef Map&lt;const Instruction*, InstSet&gt; SVF::ThreadCallGraph::CallToInstMap</definition>
        <argsstring></argsstring>
        <name>CallToInstMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="165" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1a304ba7ef48068fa019c69af5744842cc" prot="public" static="no">
        <type>Set&lt; CallSiteSet * &gt;</type>
        <definition>typedef Set&lt;CallSiteSet*&gt; SVF::ThreadCallGraph::CtxSet</definition>
        <argsstring></argsstring>
        <name>CtxSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="166" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1aa5efa630056c1db2bb0dadc868752ec8" prot="public" static="no">
        <type>ThreadForkEdge::ForkEdgeSet</type>
        <definition>typedef ThreadForkEdge::ForkEdgeSet SVF::ThreadCallGraph::ForkEdgeSet</definition>
        <argsstring></argsstring>
        <name>ForkEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="167" column="41" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1ad0d6585b7d26cd4597466a79e2fedacd" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, ForkEdgeSet &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*, ForkEdgeSet&gt; SVF::ThreadCallGraph::CallInstToForkEdgesMap</definition>
        <argsstring></argsstring>
        <name>CallInstToForkEdgesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="168" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1aa9e07204488ec8f0f83f4e218b6ce6bd" prot="public" static="no">
        <type>ThreadJoinEdge::JoinEdgeSet</type>
        <definition>typedef ThreadJoinEdge::JoinEdgeSet SVF::ThreadCallGraph::JoinEdgeSet</definition>
        <argsstring></argsstring>
        <name>JoinEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="169" column="41" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1a2f24d314b211151182bee38b61731749" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, JoinEdgeSet &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*, JoinEdgeSet&gt; SVF::ThreadCallGraph::CallInstToJoinEdgesMap</definition>
        <argsstring></argsstring>
        <name>CallInstToJoinEdgesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="170" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1abc4cdc5b401932bf410d26ab4d58ca33" prot="public" static="no">
        <type>HareParForEdge::ParForEdgeSet</type>
        <definition>typedef HareParForEdge::ParForEdgeSet SVF::ThreadCallGraph::ParForEdgeSet</definition>
        <argsstring></argsstring>
        <name>ParForEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="171" column="43" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_thread_call_graph_1ac6eb68444968f7bfc3e1e16099454cab" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *, ParForEdgeSet &gt;</type>
        <definition>typedef Map&lt;const CallBlockNode*, ParForEdgeSet&gt; SVF::ThreadCallGraph::CallInstToParForEdgesMap</definition>
        <argsstring></argsstring>
        <name>CallInstToParForEdgesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="172" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a09946f39049bad87401b6e1567a7fb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ThreadCallGraph::ThreadCallGraph</definition>
        <argsstring>()</argsstring>
        <name>ThreadCallGraph</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="175" column="5" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a7991ee2d70e1c9f1f8bdf5e46d56802c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::ThreadCallGraph::~ThreadCallGraph</definition>
        <argsstring>()</argsstring>
        <name>~ThreadCallGraph</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="177" column="13" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ae25bca6e64ceedc56f1e2f1ae30f89eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::updateCallGraph</definition>
        <argsstring>(PointerAnalysis *pta)</argsstring>
        <name>updateCallGraph</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Update call graph using pointer results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="194" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="53" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a49f5c6a95e236fad35b3d0410e0f4503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadCallGraph::updateJoinEdge</definition>
        <argsstring>(PointerAnalysis *pta)</argsstring>
        <name>updateJoinEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Update join edge using pointer analysis results. </para>
        </briefdescription>
        <detaileddescription>
<para>Update join edge using pointer analysis results </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="196" column="10" bodyfile="lib/Graphs/ThreadCallGraph.cpp" bodystart="123" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ac528526e77b995de0cd5e718503f42ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::hasThreadForkEdge</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasThreadForkEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get call graph edge via call instruction. </para>
        </briefdescription>
        <detaileddescription>
<para>whether this call instruction has a valid call graph edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="202" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1af33e1701215e9818b22f11789746821e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ForkEdgeSet::const_iterator</type>
        <definition>ForkEdgeSet::const_iterator SVF::ThreadCallGraph::getForkEdgeBegin</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getForkEdgeBegin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="206" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a43513b641e4f05ec165db78e3ac55fef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ForkEdgeSet::const_iterator</type>
        <definition>ForkEdgeSet::const_iterator SVF::ThreadCallGraph::getForkEdgeEnd</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getForkEdgeEnd</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="212" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ac591fcd46254a0d809dac16ee15ab12e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::ThreadCallGraph::hasThreadJoinEdge</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>hasThreadJoinEdge</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Get call graph edge via call instruction. </para>
        </briefdescription>
        <detaileddescription>
<para>whether this call instruction has a valid call graph edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="222" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1ad6215527f01188f8e65fe8616e92dbc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>JoinEdgeSet::const_iterator</type>
        <definition>JoinEdgeSet::const_iterator SVF::ThreadCallGraph::getJoinEdgeBegin</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getJoinEdgeBegin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="226" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="226" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a17b7b3f0bdb4a52166b8509bd90499ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>JoinEdgeSet::const_iterator</type>
        <definition>JoinEdgeSet::const_iterator SVF::ThreadCallGraph::getJoinEdgeEnd</definition>
        <argsstring>(const CallBlockNode *cs) const</argsstring>
        <name>getJoinEdgeEnd</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_call_block_node" kindref="compound">CallBlockNode</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="232" column="40" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1aa8be8d48d680b3f2e61b2d8af5e9eddc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::ThreadCallGraph::getJoinSites</definition>
        <argsstring>(const PTACallGraphNode *routine, InstSet &amp;csSet)</argsstring>
        <name>getJoinSites</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> *</type>
          <declname>routine</declname>
        </param>
        <param>
          <type>InstSet &amp;</type>
          <declname>csSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="238" column="17" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="238" bodyend="250"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a4ba42f59f0a6a7ea5b059f6e8df64d89" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::ThreadCallGraph::classof</definition>
        <argsstring>(const ThreadCallGraph *)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        </param>
        <briefdescription>
<para>ClassOf. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="183" column="24" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_thread_call_graph_1a5d991e4511fc909dc170a4b03e71d77e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::ThreadCallGraph::classof</definition>
        <argsstring>(const PTACallGraph *g)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Graphs/ThreadCallGraph.h" line="187" column="24" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="187" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Thread sensitive call graph </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::ThreadCallGraph</label>
        <link refid="class_s_v_f_1_1_thread_call_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="1">
        <label>SVF::ThreadCallGraph</label>
        <link refid="class_s_v_f_1_1_thread_call_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/Graphs/ThreadCallGraph.h" line="158" column="1" bodyfile="include/Graphs/ThreadCallGraph.h" bodystart="159" bodyend="416"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a8a1621038edeb847bfc5a4a7be7620a3" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addCallGraphNode</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a72efe87a80f84a3945a93431d9414d3d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ab0da49175c64d8e2fccd19680d79771e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addDirectCallGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a92e5a3154a98e12bdbbe4e0d39e62b3e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addDirectForkEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a62476a033fb54314da61dff6981bf229" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addDirectJoinEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a700ec3fd1c9d89a7176e05b2f1949aef" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addDirectParForEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a3154bbc421fc85649e786ed67ca03750" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a6e2ebab64fd01e40e7100162fe544b04" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addForksite</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a845258d0d19de3dda573521a34dbf705" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addHareParForEdgeSetMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a09d0b8461ec0e678e1e69368b0f66b02" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addIndirectCallGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a2b0ccaaf219533907c0733b050628100" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addIndirectForkEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a349b7fce76822de0c13118d9fdcd3db9" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addIndirectParForEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ae72e4e29bfda892f059f719454f6fcd2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addJoinsite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a9daa0817e1f88a2478d7094646c72e13" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addParForSite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a29d3e4d720f61b4c29fee9691cedff96" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addThreadForkEdgeSetMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a70a03bcaa6386ef39188acb6b2aa9d5a" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>addThreadJoinEdgeSetMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a47bfbae96294592f4e6060deddbe5700" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a9b7f6979a95244c620fdb791e053237b" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallGraphEdgeConstIter</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a2f28a1ce0c7d6a0bc2fc2627e90acf1c" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallGraphEdgeIter</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a1ad288117daa4031e195eb35d805cac6" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallGraphEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1af0e1a940677fb7f6c4aaef2f9c46c3e5" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>callGraphNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a16d115dd425ec02ab6d91c711fab7fd9" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallInstToCallGraphEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ab29003352d8152b9d0fd37919ac212c5" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>callinstToCallGraphEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ad0d6585b7d26cd4597466a79e2fedacd" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallInstToForkEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a42a088dba9cda7a7718685f80f52c928" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>callinstToHareParForEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a2f24d314b211151182bee38b61731749" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallInstToJoinEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ac6eb68444968f7bfc3e1e16099454cab" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallInstToParForEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a79ba3df9d85eed3c9a55e6797fdcb9b9" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>callinstToThreadForkEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1af2009968716a3785322e664a712cbb60" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>callinstToThreadJoinEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a1d1ea71cb29e190ad3c6817810bd57c7" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallSitePair</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a0d560b811f8df1a710c627e1ac100155" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ae4e3e5f108bc1e47af8f58d2e43345d2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallSiteToIdMap</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a8c6eef5a291bd0c65cc2f816767795f1" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CallToInstMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a5b1fe2b2314db947cd5e709b7285fe1c" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CGEK</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a4ba42f59f0a6a7ea5b059f6e8df64d89" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a5d991e4511fc909dc170a4b03e71d77e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a5dfa3f178d4abf37177d0d74ff4c6a97" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a304ba7ef48068fa019c69af5744842cc" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>CtxSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a6a794ee3e4b217a1a0c6edf4bcdbdb69" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a841be22581a7896d8924564e7199f62b" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aa5efa630056c1db2bb0dadc868752ec8" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>ForkEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a69b86668a04dc3e5bb85ab4f3f0fce27" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>forksites</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a37f2e076713a9aeb0e4313fb05dfb92e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>forksitesBegin</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a1ebbd26c17cff1c1a1bee9caa9a8f825" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>forksitesEnd</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a5f5a5ec7e707a21994d301cc07d32a5a" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a97986d6e6732c78b04cc053f0e9d1367" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>funToCallGraphNodeMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a049bc978a93f0db1fe91efb6feb22b14" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>FunToCallGraphNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a80070e2f50ed1036d334250841215ca8" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getAllCallSitesInvokingCallee</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1acf542e7e581ffa8453066f4c8cdfb65c" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1abfa1f3777d16597392385cf7d8bac472" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1aacd5f35171717cb4d758c17bef828a0f" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCalleeOfCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a486f79252c216eb5a9f4c09261a24ae2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallees</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a42035e9669204ddd5d38583db21af3d7" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallerOfCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1aaab54c670518d9d6790707f76ea76aa1" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallGraphNode</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ae3ee76be0e959a736c868dc7e0128077" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallGraphNode</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a368306a46d84ccc6d07d94833aded629" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallInstToCallGraphEdgesMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a2c8b1674f1f942a3b5aa77b7abccb229" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1afb2daec804e81f0beb72fbc805d1c82a" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallSiteID</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a9155629ddc58f71c6a6f2aec978e4610" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getCallSitePair</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a0d2544130cc2cdc3ac418c975c278eb2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getDirCallSitesInvokingCallee</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1af33e1701215e9818b22f11789746821e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getForkEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a43513b641e4f05ec165db78e3ac55fef" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getForkEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a2634a24621ab93fae7ec1cf94a8cba0b" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ad49fa2a288945f6910deb11acdf6a42d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getIndCallMap</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a9a4b0c6672288b9201ab254b4c49548d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getIndCallSitesInvokingCallee</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a88bec70a6bf5c1c41bc4efd035ef0e08" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ad6215527f01188f8e65fe8616e92dbc2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getJoinEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a17b7b3f0bdb4a52166b8509bd90499ba" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getJoinEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aa8be8d48d680b3f2e61b2d8af5e9eddc" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getJoinSites</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ac6a294ec1c88862c8f7d54000f04e1f7" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aa847760765aae18bcb93b260a881441b" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getNumOfForksite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a733bf08c7a496435ad09a41e6b0343ff" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getNumOfJoinsite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ad883eb92aece6818a3a0a261fa3407ce" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getNumOfParForSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a3379185589e9bcafa4f961930aaf2694" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getNumOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1adcad8524a53baf256cd45503ec568c10" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getThreadAPI</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1aab4214b734d00f5db59385535419ca58" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getTotalCallSiteNumber</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1afdd308d681cb2a57e9473186f431db61" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasCallGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a236d1269b1b560e09f22e0197f6f1ad7" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasCallSiteID</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a6d29a39440d8f6290e2e8b7322b965fb" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ac46ec4fe0094145c5fdb81394f1dd644" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ac528526e77b995de0cd5e718503f42ed" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasThreadForkEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ac591fcd46254a0d809dac16ee15ab12e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasThreadJoinEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a10f3f07059d0534e391093372fcd708d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>hasThreadJoinEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a5f626f5c9254b9e643d943e59068efba" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>IdToCallSiteMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ad48fad1fec75346c9eb79bbd6e8caee4" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>InstSet</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1af952209ad8f7ae0c0f58c87d97f57ee9" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>InstVector</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aa5c29ac668359942a9bc31cacd0cd9c4" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>isForksite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ac9dde4936d04321a17656af1af1108da" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>isJoinsite</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1af5ad00c7a5362aa288bddf4824601ab8" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>isParForSite</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1aa03df6b1ebf7f8356a47fa074d3f91a4" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>isReachableBetweenFunctions</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aa9e07204488ec8f0f83f4e218b6ce6bd" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>JoinEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1aab32b67b314b31d67d58efded50e8f45" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>joinsites</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a98ecfe14be2d38d292b5919716cdd29d" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>joinsitesBegin</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a50502f398e5eac9c6da3e26ea6052057" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>joinsitesEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a5b1fe2b2314db947cd5e709b7285fe1ca6bbe72ac881caacbded694492df5417c" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>NormCallGraph</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ad73bc2f0669ff2a28ccabb5355278826" prot="protected" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>numOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1abc4cdc5b401932bf410d26ab4d58ca33" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>ParForEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a6c47e8d4e328bf20d676913f39d842c2" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>parForSites</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a29c74634b17007e5bef6fb48e1f3839f" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>parForSitesBegin</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a506343bcd23ba71d2db915ff7c58e728" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>parForSitesEnd</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a612b05f1c37dc50a888b773b9bbe093f" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>PTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1af1146c3d8e8b8885a1c48701e5b5a27f" prot="private" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>tdAPI</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a5b1fe2b2314db947cd5e709b7285fe1ca4fe819bb1488afc48b04c1b7bef04bc2" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>ThdCallGraph</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a09946f39049bad87401b6e1567a7fb19" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>ThreadCallGraph</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1ae25bca6e64ceedc56f1e2f1ae30f89eb" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a49f5c6a95e236fad35b3d0410e0f4503" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>updateJoinEdge</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1ac695d78f0a78e2e5f1fb4f93264e52b8" prot="public" virt="non-virtual"><scope>SVF::ThreadCallGraph</scope><name>verifyCallGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::ThreadCallGraph</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_p_t_a_call_graph_1a7f1ee630caa4ec5e7ad309e1f3865e2e" prot="public" virt="virtual"><scope>SVF::ThreadCallGraph</scope><name>~PTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_thread_call_graph_1a7991ee2d70e1c9f1f8bdf5e46d56802c" prot="public" virt="virtual"><scope>SVF::ThreadCallGraph</scope><name>~ThreadCallGraph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
