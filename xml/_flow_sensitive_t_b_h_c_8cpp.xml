<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_flow_sensitive_t_b_h_c_8cpp" kind="file" language="C++">
    <compoundname>FlowSensitiveTBHC.cpp</compoundname>
    <includes refid="_d_c_h_g_8h" local="yes">SVF-FE/DCHG.h</includes>
    <includes refid="_c_p_p_util_8h" local="yes">SVF-FE/CPPUtil.h</includes>
    <includes refid="_flow_sensitive_t_b_h_c_8h" local="yes">WPA/FlowSensitiveTBHC.h</includes>
    <includes refid="_w_p_a_stat_8h" local="yes">WPA/WPAStat.h</includes>
    <includes refid="_andersen_8h" local="yes">WPA/Andersen.h</includes>
    <incdepgraph>
      <node id="58">
        <label>SVF-FE/CPPUtil.h</label>
        <link refid="_c_p_p_util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>list</label>
      </node>
      <node id="75">
        <label>MemoryModel/LocationSet.h</label>
        <link refid="_location_set_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>Graphs/PAG.h</label>
        <link refid="_p_a_g_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>WPA/WPASolver.h</label>
        <link refid="_w_p_a_solver_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SVF-FE/DCHG.h</label>
        <link refid="_d_c_h_g_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Util/Casting.h</label>
        <link refid="_casting_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>system_error</label>
      </node>
      <node id="72">
        <label>MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="52">
        <label>llvm/ADT/GraphTraits.h</label>
      </node>
      <node id="70">
        <label>Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>Util/NodeIDAllocator.h</label>
        <link refid="_node_i_d_allocator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>llvm/Bitcode/BitcodeReader.h</label>
      </node>
      <node id="64">
        <label>assert.h</label>
      </node>
      <node id="34">
        <label>llvm/ADT/SmallVector.h</label>
      </node>
      <node id="107">
        <label>Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>llvm/IR/InstVisitor.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/CommandLine.h</label>
      </node>
      <node id="7">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="81">
        <label>SVF-FE/LLVMUtil.h</label>
        <link refid="_l_l_v_m_util_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>llvm/Analysis/ScalarEvolutionExpressions.h</label>
      </node>
      <node id="87">
        <label>Graphs/ICFG.h</label>
        <link refid="_i_c_f_g_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>Util/ThreadAPI.h</label>
        <link refid="_thread_a_p_i_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>mtr.h</label>
        <link refid="mtr_8h_source"/>
      </node>
      <node id="40">
        <label>llvm/ADT/StringExtras.h</label>
      </node>
      <node id="89">
        <label>Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>Util/SVFUtil.h</label>
        <link refid="_s_v_f_util_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>PAGEdge.h</label>
        <link refid="_p_a_g_edge_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>MemoryModel/PTAStat.h</label>
        <link refid="_p_t_a_stat_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cassert</label>
      </node>
      <node id="66">
        <label>WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>WPA/WPAFSSolver.h</label>
        <link refid="_w_p_a_f_s_solver_8h_source"/>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Graphs/GenericGraph.h</label>
        <link refid="_generic_graph_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Util/BasicTypes.h</label>
        <link refid="_basic_types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>Graphs/ConsGNode.h</label>
        <link refid="_cons_g_node_8h_source"/>
      </node>
      <node id="1">
        <label>lib/WPA/FlowSensitiveTBHC.cpp</label>
        <link refid="_flow_sensitive_t_b_h_c_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="83">
        <label>string</label>
      </node>
      <node id="91">
        <label>CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>MemoryModel/MutablePointsToDS.h</label>
        <link refid="_mutable_points_to_d_s_8h_source"/>
      </node>
      <node id="100">
        <label>Util/SCC.h</label>
        <link refid="_s_c_c_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="41">
        <label>llvm/Analysis/AliasAnalysis.h</label>
      </node>
      <node id="123">
        <label>Graphs/ConsGEdge.h</label>
        <link refid="_cons_g_edge_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="99">
        <label>Graphs/PTACallGraph.h</label>
        <link refid="_p_t_a_call_graph_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>MemoryModel/AbstractPointsToDS.h</label>
        <link refid="_abstract_points_to_d_s_8h_source"/>
      </node>
      <node id="112">
        <label>MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>Util/ExtAPI.h</label>
        <link refid="_ext_a_p_i_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>llvm/IR/User.h</label>
      </node>
      <node id="6">
        <label>llvm/ADT/SparseBitVector.h</label>
      </node>
      <node id="125">
        <label>Graphs/OfflineConsG.h</label>
        <link refid="_offline_cons_g_8h_source"/>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>limits.h</label>
      </node>
      <node id="39">
        <label>llvm/Analysis/ScalarEvolution.h</label>
      </node>
      <node id="53">
        <label>llvm/Support/GraphWriter.h</label>
      </node>
      <node id="69">
        <label>Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>llvm/Support/Compiler.h</label>
      </node>
      <node id="59">
        <label>Util/SVFModule.h</label>
        <link refid="_s_v_f_module_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>Graphs/ConsG.h</label>
        <link refid="_cons_g_8h_source"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>MemoryModel/MemModel.h</label>
        <link refid="_mem_model_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>epd.h</label>
        <link refid="epd_8h_source"/>
      </node>
      <node id="80">
        <label>SVF-FE/SymbolTableInfo.h</label>
        <link refid="_symbol_table_info_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>llvm/Support/type_traits.h</label>
      </node>
      <node id="23">
        <label>llvm/IR/GetElementPtrTypeIterator.h</label>
      </node>
      <node id="63">
        <label>Util/WorkList.h</label>
        <link refid="_work_list_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>Graphs/VFGEdge.h</label>
        <link refid="_v_f_g_edge_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stack</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="22">
        <label>llvm/ADT/PointerIntPair.h</label>
      </node>
      <node id="26">
        <label>llvm/Support/ToolOutputFile.h</label>
      </node>
      <node id="55">
        <label>llvm/Transforms/Utils/Local.h</label>
      </node>
      <node id="78">
        <label>PAGNode.h</label>
        <link refid="_p_a_g_node_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>llvm/ADT/StringMap.h</label>
      </node>
      <node id="71">
        <label>MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>llvm/IR/Operator.h</label>
      </node>
      <node id="62">
        <label>time.h</label>
      </node>
      <node id="92">
        <label>math.h</label>
      </node>
      <node id="105">
        <label>llvm/Transforms/IPO/PassManagerBuilder.h</label>
      </node>
      <node id="85">
        <label>llvm/Support/JSON.h</label>
      </node>
      <node id="50">
        <label>llvm/Analysis/PostDominators.h</label>
      </node>
      <node id="65">
        <label>cstdlib</label>
      </node>
      <node id="119">
        <label>iostream</label>
      </node>
      <node id="56">
        <label>llvm/IR/DebugInfo.h</label>
      </node>
      <node id="49">
        <label>llvm/Analysis/DominanceFrontier.h</label>
      </node>
      <node id="17">
        <label>deque</label>
      </node>
      <node id="77">
        <label>Graphs/ICFGEdge.h</label>
        <link refid="_i_c_f_g_edge_8h_source"/>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="47">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="5">
        <label>Util/SVFBasicTypes.h</label>
        <link refid="_s_v_f_basic_types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>llvm/Support/FileSystem.h</label>
      </node>
      <node id="43">
        <label>llvm/IR/GlobalVariable.h</label>
      </node>
      <node id="48">
        <label>llvm/Transforms/Utils/UnifyFunctionExitNodes.h</label>
      </node>
      <node id="117">
        <label>WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>Graphs/ICFGNode.h</label>
        <link refid="_i_c_f_g_node_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>SVF-FE/CommonCHG.h</label>
        <link refid="_common_c_h_g_8h_source"/>
      </node>
      <node id="45">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="33">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="104">
        <label>llvm/IR/LegacyPassManager.h</label>
      </node>
      <node id="90">
        <label>stdio.h</label>
      </node>
      <node id="19">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="44">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
      <node id="35">
        <label>llvm/IR/Instructions.h</label>
      </node>
      <node id="103">
        <label>SVF-FE/DataFlowUtil.h</label>
        <link refid="_data_flow_util_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>SVF-FE/GEPTypeBridgeIterator.h</label>
        <link refid="_g_e_p_type_bridge_iterator_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>SVF-FE/LLVMModule.h</label>
        <link refid="_l_l_v_m_module_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="24">
        <label>Graphs/GraphPrinter.h</label>
        <link refid="_graph_printer_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>llvm/IR/CallSite.h</label>
      </node>
      <node id="108">
        <label>Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>llvm/IR/InstIterator.h</label>
      </node>
      <node id="42">
        <label>llvm/Analysis/CallGraph.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_flow_sensitive_t_b_h_c_8cpp_1a069841ac0cbc8dba612141b63b6cac00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; TBHCStoreReuse</definition>
        <argsstring>(&quot;tbhc-store-reuse&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Allow for object reuse in at stores in FSTBHC&quot;))</argsstring>
        <name>TBHCStoreReuse</name>
        <param>
          <type>&quot;tbhc-store-reuse&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Allow for object reuse in at stores in FSTBHC&quot;)</type>
        </param>
        <briefdescription>
<para>Whether we allow reuse for TBHC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/FlowSensitiveTBHC.cpp" line="19" column="22" declfile="lib/WPA/FlowSensitiveTBHC.cpp" declline="19" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_flow_sensitive_t_b_h_c_8cpp_1a654fa16531b88d28d1e03278c12aed4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::cl::opt&lt; bool &gt;</type>
        <definition>static llvm::cl::opt&lt;bool&gt; TBHCAllReuse</definition>
        <argsstring>(&quot;tbhc-all-reuse&quot;, llvm::cl::init(false), llvm::cl::desc(&quot;Allow for object reuse everywhere in FSTBHC&quot;))</argsstring>
        <name>TBHCAllReuse</name>
        <param>
          <type>&quot;tbhc-all-reuse&quot;</type>
        </param>
        <param>
          <type>llvm::cl::init(false)</type>
        </param>
        <param>
          <type>llvm::cl::desc(&quot;Allow for object reuse everywhere in FSTBHC&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/FlowSensitiveTBHC.cpp" line="20" column="22" declfile="lib/WPA/FlowSensitiveTBHC.cpp" declline="20" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="_flow_sensitive_t_b_h_c_8cpp_1af72d866f4ffed004e104b686d4f94cb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DIType *</type>
        <definition>static const DIType* getVTInitType</definition>
        <argsstring>(const CopySVFGNode *copy, DCHGraph *dchg)</argsstring>
        <name>getVTInitType</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopySVFGNode</ref> *</type>
          <declname>copy</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_d_c_h_graph" kindref="compound">DCHGraph</ref> *</type>
          <declname>dchg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this instruction initialisates an object&apos;s vtable (metadata: ctir.vt.init). Returns the object&apos;s type, otherwise, nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/WPA/FlowSensitiveTBHC.cpp" line="507" column="21" bodyfile="lib/WPA/FlowSensitiveTBHC.cpp" bodystart="507" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>FlowSensitiveTBHC.cpp<sp/>--<sp/>flow-sensitive<sp/>type<sp/>filter<sp/>------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>FlowSensitiveTBHC.cpp</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Oct<sp/>08,<sp/>2019</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Mohamad<sp/>Barbar</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/DCHG.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SVF-FE/CPPUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/FlowSensitiveTBHC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/WPAStat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WPA/Andersen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_s_v_f" kindref="compound">SVF</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>TBHCStoreReuse(</highlight><highlight class="stringliteral">&quot;tbhc-store-reuse&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Allow<sp/>for<sp/>object<sp/>reuse<sp/>in<sp/>at<sp/>stores<sp/>in<sp/>FSTBHC&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>llvm::cl::opt&lt;bool&gt;<sp/>TBHCAllReuse(</highlight><highlight class="stringliteral">&quot;tbhc-all-reuse&quot;</highlight><highlight class="normal">,<sp/>llvm::cl::init(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>llvm::cl::desc(</highlight><highlight class="stringliteral">&quot;Allow<sp/>for<sp/>object<sp/>reuse<sp/>everywhere<sp/>in<sp/>FSTBHC&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a26e5bad116d0738534b1311346c5f400" kindref="member">FlowSensitiveTBHC::FlowSensitiveTBHC</ref>(<ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref>*<sp/>_pag,<sp/>PTATY<sp/>type)<sp/>:<sp/><ref refid="class_s_v_f_1_1_flow_sensitive" kindref="compound">FlowSensitive</ref>(_pag,<sp/>type),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning" kindref="compound">TypeBasedHeapCloning</ref>(this)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>`this`<sp/>as<sp/>the<sp/>argument<sp/>for<sp/>TypeBasedHeapCloning<sp/>is<sp/>okay.<sp/>As<sp/>PointerAnalysis,<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>constructed.<sp/>TypeBasedHeapCloning<sp/>also<sp/>doesn&apos;t<sp/>use<sp/>pta<sp/>in<sp/>the<sp/>constructor<sp/>so<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>needs<sp/>to<sp/>be<sp/>allocated,<sp/>which<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>allReuse<sp/>=<sp/>TBHCAllReuse;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>storeReuse<sp/>=<sp/>allReuse<sp/>||<sp/>TBHCStoreReuse;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::analyze()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a267f7198600dde3054feb40def7a6681" kindref="member">FlowSensitive::analyze</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a4c5fb70aafc3a589b7b1e82ba8f61a6f" kindref="member">FlowSensitiveTBHC::initialize</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32" kindref="member">PointerAnalysis::initialize</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff" kindref="compound">AndersenWaveDiff</ref>*<sp/>ander<sp/>=<sp/><ref refid="class_s_v_f_1_1_andersen_wave_diff_1a74134978db1c0d9c71122bc63f4b73c1" kindref="member">AndersenWaveDiff::createAndersenWaveDiff</ref>(<ref refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" kindref="member">getPAG</ref>());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>svfg<sp/>=<sp/>memSSA.buildFullSVFG(ander);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>setGraph(svfg);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_stat" kindref="compound">FlowSensitiveStat</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_d_c_h_graph" kindref="compound">DCHGraph</ref><sp/>*<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" kindref="member">dchg</ref><sp/>=<sp/>SVFUtil::dyn_cast&lt;DCHGraph&gt;(<ref refid="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" kindref="member">getCHGraph</ref>());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" kindref="member">dchg</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;FSTBHC:<sp/>DCHGraph<sp/>required!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aaaf50870e50b45b44d4ecaaaab662770" kindref="member">TypeBasedHeapCloning::setDCHG</ref>(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" kindref="member">dchg</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a4ae27b3d09bbb83b21ed6c7fd6c4e653" kindref="member">TypeBasedHeapCloning::setPAG</ref>(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populates<sp/>loadGeps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>determineWhichGepsAreLoads();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3564d6ad7e12e0a833b4cea203a809e4" kindref="member">FlowSensitiveTBHC::finalize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1afed358369102f01f6fe88b1433e704c3" kindref="member">FlowSensitive::finalize</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>^<sp/>Will<sp/>print<sp/>call<sp/>graph<sp/>and<sp/>alias<sp/>stats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a1a7b51e7d959795c00383721b013834d" kindref="member">dumpStats</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getDFPTDataTy()-&gt;dumpPTData();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae42ec334a7dfc96a5ead2d2845ca3b22" kindref="member">validateTBHCTests</ref>(<ref refid="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" kindref="member">svfMod</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a81ce8b1e98db245d3f4ccf189ca11e47" kindref="member">FlowSensitiveTBHC::backPropagate</ref>(NodeID<sp/>clone)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref><sp/>*cloneObj<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(clone);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cloneObj<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;FSTBHC:<sp/>clone<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>PAG?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_p_a_g_node" kindref="compound">PAGNode</ref><sp/>*originalObj<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(clone));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cloneObj<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;FSTBHC:<sp/>original<sp/>object<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>PAG?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>original<sp/>object<sp/>too<sp/>because<sp/>when<sp/>reuse<sp/>of<sp/>a<sp/>gep<sp/>occurs,<sp/>the<sp/>new<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>FI<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;CloneGepObjPN&gt;(cloneObj)<sp/>||<sp/>SVFUtil::isa&lt;GepObjPN&gt;(originalObj))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>getGepObjClones<sp/>is<sp/>updated,<sp/>some<sp/>GEP<sp/>nodes<sp/>need<sp/>to<sp/>be<sp/>redone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>&amp;retrievers<sp/>=<sp/>gepToSVFGRetrievers[<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(clone)];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>r<sp/>:<sp/>retrievers)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushIntoWorklist(r);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;CloneFIObjPN&gt;(cloneObj)<sp/>||<sp/>SVFUtil::isa&lt;CloneDummyObjPN&gt;(cloneObj))</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushIntoWorklist(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a5681d78630ca8770dd493ef3841ec683" kindref="member">getAllocationSite</ref>(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(clone)));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;FSTBHC:<sp/>unexpected<sp/>object<sp/>type?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a83a4defe2bcb1c99c66aea8c8325d5fd" kindref="member">FlowSensitiveTBHC::propAlongIndirectEdge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_indirect_s_v_f_g_edge" kindref="compound">IndirectSVFGEdge</ref>*<sp/>edge)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>src<sp/>=<sp/>edge-&gt;getSrcNode();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dst<sp/>=<sp/>edge-&gt;getDstNode();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>points-to<sp/>targets<sp/>may<sp/>be<sp/>used<sp/>by<sp/>next<sp/>SVFG<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagate<sp/>points-to<sp/>set<sp/>for<sp/>node<sp/>used<sp/>in<sp/>dst.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>pts<sp/>=<sp/>edge-&gt;getPointsTo();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>base<sp/>Andersen&apos;s<sp/>analysis<sp/>does<sp/>NOT<sp/>perform<sp/>type-based<sp/>heap<sp/>cloning,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>uses<sp/>only<sp/>the<sp/>base<sp/>objects;<sp/>we<sp/>want<sp/>to<sp/>account<sp/>for<sp/>clones<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>PointsTo<sp/>edgePtsAndClones;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>the<sp/>conditional<sp/>bool<sp/>may<sp/>be<sp/>unnecessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>all<sp/>clones<sp/>is<sp/>redundant,<sp/>and<sp/>introduces<sp/>too<sp/>many<sp/>calls<sp/>to<sp/>propVarPts...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>introduces<sp/>performance<sp/>and<sp/>precision<sp/>penalties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>filter<sp/>out<sp/>according<sp/>to<sp/>src.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStore<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*tildet<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>PointsTo<sp/>storePts;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_v_f_g_node" kindref="compound">StoreSVFGNode</ref><sp/>*store<sp/>=<sp/>SVFUtil::dyn_cast&lt;StoreSVFGNode&gt;(src))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tildet<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(store);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isStore<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storePts<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(store-&gt;getPAGDstNodeID());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;filterSet<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" kindref="member">getFilterSet</ref>(src-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>o<sp/>:<sp/>pts)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filterSet.test(o))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgePtsAndClones.set(o);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>c<sp/>:<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1af127bed600087b1ace26088a76ca8998" kindref="member">getClones</ref>(o))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isStore)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filterSet.test(c))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgePtsAndClones.set(c);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(storePts.test(c)<sp/>&amp;&amp;<sp/>!filterSet.test(c))</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgePtsAndClones.set(c);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_gep_obj_p_n" kindref="compound">GepObjPN</ref><sp/>*gep<sp/>=<sp/>SVFUtil::dyn_cast&lt;GepObjPN&gt;(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(o)))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Want<sp/>the<sp/>geps<sp/>which<sp/>are<sp/>at<sp/>the<sp/>same<sp/>&quot;level&quot;<sp/>as<sp/>this<sp/>one<sp/>(same<sp/>mem<sp/>obj,<sp/>same<sp/>offset).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>&amp;geps<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ad043ab95900849a5a894ca4bada4e032" kindref="member">getGepObjsFromMemObj</ref>(gep-&gt;getMemObj(),<sp/>gep-&gt;getLocationSet().getOffset());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>g<sp/>:<sp/>geps)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*gepType<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a219edef6c013a953ed12ee3c56bde6de" kindref="member">getType</ref>(g);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isStore<sp/>||<sp/>gepType<sp/>||<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1add00f1c20a524c0be903af679bd6f638" kindref="member">isBase</ref>(tildet,<sp/>gepType))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filterSet.test(g))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgePtsAndClones.set(g);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>o<sp/>:<sp/>edgePtsAndClones)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_flow_sensitive_1ae571767cc5936cf631a44976d8277e91" kindref="member">propVarPtsFromSrcToDst</ref>(o,<sp/>src,<sp/>dst))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" kindref="member">isFIObjNode</ref>(o))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>&amp;allFields<sp/>=<sp/>getAllFieldsObjNode(o);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>f<sp/>:<sp/>allFields)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_flow_sensitive_1ae571767cc5936cf631a44976d8277e91" kindref="member">propVarPtsFromSrcToDst</ref>(f,<sp/>src,<sp/>dst))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a15b8610fd7456d158a9e640c69d401a0" kindref="member">FlowSensitiveTBHC::propAlongDirectEdge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_direct_s_v_f_g_edge" kindref="compound">DirectSVFGEdge</ref>*<sp/>edge)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>src<sp/>=<sp/>edge-&gt;getSrcNode();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dst<sp/>=<sp/>edge-&gt;getDstNode();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>an<sp/>actual-param<sp/>or<sp/>formal-ret,<sp/>top-level<sp/>pointer&apos;s<sp/>pts<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>propagated<sp/>from<sp/>src<sp/>to<sp/>dst.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_actual_parm_v_f_g_node" kindref="compound">ActualParmSVFGNode</ref>*<sp/>ap<sp/>=<sp/>SVFUtil::dyn_cast&lt;ActualParmSVFGNode&gt;(src))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ap-&gt;getParam()-&gt;isPointer())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a3574977acd161925cadcb05de6d3247d" kindref="member">propagateFromAPToFP</ref>(ap,<sp/>dst);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_formal_ret_v_f_g_node" kindref="compound">FormalRetSVFGNode</ref>*<sp/>fp<sp/>=<sp/>SVFUtil::dyn_cast&lt;FormalRetSVFGNode&gt;(src))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp-&gt;getRet()-&gt;isPointer())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a3abffe1434386b1ce349fbed0cfe0967" kindref="member">propagateFromFRToAR</ref>(fp,<sp/>dst);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>SVFG<sp/>edge<sp/>links<sp/>between<sp/>def<sp/>and<sp/>use<sp/>of<sp/>a<sp/>top-level<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>no<sp/>points-to<sp/>information<sp/>propagated<sp/>along<sp/>direct<sp/>edge.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>top-level<sp/>pointer&apos;s<sp/>value<sp/>has<sp/>been<sp/>changed<sp/>at<sp/>src<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>TRUE<sp/>to<sp/>put<sp/>dst<sp/>node<sp/>into<sp/>the<sp/>work<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1ae086de68233375be42185f0af706687a" kindref="member">directPropaTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abce5580e93cba1e591a0bac4e9070816" kindref="member">FlowSensitiveTBHC::processAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_addr_v_f_g_node" kindref="compound">AddrSVFGNode</ref>*<sp/>addr)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>srcID<sp/>=<sp/>addr-&gt;getPAGSrcNodeID();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>dstID<sp/>=<sp/>addr-&gt;getPAGDstNodeID();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a38f3ed35185addf701d4401bfdd5f29b" kindref="member">addrTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154" kindref="member">isPTAEdge</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1abb37c5e4e6fa4742e8dbcf397aea086e" kindref="member">FlowSensitive::processAddr</ref>(addr);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*objType;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" kindref="member">isHeapMemObj</ref>(srcID))</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objType<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" kindref="member">undefType</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;isConstantObj(srcID))</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>constants<sp/>that<sp/>have<sp/>been<sp/>merged<sp/>into<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>it<sp/>undefined<sp/>even<sp/>though<sp/>it&apos;s<sp/>technically<sp/>a<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>keep<sp/>in<sp/>line<sp/>with<sp/>SVF&apos;s<sp/>design.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>end<sp/>up<sp/>splitting<sp/>into<sp/>one<sp/>for<sp/>each<sp/>type<sp/>of<sp/>constant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objType<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" kindref="member">undefType</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack/global.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objType<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(addr);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ac51cd735739a2499196a87323172a6a6" kindref="member">setType</ref>(srcID,<sp/>objType);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a006243a1416f4950de254d0d62ba40b0" kindref="member">setAllocationSite</ref>(srcID,<sp/>addr-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>typed<sp/>versions<sp/>of<sp/>srcID.<sp/>This<sp/>handles<sp/>back-propagation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>&amp;clones<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1af127bed600087b1ace26088a76ca8998" kindref="member">getClones</ref>(srcID);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>c<sp/>:<sp/>clones)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/>addPts(dstID,<sp/>c)<sp/>||<sp/>changed;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>for<sp/>typing<sp/>these<sp/>are<sp/>all<sp/>clones;<sp/>they<sp/>are<sp/>all<sp/>typed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a38f3ed35185addf701d4401bfdd5f29b" kindref="member">addrTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abf96f7329d8c50dcd75da048548d2c85" kindref="member">FlowSensitiveTBHC::processGep</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_gep_v_f_g_node" kindref="compound">GepSVFGNode</ref>*<sp/>gep)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>of<sp/>that<sp/>in<sp/>FlowSensitive.cpp<sp/>+<sp/>some<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>q<sp/>=<sp/>gep-&gt;getPAGSrcNodeID();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*tildet<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(gep);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tildet<sp/>!=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" kindref="member">undefType</ref>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reuse<sp/>=<sp/>TBHCAllReuse<sp/>||<sp/>(TBHCStoreReuse<sp/>&amp;&amp;<sp/>!gepIsLoad(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>()));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" kindref="member">init</ref>(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>q,<sp/>tildet,<sp/>reuse,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gep-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154" kindref="member">isPTAEdge</ref>())</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>qPts<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(q);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>PointsTo<sp/>&amp;filterSet<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" kindref="member">getFilterSet</ref>(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>PointsTo<sp/>tmpDstPts;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>oq<sp/>:<sp/>qPts)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterSet.test(oq))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a59a9c7b8a7ec392ac609f10c8dac8d7f" kindref="member">TypeBasedHeapCloning::isBlkObjOrConstantObj</ref>(oq))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpDstPts.set(oq);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SVFUtil::isa&lt;VariantGepPE&gt;(gep-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()))</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setObjFieldInsensitive(oq);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpDstPts.set(oq);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*t<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a219edef6c013a953ed12ee3c56bde6de" kindref="member">getType</ref>(oq);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&amp;&amp;<sp/>(t-&gt;getTag()<sp/>==<sp/>dwarf::DW_TAG_array_type<sp/>||<sp/>t-&gt;getTag()<sp/>==<sp/>dwarf::DW_TAG_pointer_type))</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>fieldClones<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aa175b5db473eb57c03b6f908791d1133" kindref="member">getGepObjClones</ref>(oq,<sp/>1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>fc<sp/>:<sp/>fieldClones)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gepToSVFGRetrievers[<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(fc)].set(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpDstPts.set(fc);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_normal_gep_p_e" kindref="compound">NormalGepPE</ref>*<sp/>normalGep<sp/>=<sp/>SVFUtil::dyn_cast&lt;NormalGepPE&gt;(gep-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()))</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*baseType<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a219edef6c013a953ed12ee3c56bde6de" kindref="member">getType</ref>(oq);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>down<sp/>to<sp/>field<sp/>insensitive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseType<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setObjFieldInsensitive(oq);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeID<sp/>fiObj<sp/>=<sp/>oq;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpDstPts.set(fiObj);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DCHGraph::isAgg(baseType)<sp/>&amp;&amp;<sp/>baseType-&gt;getTag()<sp/>!=<sp/>dwarf::DW_TAG_array_type</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>normalGep-&gt;getLocationSet().getOffset()<sp/>&gt;=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" kindref="member">dchg</ref>-&gt;getNumFields(baseType))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>field<sp/>offset<sp/>is<sp/>too<sp/>high<sp/>for<sp/>this<sp/>object,<sp/>it<sp/>is<sp/>killed.<sp/>It<sp/>seems<sp/>that<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>was<sp/>made<sp/>on<sp/>this<sp/>GEP<sp/>but<sp/>this<sp/>is<sp/>not<sp/>the<sp/>base<sp/>(e.g.<sp/>base-&gt;f1-&gt;f2),<sp/>and<sp/>SVF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expects<sp/>to<sp/>operate<sp/>on<sp/>the<sp/>base<sp/>(hence<sp/>the<sp/>large<sp/>offset).<sp/>The<sp/>base<sp/>will<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cloned<sp/>at<sp/>another<sp/>GEP<sp/>and<sp/>back-propagated,<sp/>thus<sp/>it&apos;ll<sp/>reach<sp/>here<sp/>safe<sp/>and<sp/>sound.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>ignore<sp/>arrays/pointers<sp/>because<sp/>those<sp/>are<sp/>array<sp/>accesses/pointer<sp/>arithmetic<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>are<sp/>correct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obviously,<sp/>non-aggregates<sp/>cannot<sp/>have<sp/>their<sp/>fields<sp/>taken<sp/>so<sp/>they<sp/>are<sp/>spurious.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterSet.set(oq);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operate<sp/>on<sp/>the<sp/>field<sp/>and<sp/>all<sp/>its<sp/>clones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>fieldClones<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aa175b5db473eb57c03b6f908791d1133" kindref="member">getGepObjClones</ref>(oq,<sp/>normalGep-&gt;getLocationSet().getOffset());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>fc<sp/>:<sp/>fieldClones)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gepToSVFGRetrievers[<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(fc)].set(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpDstPts.set(fc);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;FSTBHC:<sp/>new<sp/>gep<sp/>edge?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a282126e5b67ed4e19aa40c81180b8290" kindref="member">gepTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2" kindref="member">unionPts</ref>(gep-&gt;getPAGDstNodeID(),<sp/>tmpDstPts)<sp/>||<sp/>changed;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a42c8023e0e60e8701ec197b3d775b423" kindref="member">FlowSensitiveTBHC::processLoad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_load_v_f_g_node" kindref="compound">LoadSVFGNode</ref>*<sp/>load)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*tildet<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(load);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tildet<sp/>!=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" kindref="member">undefType</ref>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" kindref="member">init</ref>(load-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>load-&gt;getPAGSrcNodeID(),<sp/>tildet,<sp/>TBHCAllReuse);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>perform<sp/>the<sp/>initialisation<sp/>for<sp/>non-pointer<sp/>nodes<sp/>but<sp/>not<sp/>process<sp/>the<sp/>load.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!load-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154" kindref="member">isPTAEdge</ref>())</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>dstVar<sp/>=<sp/>load-&gt;getPAGDstNodeID();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>srcPts<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(load-&gt;getPAGSrcNodeID());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;filterSet<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" kindref="member">getFilterSet</ref>(load-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unionPtsFromIn<sp/>is<sp/>going<sp/>to<sp/>call<sp/>getOriginalObj<sp/>on<sp/>ptd<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>results<sp/>in<sp/>fewer<sp/>loop<sp/>iterations.<sp/>o_t,<sp/>o_s<sp/>--&gt;<sp/>o.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>PointsTo<sp/>srcOriginalObjs;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>s<sp/>:<sp/>srcPts)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterSet.test(s))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;isConstantObj(s)<sp/>||<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;isNonPointerObj(s))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcOriginalObjs.set(<ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(s));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>ptd<sp/>:<sp/>srcOriginalObjs)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filterSet<sp/>tests<sp/>happened<sp/>while<sp/>building<sp/>srcOriginalObjs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unionPtsFromIn(load,<sp/>ptd,<sp/>dstVar))</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" kindref="member">isFIObjNode</ref>(ptd))</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS<sp/>&amp;allFields<sp/>=<sp/>getAllFieldsObjNode(ptd);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>f<sp/>:<sp/>allFields)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unionPtsFromIn(load,<sp/>f,<sp/>dstVar))</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1aab4f70210eb1e6447a24697d3b459067" kindref="member">loadTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ac937e0e388071bbf94a477e1880663eb" kindref="member">FlowSensitiveTBHC::processStore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_store_v_f_g_node" kindref="compound">StoreSVFGNode</ref>*<sp/>store)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*tildet<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(store);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tildet<sp/>!=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a6363466e64eee4405806568d26206d2e" kindref="member">undefType</ref>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" kindref="member">init</ref>(store-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>store-&gt;getPAGDstNodeID(),<sp/>tildet,<sp/>TBHCAllReuse<sp/>||<sp/>TBHCStoreReuse);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Like<sp/>processLoad:<sp/>we<sp/>want<sp/>to<sp/>perform<sp/>initialisation<sp/>for<sp/>non-pointers<sp/>but<sp/>not<sp/>the<sp/>store.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!store-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1a4dd7615f42971da9b6ec1dc04f0ec4e6" kindref="member">getPAGEdge</ref>()-&gt;<ref refid="class_s_v_f_1_1_p_a_g_edge_1a3d5a75d4f3792f90bf6ee58776512154" kindref="member">isPTAEdge</ref>())</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>through<sp/>and<sp/>return<sp/>because<sp/>there<sp/>may<sp/>be<sp/>some<sp/>pointer<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relying<sp/>on<sp/>this<sp/>node&apos;s<sp/>parents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a616c798289eb8af5eb529f5a56c2557b" kindref="member">updateAllDFOutFromIn</ref>(store-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;<sp/>dstPts<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(store-&gt;getPAGDstNodeID());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPts.empty())</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;filterSet<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" kindref="member">getFilterSet</ref>(store-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(store-&gt;getPAGSrcNodeID()).empty()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>ptd<sp/>:<sp/>dstPts)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterSet.test(ptd))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;isConstantObj(ptd)<sp/>||<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;isNonPointerObj(ptd))</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unionPtsFromTop(store,<sp/>store-&gt;getPAGSrcNodeID(),<sp/>ptd))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a82b76087363b26fbe749653935569de7" kindref="member">storeTime</ref><sp/>+=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>updateStart<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>merge<sp/>the<sp/>DFInSet<sp/>to<sp/>DFOutSet.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>NodeID<sp/>singleton;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSU<sp/>=<sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1a42a7e39e0e15576742f8ba7c32579ea2" kindref="member">isStrongUpdate</ref>(store,<sp/>singleton);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSU)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>svfgHasSU.set(store-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_flow_sensitive_1a8ebe4342c1496b906ee1b6450558c3e8" kindref="member">strongUpdateOutFromIn</ref>(store,<sp/>singleton))</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>svfgHasSU.reset(store-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_flow_sensitive_1ab492c283e2264b4cbd4c192e805b7750" kindref="member">weakUpdateOutFromIn</ref>(store))</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>updateEnd<sp/>=<sp/><ref refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" kindref="member">stat</ref>-&gt;<ref refid="class_s_v_f_1_1_p_t_a_stat_1aea47f02f3f56b089ba8ed45270e16eb4" kindref="member">getClk</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1af5a94d14096ae2bbc47b3b3b9f723226" kindref="member">updateTime</ref><sp/>+=<sp/>(updateEnd<sp/>-<sp/>updateStart)<sp/>/<sp/>TIMEINTERVAL;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a0eb8335dd45b35b20d34c981b86b059c" kindref="member">FlowSensitiveTBHC::processPhi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_p_h_i_v_f_g_node" kindref="compound">PHISVFGNode</ref>*<sp/>phi)</highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!phi-&gt;<ref refid="class_s_v_f_1_1_p_h_i_v_f_g_node_1a103e55e670ce614cabc13b8dc5b17b91" kindref="member">isPTANode</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1aa36fd1387e948e83107431179d819067" kindref="member">FlowSensitive::processPhi</ref>(phi);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*getVTInitType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopySVFGNode</ref><sp/>*copy,<sp/><ref refid="class_s_v_f_1_1_d_c_h_graph" kindref="compound">DCHGraph</ref><sp/>*dchg)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1aae94dd9031a6662d509627e602aef532" kindref="member">getInst</ref>()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Instruction<sp/>*inst<sp/>=<sp/>copy-&gt;<ref refid="class_s_v_f_1_1_stmt_v_f_g_node_1aae94dd9031a6662d509627e602aef532" kindref="member">getInst</ref>();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MDNode<sp/>*mdNode<sp/>=<sp/>inst-&gt;getMetadata(<ref refid="namespace_s_v_f_1_1cpp_util_1_1ctir_1a02b3f4190d325c921922c25e319dc8d9" kindref="member">cppUtil::ctir::vtInitMDName</ref>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdNode<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*type<sp/>=<sp/>SVFUtil::dyn_cast&lt;DIType&gt;(mdNode);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(type<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;TBHC:<sp/>bad<sp/>ctir.vt.init<sp/>metadata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dchg-&gt;<ref refid="class_s_v_f_1_1_d_c_h_graph_1a079feacdcc3783f4a9108a3b2d2aed2c" kindref="member">getCanonicalType</ref>(type);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1ab6525ac133151692176a03227f81bcac" kindref="member">FlowSensitiveTBHC::processCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_copy_v_f_g_node" kindref="compound">CopySVFGNode</ref>*<sp/>copy)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*vtInitType<sp/>=<sp/>getVTInitType(copy,<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a465e67781977e83526df7e36d576e539" kindref="member">dchg</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vtInitType<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setting<sp/>the<sp/>virtual<sp/>table<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a34064efe336ada815b31050f683c7ce1" kindref="member">init</ref>(copy-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/>copy-&gt;getPAGSrcNodeID(),<sp/>vtInitType,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_1aa401cc90de4e1c6842f08a43a28c5aa1" kindref="member">FlowSensitive::processCopy</ref>(copy)<sp/>||<sp/>changed;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeBS&amp;<sp/>FlowSensitiveTBHC::getAllFieldsObjNode(NodeID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1afe416f9ec57923f34ef1db3890a3f9e1" kindref="member">getGepObjs</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::updateInFromIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>srcStmt,<sp/>NodeID<sp/>srcVar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dstStmt,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IN<sp/>sets<sp/>are<sp/>only<sp/>based<sp/>on<sp/>the<sp/>original<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a4c2a88efa302a5857e78fa32c4271c08" kindref="member">updateDFInFromIn</ref>(srcStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(srcVar),</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(dstVar));</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::updateInFromOut(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>srcStmt,<sp/>NodeID<sp/>srcVar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dstStmt,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUT/IN<sp/>sets<sp/>only<sp/>have<sp/>original<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a716c949a43140845c498778675d57f2b" kindref="member">updateDFInFromOut</ref>(srcStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(srcVar),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(dstVar));</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::unionPtsFromIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>stmt,<sp/>NodeID<sp/>srcVar,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IN<sp/>sets<sp/>only<sp/>have<sp/>original<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a0e326cbff78740fd641a2964eb7a143f" kindref="member">updateTLVPts</ref>(stmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(srcVar),<sp/>dstVar);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::unionPtsFromTop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>stmt,<sp/>NodeID<sp/>srcVar,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUT<sp/>sets<sp/>only<sp/>have<sp/>original<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a5a79c5b7007859640876a1bef5011c66" kindref="member">updateATVPts</ref>(srcVar,<sp/>stmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(dstVar));</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::propDFInToIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>srcStmt,<sp/>NodeID<sp/>srcVar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dstStmt,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IN<sp/>sets<sp/>are<sp/>only<sp/>based<sp/>on<sp/>the<sp/>original<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1acdecfed9eff1772af0c398e160809173" kindref="member">updateAllDFInFromIn</ref>(srcStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(srcVar),</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(dstVar));</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::propDFOutToIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>srcStmt,<sp/>NodeID<sp/>srcVar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref>*<sp/>dstStmt,<sp/>NodeID<sp/>dstVar)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUT/IN<sp/>sets<sp/>only<sp/>have<sp/>original<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDFPTDataTy()-&gt;<ref refid="class_s_v_f_1_1_d_f_p_t_data_1a84217d424bd24a9cde806e8428cd68a2" kindref="member">updateAllDFInFromOut</ref>(srcStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(srcVar),</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstStmt-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>(),<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1aeea7089c6f54b44f0509d41686b649f6" kindref="member">getOriginalObj</ref>(dstVar));</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::determineWhichGepsAreLoads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SVFG::iterator<sp/>nI<sp/>=<sp/>svfg-&gt;<ref refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" kindref="member">begin</ref>();<sp/>nI<sp/>!=<sp/>svfg-&gt;end();<sp/>++nI)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref><sp/>*svfgNode<sp/>=<sp/>nI-&gt;second;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref><sp/>*gep<sp/>=<sp/>SVFUtil::dyn_cast&lt;GepSVFGNode&gt;(svfgNode))</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>care<sp/>about<sp/>ctir<sp/>nodes<sp/>-<sp/>they<sp/>have<sp/>the<sp/>reuse<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">getTypeFromCTirMetadata</ref>(gep))</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLoad<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref><sp/>*e<sp/>:<sp/>gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1a2d9cd758d6f8c5189d9b90b74f43e009" kindref="member">getOutEdges</ref>())</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref><sp/>*dst<sp/>=<sp/>e-&gt;getDstNode();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>on<sp/>itself<sp/>-<sp/>don&apos;t<sp/>care.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gep<sp/>==<sp/>dst)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SVFUtil::isa&lt;LoadSVFGNode&gt;(dst))</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isLoad<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLoad)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadGeps.set(gep-&gt;<ref refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlowSensitiveTBHC::gepIsLoad(NodeID<sp/>gep)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>when<sp/>gep<sp/>is<sp/>not<sp/>even<sp/>a<sp/>GEP;<sp/>loadGeps<sp/>only<sp/>contains<sp/>GEPs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>loadGeps.test(gep);</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MDNode<sp/>*<ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a2c47ba37bd250be455a21d1f0049d556" kindref="member">FlowSensitiveTBHC::getRawCTirMetadata</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref><sp/>*s)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref><sp/>*stmt<sp/>=<sp/>SVFUtil::dyn_cast&lt;StmtSVFGNode&gt;(s))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*v<sp/>=<sp/>stmt-&gt;getInst()<sp/>?<sp/>stmt-&gt;getInst()<sp/>:<sp/>stmt-&gt;getPAGEdge()-&gt;getValue();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1a21d2fd8bbef0c6f6ddddb5387569a7fa" kindref="member">TypeBasedHeapCloning::getRawCTirMetadata</ref>(v);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIType<sp/>*<ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a045ffbf7eea276d154be2cf883ea71f7" kindref="member">FlowSensitiveTBHC::getTypeFromCTirMetadata</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref><sp/>*s)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref><sp/>*stmt<sp/>=<sp/>SVFUtil::dyn_cast&lt;StmtSVFGNode&gt;(s))</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*v<sp/>=<sp/>stmt-&gt;getInst();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ac4565775cced4444ba007e310c4a02d8" kindref="member">TypeBasedHeapCloning::getTypeFromCTirMetadata</ref>(v);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3af0297eb75ac4009433be44bb286d30" kindref="member">FlowSensitiveTBHC::expandFIObjs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo&amp;<sp/>pts,<sp/>PointsTo&amp;<sp/>expandedPts)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>expandedPts<sp/>=<sp/>pts;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>o<sp/>:<sp/>pts)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedPts<sp/>|=<sp/>getAllFieldsObjNode(o);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_gep_obj_p_n" kindref="compound">GepObjPN</ref><sp/>*gepObj<sp/>=<sp/>SVFUtil::dyn_cast&lt;GepObjPN&gt;(<ref refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" kindref="member">pag</ref>-&gt;<ref refid="class_s_v_f_1_1_p_a_g_1a3aa1c92eb8a6fab72996964de80f19ac" kindref="member">getPAGNode</ref>(o)))</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedPts<sp/>|=<sp/>getAllFieldsObjNode(o);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>gepObj-&gt;getBaseNode();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_v_f_1_1_flow_sensitive_t_b_h_c_1abe784dfae06a7c1943b8f0a18bd79f14" kindref="member">FlowSensitiveTBHC::countAliases</ref>(Set&lt;std::pair&lt;NodeID,<sp/>NodeID&gt;&gt;<sp/>cmp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*mayAliases,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*noAliases)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>Map&lt;std::pair&lt;NodeID,<sp/>NodeID&gt;,<sp/>PointsTo&gt;<sp/>filteredPts;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::pair&lt;NodeID,<sp/>NodeID&gt;<sp/>locP<sp/>:<sp/>cmp)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;filterSet<sp/>=<sp/><ref refid="class_s_v_f_1_1_type_based_heap_cloning_1ae520e0551e63223a908f92a6b9667356" kindref="member">getFilterSet</ref>(locP.first);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;pts<sp/>=<sp/><ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb" kindref="member">getPts</ref>(locP.second);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PointsTo<sp/>&amp;ptsFiltered<sp/>=<sp/>filteredPts[locP];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeID<sp/>o<sp/>:<sp/>pts)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterSet.test(o))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptsFiltered.set(o);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::pair&lt;NodeID,<sp/>NodeID&gt;<sp/>locPA<sp/>:<sp/>cmp)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;aPts<sp/>=<sp/>filteredPts[locPA];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::pair&lt;NodeID,<sp/>NodeID&gt;<sp/>locPB<sp/>:<sp/>cmp)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locPB<sp/>==<sp/>locPA)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointsTo<sp/>&amp;bPts<sp/>=<sp/>filteredPts[locPB];</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac" kindref="member">alias</ref>(aPts,<sp/>bPts))</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>llvm::NoAlias:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++(*noAliases);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>llvm::MayAlias:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++(*mayAliases);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="stringliteral">&quot;Not<sp/>May/NoAlias?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/WPA/FlowSensitiveTBHC.cpp"/>
  </compounddef>
</doxygen>
