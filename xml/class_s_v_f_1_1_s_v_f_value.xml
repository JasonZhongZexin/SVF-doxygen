<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_s_v_f_value" kind="class" language="C++" prot="public">
    <compoundname>SVF::SVFValue</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_basic_block" prot="public" virt="non-virtual">SVF::SVFBasicBlock</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_function" prot="public" virt="non-virtual">SVF::SVFFunction</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_global" prot="public" virt="non-virtual">SVF::SVFGlobal</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_s_v_f_instruction" prot="public" virt="non-virtual">SVF::SVFInstruction</derivedcompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860e" prot="public" static="no" strong="no">
        <type></type>
        <name>SVFValKind</name>
        <enumvalue id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea51746c2f6b368f5d9a7ec4625cb6559e" prot="public">
          <name>SVFVal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea4582a3728eda9f58c4e7d069e4fec577" prot="public">
          <name>SVFFunc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea8a1159a8819de74d39e32aef1b415c2a" prot="public">
          <name>SVFGlob</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea732cb3760ef56163428add79824174f4" prot="public">
          <name>SVFBB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860eacb5f1f872986a8f8bccd9a3b3904e9dd" prot="public">
          <name>SVFInst</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="140" column="5" bodyfile="include/Util/SVFBasicTypes.h" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_s_v_f_value_1a7e98da47d88c46dfd2c7124c43f6a885" prot="public" static="no">
        <type>s32_t</type>
        <definition>typedef s32_t SVF::SVFValue::GNodeK</definition>
        <argsstring></argsstring>
        <name>GNodeK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="138" column="19" bodyfile="include/Util/SVFBasicTypes.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_value_1ae0c3918bbf8338efd8e6c00c51d9d9d2" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string SVF::SVFValue::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="150" column="23" bodyfile="include/Util/SVFBasicTypes.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_s_v_f_value_1af9f71a3c0d055f5fed6831a6ecf40d67" prot="private" static="no" mutable="no">
        <type>GNodeK</type>
        <definition>GNodeK SVF::SVFValue::kind</definition>
        <argsstring></argsstring>
        <name>kind</name>
        <briefdescription>
<para>Type of this <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="151" column="12" bodyfile="include/Util/SVFBasicTypes.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1ac42927fed1c213852daceb902478d9c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SVFValue::SVFValue</definition>
        <argsstring>(const std::string &amp;val, SVFValKind k)</argsstring>
        <name>SVFValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SVFValKind</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="154" column="5" bodyfile="include/Util/SVFBasicTypes.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GNodeK</type>
        <definition>GNodeK SVF::SVFValue::getKind</definition>
        <argsstring>() const</argsstring>
        <name>getKind</name>
        <briefdescription>
<para>Get the type of this <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="159" column="19" bodyfile="include/Util/SVFBasicTypes.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1abaa61e04b128feff7216d3ecdf4feefa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFValue::operator()</definition>
        <argsstring>(const SVFValue *lhs, const SVFValue *rhs) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Add the hash function for std::set (we also can overload operator&lt; to implement this) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="167" column="10" bodyfile="include/Util/SVFBasicTypes.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1aa171d1126f4ac00c3310d58d9b77c587" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFValue::operator==</definition>
        <argsstring>(SVFValue *rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="172" column="17" bodyfile="include/Util/SVFBasicTypes.h" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1ac64744d3e0c41be76ceef4b5715050b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SVFValue::operator!=</definition>
        <argsstring>(SVFValue *rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="177" column="17" bodyfile="include/Util/SVFBasicTypes.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1adc15c1f7a77158142156fba7524e89c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const llvm::StringRef</type>
        <definition>const llvm::StringRef SVF::SVFValue::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="183" column="27" bodyfile="include/Util/SVFBasicTypes.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1a50f77757ac9c37a9501eb48deccdfef1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; SVF::SVFValue::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="188" column="23" bodyfile="include/Util/SVFBasicTypes.h" bodystart="188" bodyend="191"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_s_v_f_1_1_s_v_f_value_1a149a1e1c616bb0b9a265c2279737a67a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>llvm::raw_ostream &amp;</type>
        <definition>llvm::raw_ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(llvm::raw_ostream &amp;o, const SVFValue &amp;node)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>llvm::raw_ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Overloading operator &lt;&lt; for dumping <ref refid="class_s_v_f_1_1_i_c_f_g" kindref="compound">ICFG</ref> node ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="195" column="12" bodyfile="include/Util/SVFBasicTypes.h" bodystart="195" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_s_v_f_value_1a1f2c6271dfefc6db685569e6c0cbedf5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SVFValue::classof</definition>
        <argsstring>(const SVFValue *node)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_value" kindref="compound">SVFValue</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="202" column="24" bodyfile="include/Util/SVFBasicTypes.h" bodystart="202" bodyend="209"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>SVF::SVFInstruction</label>
        <link refid="class_s_v_f_1_1_s_v_f_instruction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::SVFGlobal</label>
        <link refid="class_s_v_f_1_1_s_v_f_global"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFBasicBlock</label>
        <link refid="class_s_v_f_1_1_s_v_f_basic_block"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFFunction</label>
        <link refid="class_s_v_f_1_1_s_v_f_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::SVFValue</label>
        <link refid="class_s_v_f_1_1_s_v_f_value"/>
      </node>
    </inheritancegraph>
    <location file="include/Util/SVFBasicTypes.h" line="134" column="1" bodyfile="include/Util/SVFBasicTypes.h" bodystart="135" bodyend="210"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_s_v_f_value_1a1f2c6271dfefc6db685569e6c0cbedf5" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1a2ba3206a8461ef82713264e235128826" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>getKind</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1adc15c1f7a77158142156fba7524e89c9" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>getName</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1a50f77757ac9c37a9501eb48deccdfef1" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>getValue</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1a7e98da47d88c46dfd2c7124c43f6a885" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>GNodeK</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1af9f71a3c0d055f5fed6831a6ecf40d67" prot="private" virt="non-virtual"><scope>SVF::SVFValue</scope><name>kind</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1ac64744d3e0c41be76ceef4b5715050b5" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1abaa61e04b128feff7216d3ecdf4feefa" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>operator()</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1a149a1e1c616bb0b9a265c2279737a67a" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1aa171d1126f4ac00c3310d58d9b77c587" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea732cb3760ef56163428add79824174f4" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFBB</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea4582a3728eda9f58c4e7d069e4fec577" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFFunc</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea8a1159a8819de74d39e32aef1b415c2a" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFGlob</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860eacb5f1f872986a8f8bccd9a3b3904e9dd" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFInst</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860ea51746c2f6b368f5d9a7ec4625cb6559e" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFVal</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1afb50ea5aeea7a0608a3c9335aea6860e" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFValKind</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1ac42927fed1c213852daceb902478d9c8" prot="public" virt="non-virtual"><scope>SVF::SVFValue</scope><name>SVFValue</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_value_1ae0c3918bbf8338efd8e6c00c51d9d9d2" prot="private" virt="non-virtual"><scope>SVF::SVFValue</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
