<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_andersen" kind="class" language="C++" prot="public">
    <compoundname>SVF::Andersen</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_andersen_base" prot="public" virt="non-virtual">SVF::AndersenBase</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_andersen_h_c_d" prot="public" virt="virtual">SVF::AndersenHCD</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_andersen_l_c_d" prot="public" virt="virtual">SVF::AndersenLCD</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_andersen_s_c_d" prot="public" virt="non-virtual">SVF::AndersenSCD</derivedcompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_andersen_wave_diff" prot="public" virt="non-virtual">SVF::AndersenWaveDiff</derivedcompoundref>
    <includes refid="_andersen_8h" local="no">Andersen.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_andersen_1a77e7378a3a35622bde2371d7d3ed7013" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">SCCDetection</ref>&lt; <ref refid="class_s_v_f_1_1_constraint_graph" kindref="compound">ConstraintGraph</ref> * &gt;</type>
        <definition>typedef SCCDetection&lt;ConstraintGraph*&gt; SVF::Andersen::CGSCC</definition>
        <argsstring></argsstring>
        <name>CGSCC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="148" column="26" bodyfile="include/WPA/Andersen.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_andersen_1a0f65f1881111167bffe1cb2ad05c0a51" prot="public" static="no">
        <type>OrderedMap&lt; CallSite, NodeID &gt;</type>
        <definition>typedef OrderedMap&lt;CallSite, NodeID&gt; SVF::Andersen::CallSite2DummyValPN</definition>
        <argsstring></argsstring>
        <name>CallSite2DummyValPN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="149" column="24" bodyfile="include/WPA/Andersen.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_andersen_1a2f88b6035ecb480f7d11afe6bc666541" prot="protected" static="no" mutable="no">
        <type>CallSite2DummyValPN</type>
        <definition>CallSite2DummyValPN SVF::Andersen::callsite2DummyValPN</definition>
        <argsstring></argsstring>
        <name>callsite2DummyValPN</name>
        <briefdescription>
<para>Map an instruction to a dummy obj which created at an indirect callsite, which invokes a heap allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="255" column="25" bodyfile="include/WPA/Andersen.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_andersen_1ab90350dc4788d8e282404bd7944dd263" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::Andersen::pwcOpt</definition>
        <argsstring></argsstring>
        <name>pwcOpt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="258" column="10" bodyfile="include/WPA/Andersen.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_andersen_1a187a23c3b522f2aca49d3c5408ab4469" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::Andersen::diffOpt</definition>
        <argsstring></argsstring>
        <name>diffOpt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="259" column="10" bodyfile="include/WPA/Andersen.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aed87dd498ba5daf263624a74118ef007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::Andersen::Andersen</definition>
        <argsstring>(PAG *_pag, PTATY type=Andersen_WPA, bool alias_check=true)</argsstring>
        <name>Andersen</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> *</type>
          <declname>_pag</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" kindref="member">PTATY</ref></type>
          <declname>type</declname>
          <defval><ref refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" kindref="member">Andersen_WPA</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alias_check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="152" column="5" bodyfile="include/WPA/Andersen.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a15218a84e653baf2cd7f1dc95ccfb77d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::Andersen::~Andersen</definition>
        <argsstring>()</argsstring>
        <name>~Andersen</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="158" column="13" bodyfile="include/WPA/Andersen.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a20617a69c112ad423b1b5021e48a8548" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplements refid="class_s_v_f_1_1_andersen_base_1a4d3496c305281d7fb423db21e38cf690">initialize</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_c_d_1aaac9cac7fc5696adb585abd9d67f8c14">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_l_c_d_1a5926080868429040f5142843f01a2a5c">initialize</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_f_r_1a3b255068b3ea53041af94fd373a53bd4">initialize</reimplementedby>
        <briefdescription>
<para>Initialize analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Initilize analysis </para>
        </detaileddescription>
        <inbodydescription>
<para>Initialize worklist</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="164" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ad90c8cf193bd81870ce8dd88c9580e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <reimplements refid="class_s_v_f_1_1_andersen_base_1a099dad1149eb2e3f8068ef23870005a8">finalize</reimplements>
        <briefdescription>
<para>Finalize analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Finalize analysis </para>
        </detaileddescription>
        <inbodydescription>
<para>sanitize field insensitive obj TODO: Fields has been collapsed during <ref refid="class_s_v_f_1_1_andersen_1af4a0d960ef198047517bb32ee1e24a61" kindref="member">Andersen::collapseField()</ref>.</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="167" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a95c0b2f501dff61993cd43a5cab89e17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::resetData</definition>
        <argsstring>()</argsstring>
        <name>resetData</name>
        <briefdescription>
<para>Reset data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="170" column="17" bodyfile="include/WPA/Andersen.h" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aad706e332847e6b0892350a05028ba30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::Andersen::sccRepNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>sccRepNode</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1a3bd463cd456a1d58242f118328f51ddb">sccRepNode</reimplements>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>SCC methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="199" column="19" bodyfile="include/WPA/Andersen.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1acd2feff818906db49a1bb2d94c33db5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeBS &amp;</type>
        <definition>NodeBS&amp; SVF::Andersen::sccSubNodes</definition>
        <argsstring>(NodeID repId)</argsstring>
        <name>sccSubNodes</name>
        <param>
          <type>NodeID</type>
          <declname>repId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="203" column="19" bodyfile="include/WPA/Andersen.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const PointsTo &amp;</type>
        <definition>virtual const PointsTo&amp; SVF::Andersen::getPts</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getPts</name>
        <reimplements refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aee289e298e421448caaa604b7eb34fcb">getPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Operation of points-to set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="210" column="35" bodyfile="include/WPA/Andersen.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ab7dadfd4d810be4863f03ed996b3b3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::Andersen::unionPts</definition>
        <argsstring>(NodeID id, const PointsTo &amp;target)</argsstring>
        <name>unionPts</name>
        <reimplements refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae7073c07bfd7912f888d54d4652c7cc2">unionPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Union/add points-to. Add the reverse points-to for node collapse purpose To be noted that adding reverse pts might incur 10% total overhead during solving </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="214" column="25" bodyfile="include/WPA/Andersen.h" bodystart="214" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a8da98a9d33a6e9be329309f4af65e969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::Andersen::unionPts</definition>
        <argsstring>(NodeID id, NodeID ptd)</argsstring>
        <name>unionPts</name>
        <reimplements refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad5e657b856681a534a8990df35ea08d0">unionPts</reimplements>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="219" column="25" bodyfile="include/WPA/Andersen.h" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a43858bd242c7f2c5f33c3c0f6445376a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::dumpTopLevelPtsTo</definition>
        <argsstring>()</argsstring>
        <name>dumpTopLevelPtsTo</name>
        <reimplements refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a8d6cea841b6ded0f80ef2b5784e9b752">dumpTopLevelPtsTo</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print pag nodes&apos; pts by an ascending order </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="227" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="773" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a2b13f14db90ad59a61dff097bcdf8fb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::setPWCOpt</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setPWCOpt</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="229" column="10" bodyfile="include/WPA/Andersen.h" bodystart="229" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a44d62658bbd2efcef5ff479930b5dce9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::Andersen::mergePWC</definition>
        <argsstring>() const</argsstring>
        <name>mergePWC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="238" column="10" bodyfile="include/WPA/Andersen.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a69161671030b51c5a6cf139325aa098f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::setDiffOpt</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setDiffOpt</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="243" column="10" bodyfile="include/WPA/Andersen.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a6804284abb4b63f44eefdaf044a301f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::Andersen::enableDiff</definition>
        <argsstring>() const</argsstring>
        <name>enableDiff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="248" column="10" bodyfile="include/WPA/Andersen.h" bodystart="248" bodyend="251"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aaec53980b25ed769fa9a985860f810b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::Andersen::classof</definition>
        <argsstring>(const Andersen *)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_andersen" kindref="compound">Andersen</ref> *</type>
        </param>
        <briefdescription>
<para>Methods for support type inquiry through isa, cast, and dyn_cast: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="180" column="24" bodyfile="include/WPA/Andersen.h" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a60214d7c6c9aac8e498644b048660ab9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::Andersen::classof</definition>
        <argsstring>(const PointerAnalysis *pta)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="184" column="24" bodyfile="include/WPA/Andersen.h" bodystart="184" bodyend="194"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a7b1b9e9b25b5643440aca77e23a8de07" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::heapAllocatorViaIndCall</definition>
        <argsstring>(CallSite cs, NodePairSet &amp;cpySrcNodes)</argsstring>
        <name>heapAllocatorViaIndCall</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>NodePairSet &amp;</type>
          <declname>cpySrcNodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="256" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="587" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a7e26ac6fb40684694f7ff2aadfde8bc7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::Andersen::computeDiffPts</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>computeDiffPts</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_with_type_1a96c316aff7fa595ddaca317f7a877398">computeDiffPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Handle diff points-to set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="262" column="25" bodyfile="include/WPA/Andersen.h" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a106691684d8e7a69157d423393d83d66" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const PointsTo &amp;</type>
        <definition>virtual const PointsTo&amp; SVF::Andersen::getDiffPts</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>getDiffPts</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_with_type_1a7aebff5174a88d12c6c500197ed70f87">getDiffPts</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="270" column="35" bodyfile="include/WPA/Andersen.h" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a4baa6fc95d52afa370fc0fabffd42018" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::updatePropaPts</definition>
        <argsstring>(NodeID dstId, NodeID srcId)</argsstring>
        <name>updatePropaPts</name>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <briefdescription>
<para>Handle propagated points-to set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="280" column="17" bodyfile="include/WPA/Andersen.h" bodystart="280" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a839ed248cf5ff8359217e2029f389d8a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::clearPropaPts</definition>
        <argsstring>(NodeID src)</argsstring>
        <name>clearPropaPts</name>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="288" column="17" bodyfile="include/WPA/Andersen.h" bodystart="288" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a9075cd05cb21e0f08a1109b7af6c7480" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::Andersen::initWorklist</definition>
        <argsstring>()</argsstring>
        <name>initWorklist</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1a7195381c3aab04890139b4fe2c561909">initWorklist</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="297" column="18" bodyfile="include/WPA/Andersen.h" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ab81b08574f80287803dd43b5ebe2adfa" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::Andersen::setSCCEdgeFlag</definition>
        <argsstring>(ConstraintNode::SCCEdgeFlag f)</argsstring>
        <name>setSCCEdgeFlag</name>
        <param>
          <type>ConstraintNode::SCCEdgeFlag</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="299" column="18" bodyfile="include/WPA/Andersen.h" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a1caa6fa0740f4fa789d960a5a6fcb9c1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::processNode</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>processNode</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1abd7fd785e70f66d394088101d78598ca">processNode</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_1afa1055cda6c910b24480505efd205895">processNode</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
<para>Override <ref refid="class_s_v_f_1_1_w_p_a_solver" kindref="compound">WPASolver</ref> function in order to use the default solver. </para>
        </briefdescription>
        <detaileddescription>
<para>Start constraint solving </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="305" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="158" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1adccf6acf63abc9cafc92b2148396fd10" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::processAllAddr</definition>
        <argsstring>()</argsstring>
        <name>processAllAddr</name>
        <briefdescription>
<para>handling various constraints </para>
        </briefdescription>
        <detaileddescription>
<para>Process address edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="309" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1abc20264231658b99998bc4af1f03a4de" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::processLoad</definition>
        <argsstring>(NodeID node, const ConstraintEdge *load)</argsstring>
        <name>processLoad</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_constraint_edge" kindref="compound">ConstraintEdge</ref> *</type>
          <declname>load</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process load edges src <ndash/>load--&gt; dst, node \in pts(src) ==&gt; node<ndash/>copy--&gt;dst </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: New copy edges are also added for black hole obj node to make gcc in spec 2000 pass the flow-sensitive analysis. Try to handle black hole obj in an appropiate way.</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="311" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="256" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ac262d42d45dc6130cb031d5b0ed1f024" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::processStore</definition>
        <argsstring>(NodeID node, const ConstraintEdge *load)</argsstring>
        <name>processStore</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_constraint_edge" kindref="compound">ConstraintEdge</ref> *</type>
          <declname>load</declname>
          <defname>store</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process store edges src <ndash/>store--&gt; dst, node \in pts(dst) ==&gt; src<ndash/>copy--&gt;node </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: New copy edges are also added for black hole obj node to make gcc in spec 2000 pass the flow-sensitive analysis. Try to handle black hole obj in an appropiate way</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="312" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="276" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ac4afe532655c3f311143ebbe15175ca2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::processCopy</definition>
        <argsstring>(NodeID node, const ConstraintEdge *edge)</argsstring>
        <name>processCopy</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_1a3a5b952c0c2fe2be1b9a6fcfeeba2c37">processCopy</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_constraint_edge" kindref="compound">ConstraintEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process copy edges src <ndash/>copy--&gt; dst, union pts(dst) with pts(src) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="313" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="296" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aa697d4a6fe09dd6e50abb09228b3567f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::processGep</definition>
        <argsstring>(NodeID node, const GepCGEdge *edge)</argsstring>
        <name>processGep</name>
        <param>
          <type>NodeID</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_gep_c_g_edge" kindref="compound">GepCGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process gep edges src <ndash/>gep--&gt; dst, for each srcPtdNode \in pts(src) ==&gt; add fieldSrcPtdNode into tmpDstPts union pts(dst) with tmpDstPts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="314" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ab069683dd6ca563113efbde2813ab35e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::handleCopyGep</definition>
        <argsstring>(ConstraintNode *node)</argsstring>
        <name>handleCopyGep</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_1ad5c85a28967cc3f62e663dc00a8aa8c9">handleCopyGep</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_l_c_d_1a139d80e25fe713194f719581915d36d5">handleCopyGep</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_l_c_d_1a9582cde6cbb510f3fb624109f8ea8f63">handleCopyGep</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1aa0a496376f7bea2c417ef83c51d19a61">handleCopyGep</reimplementedby>
        <param>
          <type><ref refid="class_s_v_f_1_1_constraint_node" kindref="compound">ConstraintNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process copy and gep edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="315" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="179" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a0f32ba8cb1109c257552fa775a007ffd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::handleLoadStore</definition>
        <argsstring>(ConstraintNode *node)</argsstring>
        <name>handleLoadStore</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a7ae683eb8c607a0e742b44e3019b8cbc">handleLoadStore</reimplementedby>
        <param>
          <type><ref refid="class_s_v_f_1_1_constraint_node" kindref="compound">ConstraintNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process load and store edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="316" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="199" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aca095e135edb5d27efe76bb7ee71184c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::processAddr</definition>
        <argsstring>(const AddrCGEdge *addr)</argsstring>
        <name>processAddr</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a52704e25a1e3b30ddf8676811f4e1584">processAddr</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_addr_c_g_edge" kindref="compound">AddrCGEdge</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process address edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="317" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="241" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ac6b1efcaadfed48c226701ecf6bac55e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::processGepPts</definition>
        <argsstring>(const PointsTo &amp;pts, const GepCGEdge *edge)</argsstring>
        <name>processGepPts</name>
        <param>
          <type>const PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_gep_c_g_edge" kindref="compound">GepCGEdge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute points-to for gep edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="318" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="325" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a8ba593bd16d4436310f2f25e75687c57" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::Andersen::addCopyEdge</definition>
        <argsstring>(NodeID src, NodeID dst)</argsstring>
        <name>addCopyEdge</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a0b5990e8b0230c019a2bcedbab354cba">addCopyEdge</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>src</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add copy edge on constraint graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="322" column="25" bodyfile="include/WPA/Andersen.h" bodystart="322" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a6c60b761ddf3d6bf08c8a9c3f6fd9f0b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::updateCallGraph</definition>
        <argsstring>(const CallSiteToFunPtrMap &amp;callsites)</argsstring>
        <name>updateCallGraph</name>
        <reimplements refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aa534e475fa34fa322c567bc376a3da70">updateCallGraph</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a512c636bdaafe6a3ac8f0cc29392c573">updateCallGraph</reimplementedby>
        <param>
          <type>const CallSiteToFunPtrMap &amp;</type>
          <declname>callsites</declname>
        </param>
        <briefdescription>
<para>Update call graph for the input indirect callsites. </para>
        </briefdescription>
        <detaileddescription>
<para>Update call graph for the input indirect callsites </para>
        </detaileddescription>
        <inbodydescription>
<para>nodes as a src of a generated new copy edge</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="333" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="560" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1aecc02a942e32689fbb25fb341b5a6d2e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::Andersen::updateCallGraph</definition>
        <argsstring>()</argsstring>
        <name>updateCallGraph</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1a1d1892d8e7a9ede8cb181ad0ff191bc5">updateCallGraph</reimplements>
        <briefdescription>
<para>Update call graph for all the indirect callsites. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="336" column="25" bodyfile="include/WPA/Andersen.h" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a5a90e681e46c52ffd3debf02910c7ecf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::connectCaller2CalleeParams</definition>
        <argsstring>(CallSite cs, const SVFFunction *F, NodePairSet &amp;cpySrcNodes)</argsstring>
        <name>connectCaller2CalleeParams</name>
        <param>
          <type>CallSite</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>F</declname>
        </param>
        <param>
          <type>NodePairSet &amp;</type>
          <declname>cpySrcNodes</declname>
        </param>
        <briefdescription>
<para>Connect formal and actual parameters for indirect callsites. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect formal and actual parameters for indirect callsites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="342" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="617" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a36729160041bc3a3e2b0a92b29062848" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Andersen::mergeNodeToRep</definition>
        <argsstring>(NodeID nodeId, NodeID newRepId)</argsstring>
        <name>mergeNodeToRep</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_1acdc82c72b14e012551a460fa91a634db">mergeNodeToRep</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>newRepId</declname>
        </param>
        <briefdescription>
<para>Merge sub node to its rep. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><orderedlist>
<listitem><para>if find gep edges inside SCC cycle, the rep node will become a PWC node and its pts should be collapsed later.</para>
</listitem><listitem><para>if the node to be merged is already a PWC node, the rep node will also become a PWC node as it will have a self-cycle gep edge.</para>
</listitem></orderedlist>
</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="347" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="736" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ae6b1e54a389abc68994219e39539127e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Andersen::mergeSrcToTgt</definition>
        <argsstring>(NodeID srcId, NodeID tgtId)</argsstring>
        <name>mergeSrcToTgt</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_l_c_d_1ac78efb1e4246c06c64dad1d368ed032d">mergeSrcToTgt</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_h_l_c_d_1a59da289c87f9ab815a15e0a745bdc31f">mergeSrcToTgt</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_f_r_1ac5f406db5610347564fceff4d36f6a6f">mergeSrcToTgt</reimplementedby>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
          <defname>nodeId</defname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>tgtId</declname>
          <defname>newRepId</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>merge nodeId to newRepId. Return true if the newRepId is a PWC node </para>
        </detaileddescription>
        <inbodydescription>
<para>union pts of node to rep</para>
<para>move the edges from node to rep, and remove the node</para>
<para>set rep and sub relations</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="349" column="18" bodyfile="lib/WPA/Andersen.cpp" bodystart="712" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a1ba1e1e36af289982146de06cf06ab0a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::mergeSccNodes</definition>
        <argsstring>(NodeID repNodeId, const NodeBS &amp;subNodes)</argsstring>
        <name>mergeSccNodes</name>
        <param>
          <type>NodeID</type>
          <declname>repNodeId</declname>
        </param>
        <param>
          <type>const NodeBS &amp;</type>
          <declname>subNodes</declname>
        </param>
        <briefdescription>
<para>Merge sub node in a SCC cycle to their rep node. </para>
        </briefdescription>
        <detaileddescription>
<para>Union points-to of subscc nodes into its rep nodes <ref refid="struct_move" kindref="compound">Move</ref> incoming/outgoing direct edges of sub node to rep node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="353" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="444" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ac86ffd334568e4df5c08b3c827018bef" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::mergeSccCycle</definition>
        <argsstring>()</argsstring>
        <name>mergeSccCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="354" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="416" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ae79bff0e9c49f15e7db00ed605824d98" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Andersen::collapsePWCNode</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>collapsePWCNode</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1a138b403af0370ad6fdf8cc6af0530392">collapsePWCNode</reimplements>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
<para>Collapse a field object into its base for field insensitive anlaysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Detect and collapse PWC nodes produced by processing gep edges, under the constraint of field limit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="358" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="392" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ac22a6946de30bc5887b9e4ec9259764f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Andersen::collapseFields</definition>
        <argsstring>()</argsstring>
        <name>collapseFields</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1a79c2b3f10f3f813396d8caaa1f7bc62a">collapseFields</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="359" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="401" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a3f0048155f0b3a6899dac6f30553aa9e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Andersen::collapseNodePts</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>collapseNodePts</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collapse node&apos;s points-to set. Change all points-to elements into field-insensitive. </para>
        </detaileddescription>
        <inbodydescription>
<para>Points to set may be changed during collapse, so use a clone instead.</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="360" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="459" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1af4a0d960ef198047517bb32ee1e24a61" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Andersen::collapseField</definition>
        <argsstring>(NodeID nodeId)</argsstring>
        <name>collapseField</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collapse field. make struct with the same base as nodeId become field-insensitive. </para>
        </detaileddescription>
        <inbodydescription>
<para>Black hole doesn&apos;t have structures, no collapse is needed. In later versions, instead of using base node to represent the struct, we&apos;ll create new field-insensitive node. To avoid creating a new &quot;black hole&quot; node, do not collapse field for black hole node.</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="361" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="479" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1acd54e3edace1f41511c8f0a6a68dac18" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Andersen::updateNodeRepAndSubs</definition>
        <argsstring>(NodeID nodeId, NodeID newRepId)</argsstring>
        <name>updateNodeRepAndSubs</name>
        <param>
          <type>NodeID</type>
          <declname>nodeId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>newRepId</declname>
        </param>
        <briefdescription>
<para>Updates subnodes of its rep, and rep node of its subs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>update nodeToRepMap, for each subs of current node updates its rep to newRepId</para>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="365" column="10" bodyfile="lib/WPA/Andersen.cpp" bodystart="752" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a31ea24432ff42ab86a4728f2bde571bc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NodeStack &amp;</type>
        <definition>NodeStack &amp; Andersen::SCCDetect</definition>
        <argsstring>()</argsstring>
        <name>SCCDetect</name>
        <reimplements refid="class_s_v_f_1_1_w_p_a_solver_1aaa932894d00b69cfa741f9987a9cc6b8">SCCDetect</reimplements>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_with_type_1aef46713e8407e5963c5c8f04ff1545d1">SCCDetect</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_l_c_d_1a078a58b3b3f18cca4e09ff5a9a8ed791">SCCDetect</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_andersen_s_c_d_1a70f69baf47587b742b5013a63a3ce593">SCCDetect</reimplementedby>
        <briefdescription>
<para>SCC detection. </para>
        </briefdescription>
        <detaileddescription>
<para>SCC detection on constraint graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="368" column="23" bodyfile="lib/WPA/Andersen.cpp" bodystart="536" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a308ef1f3a1c9fd7ac1858d0c690aa37a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::Andersen::sanitizePts</definition>
        <argsstring>()</argsstring>
        <name>sanitizePts</name>
        <briefdescription>
<para>Sanitize pts for field insensitive objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="373" column="10" bodyfile="include/WPA/Andersen.h" bodystart="373" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1ad92dbecc91170b235180e59ba307acda" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::string</type>
        <definition>virtual const std::string SVF::Andersen::PTAName</definition>
        <argsstring>() const</argsstring>
        <name>PTAName</name>
        <reimplements refid="class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0">PTAName</reimplements>
        <briefdescription>
<para>Get PTA name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="392" column="31" bodyfile="include/WPA/Andersen.h" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1af42fe6aeacfd31bbef7f5c80c8cf6173" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SVF::Andersen::matchType</definition>
        <argsstring>(NodeID, NodeID, const NormalGepCGEdge *)</argsstring>
        <name>matchType</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_with_type_1a2e30eef929c8aa8b0f9ac2f8fa7bc0f5">matchType</reimplementedby>
        <param>
          <type>NodeID</type>
        </param>
        <param>
          <type>NodeID</type>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_normal_gep_c_g_edge" kindref="compound">NormalGepCGEdge</ref> *</type>
        </param>
        <briefdescription>
<para>match types for Gep Edges </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="398" column="18" bodyfile="include/WPA/Andersen.h" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_andersen_1a85cc81a4f9399e9a23372fa2658325a6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SVF::Andersen::addTypeForGepObjNode</definition>
        <argsstring>(NodeID, const NormalGepCGEdge *)</argsstring>
        <name>addTypeForGepObjNode</name>
        <reimplementedby refid="class_s_v_f_1_1_andersen_wave_diff_with_type_1aaa2264bae63b40a1f345473aabfa927d">addTypeForGepObjNode</reimplementedby>
        <param>
          <type>NodeID</type>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_normal_gep_c_g_edge" kindref="compound">NormalGepCGEdge</ref> *</type>
        </param>
        <briefdescription>
<para>add type for newly created GepObjNode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/WPA/Andersen.h" line="403" column="18" bodyfile="include/WPA/Andersen.h" bodystart="403" bodyend="406"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Inclusion-based Pointer Analysis </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>SVF::AndersenSCD</label>
        <link refid="class_s_v_f_1_1_andersen_s_c_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>WPAConstraintSolver</label>
        <link refid="class_s_v_f_1_1_w_p_a_solver"/>
      </node>
      <node id="10">
        <label>SVF::AndersenSFR</label>
        <link refid="class_s_v_f_1_1_andersen_s_f_r"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::AndersenBase</label>
        <link refid="class_s_v_f_1_1_andersen_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::AndersenHCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_c_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>SVF::AndersenLCD</label>
        <link refid="class_s_v_f_1_1_andersen_l_c_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::AndersenHLCD</label>
        <link refid="class_s_v_f_1_1_andersen_h_l_c_d"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>SVF::AndersenWaveDiffWithType</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff_with_type"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::AndersenWaveDiff</label>
        <link refid="class_s_v_f_1_1_andersen_wave_diff"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::Andersen</label>
        <link refid="class_s_v_f_1_1_andersen"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>SVF::GenericGraph&lt; ConstraintNode, ConstraintEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="10">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="3">
        <label>WPAConstraintSolver</label>
        <link refid="class_s_v_f_1_1_w_p_a_solver"/>
        <childnode refid="4" relation="usage">
          <edgelabel>scc</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>worklist</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>SVF::ConstraintGraph</label>
        <link refid="class_s_v_f_1_1_constraint_graph"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>nodesToBeCollapsed</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>AddrCGEdgeSet</edgelabel>
          <edgelabel>LoadCGEdgeSet</edgelabel>
          <edgelabel>StoreCGEdgeSet</edgelabel>
          <edgelabel>directEdgeSet</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>SVF::GenericNode&lt; ConstraintNode, ConstraintEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="2">
        <label>SVF::AndersenBase</label>
        <link refid="class_s_v_f_1_1_andersen_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>consCG</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="14">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="5">
        <label>SVF::FIFOWorkList&lt; NodeID &gt;</label>
        <link refid="class_s_v_f_1_1_f_i_f_o_work_list"/>
      </node>
      <node id="17">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="13">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="9">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="8">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="16">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="1">
        <label>SVF::Andersen</label>
        <link refid="class_s_v_f_1_1_andersen"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="4" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/WPA/Andersen.h" line="143" column="1" bodyfile="include/WPA/Andersen.h" bodystart="144" bodyend="407"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a87e9adb7fb0e0a42abaf90adac27a9c0" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>_graph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>ADAPTFSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>ADAPTFSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a8ba593bd16d4436310f2f25e75687c57" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>addCopyEdge</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af68485a2208553579f9c2e4b2cb20cff" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>addPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a85cc81a4f9399e9a23372fa2658325a6" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>addTypeForGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ad06fbd9a51499c668662b533eeb2e4ac" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1adaba5a41a60e32d18d964bdb8ae5b2df" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a949533e5c99698c7f9862aae5de23687" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25720f154731a8c745da10aa76ab8517" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>alias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>alias_validation</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AliasAnalysis</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestFailMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestFailMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestFailNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestFailNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestMayAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestMayAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestMustAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestMustAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestNoAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestNoAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestPartialAlias</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>aliasTestPartialAliasMangled</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a6d1ff3396814a118ce3d200157426cd3" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>analyze</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aed87dd498ba5daf263624a74118ef007" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Andersen</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Andersen_BASE</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Andersen_WPA</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a16f177cfcb4a203a55c954c05125f267" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenBase</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenHCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenHLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenLCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenSCD_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenSFR_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenWaveDiff_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AndersenWaveDiffWithType_WPA</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1abdc249ea291d0247f6b91a8fcc7df341" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>AveragePointsToSetSize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>BaseImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>BVDataImpl</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aff20835f6fd320ccd2d2596db7945711" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>BVDataPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>callGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>callGraphSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a2f88b6035ecb480f7d11afe6bc666541" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>callsite2DummyValPN</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a0f65f1881111167bffe1cb2ad05c0a51" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CallSite2DummyValPN</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CallSiteToFunPtrMap</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a77e7378a3a35622bde2371d7d3ed7013" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CGSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>chgraph</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a4d5b605b8932824a7088399305952f12" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>child_iterator</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aaec53980b25ed769fa9a985860f810b5" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a60214d7c6c9aac8e498644b048660ab9" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1afa4d710b093a6c7a33cb1aef823781f0" prot="public" virt="non-virtual" ambiguityscope="SVF::AndersenBase::"><scope>SVF::Andersen</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4426df37aeabeb94d301373b55a53c20" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>clearAllPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1afdb10c2cce4935156566ea1c2daf9ea9" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>clearFullPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a839ed248cf5ff8359217e2029f389d8a" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>clearPropaPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4909696c946cf6aba12542ec51766b64" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a" prot="public" virt="virtual" ambiguityscope="SVF::PointerAnalysis::"><scope>SVF::Andersen</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1af4a0d960ef198047517bb32ee1e24a61" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>collapseField</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ac22a6946de30bc5887b9e4ec9259764f" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>collapseFields</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a3f0048155f0b3a6899dac6f30553aa9e" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>collapseNodePts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ae79bff0e9c49f15e7db00ed605824d98" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>collapsePWCNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>computeDDAPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a7e26ac6fb40684694f7ff2aadfde8bc7" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>computeDiffPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CondImpl</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a5a90e681e46c52ffd3debf02910c7ecf" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>connectCaller2CalleeParams</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>connectVCallToVFns</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1ae21e38a06a4397d11cdd17b0f8f282fd" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>consCG</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>containBlackHoleNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>containConstantNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CSCallString_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>CSSummary_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Cxt_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Default_PTA</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1af783769050ab663ad4bb93f901f01a6d" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1d82036ee76b86647b7623a249cde7ac" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>DFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a187a23c3b522f2aca49d3c5408ab4469" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>diffOpt</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abfe8dd0e3fceb96c3698cc13718108fe" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>DiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>disablePrintStat</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a97705b60d294b87ee075a69f04a35d22" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>dumpAllPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>dumpAllTypes</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae20bbb7991f585deb2e6d0d8115b1b93" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>dumpCPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>dumpGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>dumpPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>dumpStat</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a43858bd242c7f2c5f33c3c0f6445376a" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>dumpTopLevelPtsTo</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a6804284abb4b63f44eefdaf044a301f7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>enableDiff</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a798c84d5e861de2b61bcb1a86385f721" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>expandFIObjs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FieldS_DDA</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ad90c8cf193bd81870ce8dd88c9580e2c" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>finalize</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FlowS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FSCS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FSCSPS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FSDATAFLOW_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FSSPARSE_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FSTBHC_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1ab7de73aabfa092b51b8dbe7b091e4c57" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>GEDGE</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>getAllFieldsObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getAllValidPtrs</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getAnalysisTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getBaseObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getCallGraphSCCRepNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getCHGraph</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1aaec5125db063f8c1e7431ac7fe7a70f2" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getConstraintGraph</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a642613e98982259183d3f34a97f05502" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ab9c0bb439f98ae11dd178148109697ab" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getDiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a106691684d8e7a69157d423393d83d66" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>getDiffPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getFunPtr</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getGepObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getIndCallMap</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getIndirectCallsites</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acbb979edee9427efa2a7c0dbd881c483" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getMutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getNumOfResolvedIndCallEdge</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getPAG</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getPTACallGraph</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae94cea78b71fb75837ee2a17b5ed0e81" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a187285a5bdf9422d9188b2b11b667639" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4ff54c9b3e5aee923a0a0f7d879b878c" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getPtsMap</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a37ca8a99b8f83fba796293e6e13b0953" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getSCCDetector</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getTypeSystem</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a4859864a4c72d5e04c10305e4579e8ee" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>getVersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getVFnsFromCHA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>getVFnsFromPts</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a2b0c0c4d1f172e8eeae0230fa09f365e" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>GNODE</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1abe0a304039d1bd2cfd7befd32fdcde2b" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>graph</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a64d9cb98ab38b441440b860ae4de0f9b" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>GTraits</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ab069683dd6ca563113efbde2813ab35e" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>handleCopyGep</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a0f32ba8cb1109c257552fa775a007ffd" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>handleLoadStore</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>hasIndCSCallees</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ac81e18d470067445f48add54c890e081" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>hasPtsMap</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a7b1b9e9b25b5643440aca77e23a8de07" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>heapAllocatorViaIndCall</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>icfg</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a67b0ccd84eb61cb0e3a076c9a7eda72a" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>IncMutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a20617a69c112ad423b1b5021e48a8548" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>initialize</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a9075cd05cb21e0f08a1109b7af6c7480" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>initWorklist</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>inSameCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isArrayMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isFIObjNode</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isHeapMemObj</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isInRecursion</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a09c85e7a12715fc64e05a8448b699ec0" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>isInWorklist</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isLocalVarInRecursiveFun</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>isNonPointerObj</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a992b105a0ec126050a123e24db3bd45b" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>isWorklistEmpty</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1aa7c0636780a86f376e9222bce771e859" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>iterationForPrintStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>matchArgs</name></member>
      <member refid="class_s_v_f_1_1_andersen_1af42fe6aeacfd31bbef7f5c80c8cf6173" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>matchType</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a7cfafe54d564c9401f435362d44d3f9c" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>MaxPointsToSetSize</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a36729160041bc3a3e2b0a92b29062848" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>mergeNodeToRep</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a44d62658bbd2efcef5ff479930b5dce9" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>mergePWC</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ac86ffd334568e4df5c08b3c827018bef" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>mergeSccCycle</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a1ba1e1e36af289982146de06cf06ab0a" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>mergeSccNodes</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ae6b1e54a389abc68994219e39539127e" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>mergeSrcToTgt</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1ae5354cb6f5f9a78075f306c109a0de68" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>MutDFPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1abe0d9d198f140ef89590e1b403a85c5d" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>MutDiffPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1aead9cb72160c66589183f846e42bc1f4" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>MutPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1acec222de13d274a8a0aabd508049162e" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>MutVersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a5fd488d74e04aa9e66ca4eb42c6dbbf4" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>Node</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a01450e1475679d093413e6496c198fc0" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>Node_Index</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1ad21fc4e60abc4e6030880f8197e1c93f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfFieldExpand</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1ab3369caa278da03e6e6697a839985cd6" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfIteration</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a70e60ce2e6f4cfd575c6f5c974ca1081" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfProcessedAddr</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a9d7b6e602e1764f76583824dddebf985" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfProcessedCopy</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a25de7638a692832f0d4727815ff270f6" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfProcessedGep</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a5f1b0711583aa8947dfb4619658f1904" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfProcessedLoad</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1ae18183a5d8ebd46fcdb9246bd643b150" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfProcessedStore</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a6da6e1231a46fde6925493045b8b2490" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1aa31bc83cdeaa30dd0975976e29a5be12" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>numOfSfrs</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a9830d4676fd424b633f8e4d918734296" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>onTheFlyCallGraphSolve</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>OnTheFlyIterBudgetForStat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>pag</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>PathS_DDA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>PointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a20a14ac31fe23d4fe67da15f5cc498df" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>popFromWorklist</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>print_stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>printIndCSTargets</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a566830d0c7a1f5cd967bb8f2ab168f8d" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>printStat</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aca095e135edb5d27efe76bb7ee71184c" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processAddr</name></member>
      <member refid="class_s_v_f_1_1_andersen_1adccf6acf63abc9cafc92b2148396fd10" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>processAllAddr</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ac4afe532655c3f311143ebbe15175ca2" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processCopy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aa697d4a6fe09dd6e50abb09228b3567f" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processGep</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ac6b1efcaadfed48c226701ecf6bac55e" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processGepPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1abc20264231658b99998bc4af1f03a4de" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processLoad</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a1caa6fa0740f4fa789d960a5a6fcb9c1" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processNode</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ac262d42d45dc6130cb031d5b0ed1f024" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>processStore</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a541ef7fda44ce79086c30b07a5f6126c" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>propagate</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a904c056bcad2bdaff13763a48d372420" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>propFromSrcToDst</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>ptaCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>ptaImplTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>PTAImplTy</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ad92dbecc91170b235180e59ba307acda" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>PTAName</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>PTATY</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>ptaTy</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1addd6587f05704d15788d21fd09e1f33f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>PTDataTy</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a4af1c3e72f5af96c4facff672108da58" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>pushIntoWorklist</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ab90350dc4788d8e282404bd7944dd263" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>pwcOpt</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a290501006cb700db0e07dc577429c928" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>readFromFile</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1ac460772d9236a2fefe17b2557023b883" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>reanalyze</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a95c0b2f501dff61993cd43a5cab89e17" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>resetData</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>resetObjFieldSensitive</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>resolveCPPIndCalls</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>resolveIndCalls</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a308ef1f3a1c9fd7ac1858d0c690aa37a" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>sanitizePts</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a1352953966be14b2a1d6244f35e74a33" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>SCC</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a21709a0f33b6238afe735cc9fe49ff70" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>scc</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a31ea24432ff42ab86a4728f2bde571bc" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>SCCDetect</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a16d371c8f6a9bdb1ca984bcb287d6c5a" prot="protected" virt="virtual" ambiguityscope="SVF::AndersenBase::"><scope>SVF::Andersen</scope><name>SCCDetect</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aad706e332847e6b0892350a05028ba30" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>sccRepNode</name></member>
      <member refid="class_s_v_f_1_1_andersen_1acd2feff818906db49a1bb2d94c33db5f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>sccSubNodes</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a69161671030b51c5a6cf139325aa098f" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>setDiffOpt</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1aa04deb39cd024c051f30ac43d1d62b34" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>setGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>setObjFieldInsensitive</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a2b13f14db90ad59a61dff097bcdf8fb7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>setPWCOpt</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ab81b08574f80287803dd43b5ebe2adfa" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>setSCCEdgeFlag</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a44d31c197e7f6d88e410c7d85fdd6bdc" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>solve</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1af1bb670efde7006e3e99b3735e4fc4cc" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>solveWorklist</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>stat</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>Steensgaard_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>svfMod</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1ad40b196c2c699bd115529b806d20de25" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfCollapse</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1aae14de6fbca9280d8d0290326aa493f0" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfProcessCopyGep</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a9fe738f1e11c80006d540f246a80bfdf" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfProcessLoadStore</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a6b7d0e57f741c446d0bf178939960143" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfSCCDetection</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a02c5a50b214d36921e1404784e76704d" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfSCCMerges</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1a2afb49f513c9534fd051117b59dc056b" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>timeOfUpdateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>TypeCPP_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>typeSystem</name></member>
      <member refid="class_s_v_f_1_1_andersen_1ab7dadfd4d810be4863f03ed996b3b3c4" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a8da98a9d33a6e9be329309f4af65e969" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a6c60b761ddf3d6bf08c8a9c3f6fd9f0b" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_andersen_1aecc02a942e32689fbb25fb341b5a6d2e" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>updateCallGraph</name></member>
      <member refid="class_s_v_f_1_1_andersen_1acd54e3edace1f41511c8f0a6a68dac18" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>updateNodeRepAndSubs</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a4baa6fc95d52afa370fc0fabffd42018" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>updatePropaPts</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>validateExpectedFailureTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>validateSuccessTests</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>validateTests</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a1fd1285e201d6c98d3b2d00cf0163bd7" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>VersionedPTDataTy</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>VFS_WPA</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>VFunSet</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>VTableSet</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a1775717a8c8d5d125b7561bc1ae6abf5" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>worklist</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a624e9156b2d3a4f284548cbaaf650334" prot="public" virt="non-virtual"><scope>SVF::Andersen</scope><name>WorkList</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1a0c5616b0e340955dafc2ab2f21740abd" prot="protected" virt="non-virtual"><scope>SVF::Andersen</scope><name>WPASolver</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a25c68f9d2b88437778e854ff0d741d1b" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>writeToFile</name></member>
      <member refid="class_s_v_f_1_1_andersen_1a15218a84e653baf2cd7f1dc95ccfb77d" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>~Andersen</name></member>
      <member refid="class_s_v_f_1_1_andersen_base_1abd9b91b2cfe1e30ab3bdb6ac26466c1f" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>~AndersenBase</name></member>
      <member refid="class_s_v_f_1_1_b_v_data_p_t_a_impl_1a06f211184d3e75f0ca351a4b8092a478" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>~BVDataPTAImpl</name></member>
      <member refid="class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c" prot="public" virt="virtual"><scope>SVF::Andersen</scope><name>~PointerAnalysis</name></member>
      <member refid="class_s_v_f_1_1_w_p_a_solver_1ac88ef07e88b453a1b35684b59a7dd04a" prot="protected" virt="virtual"><scope>SVF::Andersen</scope><name>~WPASolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
