<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_symbol_table_info" kind="class" language="C++" prot="public">
    <compoundname>SVF::SymbolTableInfo</compoundname>
    <derivedcompoundref refid="class_s_v_f_1_1_loc_sym_table_info" prot="public" virt="non-virtual">SVF::LocSymTableInfo</derivedcompoundref>
    <includes refid="_symbol_table_info_8h" local="no">SymbolTableInfo.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" prot="public" static="no">
        <type>OrderedMap&lt; const Value *, SymID &gt;</type>
        <definition>typedef OrderedMap&lt;const Value *, SymID&gt; SVF::SymbolTableInfo::ValueToIDMapTy</definition>
        <argsstring></argsstring>
        <name>ValueToIDMapTy</name>
        <briefdescription>
<para>various maps defined </para>
        </briefdescription>
        <detaileddescription>
<para>llvm value to sym id map local (%) and global (@) identifiers are pointer types which have a value node id. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="50" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a0371b60485199175b011cf3a42b404aa" prot="public" static="no">
        <type>OrderedMap&lt; SymID, <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> * &gt;</type>
        <definition>typedef OrderedMap&lt;SymID,MemObj*&gt; SVF::SymbolTableInfo::IDToMemMapTy</definition>
        <argsstring></argsstring>
        <name>IDToMemMapTy</name>
        <briefdescription>
<para>sym id to memory object map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="52" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" prot="public" static="no">
        <type>OrderedMap&lt; const Function *, SymID &gt;</type>
        <definition>typedef OrderedMap&lt;const Function *, SymID&gt; SVF::SymbolTableInfo::FunToIDMapTy</definition>
        <argsstring></argsstring>
        <name>FunToIDMapTy</name>
        <briefdescription>
<para>function to sym id map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="54" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a9353c7d2c0d6ae7dc495911b1ce24e06" prot="public" static="no">
        <type>OrderedMap&lt; SymID, <ref refid="namespace_s_v_f_1afe243912c982fde7d6beb4d046f9d42b" kindref="member">SYMTYPE</ref> &gt;</type>
        <definition>typedef OrderedMap&lt;SymID,SYMTYPE&gt; SVF::SymbolTableInfo::IDToSymTyMapTy</definition>
        <argsstring></argsstring>
        <name>IDToSymTyMapTy</name>
        <briefdescription>
<para>sym id to sym type map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="56" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a9c9a9da876d41ab48e55f25efc266494" prot="public" static="no">
        <type>OrderedMap&lt; const Type *, <ref refid="class_s_v_f_1_1_st_info" kindref="compound">StInfo</ref> * &gt;</type>
        <definition>typedef OrderedMap&lt;const Type*, StInfo*&gt; SVF::SymbolTableInfo::TypeToFieldInfoMap</definition>
        <argsstring></argsstring>
        <name>TypeToFieldInfoMap</name>
        <briefdescription>
<para>struct type to struct info map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="58" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a1b5fe6a59527983c80906261190fc864" prot="public" static="no">
        <type>Set&lt; CallSite &gt;</type>
        <definition>typedef Set&lt;CallSite&gt; SVF::SymbolTableInfo::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="59" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a52fa7c8a2c7064b415f373fdea0fdf69" prot="public" static="no">
        <type>OrderedMap&lt; const Instruction *, CallSiteID &gt;</type>
        <definition>typedef OrderedMap&lt;const Instruction*,CallSiteID&gt; SVF::SymbolTableInfo::CallSiteToIDMapTy</definition>
        <argsstring></argsstring>
        <name>CallSiteToIDMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="60" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_symbol_table_info_1a5af399ccac6ec809ade8f778379027bb" prot="public" static="no">
        <type>OrderedMap&lt; CallSiteID, const Instruction * &gt;</type>
        <definition>typedef OrderedMap&lt;CallSiteID,const Instruction*&gt; SVF::SymbolTableInfo::IDToCallSiteMapTy</definition>
        <argsstring></argsstring>
        <name>IDToCallSiteMapTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="61" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1ae577a32079a8e95d0185bfc45d919635" prot="private" static="yes" mutable="no">
        <type><ref refid="namespace_s_v_f_1a03db82b8a7914367024723dba4d6ca3c" kindref="member">DataLayout</ref> *</type>
        <definition>DataLayout * SymbolTableInfo::dl</definition>
        <argsstring></argsstring>
        <name>dl</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Data layout on a target machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="67" column="23" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a4fbb8ea4b4796d10d13c027b7455505c" prot="private" static="yes" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info" kindref="compound">SymbolTableInfo</ref> *</type>
        <definition>SymbolTableInfo * SymbolTableInfo::symInfo</definition>
        <argsstring></argsstring>
        <name>symInfo</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="79" column="28" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a9b8b7ecb217c7395025231b04e7b4c26" prot="private" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::SymbolTableInfo::maxFieldLimit</definition>
        <argsstring></argsstring>
        <name>maxFieldLimit</name>
        <briefdescription>
<para>Max field limit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="85" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a5054f95a7b77257ffb283044aab17b08" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" kindref="member">ValueToIDMapTy</ref></type>
        <definition>ValueToIDMapTy SVF::SymbolTableInfo::valSymMap</definition>
        <argsstring></argsstring>
        <name>valSymMap</name>
        <briefdescription>
<para>map a value to its sym id </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="69" column="20" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a5840b742ed8c73ece548b9b4aede07ec" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" kindref="member">ValueToIDMapTy</ref></type>
        <definition>ValueToIDMapTy SVF::SymbolTableInfo::objSymMap</definition>
        <argsstring></argsstring>
        <name>objSymMap</name>
        <briefdescription>
<para>map a obj reference to its sym id </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="70" column="20" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1aeab14702eabde827923a692cba8f7f8a" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a0371b60485199175b011cf3a42b404aa" kindref="member">IDToMemMapTy</ref></type>
        <definition>IDToMemMapTy SVF::SymbolTableInfo::objMap</definition>
        <argsstring></argsstring>
        <name>objMap</name>
        <briefdescription>
<para>map a memory sym id to its obj </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="71" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a2680e554af6153cbe8521425c1fbb123" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a9353c7d2c0d6ae7dc495911b1ce24e06" kindref="member">IDToSymTyMapTy</ref></type>
        <definition>IDToSymTyMapTy SVF::SymbolTableInfo::symTyMap</definition>
        <argsstring></argsstring>
        <name>symTyMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="72" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1ae6f8a4dbe09ff4756983ffdbed6d0681" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" kindref="member">FunToIDMapTy</ref></type>
        <definition>FunToIDMapTy SVF::SymbolTableInfo::returnSymMap</definition>
        <argsstring></argsstring>
        <name>returnSymMap</name>
        <briefdescription>
<para>&lt; map a sym id to its type </para>
        </briefdescription>
        <detaileddescription>
<para>return map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="73" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a94c06e5ac0b50989743a9e63c9a6d5b9" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" kindref="member">FunToIDMapTy</ref></type>
        <definition>FunToIDMapTy SVF::SymbolTableInfo::varargSymMap</definition>
        <argsstring></argsstring>
        <name>varargSymMap</name>
        <briefdescription>
<para>vararg map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="74" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a05a05894819e9cad6ee0033a6695e35e" prot="private" static="no" mutable="no">
        <type>CallSiteSet</type>
        <definition>CallSiteSet SVF::SymbolTableInfo::callSiteSet</definition>
        <argsstring></argsstring>
        <name>callSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="76" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1af8fdaaa03cd2ae9b7d50f57bc678b8ba" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::SymbolTableInfo::mod</definition>
        <argsstring></argsstring>
        <name>mod</name>
        <briefdescription>
<para>Module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="82" column="15" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1ad20ccb90e8f9dee488a8aec0600399dc" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SVF::SymbolTableInfo::modelConstants</definition>
        <argsstring></argsstring>
        <name>modelConstants</name>
        <briefdescription>
<para>Whether to model constants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="94" column="10" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a71a7084f88f2b303381c89769b53573a" prot="public" static="yes" mutable="no">
        <type>SymID</type>
        <definition>SymID SymbolTableInfo::totalSymNum</definition>
        <argsstring></argsstring>
        <name>totalSymNum</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="106" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1ad8b9fa0a4e4b91efb80586e692bd0dcd" prot="protected" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a9c9a9da876d41ab48e55f25efc266494" kindref="member">TypeToFieldInfoMap</ref></type>
        <definition>TypeToFieldInfoMap SVF::SymbolTableInfo::typeToFieldInfo</definition>
        <argsstring></argsstring>
        <name>typeToFieldInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Every type T is mapped to <ref refid="class_s_v_f_1_1_st_info" kindref="compound">StInfo</ref> which contains size (fsize) , offset(foffset) fsize[i] is the number of fields in the largest such struct, else fsize[i] = 1. fsize[0] is always the size of the expanded struct. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="439" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1a4e33a01e203f07a8154af6ee65f5ba46" prot="protected" static="no" mutable="no">
        <type>const Type *</type>
        <definition>const Type* SVF::SymbolTableInfo::maxStruct</definition>
        <argsstring></argsstring>
        <name>maxStruct</name>
        <briefdescription>
<para>The struct type with the most fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="442" column="16" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_symbol_table_info_1abb8550c9ef856e45cb7675c3796f9a35" prot="protected" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::SymbolTableInfo::maxStSize</definition>
        <argsstring></argsstring>
        <name>maxStSize</name>
        <briefdescription>
<para>The number of fields in max_struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="445" column="11" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aa6c39360aa4d55ae3a4a8b6f2a0035f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::prePassSchedule</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>prePassSchedule</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Invoke llvm passes to modify module. </para>
        </briefdescription>
        <detaileddescription>
<para>Invoke llvm passes to modify module </para>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_s_v_f_1_1_break_constant_g_e_ps" kindref="compound">BreakConstantGEPs</ref> Pass</para>
<para><ref refid="class_s_v_f_1_1_merge_function_rets" kindref="compound">MergeFunctionRets</ref> Pass</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="88" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="422" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a87cc3289dd69e5378487dd9ae2c9e82e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Destroy the memory for this symbol table after use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="91" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="602" bodyend="617"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aff272bc1d00f2e57b7677d1826a31237" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::SymbolTableInfo::SymbolTableInfo</definition>
        <argsstring>(void)</argsstring>
        <name>SymbolTableInfo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="98" column="5" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ab5297b79a02d8afce647a8b61bdab804" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectStructInfo</definition>
        <argsstring>(const StructType *T)</argsstring>
        <name>collectStructInfo</name>
        <reimplementedby refid="class_s_v_f_1_1_loc_sym_table_info_1aedca0dbfb8641cefe68d547e3f4d62e8">collectStructInfo</reimplementedby>
        <param>
          <type>const <ref refid="namespace_s_v_f_1a2bf58575ac7d068e0f1a4cf953b9e6cb" kindref="member">StructType</ref> *</type>
          <declname>T</declname>
          <defname>sty</defname>
        </param>
        <briefdescription>
<para>Collect the struct info. </para>
        </briefdescription>
        <detaileddescription>
<para>Fill in struct_info for T. Given a Struct type, we recursively extend and record its fields and types. </para>
        </detaileddescription>
        <inbodydescription>
<para>The struct info should not be processed before</para>
<para>FIXME: As the layout size is uint_64, here we assume offset with uint_32 (Size_t) is large enough and will not cause overflow</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="429" column="18" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="171" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aea1c4ec32c307feb5da455a41cc51b5e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectArrayInfo</definition>
        <argsstring>(const ArrayType *T)</argsstring>
        <name>collectArrayInfo</name>
        <reimplementedby refid="class_s_v_f_1_1_loc_sym_table_info_1a45b52cb8f8634ecf8bfb33f8e71bb82f">collectArrayInfo</reimplementedby>
        <param>
          <type>const ArrayType *</type>
          <declname>T</declname>
          <defname>ty</defname>
        </param>
        <briefdescription>
<para>Collect the array info. </para>
        </briefdescription>
        <detaileddescription>
<para>Fill in <ref refid="class_s_v_f_1_1_st_info" kindref="compound">StInfo</ref> for an array type. </para>
        </detaileddescription>
        <inbodydescription>
<para>Array itself only has one field which is the inner most element</para>
<para>Array&apos;s flatten field infor is the same as its element&apos;s flatten infor.</para>
<para>append the additional number</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="431" column="18" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="131" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1abf7567c655499d6744de8df689c11fad" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectSimpleTypeInfo</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>collectSimpleTypeInfo</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
          <defname>ty</defname>
        </param>
        <briefdescription>
<para>Collect simple type (non-aggregate) info. </para>
        </briefdescription>
        <detaileddescription>
<para>Collect simple type (non-aggregate) info </para>
        </detaileddescription>
        <inbodydescription>
<para>Only one field</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="433" column="18" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="231" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a267169023fc4f8dd66b145f7231fec11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info" kindref="compound">SymbolTableInfo</ref> *</type>
        <definition>SymbolTableInfo * SymbolTableInfo::SymbolInfo</definition>
        <argsstring>()</argsstring>
        <name>SymbolInfo</name>
        <briefdescription>
<para>Singleton design here to make sure we only have one instance during any analysis. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the symbol table instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="111" column="28" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a9f8d99c761f3c7108d797b3702fcbfec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void SVF::SymbolTableInfo::releaseSymbolInfo</definition>
        <argsstring>()</argsstring>
        <name>releaseSymbolInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="113" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a5fad3e11fbba831ed0940fb715e7dc2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_s_v_f_1a03db82b8a7914367024723dba4d6ca3c" kindref="member">DataLayout</ref> *</type>
        <definition>static DataLayout* SVF::SymbolTableInfo::getDataLayout</definition>
        <argsstring>(Module *mod)</argsstring>
        <name>getDataLayout</name>
        <param>
          <type>Module *</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
<para>Get target machine data layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="151" column="30" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a65a7e9d6d238a04291cb7d0aa15ece90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymbolTableInfo::isNullPtrSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isNullPtrSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>special value </para>
        </briefdescription>
        <detaileddescription>
<para>Check whether this value is null pointer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="182" column="17" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="736" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ab15112d3900f28525848cbe5fad37deb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymbolTableInfo::isBlackholeSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isBlackholeSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether this value is a black hole </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="184" column="17" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1acba43b6e9cdf07afaf3d30351aa8df7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SymbolTableInfo::isBlkPtr</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>isBlkPtr</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="188" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ad095e4a569d399cadc03ce864f61c394" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SymbolTableInfo::isNullPtr</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>isNullPtr</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="192" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ad9cdb21e20182f3bc95f04bbb97712f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SymbolTableInfo::isBlkObj</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>isBlkObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="196" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a704b917b1e1dbaf9cd758fa9acc1083b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SymbolTableInfo::isConstantObj</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>isConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="200" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a2fc4bfb83b71a4c14e16168382cb8f5d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::SymbolTableInfo::isBlkObjOrConstantObj</definition>
        <argsstring>(NodeID id)</argsstring>
        <name>isBlkObjOrConstantObj</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="204" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="204" bodyend="207"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a6efac0ae8ebf2865067136675be5a340" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::SymbolTableInfo::~SymbolTableInfo</definition>
        <argsstring>()</argsstring>
        <name>~SymbolTableInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="118" column="13" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a4decfc9e7f5dc096d7bfa42d6965763d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SymbolTableInfo::setModelConstants</definition>
        <argsstring>(bool _modelConstants)</argsstring>
        <name>setModelConstants</name>
        <param>
          <type>bool</type>
          <declname>_modelConstants</declname>
        </param>
        <briefdescription>
<para>Set / Get modelConstants. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="126" column="10" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a89e9c6da843e5eef25c51afd5d0937e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SymbolTableInfo::getModelConstants</definition>
        <argsstring>() const</argsstring>
        <name>getModelConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="130" column="10" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1adc8e9a6cd5d27391beb1a88706e77a77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallSiteSet &amp;</type>
        <definition>const CallSiteSet&amp; SVF::SymbolTableInfo::getCallSiteSet</definition>
        <argsstring>() const</argsstring>
        <name>getCallSiteSet</name>
        <briefdescription>
<para>Get callsite set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="138" column="30" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a40387a4893ae5caf58d6f786533d2f44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
        <definition>SVFModule* SVF::SymbolTableInfo::getModule</definition>
        <argsstring>()</argsstring>
        <name>getModule</name>
        <briefdescription>
<para>Module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="145" column="22" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1af4239ff717303dee25f1f4ba60070f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SymbolTableInfo::getTypeSizeInBytes</definition>
        <argsstring>(const Type *type)</argsstring>
        <name>getTypeSizeInBytes</name>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Helper method to get the size of the type from target data layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="160" column="11" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="1015" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ada63ac47515daa4402914083058baec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SymbolTableInfo::getTypeSizeInBytes</definition>
        <argsstring>(const StructType *sty, u32_t field_index)</argsstring>
        <name>getTypeSizeInBytes</name>
        <param>
          <type>const <ref refid="namespace_s_v_f_1a2bf58575ac7d068e0f1a4cf953b9e6cb" kindref="member">StructType</ref> *</type>
          <declname>sty</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>field_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>if this struct type does not have any element, i.e., opaque</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="161" column="11" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="1025" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a74481bb26d77d8c8bca91efd3e23c08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::buildMemModel</definition>
        <argsstring>(SVFModule *svfModule)</argsstring>
        <name>buildMemModel</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_s_v_f_module" kindref="compound">SVFModule</ref> *</type>
          <declname>svfModule</declname>
        </param>
        <briefdescription>
<para>Start building memory model. </para>
        </briefdescription>
        <detaileddescription>
<para>This method identify which is value sym and which is object sym </para>
        </detaileddescription>
        <inbodydescription>
<para>if (SVFUtil::isa&lt;InlineAsm&gt;(Callee))</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="165" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="447" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a7c422651a6cb299b0c94a2e4597fbe7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>collectSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>collect the syms </para>
        </briefdescription>
        <detaileddescription>
<para>Collect symbols, including value and object syms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="169" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="622" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a135ec0f7574d4bcb4bc411ce5775f1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectVal</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>collectVal</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value sym, if not available create a new one </para>
        </detaileddescription>
        <inbodydescription>
<para>handle global constant expression here</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="171" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="649" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1af639e9bc59f5fb9a6bf1748ef0d07d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectObj</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>collectObj</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get memory object sym, if not available create a new one </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="173" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="672" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ae4a7d078322e99af965193c82b357239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectRet</definition>
        <argsstring>(const Function *val)</argsstring>
        <name>collectRet</name>
        <param>
          <type>const Function *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create unique return sym, if not available create a new one </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="175" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="704" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ae1fe33260d2a2d21f2c33aaf1b58fee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectVararg</definition>
        <argsstring>(const Function *val)</argsstring>
        <name>collectVararg</name>
        <param>
          <type>const Function *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create vararg sym, if not available create a new one </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="177" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="720" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a61bda1c1c52fb765d0027d8141d35c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymbolTableInfo::isConstantObjSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>isConstantObjSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether this value points-to a constant object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="186" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="756" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a6d14f88dbbb3190fd37b4cf4e1b6e032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::SymbolTableInfo::createBlkOrConstantObj</definition>
        <argsstring>(SymID symId)</argsstring>
        <name>createBlkOrConstantObj</name>
        <param>
          <type>SymID</type>
          <declname>symId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="209" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aebf96274e1ad2a523981487839a3025e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>MemObj* SVF::SymbolTableInfo::getBlkObj</definition>
        <argsstring>() const</argsstring>
        <name>getBlkObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="216" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a661eb9ff1839c3af942517808414202b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>MemObj* SVF::SymbolTableInfo::getConstantObj</definition>
        <argsstring>() const</argsstring>
        <name>getConstantObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="220" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a1689fa03795200b501ae3887906e7e72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::blkPtrSymID</definition>
        <argsstring>() const</argsstring>
        <name>blkPtrSymID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="225" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1adaed6e68c2f53260ed4c4fc38b5c4721" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::nullPtrSymID</definition>
        <argsstring>() const</argsstring>
        <name>nullPtrSymID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="230" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ab582424fdb6d9674c1bd4466cdfbe497" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::constantSymID</definition>
        <argsstring>() const</argsstring>
        <name>constantSymID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="235" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a05ca2987d9f8716c24e489bec53502f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::blackholeSymID</definition>
        <argsstring>() const</argsstring>
        <name>blackholeSymID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="240" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a2fede86948eeb07aacfed2575ea329d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>const MemObj* SVF::SymbolTableInfo::createDummyObj</definition>
        <argsstring>(SymID symId, const Type *type)</argsstring>
        <name>createDummyObj</name>
        <param>
          <type>SymID</type>
          <declname>symId</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Can only be invoked by PAG::addDummyNode() when creaing <ref refid="class_s_v_f_1_1_p_a_g" kindref="compound">PAG</ref> from file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="246" column="25" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a4d616d922793e1d74bb4143f2d72bf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::handleGlobalCE</definition>
        <argsstring>(const GlobalVariable *G)</argsstring>
        <name>handleGlobalCE</name>
        <param>
          <type>const GlobalVariable *</type>
          <declname>G</declname>
        </param>
        <briefdescription>
<para>Handle constant expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle global constant expression </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="257" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="857" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a005df6b86f4058114bf7a336e73e63df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::handleGlobalInitializerCE</definition>
        <argsstring>(const Constant *C, u32_t offset)</argsstring>
        <name>handleGlobalInitializerCE</name>
        <param>
          <type>const Constant *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle global variable initialization </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="258" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="901" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ad92842613ac245ad06875a012a5549ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::handleCE</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>handleCE</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle constant expression </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="259" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="791" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aec7ee137f828c9d61a11df7fc2241161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::getValSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>getValSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get different kinds of syms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="264" column="11" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="264" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1acbcd5035240fab0b809c3334a27159ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::SymbolTableInfo::hasValSym</definition>
        <argsstring>(const Value *val)</argsstring>
        <name>hasValSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="279" column="17" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="279" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a1e2a66bd0cd01ff957ac50b22a2a8735" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Value *</type>
        <definition>const Value* SVF::SymbolTableInfo::getGlobalRep</definition>
        <argsstring>(const Value *val) const</argsstring>
        <name>getGlobalRep</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>find the unique defined global across multiple modules </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="288" column="24" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="288" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1afca5a68d1825326e3ec6302ce0afee66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::getObjSym</definition>
        <argsstring>(const Value *val) const</argsstring>
        <name>getObjSym</name>
        <param>
          <type>const Value *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="298" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="298" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a65f49178a948380c2d6105178509a906" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
        <definition>MemObj* SVF::SymbolTableInfo::getObj</definition>
        <argsstring>(SymID id) const</argsstring>
        <name>getObj</name>
        <param>
          <type>SymID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="305" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="305" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1afc8b0b6aea972f34a0c099b75114b81e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::getRetSym</definition>
        <argsstring>(const Function *val) const</argsstring>
        <name>getRetSym</name>
        <param>
          <type>const Function *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="312" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="312" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aec3fd21a11f760ca8684e390c6948f02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SymID</type>
        <definition>SymID SVF::SymbolTableInfo::getVarargSym</definition>
        <argsstring>(const Function *val) const</argsstring>
        <name>getVarargSym</name>
        <param>
          <type>const Function *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="319" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a7dda4943de0ed174a1d20fcdfde6c61c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Size_t</type>
        <definition>Size_t SVF::SymbolTableInfo::getTotalSymNum</definition>
        <argsstring>() const</argsstring>
        <name>getTotalSymNum</name>
        <briefdescription>
<para>Statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="329" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1abc7e567209010286a68634c700d76cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::SymbolTableInfo::getMaxStructSize</definition>
        <argsstring>() const</argsstring>
        <name>getMaxStructSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="333" column="18" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a8f3cb8a1db34dd692ee04561f4edeebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" kindref="member">ValueToIDMapTy</ref> &amp;</type>
        <definition>ValueToIDMapTy&amp; SVF::SymbolTableInfo::valSyms</definition>
        <argsstring>()</argsstring>
        <name>valSyms</name>
        <briefdescription>
<para>Get different kinds of syms maps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="341" column="27" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a3f9612f32c651220386beb0514f8fcff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" kindref="member">ValueToIDMapTy</ref> &amp;</type>
        <definition>ValueToIDMapTy&amp; SVF::SymbolTableInfo::objSyms</definition>
        <argsstring>()</argsstring>
        <name>objSyms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="346" column="27" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a929a20dc8f2eb4d82e93938b8339d697" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1a0371b60485199175b011cf3a42b404aa" kindref="member">IDToMemMapTy</ref> &amp;</type>
        <definition>IDToMemMapTy&amp; SVF::SymbolTableInfo::idToObjMap</definition>
        <argsstring>()</argsstring>
        <name>idToObjMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="351" column="25" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aafd4da7cef6387bb974abe20185b7b96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" kindref="member">FunToIDMapTy</ref> &amp;</type>
        <definition>FunToIDMapTy&amp; SVF::SymbolTableInfo::retSyms</definition>
        <argsstring>()</argsstring>
        <name>retSyms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="356" column="25" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ac449cd925dc05758c990179c0748e1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" kindref="member">FunToIDMapTy</ref> &amp;</type>
        <definition>FunToIDMapTy&amp; SVF::SymbolTableInfo::varargSyms</definition>
        <argsstring>()</argsstring>
        <name>varargSyms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="361" column="25" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a075a16b154514e282fcdd6f116a99e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TypeToFieldInfoMap::iterator</type>
        <definition>TypeToFieldInfoMap::iterator SVF::SymbolTableInfo::getStructInfoIter</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>getStructInfoIter</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
<para>Get struct info. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an iterator for StructInfo, designed as internal methods </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="371" column="34" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="371" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a90bca8ff906ea48fb5e3a69da463ccab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_st_info" kindref="compound">StInfo</ref> *</type>
        <definition>StInfo* SVF::SymbolTableInfo::getStructInfo</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>getStructInfo</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
<para>Get a reference to StructInfo. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="385" column="19" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1abfad1554a3803ff131f2a8682f329354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; u32_t &gt; &amp;</type>
        <definition>const std::vector&lt;u32_t&gt;&amp; SVF::SymbolTableInfo::getFattenFieldIdxVec</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>getFattenFieldIdxVec</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
<para>Get a reference to the components of struct_info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="391" column="30" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a5ff8a2f4afdb2cc26be0430f0310815b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; u32_t &gt; &amp;</type>
        <definition>const std::vector&lt;u32_t&gt;&amp; SVF::SymbolTableInfo::getFattenFieldOffsetVec</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>getFattenFieldOffsetVec</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="395" column="30" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aed11023ad3dfe7c5f5c559e2f2b23e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_s_v_f_1_1_field_info" kindref="compound">FieldInfo</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;FieldInfo&gt;&amp; SVF::SymbolTableInfo::getFlattenFieldInfoVec</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>getFlattenFieldInfoVec</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="399" column="30" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aa203d9bb3c3e567ff49a2beb19631de2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type* SVF::SymbolTableInfo::getOrigSubTypeWithFldInx</definition>
        <argsstring>(const Type *baseType, u32_t field_idx)</argsstring>
        <name>getOrigSubTypeWithFldInx</name>
        <param>
          <type>const Type *</type>
          <declname>baseType</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>field_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="403" column="23" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a294a42ee0bc466104fb96a3136c34bd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type* SVF::SymbolTableInfo::getOrigSubTypeWithByteOffset</definition>
        <argsstring>(const Type *baseType, u32_t byteOffset)</argsstring>
        <name>getOrigSubTypeWithByteOffset</name>
        <param>
          <type>const Type *</type>
          <declname>baseType</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>byteOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="407" column="23" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a86b742ca197b3505b3246d6bed2484db" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool SymbolTableInfo::computeGepOffset</definition>
        <argsstring>(const User *V, LocationSet &amp;ls)</argsstring>
        <name>computeGepOffset</name>
        <reimplementedby refid="class_s_v_f_1_1_loc_sym_table_info_1a4aa6bf984692e879ad12806d35a6d2be">computeGepOffset</reimplementedby>
        <param>
          <type>const User *</type>
          <declname>V</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Compute gep offset. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute gep offset </para>
        </detaileddescription>
        <inbodydescription>
<para>given a gep edge p = q + i,</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="414" column="18" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="248" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a6243a2a002784b2ee1f0b1cfe9d3ea0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * SymbolTableInfo::getBaseTypeAndFlattenedFields</definition>
        <argsstring>(const Value *V, std::vector&lt; LocationSet &gt; &amp;fields)</argsstring>
        <name>getBaseTypeAndFlattenedFields</name>
        <param>
          <type>const Value *</type>
          <declname>V</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Get the base type and max offset. </para>
        </briefdescription>
        <detaileddescription>
<para>Find the base type and the max possible offset for an object pointed to by (V). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="416" column="16" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="343" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1ac26583169a343e7a9f751e4ec60f7b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SymbolTableInfo::getFields</definition>
        <argsstring>(std::vector&lt; LocationSet &gt; &amp;fields, const Type *T, u32_t msz)</argsstring>
        <name>getFields</name>
        <param>
          <type>std::vector&lt; <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>msz</declname>
        </param>
        <briefdescription>
<para>Replace fields with flatten fields of T if the number of its fields is larger than msz. </para>
        </briefdescription>
        <detaileddescription>
<para>Replace fields with flatten fields of T if the number of its fields is larger than msz. </para>
        </detaileddescription>
        <inbodydescription>
<para>Replace fields with T&apos;s flatten fields.</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="418" column="11" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="320" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aa99cab5480116905dd41ab0ad24b9462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::collectTypeInfo</definition>
        <argsstring>(const Type *T)</argsstring>
        <name>collectTypeInfo</name>
        <param>
          <type>const Type *</type>
          <declname>T</declname>
          <defname>ty</defname>
        </param>
        <briefdescription>
<para>Collect type info. </para>
        </briefdescription>
        <detaileddescription>
<para>Collect a LLVM type info </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="420" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="115" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1a480a7565dcb5d9a94f4b0ffb44b127ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref></type>
        <definition>LocationSet SymbolTableInfo::getModulusOffset</definition>
        <argsstring>(const MemObj *obj, const LocationSet &amp;ls)</argsstring>
        <name>getModulusOffset</name>
        <reimplementedby refid="class_s_v_f_1_1_loc_sym_table_info_1a81763320f531da09014b4f5019dc8144">getModulusOffset</reimplementedby>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_mem_obj" kindref="compound">MemObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_location_set" kindref="compound">LocationSet</ref> &amp;</type>
          <declname>ls</declname>
        </param>
        <briefdescription>
<para>Given an offset from a Gep Instruction, return it modulus offset by considering memory layout. </para>
        </briefdescription>
        <detaileddescription>
<para>Get modulus offset given the type information </para>
        </detaileddescription>
        <inbodydescription>
<para>if the offset is negative, it&apos;s possible that we&apos;re looking for an obj node out of range of current struct. Make the offset positive so we can still get a node within current struct to represent this obj.</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="422" column="25" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="396" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_symbol_table_info_1aa40ff2fcaba3d4297d63269b74738737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SymbolTableInfo::printFlattenFields</definition>
        <argsstring>(const Type *type)</argsstring>
        <name>printFlattenFields</name>
        <param>
          <type>const Type *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Debug method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>All rest types are scalar type?</para>
        </inbodydescription>
        <location file="include/SVF-FE/SymbolTableInfo.h" line="425" column="10" bodyfile="lib/SVF-FE/SymbolTableInfo.cpp" bodystart="941" bodyend="1009"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Symbol table of the memory model for analysis </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::SymbolTableInfo</label>
        <link refid="class_s_v_f_1_1_symbol_table_info"/>
      </node>
      <node id="2">
        <label>SVF::LocSymTableInfo</label>
        <link refid="class_s_v_f_1_1_loc_sym_table_info"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/SVF-FE/SymbolTableInfo.h" line="42" column="1" bodyfile="include/SVF-FE/SymbolTableInfo.h" bodystart="43" bodyend="446"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a05ca2987d9f8716c24e489bec53502f4" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>blackholeSymID</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a1689fa03795200b501ae3887906e7e72" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>blkPtrSymID</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a74481bb26d77d8c8bca91efd3e23c08e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>buildMemModel</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a05a05894819e9cad6ee0033a6695e35e" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>callSiteSet</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a1b5fe6a59527983c80906261190fc864" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a52fa7c8a2c7064b415f373fdea0fdf69" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>CallSiteToIDMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aea1c4ec32c307feb5da455a41cc51b5e" prot="protected" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>collectArrayInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1af639e9bc59f5fb9a6bf1748ef0d07d5e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ae4a7d078322e99af965193c82b357239" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectRet</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1abf7567c655499d6744de8df689c11fad" prot="protected" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>collectSimpleTypeInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ab5297b79a02d8afce647a8b61bdab804" prot="protected" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>collectStructInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a7c422651a6cb299b0c94a2e4597fbe7c" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aa99cab5480116905dd41ab0ad24b9462" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectTypeInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a135ec0f7574d4bcb4bc411ce5775f1f5" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectVal</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ae1fe33260d2a2d21f2c33aaf1b58fee3" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>collectVararg</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a86b742ca197b3505b3246d6bed2484db" prot="public" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>computeGepOffset</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ab582424fdb6d9674c1bd4466cdfbe497" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>constantSymID</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a6d14f88dbbb3190fd37b4cf4e1b6e032" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>createBlkOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a2fede86948eeb07aacfed2575ea329d1" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>createDummyObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a87cc3289dd69e5378487dd9ae2c9e82e" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ae577a32079a8e95d0185bfc45d919635" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>dl</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ada2191cb0e3798ba29aa442dca762290" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>FunToIDMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a6243a2a002784b2ee1f0b1cfe9d3ea0f" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getBaseTypeAndFlattenedFields</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aebf96274e1ad2a523981487839a3025e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getBlkObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1adc8e9a6cd5d27391beb1a88706e77a77" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getCallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a661eb9ff1839c3af942517808414202b" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getConstantObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a5fad3e11fbba831ed0940fb715e7dc2d" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getDataLayout</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1abfad1554a3803ff131f2a8682f329354" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getFattenFieldIdxVec</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a5ff8a2f4afdb2cc26be0430f0310815b" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getFattenFieldOffsetVec</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ac26583169a343e7a9f751e4ec60f7b3d" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getFields</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aed11023ad3dfe7c5f5c559e2f2b23e23" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getFlattenFieldInfoVec</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a1e2a66bd0cd01ff957ac50b22a2a8735" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getGlobalRep</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1abc7e567209010286a68634c700d76cca" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getMaxStructSize</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a89e9c6da843e5eef25c51afd5d0937e5" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getModelConstants</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a40387a4893ae5caf58d6f786533d2f44" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getModule</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a480a7565dcb5d9a94f4b0ffb44b127ee" prot="public" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>getModulusOffset</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a65f49178a948380c2d6105178509a906" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1afca5a68d1825326e3ec6302ce0afee66" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getObjSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a294a42ee0bc466104fb96a3136c34bd2" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getOrigSubTypeWithByteOffset</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aa203d9bb3c3e567ff49a2beb19631de2" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getOrigSubTypeWithFldInx</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1afc8b0b6aea972f34a0c099b75114b81e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getRetSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a90bca8ff906ea48fb5e3a69da463ccab" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getStructInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a075a16b154514e282fcdd6f116a99e43" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getStructInfoIter</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a7dda4943de0ed174a1d20fcdfde6c61c" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getTotalSymNum</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1af4239ff717303dee25f1f4ba60070f9e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getTypeSizeInBytes</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ada63ac47515daa4402914083058baec8" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getTypeSizeInBytes</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aec7ee137f828c9d61a11df7fc2241161" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getValSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aec3fd21a11f760ca8684e390c6948f02" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>getVarargSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ad92842613ac245ad06875a012a5549ab" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>handleCE</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a4d616d922793e1d74bb4143f2d72bf10" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>handleGlobalCE</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a005df6b86f4058114bf7a336e73e63df" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>handleGlobalInitializerCE</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1acbcd5035240fab0b809c3334a27159ae" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>hasValSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a5af399ccac6ec809ade8f778379027bb" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>IDToCallSiteMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a0371b60485199175b011cf3a42b404aa" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>IDToMemMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a929a20dc8f2eb4d82e93938b8339d697" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>idToObjMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a9353c7d2c0d6ae7dc495911b1ce24e06" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>IDToSymTyMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ab15112d3900f28525848cbe5fad37deb" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isBlackholeSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ad9cdb21e20182f3bc95f04bbb97712f3" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isBlkObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a2fc4bfb83b71a4c14e16168382cb8f5d" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isBlkObjOrConstantObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1acba43b6e9cdf07afaf3d30351aa8df7c" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isBlkPtr</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a704b917b1e1dbaf9cd758fa9acc1083b" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isConstantObj</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a61bda1c1c52fb765d0027d8141d35c35" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isConstantObjSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ad095e4a569d399cadc03ce864f61c394" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isNullPtr</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a65a7e9d6d238a04291cb7d0aa15ece90" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>isNullPtrSym</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a9b8b7ecb217c7395025231b04e7b4c26" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>maxFieldLimit</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a4e33a01e203f07a8154af6ee65f5ba46" prot="protected" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>maxStruct</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1abb8550c9ef856e45cb7675c3796f9a35" prot="protected" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>maxStSize</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1af8fdaaa03cd2ae9b7d50f57bc678b8ba" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>mod</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ad20ccb90e8f9dee488a8aec0600399dc" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>modelConstants</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1adaed6e68c2f53260ed4c4fc38b5c4721" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>nullPtrSymID</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aeab14702eabde827923a692cba8f7f8a" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>objMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a5840b742ed8c73ece548b9b4aede07ec" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>objSymMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a3f9612f32c651220386beb0514f8fcff" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>objSyms</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aa6c39360aa4d55ae3a4a8b6f2a0035f2" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>prePassSchedule</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aa40ff2fcaba3d4297d63269b74738737" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>printFlattenFields</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a9f8d99c761f3c7108d797b3702fcbfec" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>releaseSymbolInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aafd4da7cef6387bb974abe20185b7b96" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>retSyms</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ae6f8a4dbe09ff4756983ffdbed6d0681" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>returnSymMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a4decfc9e7f5dc096d7bfa42d6965763d" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>setModelConstants</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a267169023fc4f8dd66b145f7231fec11" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>SymbolInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1aff272bc1d00f2e57b7677d1826a31237" prot="protected" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>SymbolTableInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a4fbb8ea4b4796d10d13c027b7455505c" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>symInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a2680e554af6153cbe8521425c1fbb123" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>symTyMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a71a7084f88f2b303381c89769b53573a" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>totalSymNum</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ad8b9fa0a4e4b91efb80586e692bd0dcd" prot="protected" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>typeToFieldInfo</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a9c9a9da876d41ab48e55f25efc266494" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>TypeToFieldInfoMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a5054f95a7b77257ffb283044aab17b08" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>valSymMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a8f3cb8a1db34dd692ee04561f4edeebf" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>valSyms</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a03a11c48d748990ddac1ac5866ecb48e" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>ValueToIDMapTy</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a94c06e5ac0b50989743a9e63c9a6d5b9" prot="private" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>varargSymMap</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1ac449cd925dc05758c990179c0748e1d5" prot="public" virt="non-virtual"><scope>SVF::SymbolTableInfo</scope><name>varargSyms</name></member>
      <member refid="class_s_v_f_1_1_symbol_table_info_1a6efac0ae8ebf2865067136675be5a340" prot="public" virt="virtual"><scope>SVF::SymbolTableInfo</scope><name>~SymbolTableInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
