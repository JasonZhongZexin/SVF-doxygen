<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_pointer_analysis" xml:lang="en-US">
<title>SVF::PointerAnalysis Class Reference</title>
<indexterm><primary>SVF::PointerAnalysis</primary></indexterm>
<para>Inheritance diagram for SVF::PointerAnalysis:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_pointer_analysis.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> { 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49">Andersen_BASE</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6">Andersen_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4">AndersenLCD_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f">AndersenHCD_WPA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f">AndersenHLCD_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1">AndersenSCD_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b">AndersenSFR_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2">AndersenWaveDiff_WPA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f">AndersenWaveDiffWithType_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a">Steensgaard_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09">CSCallString_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27">CSSummary_WPA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322">FSDATAFLOW_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78">FSSPARSE_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203">FSTBHC_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9">VFS_WPA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82">FSCS_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4">FSCSPS_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda">ADAPTFSCS_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada">ADAPTFSCSPS_WPA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3">TypeCPP_WPA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61">FieldS_DDA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18">FlowS_DDA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58">PathS_DDA</link>
, 
<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8">Cxt_DDA</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790">Default_PTA</link>
 }</para>

<para>Pointer analysis type list. </para>
</listitem>
            <listitem><para>enum <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d">PTAImplTy</link> { <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a">BaseImpl</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8">BVDataImpl</link>
, <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292">CondImpl</link>
 }</para>

<para>Implementation type: <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> or <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl">CondPTAImpl</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f"/>typedef llvm::AliasAnalysis <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac87eb408daafd5d556ecd8633f7d4f1f">AliasAnalysis</link></para>

<para>Indirect call edges type, map a callsite to a set of callees. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a1f5f2ecf1e893759633ffec1b23d5650"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * &gt; <emphasis role="strong">CallSiteSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1afc2e412fe96c1fad268ba0255a2042e7"/>typedef PAG::CallSiteToFunPtrMap <emphasis role="strong">CallSiteToFunPtrMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac1422cd8b449fdb4a1f7c539364e4c41"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * &gt; <emphasis role="strong">FunctionSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aa9661d26d1ae9c829a9296d1b6d874f4"/>typedef OrderedMap&lt; const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *, FunctionSet &gt; <emphasis role="strong">CallEdgeMap</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac4ad73782f42f90ad7ac9c66edb27c69"/>typedef <link linkend="_class_s_v_f_1_1_s_c_c_detection">SCCDetection</link>&lt; <link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * &gt; <emphasis role="strong">CallGraphSCC</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1af46f4b99fc2d5061c9266a7f45aafaca"/>typedef Set&lt; const GlobalValue * &gt; <emphasis role="strong">VTableSet</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aa7f15c74eb438be78fcc028534477478"/>typedef Set&lt; const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * &gt; <emphasis role="strong">VFunSet</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b"/>Size_t <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac522df904e702381222a4d9b205c775b">getNumOfResolvedIndCallEdge</link> () const</para>

<para>Return number of resolved indirect call edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a7c9b7e5fe37ae31ba84d167945ca57df">getPTACallGraph</link> () const</para>

<para>Return call graph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">CallGraphSCC</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0bddf297a2d8cd59ce9a232f0229f248">getCallGraphSCC</link> () const</para>

<para>Return call graph SCC. </para>
</listitem>
            <listitem><para><link linkend="_class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477">PointerAnalysis</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *<link linkend="_class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49">pag</link>, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> ty=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790">Default_PTA</link>, bool alias_check=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3"/><link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac23f71c1307cda9cba44acc40059f0a3">getAnalysisTy</link> () const</para>

<para>Type of pointer analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e"/><link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d">PTAImplTy</link> <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0f821cfe4fb9c9c8816e7a1b1bc0c5e">getImplTy</link> () const</para>

<para>Return implementation type of the pointer analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183"/>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a4880571f57542afc50da506dfe273183">printStat</link> ()</para>

<para>Whether print statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2"/>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1af44b14fed89918847c0228c1100c56d2">disablePrintStat</link> ()</para>

<para>Whether print statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe"/>CallEdgeMap &amp; <link linkend="_class_s_v_f_1_1_pointer_analysis_1a1ca30dfa42702071b65d363c76d25cbe">getIndCallMap</link> ()</para>

<para>Get callees from an indirect callsite. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a8d3a457efb1963f8d87305bf33c02754"/>bool <emphasis role="strong">hasIndCSCallees</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a9e473e97a0bad49996faacbc05be7e68"/>const FunctionSet &amp; <emphasis role="strong">getIndCSCallees</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f">resolveIndCalls</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const PointsTo &amp;target, CallEdgeMap &amp;newEdges, LLVMCallGraph *callgraph=NULL)</para>

<para>Resolve indirect call edges. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129">matchArgs</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *callee)</para>

<para>Match arguments for callsite at caller and callee. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795">callGraphSCCDetection</link> ()</para>

<para>CallGraph SCC related methods. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8"/>NodeID <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae8190ce12fb0c6360953f4b05047fbe8">getCallGraphSCCRepNode</link> (NodeID id) const</para>

<para>Get SCC rep node of a <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67"/>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae58c2b25494ec51e714c83c6cfd5dd67">inSameCallGraphSCC</link> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun1, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun2)</para>

<para>Return TRUE if this edge is inside a CallGraph SCC, i.e., src node and dst node are in the same SCC on the <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aa725a0c9426e8615cbc078c88561f66a"/>bool <emphasis role="strong">isInRecursion</emphasis> (const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> *fun) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8">isLocalVarInRecursiveFun</link> (NodeID id) const</para>

<para>Whether a local variable is in function recursions. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0"/>virtual const std::string <link linkend="_class_s_v_f_1_1_pointer_analysis_1aed4e5066f6ddef83afaf60adbcc11de0">PTAName</link> () const</para>

<para>Return PTA name. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5"/><link linkend="_class_s_v_f_1_1_common_c_h_graph">CommonCHGraph</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae2cc7cd0803dbd90639140e71b06b1b5">getCHGraph</link> () const</para>

<para>get <link linkend="_class_s_v_f_1_1_c_h_graph">CHGraph</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0e09e07ee52ba605dc386ae1d7b965e2"/>void <emphasis role="strong">getVFnsFromCHA</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, VFunSet &amp;vfns)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a8fa5b8a7b410faf63106a879ff72bf51"/>void <emphasis role="strong">getVFnsFromPts</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const PointsTo &amp;target, VFunSet &amp;vfns)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a8ff3f219b9f118a4f06360750408c9cb"/>void <emphasis role="strong">connectVCallToVFns</emphasis> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const VFunSet &amp;vfns, CallEdgeMap &amp;newEdges)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818"/>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac9f54859eabff4c1e1f5785d57a0c818">resolveCPPIndCalls</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const PointsTo &amp;target, CallEdgeMap &amp;newEdges)</para>

<para>Resolve cpp indirect call edges. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe"/>const <link linkend="_class_s_v_f_1_1_type_system">TypeSystem</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae615dd279fbf681e3c15e7209e3adfbe">getTypeSystem</link> () const</para>

<para>get <link linkend="_class_s_v_f_1_1_type_system">TypeSystem</link> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a7648a0358e2c0798db1c547ec7aa7c64"/>static const std::string <emphasis role="strong">aliasTestMayAlias</emphasis> = &quot;MAYALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a13ce6b930a35877f17bffd4b89e22654"/>static const std::string <emphasis role="strong">aliasTestMayAliasMangled</emphasis> = &quot;_Z8MAYALIASPvS_&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac353221cc7aced590dcf3550a24b1570"/>static const std::string <emphasis role="strong">aliasTestNoAlias</emphasis> = &quot;NOALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0e68883e2ee328315af29e59bb2008cd"/>static const std::string <emphasis role="strong">aliasTestNoAliasMangled</emphasis> = &quot;_Z7NOALIASPvS_&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a83b0a51d88fa7aadff6e9267765d07a5"/>static const std::string <emphasis role="strong">aliasTestPartialAlias</emphasis> = &quot;PARTIALALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1acbb517523fd30708ed1a93f306cd3545"/>static const std::string <emphasis role="strong">aliasTestPartialAliasMangled</emphasis> = &quot;_Z12PARTIALALIASPvS_&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a7477a4301d548b93958e57df389cbba0"/>static const std::string <emphasis role="strong">aliasTestMustAlias</emphasis> = &quot;MUSTALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aec884481726cfaf19c4ab8ec8d9195b7"/>static const std::string <emphasis role="strong">aliasTestMustAliasMangled</emphasis> = &quot;_Z9MUSTALIASPvS_&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a32c6f12ce8bc0554dbb6aafa36f9a235"/>static const std::string <emphasis role="strong">aliasTestFailMayAlias</emphasis> = &quot;EXPECTEDFAIL_MAYALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a651cc82379c2d18cc2f69f25b2ae08db"/>static const std::string <emphasis role="strong">aliasTestFailMayAliasMangled</emphasis> = &quot;_Z21EXPECTEDFAIL_MAYALIASPvS_&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a18347e41bc66b16e3f42c7c52811ad42"/>static const std::string <emphasis role="strong">aliasTestFailNoAlias</emphasis> = &quot;EXPECTEDFAIL_NOALIAS&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aefd4e9ea66da5ad84a45efead823eb22"/>static const std::string <emphasis role="strong">aliasTestFailNoAliasMangled</emphasis> = &quot;_Z20EXPECTEDFAIL_NOALIASPvS_&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d">print_stat</link></para>

<para>User input flags. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e"/>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1aac1a133d478bd14c74309d9c4eaf0c8e">alias_validation</link></para>

<para>Flag for validating points-to/alias results. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac"/>u32_t <link linkend="_class_s_v_f_1_1_pointer_analysis_1afc320fbf269404fe128e69c98e6f9cac">OnTheFlyIterBudgetForStat</link></para>

<para>Flag for iteration budget for on-the-fly statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5"/><link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a7e8b3f6843e5ea75fd189162d2cd60a5">svfMod</link></para>

<para>Module. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4"/><link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> <link linkend="_class_s_v_f_1_1_pointer_analysis_1ade83738ac754d5ffc2a3b497b600cad4">ptaTy</link></para>

<para>Pointer analysis Type. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36"/><link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d">PTAImplTy</link> <link linkend="_class_s_v_f_1_1_pointer_analysis_1a5d3c3094e263bf16a4f312a118c1bd36">ptaImplTy</link></para>

<para>PTA implementation type. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f"/><link linkend="_class_s_v_f_1_1_p_t_a_stat">PTAStat</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a5ec3d9bf1fc81346c9df29638daedc0f">stat</link></para>

<para>Statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe"/><link linkend="_class_s_v_f_1_1_p_t_a_call_graph">PTACallGraph</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1ad47b39252e02c68dfb466d4f42dc7ebe">ptaCallGraph</link></para>

<para>Call graph used for pointer analysis. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63"/><link linkend="_class_s_v_f_1_1_s_c_c_detection">CallGraphSCC</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae3b651799345d9d92b6d736dafb03f63">callGraphSCC</link></para>

<para>SCC for CallGraph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2"/><link linkend="_class_s_v_f_1_1_i_c_f_g">ICFG</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a962cc91e4d68b25ce201072c384d8fc2">icfg</link></para>

<para>Interprocedural control-flow graph. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed"/><link linkend="_class_s_v_f_1_1_type_system">TypeSystem</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a219baed92b811d5519b056ad393fceed">typeSystem</link></para>

<para><link linkend="_class_s_v_f_1_1_type_system">TypeSystem</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49"/>static <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a8771956f7595b66d825b3dc459d1ae49">pag</link> = NULL</para>

<para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd"/>static <link linkend="_class_s_v_f_1_1_common_c_h_graph">CommonCHGraph</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a251638a947815a8ff91a507486cadfcd">chgraph</link> = NULL</para>

<para><link linkend="_class_s_v_f_1_1_c_h_graph">CHGraph</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71">getPAG</link> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad"/><link linkend="_class_s_v_f_1_1_p_t_a_stat">PTAStat</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0ebf1138011aa526d92470c1931313ad">getStat</link> () const</para>

<para>Get PTA stat. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433"/><link linkend="_class_s_v_f_1_1_s_v_f_module">SVFModule</link> * <link linkend="_class_s_v_f_1_1_pointer_analysis_1ad8b71cebf46deaf60e2cd4f6d6bb9433">getModule</link> () const</para>

<para>Module. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc"/>OrderedNodeSet &amp; <link linkend="_class_s_v_f_1_1_pointer_analysis_1a60b111647e000cc983aa52513f90afbc">getAllValidPtrs</link> ()</para>

<para>Get all Valid Pointers for resolution. </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c">~PointerAnalysis</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32">initialize</link> ()</para>

<para>Initialization of a pointer analysis, including building symbol table and <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> etc. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166">finalize</link> ()</para>

<para>Finalization of a pointer analysis, including checking alias correctness. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6"/>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae1e217dc18be0ce70bee5ad930cb54c6">analyze</link> ()=0</para>

<para>Start Analysis here (main part of pointer analysis). It needs to be implemented in child class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d"/>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0bb90b398ef85504bcd816ae57bee01d">computeDDAPts</link> (NodeID)</para>

<para>Compute points-to results on-demand, overridden by derived classes. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1"/>virtual AliasResult <link linkend="_class_s_v_f_1_1_pointer_analysis_1abd9da46106d820721a24201caaa164e1">alias</link> (const MemoryLocation &amp;LocA, const MemoryLocation &amp;LocB)=0</para>

<para>Interface exposed to users of our pointer analysis, given Location infos. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8"/>virtual AliasResult <link linkend="_class_s_v_f_1_1_pointer_analysis_1a6c01f259ad2379a422d7106ce0255eb8">alias</link> (const Value *V1, const Value *V2)=0</para>

<para>Interface exposed to users of our pointer analysis, given Value infos. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf"/>virtual AliasResult <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0f712ead1f31750879948c36b2fc77cf">alias</link> (NodeID node1, NodeID node2)=0</para>

<para>Interface exposed to users of our pointer analysis, given PAGNodeID. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec"/>virtual const PointsTo &amp; <link linkend="_class_s_v_f_1_1_pointer_analysis_1a4dfb43679e9fa794ebad99b6584c32ec">getPts</link> (NodeID ptr)=0</para>

<para>Get points-to targets of a pointer. It needs to be implemented in child class. </para>
</listitem>
            <listitem><para>virtual const NodeSet &amp; <link linkend="_class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280">getRevPts</link> (NodeID nodeId)=0</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a"/>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a3f78f60e1947a6d6fbcd3a0ee11e262a">clearPts</link> ()</para>

<para>Clear points-to data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9">printIndCSTargets</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs, const FunctionSet &amp;targets)</para>

<para>Print targets of a function pointer. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a627bdc95485fd65e8846fcaa5e89559f"/>virtual void <emphasis role="strong">dumpTopLevelPtsTo</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a861554c2fdeaa406131c2c920b4c7908"/>virtual void <emphasis role="strong">dumpAllPts</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ad409cbf61271743394b9e5868f3fd197"/>virtual void <emphasis role="strong">dumpCPts</emphasis> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d">dumpPts</link> (NodeID ptr, const PointsTo &amp;pts)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3">printIndCSTargets</link> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a08399de593c073b6dd848a8d849dad27"/>void <emphasis role="strong">dumpAllTypes</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866"/>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1ab83b827ea42d3a61aad20b1a1485d866">dumpStat</link> ()</para>

<para>Dump the statistics. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063"/>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a56368369bc37e37b13f19e5eb1890063">containBlackHoleNode</link> (const PointsTo &amp;pts)</para>

<para>Determine whether a points-to contains a black hole or constant node. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1afa7d9f6209904acd7893ae583e28dafd"/>bool <emphasis role="strong">containConstantNode</emphasis> (const PointsTo &amp;pts)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a45462312a746339fff8b990a093d9a1b"/>virtual bool <emphasis role="strong">isBlkObjOrConstantObj</emphasis> (NodeID ptd) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a9d3b20c9883d734537fb98b57b5372b9"/>bool <emphasis role="strong">isNonPointerObj</emphasis> (NodeID ptd) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361"/>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1ae6ea391ac44dffeb6899bb44323c5361">isHeapMemObj</link> (NodeID id) const</para>

<para>Whether this object is heap or array. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a89dfeedf8e3e91603a1e9c73e3608a73"/>bool <emphasis role="strong">isArrayMemObj</emphasis> (NodeID id) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816">isFIObjNode</link> (NodeID id) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a8008bdef087708de961a37a8bf458fc7"/>NodeID <emphasis role="strong">getBaseObjNode</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a15494d0aa074ae2e89470b3c9f407cc4"/>NodeID <emphasis role="strong">getFIObjNode</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a6423e0d1bc9a5ee6bfea27a4a358574f"/>NodeID <emphasis role="strong">getGepObjNode</emphasis> (NodeID id, const <link linkend="_class_s_v_f_1_1_location_set">LocationSet</link> &amp;ls)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aeec490de5955497af1a2a9cd429f0d5d"/>virtual const NodeBS &amp; <emphasis role="strong">getAllFieldsObjNode</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac5683fe2e24b393ccc5cb6d8bc92cf2b"/>void <emphasis role="strong">setObjFieldInsensitive</emphasis> (NodeID id)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0f71e4cd0948b294c7d33a690bde7dbe"/>bool <emphasis role="strong">isFieldInsensitive</emphasis> (NodeID id) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a"/>const CallSiteToFunPtrMap &amp; <link linkend="_class_s_v_f_1_1_pointer_analysis_1a9d3e7753643166465b0d647a75bc145a">getIndirectCallsites</link> () const</para>

<para>Return all indirect callsites. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3"/>NodeID <link linkend="_class_s_v_f_1_1_pointer_analysis_1a74df51017ceaa389de2c2f33f3522fc3">getFunPtr</link> (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *cs) const</para>

<para>Return function pointer <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> at a callsite cs. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df">validateTests</link> ()</para>

<para>Alias check functions to verify correctness of pointer analysis. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8">validateSuccessTests</link> (std::string fun)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc">validateExpectedFailureTests</link> (std::string fun)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5">dumpGraph</link> ()</para>

<para>Whether to dump the graph for debugging purpose. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13">resetObjFieldSensitive</link> ()</para>

<para>Reset all object node as field-sensitive. </para>
</listitem>
        </itemizedlist>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d"/>    <section>
    <title>PTAImplTy</title>
<indexterm><primary>PTAImplTy</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>PTAImplTy</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4d">SVF::PointerAnalysis::PTAImplTy</link></computeroutput></para><para>

<para>Implementation type: <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link> or <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl">CondPTAImpl</link>. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>BaseImpl</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>BaseImpl</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da66b132e5ab8c8746eb22e58d199b4c2a"/>BaseImpl</entry><entry>
<para>Represents PointerAnalaysis. </para>
</entry></row><row><entry><indexterm><primary>BVDataImpl</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>BVDataImpl</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da84705167ea3a7162ecb9470a8a77b5d8"/>BVDataImpl</entry><entry>
<para>Represents <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl">BVDataPTAImpl</link>. </para>
</entry></row><row><entry><indexterm><primary>CondImpl</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>CondImpl</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ac0c0855918cb2cdc3d8ebc175acfbd4da88380bb05f60a1349e192364ba6c5292"/>CondImpl</entry><entry>
<para>Represents <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl">CondPTAImpl</link>. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85"/>    <section>
    <title>PTATY</title>
<indexterm><primary>PTATY</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>PTATY</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">SVF::PointerAnalysis::PTATY</link></computeroutput></para><para>

<para>Pointer analysis type list. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>Andersen_BASE</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>Andersen_BASE</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a9a25374fb6d2218c6c59de0482548f49"/>Andersen_BASE</entry><entry>
<para>Base <link linkend="_class_s_v_f_1_1_andersen">Andersen</link> PTA. </para>
</entry></row><row><entry><indexterm><primary>Andersen_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>Andersen_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ab68615784a520e39856be5237930e6a6"/>Andersen_WPA</entry><entry>
<para><link linkend="_class_s_v_f_1_1_andersen">Andersen</link> PTA. </para>
</entry></row><row><entry><indexterm><primary>AndersenLCD_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenLCD_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac7c033efd59e2b5fcded79fc3ebdb9d4"/>AndersenLCD_WPA</entry><entry>
<para>Lazy cycle detection andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>AndersenHCD_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenHCD_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a46f5e74d5f4b0a2d134e68d262079c3f"/>AndersenHCD_WPA</entry><entry>
<para>Hybird cycle detection andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>AndersenHLCD_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenHLCD_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a99d50c1712075e4c3278fc4fa4c9cd2f"/>AndersenHLCD_WPA</entry><entry>
<para>Hybird lazy cycle detection andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>AndersenSCD_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenSCD_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a6c06b12c95a4aa57edc6bef57514a7e1"/>AndersenSCD_WPA</entry><entry>
<para>Selective cycle detection andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>AndersenSFR_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenSFR_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b"/>AndersenSFR_WPA</entry><entry>
<para>Stride-based field representation. </para>
</entry></row><row><entry><indexterm><primary>AndersenWaveDiff_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenWaveDiff_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abf2f61ee9a5f6228db6587a8182ec9f2"/>AndersenWaveDiff_WPA</entry><entry>
<para>Diff wave propagation andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>AndersenWaveDiffWithType_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>AndersenWaveDiffWithType_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac581e279a4bd69c059b0e5987f839a1f"/>AndersenWaveDiffWithType_WPA</entry><entry>
<para>Diff wave propagation with type info andersen-style WPA. </para>
</entry></row><row><entry><indexterm><primary>Steensgaard_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>Steensgaard_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad24ef5326c26db858c73432aa7e67a0a"/>Steensgaard_WPA</entry><entry>
<para><link linkend="_class_s_v_f_1_1_steensgaard">Steensgaard</link> PTA. </para>
</entry></row><row><entry><indexterm><primary>CSCallString_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>CSCallString_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ac9e931f254fa3471f5f5337cbca1de09"/>CSCallString_WPA</entry><entry>
<para>Call string based context sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>CSSummary_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>CSSummary_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adf8fe4349f84779601a0b41659ca8e27"/>CSSummary_WPA</entry><entry>
<para>Summary based context sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>FSDATAFLOW_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FSDATAFLOW_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a62281bc39fea50a88e55edf605620322"/>FSDATAFLOW_WPA</entry><entry>
<para>Traditional Dataflow-based flow sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>FSSPARSE_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FSSPARSE_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85ad6ccf1ce66083278349c5c3111172d78"/>FSSPARSE_WPA</entry><entry>
<para>Sparse flow sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>FSTBHC_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FSTBHC_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a088dda60195ab259693977af8414f203"/>FSTBHC_WPA</entry><entry>
<para>Sparse flow-sensitive type-based heap cloning WPA. </para>
</entry></row><row><entry><indexterm><primary>VFS_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>VFS_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a412254a7738029bf3ee96f5c15a6bec9"/>VFS_WPA</entry><entry>
<para>Versioned sparse flow-sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>FSCS_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FSCS_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a43837619e78e03dc95ec6e88959faf82"/>FSCS_WPA</entry><entry>
<para>Flow-, context- sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>FSCSPS_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FSCSPS_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a30826fb1ddb602fd4439ca84eb73e8f4"/>FSCSPS_WPA</entry><entry>
<para>Flow-, context-, path- sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>ADAPTFSCS_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>ADAPTFSCS_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a859290ec941a06029f84ef249a5d2fda"/>ADAPTFSCS_WPA</entry><entry>
<para>Adaptive Flow-, context-, sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>ADAPTFSCSPS_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>ADAPTFSCSPS_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a42d52c9444028e72ea8e6dc0c8c08ada"/>ADAPTFSCSPS_WPA</entry><entry>
<para>Adaptive Flow-, context-, path- sensitive WPA. </para>
</entry></row><row><entry><indexterm><primary>TypeCPP_WPA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>TypeCPP_WPA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acc2e7cbdd04a614a3b6189d2f01042f3"/>TypeCPP_WPA</entry><entry>
<para>Type-based analysis for C++. </para>
</entry></row><row><entry><indexterm><primary>FieldS_DDA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FieldS_DDA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85abe1d8104c77bfe4bbc201a64410c7f61"/>FieldS_DDA</entry><entry>
<para>Field sensitive DDA. </para>
</entry></row><row><entry><indexterm><primary>FlowS_DDA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>FlowS_DDA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85aa43c83e2f0df003c158d4b1325b50b18"/>FlowS_DDA</entry><entry>
<para>Flow sensitive DDA. </para>
</entry></row><row><entry><indexterm><primary>PathS_DDA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>PathS_DDA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85acaf0c0774025005647deaf59582b9d58"/>PathS_DDA</entry><entry>
<para>Guarded value-flow DDA. </para>
</entry></row><row><entry><indexterm><primary>Cxt_DDA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>Cxt_DDA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85a0ab6564c48897595c9d23382a026e0a8"/>Cxt_DDA</entry><entry>
<para>context sensitive DDA </para>
</entry></row><row><entry><indexterm><primary>Default_PTA</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>Default_PTA</secondary></indexterm>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790"/>Default_PTA</entry><entry>
<para>default pta without any analysis </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1af42ef08568b1fa892f8f98c4421a0477"/>    <section>
    <title>PointerAnalysis()</title>
<indexterm><primary>PointerAnalysis</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>PointerAnalysis</secondary></indexterm>
<para><computeroutput>PointerAnalysis::PointerAnalysis (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> * p, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> ty = <computeroutput><link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85adb3d4cbd8c38c1c498bc51198626a790">Default_PTA</link></computeroutput>
, bool alias_check = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructor </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a4aeca84393c5586eea7a480737daf17c"/>    <section>
    <title>~PointerAnalysis()</title>
<indexterm><primary>~PointerAnalysis</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>~PointerAnalysis</secondary></indexterm>
<para><computeroutput>PointerAnalysis::~PointerAnalysis ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Destructor </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aafa5df4aa576a144476e547b1da35795"/>    <section>
    <title>callGraphSCCDetection()</title>
<indexterm><primary>callGraphSCCDetection</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>callGraphSCCDetection</secondary></indexterm>
<para><computeroutput>void SVF::PointerAnalysis::callGraphSCCDetection ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>CallGraph SCC related methods. </para>
</para>

<para>CallGraph SCC detection </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a3fd44d3cfc3f4ab18506870c65df32f5"/>    <section>
    <title>dumpGraph()</title>
<indexterm><primary>dumpGraph</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>dumpGraph</secondary></indexterm>
<para><computeroutput>bool PointerAnalysis::dumpGraph ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Whether to dump the graph for debugging purpose. </para>
</para>

<para>Flag in order to dump graph </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a1a6cee7e690ccb3e53cdc4c3e67b386d"/>    <section>
    <title>dumpPts()</title>
<indexterm><primary>dumpPts</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>dumpPts</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::dumpPts (NodeID ptr, const PointsTo &amp; pts)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Dump points-to of top-level pointers (<link linkend="_class_s_v_f_1_1_val_p_n">ValPN</link>) </para>

<para>print the points-to set of node which has the maximum pts size.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a118dabc50024b5cd91095814ade47166"/>    <section>
    <title>finalize()</title>
<indexterm><primary>finalize</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>finalize</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::finalize (void )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Finalization of a pointer analysis, including checking alias correctness. </para>
</para>

<para>Finalize the analysis after solving Given the alias results, verify whether it is correct or not using alias check functions </para>

<para>Print statistics</para>

<para>Dump results</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_versioned_flow_sensitive_1ad955fda89f4f749151a1bd14562b03f6">SVF::VersionedFlowSensitive</link>, <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a3564d6ad7e12e0a833b4cea203a809e4">SVF::FlowSensitiveTBHC</link>, <link linkend="_class_s_v_f_1_1_flow_d_d_a_1a5abae08577ab24684653421dc712431a">SVF::FlowDDA</link>, <link linkend="_class_s_v_f_1_1_context_d_d_a_1ae34cd06ee3b7d763c81ec418af76d244">SVF::ContextDDA</link>, <link linkend="_class_s_v_f_1_1_type_analysis_1a8efef079c8b33e2215f92ac3629789e6">SVF::TypeAnalysis</link>, <link linkend="_class_s_v_f_1_1_flow_sensitive_1afed358369102f01f6fe88b1433e704c3">SVF::FlowSensitive</link>, <link linkend="_class_s_v_f_1_1_andersen_1ad90c8cf193bd81870ce8dd88c9580e2c">SVF::Andersen</link>, <link linkend="_class_s_v_f_1_1_andersen_base_1a099dad1149eb2e3f8068ef23870005a8">SVF::AndersenBase</link>, <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d">SVF::CondPTAImpl&lt; Cond &gt;</link>, and <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl_1a9bdc3a50c695029a28371116ddc3ef8d">SVF::CondPTAImpl&lt; ContextCond &gt;</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1aaf6b41f44da3a4caea1fa395e41edf71"/>    <section>
    <title>getPAG()</title>
<indexterm><primary>getPAG</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>getPAG</secondary></indexterm>
<para><computeroutput><link linkend="_class_s_v_f_1_1_p_a_g">PAG</link>* SVF::PointerAnalysis::getPAG ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Get/set <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ad9af9655a13f3faeaf265ba370d1f280"/>    <section>
    <title>getRevPts()</title>
<indexterm><primary>getRevPts</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>getRevPts</secondary></indexterm>
<para><computeroutput>virtual const NodeSet&amp; SVF::PointerAnalysis::getRevPts (NodeID nodeId)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Given an object, get all the nodes having whose pointsto contains the object. Similar to getPts, this also needs to be implemented in child classes. </para>
<para>
Implemented in <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9">SVF::CondPTAImpl&lt; Cond &gt;</link>, <link linkend="_class_s_v_f_1_1_cond_p_t_a_impl_1aa266eef30817c557882de19aefe135a9">SVF::CondPTAImpl&lt; ContextCond &gt;</link>, and <link linkend="_class_s_v_f_1_1_b_v_data_p_t_a_impl_1a58113943e4e7144d94d26991dcc8bcc7">SVF::BVDataPTAImpl</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a431ec4f85eb0f029e5740b92fd9ceb32"/>    <section>
    <title>initialize()</title>
<indexterm><primary>initialize</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>initialize</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::initialize ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Initialization of a pointer analysis, including building symbol table and <link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> etc. </para>
</para>

<para>Initialization of pointer analysis </para>

<para>initialise pta call graph for every pointer analysis instance</para>
<para>
Reimplemented in <link linkend="_class_s_v_f_1_1_versioned_flow_sensitive_1a81d3528fd082018e4345f0b026bf3584">SVF::VersionedFlowSensitive</link>, <link linkend="_class_s_v_f_1_1_flow_sensitive_t_b_h_c_1a4c5fb70aafc3a589b7b1e82ba8f61a6f">SVF::FlowSensitiveTBHC</link>, <link linkend="_class_s_v_f_1_1_flow_d_d_a_1af1fcf058a9feefeda63f07d4189513a1">SVF::FlowDDA</link>, <link linkend="_class_s_v_f_1_1_context_d_d_a_1adb9f21a86daeb2dd79537f3939c393cf">SVF::ContextDDA</link>, <link linkend="_class_s_v_f_1_1_type_analysis_1a34177236a41f7a2b432243062f829985">SVF::TypeAnalysis</link>, <link linkend="_class_s_v_f_1_1_flow_sensitive_1ad6243c1317503bed39411dab47c83da7">SVF::FlowSensitive</link>, <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1a3b255068b3ea53041af94fd373a53bd4">SVF::AndersenSFR</link>, <link linkend="_class_s_v_f_1_1_andersen_h_l_c_d_1a5926080868429040f5142843f01a2a5c">SVF::AndersenHLCD</link>, <link linkend="_class_s_v_f_1_1_andersen_h_c_d_1aaac9cac7fc5696adb585abd9d67f8c14">SVF::AndersenHCD</link>, <link linkend="_class_s_v_f_1_1_andersen_1a20617a69c112ad423b1b5021e48a8548">SVF::Andersen</link>, and <link linkend="_class_s_v_f_1_1_andersen_base_1a4d3496c305281d7fb423db21e38cf690">SVF::AndersenBase</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1af90d2ccb01402c5ca9d7a059f345c816"/>    <section>
    <title>isFIObjNode()</title>
<indexterm><primary>isFIObjNode</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>isFIObjNode</secondary></indexterm>
<para><computeroutput>bool SVF::PointerAnalysis::isFIObjNode (NodeID id) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>For field-sensitivity </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a108380f6f0b67654bb7c7676686096c8"/>    <section>
    <title>isLocalVarInRecursiveFun()</title>
<indexterm><primary>isLocalVarInRecursiveFun</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>isLocalVarInRecursiveFun</secondary></indexterm>
<para><computeroutput>bool PointerAnalysis::isLocalVarInRecursiveFun (NodeID id) const</computeroutput></para><para>

<para>Whether a local variable is in function recursions. </para>
</para>

<para>Return TRUE if this node is a local variable of recursive function. </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a521f99705f67e3fea7167728a4e37129"/>    <section>
    <title>matchArgs()</title>
<indexterm><primary>matchArgs</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>matchArgs</secondary></indexterm>
<para><computeroutput>bool PointerAnalysis::matchArgs (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * cs, const <link linkend="_class_s_v_f_1_1_s_v_f_function">SVFFunction</link> * callee)</computeroutput></para><para>

<para>Match arguments for callsite at caller and callee. </para>
</para>

<para>Match arguments for callsite at caller and callee </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a062f1f2d6d47694caa9ac64a9e68c7b3"/>    <section>
    <title>printIndCSTargets()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>printIndCSTargets</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>printIndCSTargets</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::printIndCSTargets ( )</computeroutput></para>
<para>Print all indirect callsites </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a28bcd16249c04eea2d13fafd2bcaf9d9"/>    <section>
    <title>printIndCSTargets()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>printIndCSTargets</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>printIndCSTargets</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::printIndCSTargets (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * cs, const FunctionSet &amp; targets)</computeroutput></para><para>

<para>Print targets of a function pointer. </para>
</para>

<para>Print indirect call targets at an indirect callsite </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a73fb8e595473e0c7df1dd0de4968ad13"/>    <section>
    <title>resetObjFieldSensitive()</title>
<indexterm><primary>resetObjFieldSensitive</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>resetObjFieldSensitive</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::resetObjFieldSensitive ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Reset all object node as field-sensitive. </para>
</para>

<para>Reset field sensitivity </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1acca7b86bb199f9b3da72f100c3e55e0f"/>    <section>
    <title>resolveIndCalls()</title>
<indexterm><primary>resolveIndCalls</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>resolveIndCalls</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::resolveIndCalls (const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> * cs, const PointsTo &amp; target, CallEdgeMap &amp; newEdges, LLVMCallGraph * callgraph = <computeroutput>NULL</computeroutput>
)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Resolve indirect call edges. </para>
</para>

<para>Resolve indirect calls </para>

<para>discover indirect pointer target</para>

<para>if the arg size does not match then we do not need to connect this parameter even if the callee is a variadic function (the first parameter of variadic function is its paramter number)</para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1ab982e6bbd99a2f9a0a3abbebeeb00dcc"/>    <section>
    <title>validateExpectedFailureTests()</title>
<indexterm><primary>validateExpectedFailureTests</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>validateExpectedFailureTests</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::validateExpectedFailureTests (std::string fun)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Pointer analysis validator </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a7accf4e4db4001716e53d98ce5217ac8"/>    <section>
    <title>validateSuccessTests()</title>
<indexterm><primary>validateSuccessTests</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>validateSuccessTests</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::validateSuccessTests (std::string fun)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Find the alias check functions annotated in the C files check whether the alias analysis results consistent with the alias check function itself </para>
    </section><anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a0454332c89e60729956bb7d69a1a24df"/>    <section>
    <title>validateTests()</title>
<indexterm><primary>validateTests</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>validateTests</secondary></indexterm>
<para><computeroutput>void PointerAnalysis::validateTests ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Alias check functions to verify correctness of pointer analysis. </para>
</para>

<para>Validate test cases </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_pointer_analysis_1a3550ea3f087ec557a6fe076bc443b05d"/>    <section>
    <title>print_stat</title>
<indexterm><primary>print_stat</primary><secondary>SVF::PointerAnalysis</secondary></indexterm>
<indexterm><primary>SVF::PointerAnalysis</primary><secondary>print_stat</secondary></indexterm>
<para><computeroutput>bool SVF::PointerAnalysis::print_stat<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>User input flags. </para>
</para>

<para>Flag for printing the statistic results </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/MemoryModel/PointerAnalysis.hlib/MemoryModel/PointerAnalysis.cpp</section>
</section>
