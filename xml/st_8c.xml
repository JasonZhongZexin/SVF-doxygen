<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="st_8c" kind="file" language="C++">
    <compoundname>st.c</compoundname>
    <includes refid="util_8h" local="yes">CUDD/util.h</includes>
    <includes refid="st_8h" local="yes">CUDD/st.h</includes>
    <incdepgraph>
      <node id="6">
        <label>CUDD/st.h</label>
        <link refid="st_8h_source"/>
      </node>
      <node id="2">
        <label>CUDD/util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>unistd.h</label>
      </node>
      <node id="1">
        <label>lib/CUDD/st.c</label>
        <link refid="st_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ctype.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="st_8c_1a2796b8bc2a5f15834d61a3519ad149d5" prot="public" static="no">
        <name>ST_NUMCMP</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x) != (y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="47" column="9" bodyfile="lib/CUDD/st.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1a76573cced143d429f99bfb5e286c621e" prot="public" static="no">
        <name>ST_NUMHASH</name>
        <param><defname>x</defname></param>
        <param><defname>size</defname></param>
        <initializer>((unsigned long)(x)%(size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="49" column="9" bodyfile="lib/CUDD/st.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1ab2920f4cebe075a6fda8b299fce9f762" prot="public" static="no">
        <name>st_shift</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="54" column="10" bodyfile="lib/CUDD/st.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1a524a1efaf5df2432aa5bf96e35546164" prot="public" static="no">
        <name>ST_PTRHASH</name>
        <param><defname>x</defname></param>
        <param><defname>size</defname></param>
        <initializer>((unsigned int)((unsigned long)(x)&gt;&gt;st_shift)%size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="57" column="9" bodyfile="lib/CUDD/st.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1adf137c378b35c2dbab9579eeb5c03150" prot="public" static="no">
        <name>EQUAL</name>
        <param><defname>func</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>    ((((func) == st_numcmp) || ((func) == st_ptrcmp)) ?\
      (ST_NUMCMP((x),(y)) == 0) : ((*func)((x), (y)) == 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="59" column="9" bodyfile="lib/CUDD/st.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1a8719b25fa2e849ad268f0bb382bae21c" prot="public" static="no">
        <name>do_hash</name>
        <param><defname>key</defname></param>
        <param><defname>table</defname></param>
        <initializer>    ((int)((table-&gt;hash == st_ptrhash) ? ST_PTRHASH((char *)(key),(table)-&gt;num_bins) :\
     (table-&gt;hash == st_numhash) ? ST_NUMHASH((char *)(key), (table)-&gt;num_bins) :\
     (*table-&gt;hash)((char *)(key), (table)-&gt;num_bins)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="63" column="9" bodyfile="lib/CUDD/st.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1adc63a1b1f02f0b457c85154dc513d626" prot="public" static="no">
        <name>PTR_NOT_EQUAL</name>
        <param><defname>table</defname></param>
        <param><defname>ptr</defname></param>
        <param><defname>user_key</defname></param>
        <initializer>(ptr != NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>) &amp;&amp; !EQUAL(table-&gt;compare, (char *)user_key, (ptr)-&gt;key))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="68" column="9" bodyfile="lib/CUDD/st.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1a9fc5c02ec598b362bd1fd5ddb6442731" prot="public" static="no">
        <name>FIND_ENTRY</name>
        <param><defname>table</defname></param>
        <param><defname>hash_val</defname></param>
        <param><defname>key</defname></param>
        <param><defname>ptr</defname></param>
        <param><defname>last</defname></param>
        <initializer>    (last) = &amp;(table)-&gt;bins[hash_val];\
    (ptr) = *(last);\
    while (PTR_NOT_EQUAL((table), (ptr), (key))) {\
	(last) = &amp;(ptr)-&gt;next; (ptr) = *(last);\
    }\
    if ((ptr) != NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>) &amp;&amp; (table)-&gt;reorder_flag) {\
	*(last) = (ptr)-&gt;next;\
	(ptr)-&gt;next = (table)-&gt;bins[hash_val];\
	(table)-&gt;bins[hash_val] = (ptr);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="71" column="9" bodyfile="lib/CUDD/st.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="st_8c_1a956d9dcd99d68ab4503789312b72c29a" prot="public" static="no">
        <name>ADD_DIRECT</name>
        <param><defname>table</defname></param>
        <param><defname>key</defname></param>
        <param><defname>value</defname></param>
        <param><defname>hash_val</defname></param>
        <param><defname>newt</defname></param>
        <initializer>{\
    if (table-&gt;num_entries/table-&gt;num_bins &gt;= table-&gt;max_density) {\
	rehash(table);\
	hash_val = do_hash(key,table);\
    }\
    \
    newt = ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>, 1);\
    \
    newt-&gt;key = (char *)key;\
    newt-&gt;record = value;\
    newt-&gt;next = table-&gt;bins[hash_val];\
    table-&gt;bins[hash_val] = newt;\
    table-&gt;num_entries++;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="84" column="9" bodyfile="lib/CUDD/st.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="st_8c_1a8abfa313efd8b3a3a1ac1c4055e034e1" prot="public" static="yes" mutable="no">
        <type>char rcsid[]</type>
        <definition>char rcsid [] UTIL_UNUSED</definition>
        <argsstring></argsstring>
        <name>UTIL_UNUSED</name>
        <initializer>= &quot; $Id: st.c,v 1.12 2010/04/22 19:00:55 fabio Exp fabio $&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CFile***********************************************************************</para>
<para>FileName [st.c]</para>
<para>PackageName [st]</para>
<para>Synopsis [Symbol table package.]</para>
<para>Description [The st library provides functions to create, maintain, and query symbol tables.]</para>
<para>SeeAlso []</para>
<para>Author []</para>
<para>Copyright [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="40" column="19" bodyfile="lib/CUDD/st.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="st_8c_1aa935648640f20c4160b61b68edcd313d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int rehash</definition>
        <argsstring>(st_table *)</argsstring>
        <name>rehash</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <defname>table</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart</para>
<para>Function********************************************************************</para>
<para>Synopsis [Rehashes a symbol table.]</para>
<para>Description [Rehashes a symbol table.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_insert] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="1021" column="1" bodyfile="lib/CUDD/st.c" bodystart="1021" bodyend="1065" declfile="lib/CUDD/st.c" declline="106" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a24ffe70dd1bb859ac2f650ccf1ba1eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_init_table</definition>
        <argsstring>(ST_PFICPCP compare, ST_PFICPI hash)</argsstring>
        <name>st_init_table</name>
        <param>
          <type>ST_PFICPCP</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>ST_PFICPI</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticEnd Function********************************************************************</para>
<para>Synopsis [Create and initialize a table.]</para>
<para>Description [Create and initialize a table with the comparison function compare_fn and hash function hash_fn. compare_fn is <preformatted>
  int compare_fn(const char *key1, const char *key2)
</preformatted> It returns &lt;,=,&gt; 0 depending on whether key1 &lt;,=,&gt; key2 by some measure.</para>
<para>hash_fn is <preformatted>
  int hash_fn(char *key, int modulus)
</preformatted> It returns a integer between 0 and modulus-1 such that if compare_fn(key1,key2) == 0 then hash_fn(key1) == hash_fn(key2).</para>
<para>There are five predefined hash and comparison functions in st. For keys as numbers: <preformatted>
   st_numhash(key, modulus) { return (unsigned int) key % modulus; }
</preformatted> <preformatted>
   st_numcmp(x,y) { return (int) x - (int) y; }
</preformatted> For keys as pointers: <preformatted>
   st_ptrhash(key, modulus) { return ((unsigned int) key/4) % modulus }
</preformatted> <preformatted>
   st_ptrcmp(x,y) { return (int) x - (int) y; }
</preformatted> For keys as strings: <preformatted>
       st_strhash(x,y) - a reasonable hashing function for strings
</preformatted> <preformatted>
   strcmp(x,y) - the standard library function
</preformatted> It is recommended to use these particular functions if they fit your needs, since st will recognize certain of them and run more quickly because of it.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table_with_params st_free_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="163" column="1" bodyfile="lib/CUDD/st.c" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a88896d7ce4715597cba13ff35952e0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_init_table_with_params</definition>
        <argsstring>(ST_PFICPCP compare, ST_PFICPI hash, int size, int density, double grow_factor, int reorder_flag)</argsstring>
        <name>st_init_table_with_params</name>
        <param>
          <type>ST_PFICPCP</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>ST_PFICPI</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>density</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grow_factor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reorder_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Create a table with given parameters.]</para>
<para>Description [The full blown table initializer. compare and hash are the same as in st_init_table. density is the largest the average number of entries per hash bin there should be before the table is grown. grow_factor is the factor the table is grown by when it becomes too full. size is the initial number of bins to be allocated for the hash table. If reorder_flag is non-zero, then every time an entry is found, it is moved to the top of the chain.</para>
<para>st_init_table(compare, hash) is equivelent to <preformatted>
st_init_table_with_params(compare, hash, ST_DEFAULT_INIT_TABLE_SIZE,
            ST_DEFAULT_MAX_DENSITY,
            ST_DEFAULT_GROW_FACTOR,
            ST_DEFAULT_REORDER_FLAG);
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_free_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="199" column="1" bodyfile="lib/CUDD/st.c" bodystart="199" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a93394fd99c5fa4fbcce2be9717abee45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void st_free_table</definition>
        <argsstring>(st_table *table)</argsstring>
        <name>st_free_table</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Free a table.]</para>
<para>Description [Any internal storage associated with table is freed. It is the user&apos;s responsibility to free any storage associated with the pointers he placed in the table (by perhaps using st_foreach).]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_init_table_with_params] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="252" column="1" bodyfile="lib/CUDD/st.c" bodystart="252" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a0664208425f99d5c88fe2a79c425756c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_lookup</definition>
        <argsstring>(st_table *table, void *key, void *value)</argsstring>
        <name>st_lookup</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If an entry is found, 1 is returned and if <lsquo/>value<rsquo/> is not nil, the variable it points to is set to the associated value. If an entry is not found, 0 is returned and the variable pointed by value is unchanged.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_lookup_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="286" column="1" bodyfile="lib/CUDD/st.c" bodystart="286" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a958c280b8f24c847ca511eaffd410f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_lookup_int</definition>
        <argsstring>(st_table *table, void *key, int *value)</argsstring>
        <name>st_lookup_int</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup up <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If an entry is found, 1 is returned and if <lsquo/>value<rsquo/> is not nil, the variable it points to is set to the associated integer value. If an entry is not found, 0 is return and the variable pointed by <lsquo/>value<rsquo/> is unchanged.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_lookup] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="322" column="1" bodyfile="lib/CUDD/st.c" bodystart="322" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1ac9bc9aaa7675eadf766a0a7eb5de7890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_insert</definition>
        <argsstring>(st_table *table, void *key, void *value)</argsstring>
        <name>st_insert</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Insert value in table under the key &apos;key&apos;.]</para>
<para>Description [Insert value in table under the key &apos;key&apos;. Returns 1 if there was an entry already under the key; 0 if there was no entry under the key and insertion was successful; ST_OUT_OF_MEM otherwise. In either of the first two cases the new value is added.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="358" column="1" bodyfile="lib/CUDD/st.c" bodystart="358" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a18fa2f1785eb7a89b8cf437499521f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_add_direct</definition>
        <argsstring>(st_table *table, void *key, void *value)</argsstring>
        <name>st_add_direct</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Place &apos;value&apos; in &apos;table&apos; under the key &apos;key&apos;.]</para>
<para>Description [Place &apos;value&apos; in &apos;table&apos; under the key &apos;key&apos;. This is done without checking if &apos;key&apos; is in &apos;table&apos; already. This should only be used if you are sure there is not already an entry for &apos;key&apos;, since it is undefined which entry you would later get from st_lookup or st_find_or_add. Returns 1 if successful; ST_OUT_OF_MEM otherwise.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="410" column="1" bodyfile="lib/CUDD/st.c" bodystart="410" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a6e70b7e6be1d8b6b15f299ebeb5f77f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_find_or_add</definition>
        <argsstring>(st_table *table, void *key, void *slot)</argsstring>
        <name>st_find_or_add</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>. If not found, create an entry. In either case set slot to point to the field in the entry where the value is stored. The value associated with <lsquo/>key<rsquo/> may then be changed by accessing directly through slot. Returns 1 if an entry already existed, 0 if it did not exist and creation was successful; ST_OUT_OF_MEM otherwise. As an example: <preformatted>
    char **slot;
</preformatted> <preformatted>
    char *key;
</preformatted> <preformatted>
    char *value = (char *) item_ptr &lt;-- ptr to a malloc&apos;d structure
</preformatted> <preformatted>
    if (st_find_or_add(table, key, &amp;slot) == 1) {
</preformatted> <preformatted>
   FREE(*slot); &lt;-- free the old value of the record
</preformatted> <preformatted>
    }
</preformatted> <preformatted>
    *slot = value;  &lt;-- attach the new value to the record
</preformatted> This replaces the equivelent code: <preformatted>
    if (st_lookup(table, key, &amp;ovalue) == 1) {
</preformatted> <preformatted>
       FREE(ovalue);
</preformatted> <preformatted>
    }
</preformatted> <preformatted>
    st_insert(table, key, value);
</preformatted> ]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_find] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="488" column="1" bodyfile="lib/CUDD/st.c" bodystart="488" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a2140ed6d56e47b73f420bffbdb32d491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_find</definition>
        <argsstring>(st_table *table, void *key, void *slot)</argsstring>
        <name>st_find</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Lookup <lsquo/>key<rsquo/> in <lsquo/>table<rsquo/>.]</para>
<para>Description [Like st_find_or_add, but does not create an entry if one is not found.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_find_or_add] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="536" column="1" bodyfile="lib/CUDD/st.c" bodystart="536" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a1fe53fe235ae6db0c7abe49413785363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
        <definition>st_table* st_copy</definition>
        <argsstring>(st_table *old_table)</argsstring>
        <name>st_copy</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>old_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Return a copy of old_table and all its members.]</para>
<para>Description [Return a copy of old_table and all its members. (<ref refid="structst__table" kindref="compound">st_table</ref> *) 0 is returned if there was insufficient memory to do the copy.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="571" column="1" bodyfile="lib/CUDD/st.c" bodystart="571" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a2d8405879414ed73f3ff6a935f3fc269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_delete</definition>
        <argsstring>(st_table *table, void *keyp, void *value)</argsstring>
        <name>st_delete</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keyp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>.]</para>
<para>Description [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>. If the entry is found, 1 is returned, the variable pointed by <lsquo/>keyp<rsquo/> is set to the actual key and the variable pointed by <lsquo/>value<rsquo/> is set to the corresponding entry. (This allows the freeing of the associated storage.) If the entry is not found, then 0 is returned and nothing is changed.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_delete_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="634" column="1" bodyfile="lib/CUDD/st.c" bodystart="634" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1aa849d7cda1761ee9e9ca8fd199a40de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_delete_int</definition>
        <argsstring>(st_table *table, void *keyp, int *value)</argsstring>
        <name>st_delete_int</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keyp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>.]</para>
<para>Description [Delete the entry with the key pointed to by <lsquo/>keyp<rsquo/>. <lsquo/>value<rsquo/> must be a pointer to an integer. If the entry is found, 1 is returned, the variable pointed by <lsquo/>keyp<rsquo/> is set to the actual key and the variable pointed by <lsquo/>value<rsquo/> is set to the corresponding entry. (This allows the freeing of the associated storage.) If the entry is not found, then 0 is returned and nothing is changed.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_delete] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="675" column="1" bodyfile="lib/CUDD/st.c" bodystart="675" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a4d18e5a6949c772c9ff8c3c70ec00b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_foreach</definition>
        <argsstring>(st_table *table, ST_PFSR func, char *arg)</argsstring>
        <name>st_foreach</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>ST_PFSR</type>
          <declname>func</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Iterates over the elements of a table.]</para>
<para>Description [For each (key, value) record in <lsquo/>table<rsquo/>, st_foreach call func with the arguments <preformatted>
    (*func)(key, value, arg)
</preformatted> If func returns ST_CONTINUE, st_foreach continues processing entries. If func returns ST_STOP, st_foreach stops processing and returns immediately. If func returns ST_DELETE, then the entry is deleted from the symbol table and st_foreach continues. In the case of ST_DELETE, it is func&apos;s responsibility to free the key and value, if necessary.</para>
<para>The routine returns 1 if all items in the table were generated and 0 if the generation sequence was aborted using ST_STOP. The order in which the records are visited will be seemingly random.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_foreach_item st_foreach_item_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="725" column="1" bodyfile="lib/CUDD/st.c" bodystart="725" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a19f7c89b3e6ea56f9a3c29c07271e29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_strhash</definition>
        <argsstring>(char *string, int modulus)</argsstring>
        <name>st_strhash</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modulus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [String hash function.]</para>
<para>Description [String hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="766" column="1" bodyfile="lib/CUDD/st.c" bodystart="766" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1aede320ef4713f295a335b4da6e1d8358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_numhash</definition>
        <argsstring>(char *x, int size)</argsstring>
        <name>st_numhash</name>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Number hash function.]</para>
<para>Description [Integer number hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_numcmp] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="792" column="1" bodyfile="lib/CUDD/st.c" bodystart="792" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1ada6e90b4df1ca291977c89a6d4fdea06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_ptrhash</definition>
        <argsstring>(char *x, int size)</argsstring>
        <name>st_ptrhash</name>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Pointer hash function.]</para>
<para>Description [Pointer hash function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_ptrcmp] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="811" column="1" bodyfile="lib/CUDD/st.c" bodystart="811" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a0ba60ae98aae8e6dd21bbe3b485bcfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_numcmp</definition>
        <argsstring>(const char *x, const char *y)</argsstring>
        <name>st_numcmp</name>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Number comparison function.]</para>
<para>Description [integer number comparison function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_numhash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="830" column="1" bodyfile="lib/CUDD/st.c" bodystart="830" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a52bf6e577a2a87b2cdedb1c3d0e25075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_ptrcmp</definition>
        <argsstring>(const char *x, const char *y)</argsstring>
        <name>st_ptrcmp</name>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Pointer comparison function.]</para>
<para>Description [Pointer comparison function.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_table st_ptrhash] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="849" column="1" bodyfile="lib/CUDD/st.c" bodystart="849" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a2fb7a7c51faa5ae0f14d0520804253d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
        <definition>st_generator* st_init_gen</definition>
        <argsstring>(st_table *table)</argsstring>
        <name>st_init_gen</name>
        <param>
          <type><ref refid="structst__table" kindref="compound">st_table</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Initializes a generator.]</para>
<para>Description [Returns a generator handle which when used with st_gen() will progressively return each (key, value) record in <lsquo/>table<rsquo/>.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_free_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="870" column="1" bodyfile="lib/CUDD/st.c" bodystart="870" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1a5864dab6ffcbd5d7a8891b394b76a59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_gen</definition>
        <argsstring>(st_generator *gen, void *key_p, void *value_p)</argsstring>
        <name>st_gen</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [returns the next (key, value) pair in the generation sequence. ]</para>
<para>Description [Given a generator returned by st_init_gen(), this routine returns the next (key, value) pair in the generation sequence. The pointer <lsquo/>value_p<rsquo/> can be zero which means no value will be returned. When there are no more items in the generation sequence, the routine returns 0.</para>
<para>While using a generation sequence, deleting any (key, value) pair other than the one just generated may cause a fatal error when st_gen() is called later in the sequence and is therefore not recommended.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_gen_int] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="908" column="1" bodyfile="lib/CUDD/st.c" bodystart="908" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1afaadb541f4e5bbd7ec7834b46631a27b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int st_gen_int</definition>
        <argsstring>(st_generator *gen, void *key_p, int *value_p)</argsstring>
        <name>st_gen_int</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the next (key, value) pair in the generation sequence.]</para>
<para>Description [Given a generator returned by st_init_gen(), this routine returns the next (key, value) pair in the generation sequence. <lsquo/>value_p<rsquo/> must be a pointer to an integer. The pointer <lsquo/>value_p<rsquo/> can be zero which means no value will be returned. When there are no more items in the generation sequence, the routine returns 0.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="953" column="1" bodyfile="lib/CUDD/st.c" bodystart="953" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="st_8c_1ad41b7ddada4e857c815181e0da79c8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void st_free_gen</definition>
        <argsstring>(st_generator *gen)</argsstring>
        <name>st_free_gen</name>
        <param>
          <type><ref refid="structst__generator" kindref="compound">st_generator</ref> *</type>
          <declname>gen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Reclaims the resources associated with <lsquo/>gen<rsquo/>.]</para>
<para>Description [After generating all items in a generation sequence, this routine must be called to reclaim the resources associated with <lsquo/>gen<rsquo/>.]</para>
<para>SideEffects [None]</para>
<para>SeeAlso [st_init_gen] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/CUDD/st.c" line="994" column="1" bodyfile="lib/CUDD/st.c" bodystart="994" bodyend="998"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CUDD/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CUDD/st.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constant<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stucture<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Variable<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>lint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rcsid[]<sp/>UTIL_UNUSED<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>$Id:<sp/>st.c,v<sp/>1.12<sp/>2010/04/22<sp/>19:00:55<sp/>fabio<sp/>Exp<sp/>fabio<sp/>$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_NUMCMP(x,y)<sp/>((x)<sp/>!=<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_NUMHASH(x,size)<sp/>((unsigned<sp/>long)(x)%(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SIZEOF_VOID_P<sp/>==<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_shift<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>st_shift<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ST_PTRHASH(x,size)<sp/>((unsigned<sp/>int)((unsigned<sp/>long)(x)&gt;&gt;st_shift)%size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EQUAL(func,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((func)<sp/>==<sp/>st_numcmp)<sp/>||<sp/>((func)<sp/>==<sp/>st_ptrcmp))<sp/>?\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(ST_NUMCMP((x),(y))<sp/>==<sp/>0)<sp/>:<sp/>((*func)((x),<sp/>(y))<sp/>==<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>do_hash(key,<sp/>table)\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((int)((table-&gt;hash<sp/>==<sp/>st_ptrhash)<sp/>?<sp/>ST_PTRHASH((char<sp/>*)(key),(table)-&gt;num_bins)<sp/>:\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(table-&gt;hash<sp/>==<sp/>st_numhash)<sp/>?<sp/>ST_NUMHASH((char<sp/>*)(key),<sp/>(table)-&gt;num_bins)<sp/>:\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(*table-&gt;hash)((char<sp/>*)(key),<sp/>(table)-&gt;num_bins)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTR_NOT_EQUAL(table,<sp/>ptr,<sp/>user_key)\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor">(ptr<sp/>!=<sp/>NIL(st_table_entry)<sp/>&amp;&amp;<sp/>!EQUAL(table-&gt;compare,<sp/>(char<sp/>*)user_key,<sp/>(ptr)-&gt;key))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last)<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(last)<sp/>=<sp/>&amp;(table)-&gt;bins[hash_val];\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ptr)<sp/>=<sp/>*(last);\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>while<sp/>(PTR_NOT_EQUAL((table),<sp/>(ptr),<sp/>(key)))<sp/>{\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(last)<sp/>=<sp/>&amp;(ptr)-&gt;next;<sp/>(ptr)<sp/>=<sp/>*(last);\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((ptr)<sp/>!=<sp/>NIL(st_table_entry)<sp/>&amp;&amp;<sp/>(table)-&gt;reorder_flag)<sp/>{\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(last)<sp/>=<sp/>(ptr)-&gt;next;\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ptr)-&gt;next<sp/>=<sp/>(table)-&gt;bins[hash_val];\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(table)-&gt;bins[hash_val]<sp/>=<sp/>(ptr);\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>macro<sp/>does<sp/>not<sp/>check<sp/>if<sp/>memory<sp/>allocation<sp/>fails.<sp/>Use<sp/>at<sp/>you<sp/>own<sp/>risk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_DIRECT(table,<sp/>key,<sp/>value,<sp/>hash_val,<sp/>newt)\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(table-&gt;num_entries/table-&gt;num_bins<sp/>&gt;=<sp/>table-&gt;max_density)<sp/>{\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>rehash(table);\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,table);\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(st_table_entry,<sp/>1);\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>newt-&gt;key<sp/>=<sp/>(char<sp/>*)key;\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>newt-&gt;record<sp/>=<sp/>value;\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>newt-&gt;next<sp/>=<sp/>table-&gt;bins[hash_val];\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>table-&gt;bins[hash_val]<sp/>=<sp/>newt;\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>table-&gt;num_entries++;\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Static<sp/>function<sp/>prototypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rehash<sp/>(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>exported<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="normal">st_init_table(ST_PFICPCP<sp/>compare,<sp/>ST_PFICPI<sp/>hash)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>st_init_table_with_params(compare,<sp/>hash,<sp/>ST_DEFAULT_INIT_TABLE_SIZE,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_DEFAULT_MAX_DENSITY,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_DEFAULT_GROW_FACTOR,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_DEFAULT_REORDER_FLAG);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_init_table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="normal">st_init_table_with_params(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>ST_PFICPCP<sp/>compare,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>ST_PFICPI<sp/>hash,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>density,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>grow_factor,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reorder_flag)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*newt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(<ref refid="structst__table" kindref="compound">st_table</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt<sp/>==<sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;compare<sp/>=<sp/>compare;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;hash<sp/>=<sp/>hash;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;num_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;max_density<sp/>=<sp/>density;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;grow_factor<sp/>=<sp/>grow_factor;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;reorder_flag<sp/>=<sp/>reorder_flag;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;num_bins<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;bins<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*,<sp/>size);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt-&gt;bins<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(newt);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;bins[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_init_table_with_params<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">st_free_table(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>*next;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table-&gt;num_bins<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>table-&gt;bins[i];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(ptr);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(table-&gt;bins);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(table);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_free_table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">st_lookup(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)value<sp/>=<sp/>ptr-&gt;record;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_lookup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">st_lookup_int(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>(int)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;record;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_lookup_int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">st_insert(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*newt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table-&gt;num_entries/table-&gt;num_bins<sp/>&gt;=<sp/>table-&gt;max_density)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rehash(table)<sp/>==<sp/>ST_OUT_OF_MEM)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;record<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)value;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;next<sp/>=<sp/>table-&gt;bins[hash_val];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins[hash_val]<sp/>=<sp/>newt;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries++;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;record<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)value;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_insert<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">st_add_direct(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*newt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table-&gt;num_entries<sp/>/<sp/>table-&gt;num_bins<sp/>&gt;=<sp/>table-&gt;max_density)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rehash(table)<sp/>==<sp/>ST_OUT_OF_MEM)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;record<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)value;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;next<sp/>=<sp/>table-&gt;bins[hash_val];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins[hash_val]<sp/>=<sp/>newt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries++;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_add_direct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">st_find_or_add(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*slot)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*newt,<sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table-&gt;num_entries<sp/>/<sp/>table-&gt;num_bins<sp/>&gt;=<sp/>table-&gt;max_density)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rehash(table)<sp/>==<sp/>ST_OUT_OF_MEM)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;record<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>newt-&gt;next<sp/>=<sp/>table-&gt;bins[hash_val];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins[hash_val]<sp/>=<sp/>newt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries++;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slot<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***)slot<sp/>=<sp/>&amp;newt-&gt;record;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slot<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***)slot<sp/>=<sp/>&amp;ptr-&gt;record;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_find_or_add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">st_find(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*slot)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr,<sp/>last);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slot<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***)slot<sp/>=<sp/>&amp;ptr-&gt;record;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_find<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*</highlight></codeline>
<codeline lineno="571"><highlight class="normal">st_copy(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*old_table)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table" kindref="compound">st_table</ref><sp/>*new_table;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>*newptr,<sp/>*next,<sp/>*newt;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>num_bins<sp/>=<sp/>old_table-&gt;num_bins;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>new_table<sp/>=<sp/>ALLOC(<ref refid="structst__table" kindref="compound">st_table</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_table<sp/>==<sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>*new_table<sp/>=<sp/>*old_table;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>new_table-&gt;bins<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*,<sp/>num_bins);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_table-&gt;bins<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(new_table);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_bins<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>new_table-&gt;bins[i]<sp/>=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>old_table-&gt;bins[i];</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newt<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newt<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>i;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newptr<sp/>=<sp/>new_table-&gt;bins[j];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(newptr<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>newptr-&gt;next;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(newptr);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newptr<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(new_table-&gt;bins);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(new_table);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__table" kindref="compound">st_table</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*newt<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newt-&gt;next<sp/>=<sp/>new_table-&gt;bins[i];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_table-&gt;bins[i]<sp/>=<sp/>newt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_table;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">st_delete(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*keyp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)keyp;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr<sp/>,last);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)value<sp/>=<sp/>ptr-&gt;record;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)keyp<sp/>=<sp/>ptr-&gt;key;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(ptr);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries--;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_delete<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">st_delete_int(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*keyp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)keyp;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(key,<sp/>table);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_ENTRY(table,<sp/>hash_val,<sp/>key,<sp/>ptr<sp/>,last);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>*value<sp/>=<sp/>(int)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;record;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)keyp<sp/>=<sp/>ptr-&gt;key;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(ptr);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries--;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_delete_int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">st_foreach(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table,<sp/>ST_PFSR<sp/>func,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>**last;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>st_retval<sp/>retval;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table-&gt;num_bins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/>&amp;table-&gt;bins[i];<sp/>ptr<sp/>=<sp/>*last;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>(*func)(ptr-&gt;key,<sp/>ptr-&gt;record,<sp/>arg);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(retval)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ST_CONTINUE:</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>&amp;ptr-&gt;next;<sp/>ptr<sp/>=<sp/>*last;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ST_STOP:</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ST_DELETE:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;num_entries--;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cstevens@ic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FREE(ptr);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>*last;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_foreach<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">st_strhash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modulus)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">++)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>val*997<sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((val<sp/>&lt;<sp/>0)<sp/>?<sp/>-val<sp/>:<sp/>val)%modulus;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_strhash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">st_numhash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_NUMHASH(x,<sp/>size);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_numhash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">st_ptrhash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_PTRHASH(x,<sp/>size);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_ptrhash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal">st_numcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*y)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_NUMCMP(x,<sp/>y);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_numcmp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal">st_ptrcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*y)</highlight></codeline>
<codeline lineno="850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_NUMCMP(x,<sp/>y);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_ptrcmp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*</highlight></codeline>
<codeline lineno="870"><highlight class="normal">st_init_gen(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table)</highlight></codeline>
<codeline lineno="871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*gen;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>gen<sp/>=<sp/>ALLOC(<ref refid="structst__generator" kindref="compound">st_generator</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen<sp/>==<sp/>NIL(<ref refid="structst__generator" kindref="compound">st_generator</ref>))<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NIL(<ref refid="structst__generator" kindref="compound">st_generator</ref>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>gen-&gt;table<sp/>=<sp/>table;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>gen-&gt;entry<sp/>=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>gen-&gt;index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gen;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_init_gen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">st_gen(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*gen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value_p)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;entry<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>to<sp/>find<sp/>next<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>gen-&gt;index;<sp/>i<sp/>&lt;<sp/>gen-&gt;table-&gt;num_bins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;table-&gt;bins[i]<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-&gt;index<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-&gt;entry<sp/>=<sp/>gen-&gt;table-&gt;bins[i];</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;entry<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>that&apos;s<sp/>all<sp/>folks<sp/>!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)key_p<sp/>=<sp/>gen-&gt;entry-&gt;key;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(value_p<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)value_p<sp/>=<sp/>gen-&gt;entry-&gt;record;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>gen-&gt;entry<sp/>=<sp/>gen-&gt;entry-&gt;next;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_gen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal">st_gen_int(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*gen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*value_p)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;entry<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>to<sp/>find<sp/>next<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>gen-&gt;index;<sp/>i<sp/>&lt;<sp/>gen-&gt;table-&gt;num_bins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;table-&gt;bins[i]<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-&gt;index<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-&gt;entry<sp/>=<sp/>gen-&gt;table-&gt;bins[i];</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen-&gt;entry<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>that&apos;s<sp/>all<sp/>folks<sp/>!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)key_p<sp/>=<sp/>gen-&gt;entry-&gt;key;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(value_p<sp/>!=<sp/>NIL(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>*value_p<sp/>=<sp/>(int)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>gen-&gt;entry-&gt;record;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>gen-&gt;entry<sp/>=<sp/>gen-&gt;entry-&gt;next;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_gen_int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal">st_free_gen(<ref refid="structst__generator" kindref="compound">st_generator</ref><sp/>*gen)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(gen);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>st_free_gen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>internal<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definition<sp/>of<sp/>static<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">rehash(<ref refid="structst__table" kindref="compound">st_table</ref><sp/>*table)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*ptr,<sp/>*next,<sp/>**old_bins;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>old_num_bins,<sp/>hash_val,<sp/>old_num_entries;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>old<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>old_bins<sp/>=<sp/>table-&gt;bins;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>old_num_bins<sp/>=<sp/>table-&gt;num_bins;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>old_num_entries<sp/>=<sp/>table-&gt;num_entries;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rehash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_bins<sp/>=<sp/>(int)<sp/>(table-&gt;grow_factor<sp/>*<sp/>old_num_bins);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table-&gt;num_bins<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_bins<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins<sp/>=<sp/>ALLOC(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*,<sp/>table-&gt;num_bins);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table-&gt;bins<sp/>==<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins<sp/>=<sp/>old_bins;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_bins<sp/>=<sp/>old_num_bins;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;num_entries<sp/>=<sp/>old_num_entries;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ST_OUT_OF_MEM;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table-&gt;num_bins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;bins[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>data<sp/>over<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>old_num_bins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>old_bins[i];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NIL(<ref refid="structst__table__entry" kindref="compound">st_table_entry</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>ptr-&gt;next;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>do_hash(ptr-&gt;key,<sp/>table);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;next<sp/>=<sp/>table-&gt;bins[hash_val];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;bins[hash_val]<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;num_entries++;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>FREE(old_bins);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>rehash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/CUDD/st.c"/>
  </compounddef>
</doxygen>
