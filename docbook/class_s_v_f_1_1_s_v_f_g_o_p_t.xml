<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t" xml:lang="en-US">
<title>SVF::SVFGOPT Class Reference</title>
<indexterm><primary>SVF::SVFGOPT</primary></indexterm>
<para>
<computeroutput>#include &lt;SVFGOPT.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::SVFGOPT:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_s_v_f_g_o_p_t.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a239475c15b39d54c632427307b8e9350"/><link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a239475c15b39d54c632427307b8e9350">SVFGOPT</link> (<link linkend="_class_s_v_f_1_1_mem_s_s_a">MemSSA</link> *_mssa, <link linkend="_class_s_v_f_1_1_v_f_g_1ac2e2f555975063da3fa1932ac35802c6">VFGK</link> kind)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1af45feec9a906f9df86e244bb62f603b8"/>virtual <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1af45feec9a906f9df86e244bb62f603b8">~SVFGOPT</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1af0c1bb4055d3c4b7f5c6133c433144ad"/>void <emphasis role="strong">setTokeepActualOutFormalIn</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a99cce24804a9116f9bf4e773b2f28e85"/>void <emphasis role="strong">setTokeepAllSelfCycle</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1abe2392e0971f6c46537727f001fa44de"/>void <emphasis role="strong">setTokeepContextSelfCycle</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1af4d2c6d2e3b316b256f860801fe3b178">buildSVFG</link> ()</para>

<para>Start building <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4"/>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a00b0b986f81495becae90098517739e4">connectAParamAndFParam</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *cs_arg, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *fun_arg, const <link linkend="_class_s_v_f_1_1_call_block_node">CallBlockNode</link> *, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</para>

<para>Connect <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> nodes between caller and callee for indirect call sites. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1aad3217fa932738ab8ba09e1e9f48ac56"/>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1aad3217fa932738ab8ba09e1e9f48ac56">connectFRetAndARet</link> (const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *fun_ret, const <link linkend="_class_s_v_f_1_1_p_a_g_node">PAGNode</link> *cs_ret, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</para>

<para>Connect formal-ret and actual ret. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1aa39900e11f5689f8bd70f3ec45865225"/>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1aa39900e11f5689f8bd70f3ec45865225">connectAInAndFIn</link> (const <link linkend="_class_s_v_f_1_1_actual_i_n_s_v_f_g_node">ActualINSVFGNode</link> *actualIn, const <link linkend="_class_s_v_f_1_1_formal_i_n_s_v_f_g_node">FormalINSVFGNode</link> *formalIn, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</para>

<para>Connect actual-in and formal-in. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a79ace9bac7f2e075c27209ea56fc6032"/>virtual void <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a79ace9bac7f2e075c27209ea56fc6032">connectFOutAndAOut</link> (const <link linkend="_class_s_v_f_1_1_formal_o_u_t_s_v_f_g_node">FormalOUTSVFGNode</link> *formalOut, const <link linkend="_class_s_v_f_1_1_actual_o_u_t_s_v_f_g_node">ActualOUTSVFGNode</link> *actualOut, CallSiteID csId, SVFGEdgeSetTy &amp;edges)</para>

<para>Connect formal-out and actual-out. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a550f93b640a6fd68773fbafd2944d7df"/>NodeID <link linkend="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a550f93b640a6fd68773fbafd2944d7df">getActualINDef</link> (NodeID ai) const</para>

<para>Get def-site of actual-in/formal-out. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1a8d0b44ba9f3e6f9344a10d085d7be2b4"/>NodeID <emphasis role="strong">getFormalOUTDef</emphasis> (NodeID fo) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Optimised <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>.<orderedlist>
<listitem>
<para>FormalParam/ActualRet is converted into Phi. ActualParam/FormalRet becomes the operands of Phi nodes created at callee/caller&apos;s entry/callsite.</para>
</listitem><listitem>
<para>ActualIns/ActualOuts resides at direct call sites id removed. Sources of its incoming edges are connected with the destinations of its outgoing edges directly.</para>
</listitem><listitem>
<para>FormalIns/FormalOuts reside at the entry/exit of non-address-taken functions is removed as ActualIn/ActualOuts.</para>
</listitem><listitem>
<para><link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">MSSAPHI</link> nodes are removed if it have no self cycle. Otherwise depends on user option. </para>
</listitem></orderedlist>
</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_s_v_f_g_o_p_t_1af4d2c6d2e3b316b256f860801fe3b178"/>    <section>
    <title>buildSVFG()</title>
<indexterm><primary>buildSVFG</primary><secondary>SVF::SVFGOPT</secondary></indexterm>
<indexterm><primary>SVF::SVFGOPT</primary><secondary>buildSVFG</secondary></indexterm>
<para><computeroutput>void SVFGOPT::buildSVFG ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Start building <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link>. </para>
</para>

<para>Build <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> 1) build <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> nodes a) statements for top level pointers (PAGEdges) b) operators of address-taken variables (<link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">MSSAPHI</link> and <link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">MSSACHI</link>) 2) connect <link linkend="_class_s_v_f_1_1_s_v_f_g">SVFG</link> edges a) between two statements (PAGEdges) b) between two memory SSA operators (<link linkend="_class_s_v_f_1_1_m_s_s_a_p_h_i">MSSAPHI</link> <link linkend="_class_s_v_f_1_1_m_s_s_a_m_u">MSSAMU</link> and <link linkend="_class_s_v_f_1_1_m_s_s_a_c_h_i">MSSACHI</link>) </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_s_v_f_g_1a0920e9f9896531959d74ae61013d96d6">SVF::SVFG</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/Graphs/SVFGOPT.hlib/Graphs/SVFGOPT.cpp</section>
</section>
