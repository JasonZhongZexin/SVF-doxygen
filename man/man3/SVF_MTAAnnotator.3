.TH "SVF::MTAAnnotator" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SVF::MTAAnnotator
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MTAAnnotator\&.h>\fP
.PP
Inherits \fBSVF::Annotator\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Set< const Instruction * > \fBInstSet\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMTAAnnotator\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~MTAAnnotator\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBannotateDRCheck\fP (Instruction *inst)"
.br
.RI "Annotation\&. "
.ti -1c
.RI "void \fBinitialize\fP (\fBMHP\fP *mhp, \fBLockAnalysis\fP *lsa)"
.br
.RI "Initialize\&. "
.ti -1c
.RI "void \fBpruneThreadLocal\fP (\fBPointerAnalysis\fP *pta)"
.br
.RI "Prune candidate instructions that are thread local\&. "
.ti -1c
.RI "void \fBpruneAliasMHP\fP (\fBPointerAnalysis\fP *pta)"
.br
.RI "Prune candidate instructions that non-mhp and non-alias with others\&. "
.ti -1c
.RI "void \fBperformAnnotate\fP ()"
.br
.RI "Perform annotation\&. "
.ti -1c
.RI "void \fBcollectLoadStoreInst\fP (\fBSVFModule\fP *mod)"
.br
.RI "Collect all load and store instruction\&. "
.ti -1c
.RI "const Value * \fBgetStoreOperand\fP (const Instruction *inst)"
.br
.RI "Get operand of store and load\&. "
.ti -1c
.RI "const Value * \fBgetLoadOperand\fP (const Instruction *inst)"
.br
.ti -1c
.RI "bool \fBisMemset\fP (const Instruction *I)"
.br
.RI "Check if Function 'F' is memset\&. "
.ti -1c
.RI "bool \fBisMemcpy\fP (const Instruction *I)"
.br
.RI "Check if Function 'F' is memcpy\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "u32_t \fBnumOfAllSt\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfAllLd\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfNonLocalSt\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfNonLocalLd\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfAliasSt\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfAliasLd\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfMHPSt\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfMHPLd\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfAnnotatedSt\fP"
.br
.ti -1c
.RI "u32_t \fBnumOfAnnotatedLd\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const u32_t \fBANNO_MHP\fP = 0x04"
.br
.RI "Constant INTERLEV_FLAG values\&. "
.ti -1c
.RI "static const u32_t \fBANNO_ALIAS\fP = 0x02"
.br
.ti -1c
.RI "static const u32_t \fBANNO_LOCAL\fP = 0x01"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBMTA\fP annotation 
.SH "Member Function Documentation"
.PP 
.SS "void MTAAnnotator::annotateDRCheck (Instruction * inst)"

.PP
Annotation\&. memcpy and memset is not annotated
.SS "void MTAAnnotator::pruneAliasMHP (\fBPointerAnalysis\fP * pta)"

.PP
Prune candidate instructions that non-mhp and non-alias with others\&. if it1 == it2, mhp analysis will annotate it1 that locates in loop or recursion\&. but alias analysis fails to determine whether it1 is in loop or recursion, that means all store instructions will be annotated by alias analysis to guarantee sound\&.
.SS "void MTAAnnotator::pruneThreadLocal (\fBPointerAnalysis\fP * pta)"

.PP
Prune candidate instructions that are thread local\&. find fork arguments' objects
.PP
find global pointer-to objects
.PP
find all non-local objects that are transitively pointed by global and fork arguments\&.
.PP
compute all store and load instructions that may operate a non-local object\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
