<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_t_c_t" kind="class" language="C++" prot="public">
    <compoundname>SVF::TCT</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_generic_graph" prot="public" virt="non-virtual">SVF::GenericGraph&lt; TCTNode, TCTEdge &gt;</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a7c53c7ff773a253976374392d4930d6e" prot="public" static="no">
        <type>TCTEdge::ThreadCreateEdgeSet</type>
        <definition>typedef TCTEdge::ThreadCreateEdgeSet SVF::TCT::ThreadCreateEdgeSet</definition>
        <argsstring></argsstring>
        <name>ThreadCreateEdgeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="119" column="42" bodyfile="include/MTA/TCT.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a6f4ab4fb901620c733d90b380c9db670" prot="public" static="no">
        <type>ThreadCreateEdgeSet::iterator</type>
        <definition>typedef ThreadCreateEdgeSet::iterator SVF::TCT::TCTNodeIter</definition>
        <argsstring></argsstring>
        <name>TCTNodeIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="120" column="43" bodyfile="include/MTA/TCT.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a3123719a96acbefe0e9944c68ba44185" prot="public" static="no">
        <type>Set&lt; const Function * &gt;</type>
        <definition>typedef Set&lt;const Function*&gt; SVF::TCT::FunSet</definition>
        <argsstring></argsstring>
        <name>FunSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="121" column="17" bodyfile="include/MTA/TCT.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a13d01a1747d8ee1521596aeb36bdb655" prot="public" static="no">
        <type>std::vector&lt; const Instruction * &gt;</type>
        <definition>typedef std::vector&lt;const Instruction*&gt; SVF::TCT::InstVec</definition>
        <argsstring></argsstring>
        <name>InstVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="122" column="25" bodyfile="include/MTA/TCT.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a3238d12557309967f8bdfdfc275b6710" prot="public" static="no">
        <type>Set&lt; const Instruction * &gt;</type>
        <definition>typedef Set&lt;const Instruction*&gt; SVF::TCT::InstSet</definition>
        <argsstring></argsstring>
        <name>InstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="123" column="17" bodyfile="include/MTA/TCT.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1afb579a5bdcc0a1c6b075bb9aae36c237" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const PTACallGraphNode*&gt; SVF::TCT::PTACGNodeSet</definition>
        <argsstring></argsstring>
        <name>PTACGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="124" column="17" bodyfile="include/MTA/TCT.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a7925578e1546df6c3cfb6a62e14b1f6d" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>, <ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> * &gt;</type>
        <definition>typedef Map&lt;const CxtThread,TCTNode*&gt; SVF::TCT::CxtThreadToNodeMap</definition>
        <argsstring></argsstring>
        <name>CxtThreadToNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="125" column="17" bodyfile="include/MTA/TCT.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a603a3e33152a010ed0ef712e200fd5db" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>, CallStrCxt &gt;</type>
        <definition>typedef Map&lt;const CxtThread,CallStrCxt&gt; SVF::TCT::CxtThreadToForkCxt</definition>
        <argsstring></argsstring>
        <name>CxtThreadToForkCxt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="126" column="17" bodyfile="include/MTA/TCT.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a3a7f81c2ef1911c3c4e538108dffe0bf" prot="public" static="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>, const Function * &gt;</type>
        <definition>typedef Map&lt;const CxtThread,const Function*&gt; SVF::TCT::CxtThreadToFun</definition>
        <argsstring></argsstring>
        <name>CxtThreadToFun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="127" column="17" bodyfile="include/MTA/TCT.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1ab5569ca90951ff0ddeefe005a8506764" prot="public" static="no">
        <type>Map&lt; const Instruction *, const Loop * &gt;</type>
        <definition>typedef Map&lt;const Instruction*, const Loop*&gt; SVF::TCT::InstToLoopMap</definition>
        <argsstring></argsstring>
        <name>InstToLoopMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="128" column="17" bodyfile="include/MTA/TCT.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a23df579f18d4ea4b0f47272091ddc43e" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">FIFOWorkList</ref>&lt; <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &gt;</type>
        <definition>typedef FIFOWorkList&lt;CxtThreadProc&gt; SVF::TCT::CxtThreadProcVec</definition>
        <argsstring></argsstring>
        <name>CxtThreadProcVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="129" column="26" bodyfile="include/MTA/TCT.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1ac8a6a5ee40f31f8377945a402ac161ad" prot="public" static="no">
        <type>set&lt; <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &gt;</type>
        <definition>typedef set&lt;CxtThreadProc&gt; SVF::TCT::CxtThreadProcSet</definition>
        <argsstring></argsstring>
        <name>CxtThreadProcSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="130" column="17" bodyfile="include/MTA/TCT.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_t_c_t_1a71942c7386d094426ae86633a9b1f755" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">SCCDetection</ref>&lt; <ref refid="class_s_v_f_1_1_p_t_a_call_graph" kindref="compound">PTACallGraph</ref> * &gt;</type>
        <definition>typedef SCCDetection&lt;PTACallGraph*&gt; SVF::TCT::ThreadCallGraphSCC</definition>
        <argsstring></argsstring>
        <name>ThreadCallGraphSCC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="131" column="26" bodyfile="include/MTA/TCT.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1ac9ddd6559e818f37c018ed5435182363" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::TCT::tcg</definition>
        <argsstring></argsstring>
        <name>tcg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="367" column="21" bodyfile="include/MTA/TCT.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a980de0593e41d18d2716aa5120d35d04" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::TCT::pta</definition>
        <argsstring></argsstring>
        <name>pta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="368" column="21" bodyfile="include/MTA/TCT.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a52e3759054281c1ca1ccde07a9af1799" prot="private" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::TCTNodeNum</definition>
        <argsstring></argsstring>
        <name>TCTNodeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="369" column="11" bodyfile="include/MTA/TCT.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a862899f2e5fb35920adf8e763e1dba57" prot="private" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::TCTEdgeNum</definition>
        <argsstring></argsstring>
        <name>TCTEdgeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="370" column="11" bodyfile="include/MTA/TCT.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1aaae41663b1d1f4d38b047c50c156defb" prot="private" static="no" mutable="no">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::MaxCxtSize</definition>
        <argsstring></argsstring>
        <name>MaxCxtSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="371" column="11" bodyfile="include/MTA/TCT.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a140eaf9440ae9d52dbfb659967aa449a" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::TCT::entryFuncSet</definition>
        <argsstring></argsstring>
        <name>entryFuncSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="511" column="12" bodyfile="include/MTA/TCT.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a720a934088dddda2b134cabcc59ef43d" prot="private" static="no" mutable="no">
        <type>FunSet</type>
        <definition>FunSet SVF::TCT::candidateFuncSet</definition>
        <argsstring></argsstring>
        <name>candidateFuncSet</name>
        <briefdescription>
<para>Procedures that are neither called by other functions nor extern functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="512" column="12" bodyfile="include/MTA/TCT.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a30662928bafc97c1e7b123270ca69980" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_s_c_c_detection" kindref="compound">ThreadCallGraphSCC</ref> *</type>
        <definition>ThreadCallGraphSCC* SVF::TCT::tcgSCC</definition>
        <argsstring></argsstring>
        <name>tcgSCC</name>
        <briefdescription>
<para>Procedures we care about during call graph traversing when creating <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="513" column="24" bodyfile="include/MTA/TCT.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a80dad1dfdf64cb7a5805eb8bedf79226" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_f_i_f_o_work_list" kindref="compound">CxtThreadProcVec</ref></type>
        <definition>CxtThreadProcVec SVF::TCT::ctpList</definition>
        <argsstring></argsstring>
        <name>ctpList</name>
        <briefdescription>
<para>Thread call graph SCC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="514" column="22" bodyfile="include/MTA/TCT.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a402dd078c46efc1d7348d81b45e347f2" prot="private" static="no" mutable="no">
        <type>CxtThreadProcSet</type>
        <definition>CxtThreadProcSet SVF::TCT::visitedCTPs</definition>
        <argsstring></argsstring>
        <name>visitedCTPs</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> <ref refid="class_s_v_f_1_1_list" kindref="compound">List</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="515" column="22" bodyfile="include/MTA/TCT.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a0ccb6e9ffff0f22a0a054a92222893d5" prot="private" static="no" mutable="no">
        <type>CxtThreadToNodeMap</type>
        <definition>CxtThreadToNodeMap SVF::TCT::ctpToNodeMap</definition>
        <argsstring></argsstring>
        <name>ctpToNodeMap</name>
        <briefdescription>
<para>Record all visited ctps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="516" column="24" bodyfile="include/MTA/TCT.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1aea88fdb40c28724546f5903d3a73999a" prot="private" static="no" mutable="no">
        <type>CxtThreadToForkCxt</type>
        <definition>CxtThreadToForkCxt SVF::TCT::ctToForkCxtMap</definition>
        <argsstring></argsstring>
        <name>ctToForkCxtMap</name>
        <briefdescription>
<para>Map a ctp to its graph node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="517" column="24" bodyfile="include/MTA/TCT.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a36c7884869d923c1a9363962c9e013bd" prot="private" static="no" mutable="no">
        <type>CxtThreadToFun</type>
        <definition>CxtThreadToFun SVF::TCT::ctToRoutineFunMap</definition>
        <argsstring></argsstring>
        <name>ctToRoutineFunMap</name>
        <briefdescription>
<para>Map a <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> to the context at its spawning site (fork site). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="518" column="20" bodyfile="include/MTA/TCT.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1ae64d6203b41c92d4ca617b8e976b88b2" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_p_t_a_c_f_info_builder" kindref="compound">PTACFInfoBuilder</ref></type>
        <definition>PTACFInfoBuilder SVF::TCT::loopInfoBuilder</definition>
        <argsstring></argsstring>
        <name>loopInfoBuilder</name>
        <briefdescription>
<para>Map a <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> to its start routine function. </para>
        </briefdescription>
        <detaileddescription>
<para>LoopInfo </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="519" column="22" bodyfile="include/MTA/TCT.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a5b1f44ffa732607a7800728befa5bc57" prot="private" static="no" mutable="no">
        <type>InstToLoopMap</type>
        <definition>InstToLoopMap SVF::TCT::joinSiteToLoopMap</definition>
        <argsstring></argsstring>
        <name>joinSiteToLoopMap</name>
        <briefdescription>
<para>map an inloop join to its loop class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="520" column="19" bodyfile="include/MTA/TCT.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_t_c_t_1a1b3872361dc17aaea359db8ce0cc2431" prot="private" static="no" mutable="no">
        <type>InstSet</type>
        <definition>InstSet SVF::TCT::inRecurJoinSites</definition>
        <argsstring></argsstring>
        <name>inRecurJoinSites</name>
        <briefdescription>
<para>Fork or Join sites in recursions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="521" column="13" bodyfile="include/MTA/TCT.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a8eaa746805b0afc17329d0ba4ad6a887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::TCT::TCT</definition>
        <argsstring>(PointerAnalysis *p)</argsstring>
        <name>TCT</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="134" column="5" bodyfile="include/MTA/TCT.h" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aee699da702973dd42398b42a2ec65e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::TCT::~TCT</definition>
        <argsstring>()</argsstring>
        <name>~TCT</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="145" column="13" bodyfile="include/MTA/TCT.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a1602d02773578bca73dcbd29b95c67d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_thread_call_graph" kindref="compound">ThreadCallGraph</ref> *</type>
        <definition>ThreadCallGraph* SVF::TCT::getThreadCallGraph</definition>
        <argsstring>() const</argsstring>
        <name>getThreadCallGraph</name>
        <briefdescription>
<para>Get TCG. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="150" column="28" bodyfile="include/MTA/TCT.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a5b087b42340d1a1b2ee37339637709d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
        <definition>PointerAnalysis* SVF::TCT::getPTA</definition>
        <argsstring>() const</argsstring>
        <name>getPTA</name>
        <briefdescription>
<para>Get PTA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="155" column="28" bodyfile="include/MTA/TCT.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
        <definition>TCTNode* SVF::TCT::getTCTNode</definition>
        <argsstring>(NodeID id) const</argsstring>
        <name>getTCTNode</name>
        <param>
          <type>NodeID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="160" column="20" bodyfile="include/MTA/TCT.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1adb2025048dc69f0689f526c58df29802" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_edge" kindref="compound">TCTEdge</ref> *</type>
        <definition>TCTEdge * TCT::hasGraphEdge</definition>
        <argsstring>(TCTNode *src, TCTNode *dst, TCTEdge::CEDGEK kind) const</argsstring>
        <name>hasGraphEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>TCTEdge::CEDGEK</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Whether we have aleady created this call graph edge. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether we have already created this call graph edge </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="165" column="13" bodyfile="lib/MTA/TCT.cpp" bodystart="562" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a7b40580939dc63f501a32571806c07bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_edge" kindref="compound">TCTEdge</ref> *</type>
        <definition>TCTEdge * TCT::getGraphEdge</definition>
        <argsstring>(TCTNode *src, TCTNode *dst, TCTEdge::CEDGEK kind)</argsstring>
        <name>getGraphEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>TCTEdge::CEDGEK</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Get call graph edge via nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>get CallGraph edge via nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="167" column="13" bodyfile="lib/MTA/TCT.cpp" bodystart="579" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a511c2ee4cfdc01a720135b2cd493fe3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ThreadCreateEdgeSet::const_iterator</type>
        <definition>ThreadCreateEdgeSet::const_iterator SVF::TCT::getChildrenBegin</definition>
        <argsstring>(const TCTNode *node) const</argsstring>
        <name>getChildrenBegin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get children and parent nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="171" column="48" bodyfile="include/MTA/TCT.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1af47837e30a80e8d6684f3ee6001afb7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ThreadCreateEdgeSet::const_iterator</type>
        <definition>ThreadCreateEdgeSet::const_iterator SVF::TCT::getChildrenEnd</definition>
        <argsstring>(const TCTNode *node) const</argsstring>
        <name>getChildrenEnd</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="175" column="48" bodyfile="include/MTA/TCT.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1afa5bd475c4dc068a0ecc0ec5caab77a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ThreadCreateEdgeSet::const_iterator</type>
        <definition>ThreadCreateEdgeSet::const_iterator SVF::TCT::getParentsBegin</definition>
        <argsstring>(const TCTNode *node) const</argsstring>
        <name>getParentsBegin</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="179" column="48" bodyfile="include/MTA/TCT.h" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a5d6a06c7daff36a14fa1f371a477784d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ThreadCreateEdgeSet::const_iterator</type>
        <definition>ThreadCreateEdgeSet::const_iterator SVF::TCT::getParentsEnd</definition>
        <argsstring>(const TCTNode *node) const</argsstring>
        <name>getParentsEnd</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="183" column="48" bodyfile="include/MTA/TCT.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a54cceb577b4fb89c1d84011ec4d2fe2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::TCT::getMakredProcs</definition>
        <argsstring>() const</argsstring>
        <name>getMakredProcs</name>
        <briefdescription>
<para>Get marked candidate functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="190" column="25" bodyfile="include/MTA/TCT.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a692a74188f141ffbdbb859ecae8b07ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FunSet &amp;</type>
        <definition>const FunSet&amp; SVF::TCT::getEntryProcs</definition>
        <argsstring>() const</argsstring>
        <name>getEntryProcs</name>
        <briefdescription>
<para>Get marked candidate functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="196" column="25" bodyfile="include/MTA/TCT.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1af03bfeae7e09a9f62d96ba59632e588f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::getTCTNodeNum</definition>
        <argsstring>() const</argsstring>
        <name>getTCTNodeNum</name>
        <briefdescription>
<para>Get Statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="203" column="18" bodyfile="include/MTA/TCT.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a6ac3c91742a6e9088c4e9cf1b7d2f42e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::getTCTEdgeNum</definition>
        <argsstring>() const</argsstring>
        <name>getTCTEdgeNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="207" column="18" bodyfile="include/MTA/TCT.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a49f0672760c29b9be7b6f99a4c82ab7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32_t</type>
        <definition>u32_t SVF::TCT::getMaxCxtSize</definition>
        <argsstring>() const</argsstring>
        <name>getMaxCxtSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="211" column="18" bodyfile="include/MTA/TCT.h" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a5d5a753b4d2633e3aaf58859274ffe7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::hasTCTNode</definition>
        <argsstring>(const CxtThread &amp;ct) const</argsstring>
        <name>hasTCTNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Find/Get <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="219" column="17" bodyfile="include/MTA/TCT.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aac9d98a33fbaa6defa3f847d0bbe76d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
        <definition>TCTNode* SVF::TCT::getTCTNode</definition>
        <argsstring>(const CxtThread &amp;ct) const</argsstring>
        <name>getTCTNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="223" column="20" bodyfile="include/MTA/TCT.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ab0abc0713e6b87a8b1453bababced79c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::isCandidateFun</definition>
        <argsstring>(const Function *fun) const</argsstring>
        <name>isCandidateFun</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Whether it is a candidate function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="232" column="17" bodyfile="include/MTA/TCT.h" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a95cd490d37f8831edc6910f7ecdf413e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::inSameCallGraphSCC</definition>
        <argsstring>(const PTACallGraphNode *src, const PTACallGraphNode *dst)</argsstring>
        <name>inSameCallGraphSCC</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_node" kindref="compound">PTACallGraphNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Whether two functions in the same callgraph scc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="238" column="17" bodyfile="include/MTA/TCT.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a6855a3a8a98591e58dba07047f7705ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::hasParentThread</definition>
        <argsstring>(NodeID tid) const</argsstring>
        <name>hasParentThread</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get parent and sibling threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Has parent thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="246" column="17" bodyfile="include/MTA/TCT.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a516578af1f8666ff672e6611e61d7152" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::TCT::getParentThread</definition>
        <argsstring>(NodeID tid) const</argsstring>
        <name>getParentThread</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get parent thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="252" column="19" bodyfile="include/MTA/TCT.h" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aeb7dff0c02a90cb338c8d054d2b78984" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const NodeBS</type>
        <definition>const NodeBS SVF::TCT::getAncestorThread</definition>
        <argsstring>(NodeID tid) const</argsstring>
        <name>getAncestorThread</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get all ancestor threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="261" column="18" bodyfile="include/MTA/TCT.h" bodystart="261" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a60e63f6ddfe78c4cf4fd3a70875b727f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const NodeBS</type>
        <definition>const NodeBS SVF::TCT::getSiblingThread</definition>
        <argsstring>(NodeID tid) const</argsstring>
        <name>getSiblingThread</name>
        <param>
          <type>NodeID</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get sibling threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="282" column="25" bodyfile="include/MTA/TCT.h" bodystart="282" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ab4bc72ca330b315df06f2d4d2c1a7b4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CallStrCxt &amp;</type>
        <definition>const CallStrCxt&amp; SVF::TCT::getCxtOfCxtThread</definition>
        <argsstring>(const CxtThread &amp;ct) const</argsstring>
        <name>getCxtOfCxtThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>get the context of a thread at its spawning site (fork site) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="301" column="22" bodyfile="include/MTA/TCT.h" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a7ccacac1c673b38215b90e4eb480581f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Function *</type>
        <definition>const Function* SVF::TCT::getStartRoutineOfCxtThread</definition>
        <argsstring>(const CxtThread &amp;ct) const</argsstring>
        <name>getStartRoutineOfCxtThread</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>get the start routine function of a thread </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="309" column="20" bodyfile="include/MTA/TCT.h" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a52a707bf6f278e810f440c279f5261dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop* SVF::TCT::getJoinLoop</definition>
        <argsstring>(const Instruction *join)</argsstring>
        <name>getJoinLoop</name>
        <param>
          <type>const Instruction *</type>
          <declname>join</declname>
        </param>
        <briefdescription>
<para>Get loop for join site. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="317" column="23" bodyfile="include/MTA/TCT.h" bodystart="317" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a65d0260b37ab60debb7fa84fa0b7a5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::isJoinMustExecutedInLoop</definition>
        <argsstring>(const Loop *lp, const Instruction *join)</argsstring>
        <name>isJoinMustExecutedInLoop</name>
        <param>
          <type>const Loop *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>join</declname>
        </param>
        <briefdescription>
<para>Return true if a join instruction must be executed inside a loop. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if a join instruction must be executed inside a loop joinbb should post dominate the successive basic block of a loop header </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="326" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="269" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1add9104a3d7a821e9c2f266ae1810d2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop * TCT::getLoop</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getLoop</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get loop for an instruction. </para>
        </briefdescription>
        <detaileddescription>
<para>Get loop for fork/join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="328" column="16" bodyfile="lib/MTA/TCT.cpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a9b2977014d3c3e7df5cb56cc876ddc70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const DominatorTree *</type>
        <definition>const DominatorTree * TCT::getDT</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getDT</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get dominator for a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="330" column="25" bodyfile="lib/MTA/TCT.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ae4d26d2a77e45104523cfc481012bccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const PostDominatorTree *</type>
        <definition>const PostDominatorTree * TCT::getPostDT</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>getPostDT</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Get dominator for a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="332" column="29" bodyfile="lib/MTA/TCT.cpp" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a71249dc399055790d86dcba6d9dd3021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Loop *</type>
        <definition>const Loop * TCT::getLoop</definition>
        <argsstring>(const BasicBlock *bb)</argsstring>
        <name>getLoop</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Get loop for fork/join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Get loop for fork/join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="334" column="16" bodyfile="lib/MTA/TCT.cpp" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ac66b3a193240c17c3f06437442b2d8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ScalarEvolution *</type>
        <definition>ScalarEvolution * TCT::getSE</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>getSE</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Get SE for function. </para>
        </briefdescription>
        <detaileddescription>
<para>Get SE for function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="336" column="21" bodyfile="lib/MTA/TCT.cpp" bodystart="375" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::getNextInsts</definition>
        <argsstring>(const Instruction *inst, InstVec &amp;instSet)</argsstring>
        <name>getNextInsts</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
          <defname>curInst</defname>
        </param>
        <param>
          <type>InstVec &amp;</type>
          <declname>instSet</declname>
          <defname>instList</defname>
        </param>
        <briefdescription>
<para>Get the next instructions following control flow. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the next instructions following control flow </para>
        </detaileddescription>
        <inbodydescription>
<para>traverse to successive statements</para>
<para>if we are sitting at the loop header, then go inside the loop but ignore loop exit</para>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="339" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="445" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::pushCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>pushCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Push calling context. </para>
        </briefdescription>
        <detaileddescription>
<para>Push calling context </para>
        </detaileddescription>
        <inbodydescription>
<para>handle calling context for candidate functions only</para>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="341" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="472" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::matchCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, const Instruction *call, const Function *callee)</argsstring>
        <name>matchCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const Instruction *</type>
          <declname>call</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Match context. </para>
        </briefdescription>
        <detaileddescription>
<para>Match calling context </para>
        </detaileddescription>
        <inbodydescription>
<para>handle calling context for candidate functions only</para>
<para>partial match</para>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="343" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="493" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aa98a5b427a92eca1e043efcdf7945169" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::TCT::pushCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt, CallSiteID csId)</argsstring>
        <name>pushCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>CallSiteID</type>
          <declname>csId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="345" column="17" bodyfile="include/MTA/TCT.h" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a4ff016e5933a4d094989c600ad25dd99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::isJoinSiteInRecursion</definition>
        <argsstring>(const Instruction *join) const</argsstring>
        <name>isJoinSiteInRecursion</name>
        <param>
          <type>const Instruction *</type>
          <declname>join</declname>
        </param>
        <briefdescription>
<para>Whether a join site is in recursion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="352" column="17" bodyfile="include/MTA/TCT.h" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aa86c4422e17cf00408444f18687d555b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::dumpCxt</definition>
        <argsstring>(CallStrCxt &amp;cxt)</argsstring>
        <name>dumpCxt</name>
        <param>
          <type>CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <briefdescription>
<para>Dump calling context. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump calling context information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="358" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="523" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a716c97a80c483c571ca7a03b9acce3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::dump</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Dump the graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Dump call graph into dot file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="361" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="541" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1abf2a992a66de9832915b1f959b8988e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
<para>Print <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> information. </para>
        </briefdescription>
        <detaileddescription>
<para>Print <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="364" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="550" bodyend="557"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a4d26418c050876eb365af0ee31d3922c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
        <definition>TCTNode* SVF::TCT::addTCTNode</definition>
        <argsstring>(const CxtThread &amp;ct)</argsstring>
        <name>addTCTNode</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="374" column="20" bodyfile="include/MTA/TCT.h" bodystart="374" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aa87bfebf48f9e74655ab3db4ec1576b3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::addTCTEdge</definition>
        <argsstring>(TCTNode *src, TCTNode *dst)</argsstring>
        <name>addTCTEdge</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="385" column="17" bodyfile="include/MTA/TCT.h" bodystart="385" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ab86389b3bf292c5b3d2b29fc49a5d94d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <briefdescription>
<para>Build <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Start building <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="399" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="384" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a8bb7ffa8dd185c52e6c150f9bc995511" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::markRelProcs</definition>
        <argsstring>()</argsstring>
        <name>markRelProcs</name>
        <briefdescription>
<para>Mark relevant procedures that are backward reachable from any fork/join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark relevant procedures that are backward reachable from any fork/join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="403" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="112" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ac0400af94cf37f2f4507c3263ea4499a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::markRelProcs</definition>
        <argsstring>(const Function *fun)</argsstring>
        <name>markRelProcs</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="404" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="138" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a313962cab59c12057d4f780a918ed1e8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::collectEntryFunInCallGraph</definition>
        <argsstring>()</argsstring>
        <name>collectEntryFunInCallGraph</name>
        <briefdescription>
<para>Get entry functions that are neither called by other functions nor extern functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Get Main function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="408" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="164" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ad15753a9c20d738325e5c0edea6c9c56" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::collectMultiForkedThreads</definition>
        <argsstring>()</argsstring>
        <name>collectMultiForkedThreads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect multi-forked threads whose 1, cxt is in loop or recursion; 2, parent thread is a multi-forked thread.</para>
<para>Collect all multi-forked threads </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="412" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="183" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a276da0e6bbe3e4fe9d1dd051ddd8d81b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::collectLoopInfoForJoin</definition>
        <argsstring>()</argsstring>
        <name>collectLoopInfoForJoin</name>
        <briefdescription>
<para>Handle join site in loop. </para>
        </briefdescription>
        <detaileddescription>
<para>collect loop info for join sites</para>
<para>Collect loop info for join sites the in-loop join site must be joined if the loop is executed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="417" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="293" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a549a95aa04233c98732777ea210d8525" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::isLoopHeaderOfJoinLoop</definition>
        <argsstring>(const BasicBlock *bb)</argsstring>
        <name>isLoopHeaderOfJoinLoop</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Whether a given bb is a loop head of a inloop join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if a given bb is a loop head of a inloop join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="419" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a154f779578f6112e7c9e90d585c08eb6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::isLoopExitOfJoinLoop</definition>
        <argsstring>(const BasicBlock *bb)</argsstring>
        <name>isLoopExitOfJoinLoop</name>
        <param>
          <type>const BasicBlock *</type>
          <declname>bb</declname>
        </param>
        <briefdescription>
<para>Whether a given bb is an exit of a inloop join site. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether a given bb is an exit of a inloop join site </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="421" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="326" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a6bcf4c3c095830626423bf522653b306" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::isInLoopInstruction</definition>
        <argsstring>(const Instruction *inst)</argsstring>
        <name>isInLoopInstruction</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Multi-forked threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Whether an instruction is in a loop</para>
<para>An instruction i is in loop (1) the instruction i itself (2) all the callsites invoke the function where i resides in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="427" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="24" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1af7cd9f1862836818593685bc5105da52" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TCT::isInRecursion</definition>
        <argsstring>(const Instruction *inst) const</argsstring>
        <name>isInRecursion</name>
        <param>
          <type>const Instruction *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
<para>Whether an instruction is in a recursion. </para>
        </briefdescription>
        <detaileddescription>
<para>An instruction i is in a recursion (1) the function f where i resides in is in a recursion (2) any caller function starting from the function f in is in a recursion </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="429" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="70" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aac0c4c3f1c7cb1d89ebd2a3da2d49bd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TCT::handleCallRelation</definition>
        <argsstring>(CxtThreadProc &amp;ctp, const PTACallGraphEdge *cgEdge, CallSite call)</argsstring>
        <name>handleCallRelation</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>ctp</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_a_call_graph_edge" kindref="compound">PTACallGraphEdge</ref> *</type>
          <declname>cgEdge</declname>
        </param>
        <param>
          <type>CallSite</type>
          <declname>call</declname>
          <defname>cs</defname>
        </param>
        <briefdescription>
<para>Handle call relations. </para>
        </briefdescription>
        <detaileddescription>
<para>Handle call relations </para>
        </detaileddescription>
        <inbodydescription>
<para>Create spawnee <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> node</para>
<para>Add <ref refid="class_s_v_f_1_1_t_c_t" kindref="compound">TCT</ref> nodes and edge</para>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="433" column="10" bodyfile="lib/MTA/TCT.cpp" bodystart="221" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a787e815e9c7e53566ce56127dd31a3a9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_t_c_t_node" kindref="compound">TCTNode</ref> *</type>
        <definition>TCTNode* SVF::TCT::getOrCreateTCTNode</definition>
        <argsstring>(const CallStrCxt &amp;cxt, const CallInst *fork, const CallStrCxt &amp;oldCxt, const Function *routine)</argsstring>
        <name>getOrCreateTCTNode</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const CallInst *</type>
          <declname>fork</declname>
        </param>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>oldCxt</declname>
        </param>
        <param>
          <type>const Function *</type>
          <declname>routine</declname>
        </param>
        <briefdescription>
<para>Get or create a tct node based on <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="437" column="20" bodyfile="include/MTA/TCT.h" bodystart="437" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a11e36f9b58646dee4014e12e55c70508" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::TCT::setMultiForkedAttrs</definition>
        <argsstring>(CxtThread &amp;ct)</argsstring>
        <name>setMultiForkedAttrs</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Set multi-forked thread attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>non-main thread</para>
<para>main thread</para>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="455" column="10" bodyfile="include/MTA/TCT.h" bodystart="455" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a2978381d69a9fd1fcee6a1258bc3bb5c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::TCT::addCxtOfCxtThread</definition>
        <argsstring>(const CallStrCxt &amp;cxt, const CxtThread &amp;ct)</argsstring>
        <name>addCxtOfCxtThread</name>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>cxt</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Add context for a thread at its spawning site (fork site) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="472" column="10" bodyfile="include/MTA/TCT.h" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a11d9eeffdb1fc777f573fae75f48532a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::TCT::addStartRoutineOfCxtThread</definition>
        <argsstring>(const Function *fun, const CxtThread &amp;ct)</argsstring>
        <name>addStartRoutineOfCxtThread</name>
        <param>
          <type>const Function *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread" kindref="compound">CxtThread</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>Add start routine function of a cxt thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="477" column="10" bodyfile="include/MTA/TCT.h" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a002bac3dc928bc78b94de0ca97b1ec1d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::pushToCTPWorkList</definition>
        <argsstring>(const CxtThreadProc &amp;ctp)</argsstring>
        <name>pushToCTPWorkList</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>ctp</declname>
        </param>
        <briefdescription>
<para>WorkList helper functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="484" column="17" bodyfile="include/MTA/TCT.h" bodystart="484" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1ad84cdb0d192312f96d006f7b9e660da3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref></type>
        <definition>CxtThreadProc SVF::TCT::popFromCTPWorkList</definition>
        <argsstring>()</argsstring>
        <name>popFromCTPWorkList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="493" column="26" bodyfile="include/MTA/TCT.h" bodystart="493" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1a68d2b1107f9cc2edcc01265298b7307c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::TCT::isVisitedCTPs</definition>
        <argsstring>(const CxtThreadProc &amp;ctp) const</argsstring>
        <name>isVisitedCTPs</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>ctp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="498" column="17" bodyfile="include/MTA/TCT.h" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_t_c_t_1aa453e3b27ec5fa4782bd6b9adef66877" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::TCT::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Clean up memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/TCT.h" line="504" column="17" bodyfile="include/MTA/TCT.h" bodystart="504" bodyend="509"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::TCT</label>
        <link refid="class_s_v_f_1_1_t_c_t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GenericThreadCreateTreeTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::TCT</label>
        <link refid="class_s_v_f_1_1_t_c_t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GenericThreadCreateTreeTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
    </collaborationgraph>
    <location file="include/MTA/TCT.h" line="115" column="1" bodyfile="include/MTA/TCT.h" bodystart="116" bodyend="522"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_t_c_t_1a2978381d69a9fd1fcee6a1258bc3bb5c" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>addCxtOfCxtThread</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0a8831a5429005ff9d71adbd6bf3994f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>addGNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a11d9eeffdb1fc777f573fae75f48532a" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>addStartRoutineOfCxtThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aa87bfebf48f9e74655ab3db4ec1576b3" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>addTCTEdge</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a4d26418c050876eb365af0ee31d3922c" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>addTCTNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a0d9744b1b0e7a09a6f7af29188e243b7" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3385b008ae03444404c1e392fd47f1d6" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>begin</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ab86389b3bf292c5b3d2b29fc49a5d94d" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>build</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a720a934088dddda2b134cabcc59ef43d" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>candidateFuncSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a313962cab59c12057d4f780a918ed1e8" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>collectEntryFunInCallGraph</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a276da0e6bbe3e4fe9d1dd051ddd8d81b" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>collectLoopInfoForJoin</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ad15753a9c20d738325e5c0edea6c9c56" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>collectMultiForkedThreads</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a5dfa3f178d4abf37177d0d74ff4c6a97" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a80dad1dfdf64cb7a5805eb8bedf79226" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>ctpList</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a0ccb6e9ffff0f22a0a054a92222893d5" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>ctpToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aea88fdb40c28724546f5903d3a73999a" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>ctToForkCxtMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a36c7884869d923c1a9363962c9e013bd" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>ctToRoutineFunMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ac8a6a5ee40f31f8377945a402ac161ad" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>CxtThreadProcSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a23df579f18d4ea4b0f47272091ddc43e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>CxtThreadProcVec</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a603a3e33152a010ed0ef712e200fd5db" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>CxtThreadToForkCxt</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a3a7f81c2ef1911c3c4e538108dffe0bf" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>CxtThreadToFun</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a7925578e1546df6c3cfb6a62e14b1f6d" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>CxtThreadToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aa453e3b27ec5fa4782bd6b9adef66877" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>destroy</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a716c97a80c483c571ca7a03b9acce3e8" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aa86c4422e17cf00408444f18687d555b" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>dumpCxt</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2fbc96de5f066469c2739229307bcc0c" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>edgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a12d493d6ad2b6c89f240c9ccfa3bdf30" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a4bef15157423cef48dc7333a803cd27d" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3001af3746d26b7dc0a212db5e48a4bb" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>end</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a140eaf9440ae9d52dbfb659967aa449a" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>entryFuncSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a3123719a96acbefe0e9944c68ba44185" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>FunSet</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1aa5837cddbbd63c5a8ac5725bcecb192f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aeb7dff0c02a90cb338c8d054d2b78984" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getAncestorThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a511c2ee4cfdc01a720135b2cd493fe3b" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getChildrenBegin</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1af47837e30a80e8d6684f3ee6001afb7a" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getChildrenEnd</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ab4bc72ca330b315df06f2d4d2c1a7b4f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getCxtOfCxtThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a9b2977014d3c3e7df5cb56cc876ddc70" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getDT</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a692a74188f141ffbdbb859ecae8b07ab" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getEntryProcs</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a43c9c773bfa17abf481c33073e30d01b" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getGNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a7b40580939dc63f501a32571806c07bc" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a52a707bf6f278e810f440c279f5261dc" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getJoinLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1add9104a3d7a821e9c2f266ae1810d2e3" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a71249dc399055790d86dcba6d9dd3021" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a54cceb577b4fb89c1d84011ec4d2fe2c" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getMakredProcs</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a49f0672760c29b9be7b6f99a4c82ab7e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getMaxCxtSize</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a97c3081d0648a8d483b07f23bbd1b6bf" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getNextInsts</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a787e815e9c7e53566ce56127dd31a3a9" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>getOrCreateTCTNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1afa5bd475c4dc068a0ecc0ec5caab77a9" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getParentsBegin</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a5d6a06c7daff36a14fa1f371a477784d" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getParentsEnd</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a516578af1f8666ff672e6611e61d7152" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getParentThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ae4d26d2a77e45104523cfc481012bccc" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getPostDT</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a5b087b42340d1a1b2ee37339637709d3" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getPTA</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ac66b3a193240c17c3f06437442b2d8bf" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getSE</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a60e63f6ddfe78c4cf4fd3a70875b727f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getSiblingThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a7ccacac1c673b38215b90e4eb480581f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getStartRoutineOfCxtThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a6ac3c91742a6e9088c4e9cf1b7d2f42e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTCTEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a7b4ad0b052e1f8b6869733eef15f4e4d" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTCTNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aac9d98a33fbaa6defa3f847d0bbe76d6" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTCTNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1af03bfeae7e09a9f62d96ba59632e588f" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTCTNodeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a1602d02773578bca73dcbd29b95c67d0" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getThreadCallGraph</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a29cab1426b0000bd87c026ab8c9979c0" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTotalEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a8c8d16036008f87c7811586047599858" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>getTotalNodeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aac0c4c3f1c7cb1d89ebd2a3da2d49bd3" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>handleCallRelation</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a6885064afa211958af7b73f0233284e5" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>hasGNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1adb2025048dc69f0689f526c58df29802" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>hasGraphEdge</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a6855a3a8a98591e58dba07047f7705ce" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>hasParentThread</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a5d5a753b4d2633e3aaf58859274ffe7a" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>hasTCTNode</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a47a1ef8b67b0c92f78b4457dc3bbfe71" prot="protected" virt="non-virtual"><scope>SVF::TCT</scope><name>IDToNodeMap</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ab9027b190f50ceefc90094e4f967f269" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>IDToNodeMapTy</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a2f2bca8219c7d769f6d2937e5cd40d14" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>incEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a7388dabef7300e77adf33f3999639f21" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>incNodeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a1b3872361dc17aaea359db8ce0cc2431" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>inRecurJoinSites</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a95cd490d37f8831edc6910f7ecdf413e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>inSameCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a3238d12557309967f8bdfdfc275b6710" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>InstSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ab5569ca90951ff0ddeefe005a8506764" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>InstToLoopMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a13d01a1747d8ee1521596aeb36bdb655" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>InstVec</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ab0abc0713e6b87a8b1453bababced79c" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>isCandidateFun</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a6bcf4c3c095830626423bf522653b306" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>isInLoopInstruction</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1af7cd9f1862836818593685bc5105da52" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>isInRecursion</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a65d0260b37ab60debb7fa84fa0b7a5d4" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>isJoinMustExecutedInLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a4ff016e5933a4d094989c600ad25dd99" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>isJoinSiteInRecursion</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a154f779578f6112e7c9e90d585c08eb6" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>isLoopExitOfJoinLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a549a95aa04233c98732777ea210d8525" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>isLoopHeaderOfJoinLoop</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a68d2b1107f9cc2edcc01265298b7307c" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>isVisitedCTPs</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1ac213302cf5c7cdf3b66f7b18649d0fbc" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a5b1f44ffa732607a7800728befa5bc57" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>joinSiteToLoopMap</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ae64d6203b41c92d4ca617b8e976b88b2" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>loopInfoBuilder</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a8bb7ffa8dd185c52e6c150f9bc995511" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>markRelProcs</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ac0400af94cf37f2f4507c3263ea4499a" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>markRelProcs</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a9b6dda84d37afadaf80bc2e26986a52e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>matchCxt</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aaae41663b1d1f4d38b047c50c156defb" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>MaxCxtSize</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a38122734cbe71551a420dfb7fee2012e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>nodeNum</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a86c50fc6775fd29f88df2cb4646bb211" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ad84cdb0d192312f96d006f7b9e660da3" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>popFromCTPWorkList</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1abf2a992a66de9832915b1f959b8988e4" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>print</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a980de0593e41d18d2716aa5120d35d04" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>pta</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1afb579a5bdcc0a1c6b075bb9aae36c237" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>PTACGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1afc6d7a91cfc98561bcce13425964a39e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>pushCxt</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aa98a5b427a92eca1e043efcdf7945169" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>pushCxt</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a002bac3dc928bc78b94de0ca97b1ec1d" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>pushToCTPWorkList</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a1817b65e76052f11e36a67d6b9efd915" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>removeGNode</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a11e36f9b58646dee4014e12e55c70508" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>setMultiForkedAttrs</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1ac9ddd6559e818f37c018ed5435182363" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>tcg</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a30662928bafc97c1e7b123270ca69980" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>tcgSCC</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a8eaa746805b0afc17329d0ba4ad6a887" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>TCT</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a862899f2e5fb35920adf8e763e1dba57" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>TCTEdgeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a6f4ab4fb901620c733d90b380c9db670" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>TCTNodeIter</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a52e3759054281c1ca1ccde07a9af1799" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>TCTNodeNum</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a71942c7386d094426ae86633a9b1f755" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>ThreadCallGraphSCC</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a7c53c7ff773a253976374392d4930d6e" prot="public" virt="non-virtual"><scope>SVF::TCT</scope><name>ThreadCreateEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1a402dd078c46efc1d7348d81b45e347f2" prot="private" virt="non-virtual"><scope>SVF::TCT</scope><name>visitedCTPs</name></member>
      <member refid="class_s_v_f_1_1_generic_graph_1a3b94850d788a1b8da45e9b8bf2f2df2c" prot="public" virt="virtual"><scope>SVF::TCT</scope><name>~GenericGraph</name></member>
      <member refid="class_s_v_f_1_1_t_c_t_1aee699da702973dd42398b42a2ec65e59" prot="public" virt="virtual"><scope>SVF::TCT</scope><name>~TCT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
