.TH "RaceResultValidator" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RaceResultValidator \- Validate the result of concurrent analysis\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MTAResultValidator\&.h>\fP
.PP
Inherited by \fBSVF::LockValidator\fP, and \fBSVF::MHPValidator\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAccessPair\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef int \fBRC_FLAG\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~RaceResultValidator\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBinit\fP (SVFModule *M)"
.br
.RI "Initialization\&. "
.ti -1c
.RI "void \fBanalyze\fP ()"
.br
.RI "Analysis\&. "
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Release resource\&. "
.ti -1c
.RI "bool \fBhasValidationTarget\fP () const"
.br
.RI "Check if the input program has validation target\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBmayAccessAliases\fP (const Instruction *I1, const Instruction *I2)"
.br
.ti -1c
.RI "virtual bool \fBmayHappenInParallel\fP (const Instruction *I1, const Instruction *I2)"
.br
.ti -1c
.RI "virtual bool \fBprotectedByCommonLocks\fP (const Instruction *I1, const Instruction *I2)"
.br
.ti -1c
.RI "virtual bool \fBmayHaveDataRace\fP (const Instruction *I1, const Instruction *I2)"
.br
.ti -1c
.RI "void \fBcollectValidationTargets\fP ()"
.br
.ti -1c
.RI "void \fBvalidateAll\fP ()"
.br
.RI "Perform validation for all targets\&. "
.ti -1c
.RI "std::string \fBgetOutput\fP (const char *scenario, bool analysisRes, bool expectedRes)"
.br
.RI "Get the validation result string of a single validation scenario\&. "
.in -1c
.SH "Detailed Description"
.PP 
Validate the result of concurrent analysis\&. 

The properties to validate of two memory accesses include one or more of the following four: (1) they may accesses aliases; (2) they may happen in parallel; (3) they are protected by common lock(s); (4) they may cause a data race error\&. The ground truth are specified by the 'RC_ACCESS' function in the target program\&.
.PP
Users may utilize this result validator to validate their analysis with one or more of the four properties, by inheriting the RCResultValidator class\&. The corresponding virtual function of the desired property should be overridden\&. 
.SH "Member Function Documentation"
.PP 
.SS "void RaceResultValidator::collectValidationTargets ()\fC [inline]\fP, \fC [protected]\fP"
Collect the targets for validations\&. The targets should be memory access Instructions in pairs\&. The collected targets are stored in the member variable 'accessPairs'\&. 
.SS "virtual bool RaceResultValidator::mayAccessAliases (const Instruction * I1, const Instruction * I2)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Interface to the specific validation properties\&. Override one or more to implement your own analysis\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for SVF from the source code\&.
