<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_v_f_1_1_andersen_s_f_r" xml:lang="en-US">
<title>SVF::AndersenSFR Class Reference</title>
<indexterm><primary>SVF::AndersenSFR</primary></indexterm>
<para>
<computeroutput>#include &lt;AndersenSFR.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for SVF::AndersenSFR:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_v_f_1_1_andersen_s_f_r.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1ae81c9716b434f0f1e372d0ddf7003910"/>typedef Map&lt; NodeID, NodeBS &gt; <emphasis role="strong">NodeStrides</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a52aa0c2a02a0db6700c4a7a8819d0a5d"/>typedef Map&lt; NodeID, NodeSet &gt; <emphasis role="strong">FieldReps</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a654c391ad41b026eec2e0a1a54146600"/>typedef Map&lt; NodeID, pair&lt; NodeID, NodeSet &gt; &gt; <emphasis role="strong">SFRTrait</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1af0fd28112926b7135de8fb8e9f72e1e7"/><emphasis role="strong">AndersenSFR</emphasis> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag, <link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85">PTATY</link> type=<link linkend="_class_s_v_f_1_1_pointer_analysis_1a0b182ac680cce0547dbe7714c870ca85accfa4ed42d3a3ac5e4abc403e738427b">AndersenSFR_WPA</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1ab3e892e56b29c5dc9df3589715f63ab2"/>static <link linkend="_class_s_v_f_1_1_andersen_s_f_r">AndersenSFR</link> * <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1ab3e892e56b29c5dc9df3589715f63ab2">createAndersenSFR</link> (<link linkend="_class_s_v_f_1_1_p_a_g">PAG</link> *_pag)</para>

<para>Create an singleton instance directly instead of invoking llvm pass manager. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a4aa1607b7d84a6de151c19ae84b913b9"/>static void <emphasis role="strong">releaseAndersenSFR</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1a3b255068b3ea53041af94fd373a53bd4">initialize</link> ()</para>

<para>Initialize analysis. </para>
</listitem>
            <listitem><para>void <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1a7bb1bd307c5db4d732e51af810c5ad75">PWCDetect</link> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a78e48b3c3db39470ab47b92bbc577e7e"/>void <emphasis role="strong">fieldExpand</emphasis> (NodeSet &amp;initials, Size_t offset, NodeBS &amp;strides, PointsTo &amp;expandPts)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1a8a3dc46d1a8a6996e048956551fec566">processGepPts</link> (PointsTo &amp;pts, const <link linkend="_class_s_v_f_1_1_gep_c_g_edge">GepCGEdge</link> *edge)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_v_f_1_1_andersen_s_f_r_1ac5f406db5610347564fceff4d36f6a6f">mergeSrcToTgt</link> (NodeID nodeId, NodeID newRepId)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Selective Cycle Detection with Stride-based Field Representation </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a3b255068b3ea53041af94fd373a53bd4"/>    <section>
    <title>initialize()</title>
<indexterm><primary>initialize</primary><secondary>SVF::AndersenSFR</secondary></indexterm>
<indexterm><primary>SVF::AndersenSFR</primary><secondary>initialize</secondary></indexterm>
<para><computeroutput>void AndersenSFR::initialize ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Initialize analysis. </para>
</para>

<para>Initilize analysis </para>

<para>Initialize worklist</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1a20617a69c112ad423b1b5021e48a8548">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1ac5f406db5610347564fceff4d36f6a6f"/>    <section>
    <title>mergeSrcToTgt()</title>
<indexterm><primary>mergeSrcToTgt</primary><secondary>SVF::AndersenSFR</secondary></indexterm>
<indexterm><primary>SVF::AndersenSFR</primary><secondary>mergeSrcToTgt</secondary></indexterm>
<para><computeroutput>bool AndersenSFR::mergeSrcToTgt (NodeID nodeId, NodeID newRepId)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>merge nodeId to newRepId. Return true if the newRepId is a PWC node </para>

<para>union pts of node to rep</para>

<para>move the edges from node to rep, and remove the node</para>

<para>set rep and sub relations</para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_1ae6b1e54a389abc68994219e39539127e">SVF::Andersen</link>.</para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a8a3dc46d1a8a6996e048956551fec566"/>    <section>
    <title>processGepPts()</title>
<indexterm><primary>processGepPts</primary><secondary>SVF::AndersenSFR</secondary></indexterm>
<indexterm><primary>SVF::AndersenSFR</primary><secondary>processGepPts</secondary></indexterm>
<para><computeroutput>bool AndersenSFR::processGepPts (PointsTo &amp; pts, const <link linkend="_class_s_v_f_1_1_gep_c_g_edge">GepCGEdge</link> * edge)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Propagate point-to set via a gep edge, using SFR </para>
    </section><anchor xml:id="_class_s_v_f_1_1_andersen_s_f_r_1a7bb1bd307c5db4d732e51af810c5ad75"/>    <section>
    <title>PWCDetect()</title>
<indexterm><primary>PWCDetect</primary><secondary>SVF::AndersenSFR</secondary></indexterm>
<indexterm><primary>SVF::AndersenSFR</primary><secondary>PWCDetect</secondary></indexterm>
<para><computeroutput>void AndersenSFR::PWCDetect ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Call the PWC stride calculation method of class <link linkend="_class_s_v_f_1_1_c_s_c">CSC</link>. </para>
<para>
Reimplemented from <link linkend="_class_s_v_f_1_1_andersen_s_c_d">SVF::AndersenSCD</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/WPA/AndersenSFR.hlib/WPA/AndersenSFR.cpp</section>
</section>
