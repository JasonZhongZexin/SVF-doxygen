<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_cxt_thread_proc" kind="class" language="C++" prot="public">
    <compoundname>SVF::CxtThreadProc</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_cxt_proc" prot="public" virt="non-virtual">SVF::CxtProc</basecompoundref>
    <includes refid="_cxt_stmt_8h" local="no">CxtStmt.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_cxt_thread_proc_1a99b24e1be2bfb49569532c2c28c68969" prot="private" static="no" mutable="no">
        <type>NodeID</type>
        <definition>NodeID SVF::CxtThreadProc::tid</definition>
        <argsstring></argsstring>
        <name>tid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="449" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1a1c7dd7740266a07d354df537a9167bcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThreadProc::CxtThreadProc</definition>
        <argsstring>(NodeID t, const CallStrCxt &amp;c, const SVFFunction *f)</argsstring>
        <name>CxtThreadProc</name>
        <param>
          <type>NodeID</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const CallStrCxt &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_s_v_f_function" kindref="compound">SVFFunction</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="394" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1acce14996e41ae55ae8e27b29408ef7c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::CxtThreadProc::CxtThreadProc</definition>
        <argsstring>(const CxtThreadProc &amp;ctm)</argsstring>
        <name>CxtThreadProc</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>ctm</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="398" column="5" bodyfile="include/Util/CxtStmt.h" bodystart="398" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1aa65ab8cf5003457ce87991663315b5f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::CxtThreadProc::~CxtThreadProc</definition>
        <argsstring>()</argsstring>
        <name>~CxtThreadProc</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="402" column="13" bodyfile="include/Util/CxtStmt.h" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1a61d950c7469f4bb9d2152b0e7d892ebf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NodeID</type>
        <definition>NodeID SVF::CxtThreadProc::getTid</definition>
        <argsstring>() const</argsstring>
        <name>getTid</name>
        <briefdescription>
<para>Return current thread id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="406" column="19" bodyfile="include/Util/CxtStmt.h" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1a4b8e4f182a34d078595ce0eb9ec94c6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadProc::operator&lt;</definition>
        <argsstring>(const CxtThreadProc &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable compare operator to avoid duplicated item insertion in map or set to be noted that two vectors can also overload operator() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="412" column="12" bodyfile="include/Util/CxtStmt.h" bodystart="412" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1a439a27864cb18accba5f8fe706c1e74b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
        <definition>CxtThreadProc&amp; SVF::CxtThreadProc::operator=</definition>
        <argsstring>(const CxtThreadProc &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator=. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="422" column="26" bodyfile="include/Util/CxtStmt.h" bodystart="422" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1aef53ca59b8cbd614b28350d12113e3c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadProc::operator==</definition>
        <argsstring>(const CxtThreadProc &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="433" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1a7f65ade2a231590c26643ef907061727" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::CxtThreadProc::operator!=</definition>
        <argsstring>(const CxtThreadProc &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloading operator==. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="438" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_cxt_thread_proc_1aed801cfecdbfcd690db2d78de5f8e0b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::CxtThreadProc::dump</definition>
        <argsstring>() const</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump <ref refid="class_s_v_f_1_1_cxt_thread_proc" kindref="compound">CxtThreadProc</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/CxtStmt.h" line="443" column="17" bodyfile="include/Util/CxtStmt.h" bodystart="443" bodyend="446"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context-sensitive procedure &lt;t,c,m&gt; t represent current thread during traversing c represent current context m represent current procedure </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::CxtProc</label>
        <link refid="class_s_v_f_1_1_cxt_proc"/>
      </node>
      <node id="1">
        <label>SVF::CxtThreadProc</label>
        <link refid="class_s_v_f_1_1_cxt_thread_proc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::CxtProc</label>
        <link refid="class_s_v_f_1_1_cxt_proc"/>
        <childnode refid="3" relation="usage">
          <edgelabel>fun</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFFunction</label>
        <link refid="class_s_v_f_1_1_s_v_f_function"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SVF::CxtThreadProc</label>
        <link refid="class_s_v_f_1_1_cxt_thread_proc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::SVFValue</label>
        <link refid="class_s_v_f_1_1_s_v_f_value"/>
      </node>
    </collaborationgraph>
    <location file="include/Util/CxtStmt.h" line="390" column="1" bodyfile="include/Util/CxtStmt.h" bodystart="391" bodyend="450"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_cxt_proc_1af5f186c71d815dabcbfab6bae7c57b59" prot="protected" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>cxt</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ac1ca3a049f6d0f8a0548a153cc903aa0" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>CxtProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a25a80c93a6aeb1112a846d6c588364cc" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>CxtProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a1c7dd7740266a07d354df537a9167bcc" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>CxtThreadProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1acce14996e41ae55ae8e27b29408ef7c8" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>CxtThreadProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ac53f22f1e9547b15b8998d83290f4281" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>cxtToStr</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1aed801cfecdbfcd690db2d78de5f8e0b5" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>dump</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a70b6a2ae40bd7e4b08ddcb6d6b0289df" prot="protected" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>fun</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a99b0f68b4cbd733f91eea33aa3e64eb7" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>getContext</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ab9ac6459c90873b7dea35e0a22700189" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>getProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a61d950c7469f4bb9d2152b0e7d892ebf" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>getTid</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a7f65ade2a231590c26643ef907061727" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a1e9e5490dead73e1cd9ddd964848eb13" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtProc::"><scope>SVF::CxtThreadProc</scope><name>operator!=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a4b8e4f182a34d078595ce0eb9ec94c6d" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1ab58a8dc44944ac2ab3280562a8306e7b" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtProc::"><scope>SVF::CxtThreadProc</scope><name>operator&lt;</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a439a27864cb18accba5f8fe706c1e74b" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a617c7ee432ac89cf419dfad47854e3a5" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtProc::"><scope>SVF::CxtThreadProc</scope><name>operator=</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1aef53ca59b8cbd614b28350d12113e3c4" prot="public" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a7e019158f464401c6d7fc5676d48d69c" prot="public" virt="non-virtual" ambiguityscope="SVF::CxtProc::"><scope>SVF::CxtThreadProc</scope><name>operator==</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1a99b24e1be2bfb49569532c2c28c68969" prot="private" virt="non-virtual"><scope>SVF::CxtThreadProc</scope><name>tid</name></member>
      <member refid="class_s_v_f_1_1_cxt_proc_1a94195be123e936ae55ea5c503b7f887f" prot="public" virt="virtual"><scope>SVF::CxtThreadProc</scope><name>~CxtProc</name></member>
      <member refid="class_s_v_f_1_1_cxt_thread_proc_1aa65ab8cf5003457ce87991663315b5f1" prot="public" virt="virtual"><scope>SVF::CxtThreadProc</scope><name>~CxtThreadProc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
