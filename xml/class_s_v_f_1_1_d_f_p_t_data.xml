<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_d_f_p_t_data" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SVF::DFPTData</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_p_t_data" prot="public" virt="non-virtual">SVF::PTData&lt; Key, Datum, Data &gt;</basecompoundref>
    <derivedcompoundref refid="class_s_v_f_1_1_mutable_d_f_p_t_data" prot="public" virt="non-virtual">SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</derivedcompoundref>
    <includes refid="_abstract_points_to_d_s_8h" local="no">AbstractPointsToDS.h</includes>
    <templateparamlist>
      <param>
        <type>typename Key</type>
      </param>
      <param>
        <type>typename Datum</type>
      </param>
      <param>
        <type>typename Data</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a12e2de05a6ece6e9e486c37b3083e534" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::hasDFInSet</definition>
        <argsstring>(LocID loc) const =0</argsstring>
        <name>hasDFInSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a564a0b873d4491a6dabccc599c4f82c7">hasDFInSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the DF IN/OUT sets have points-to sets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="158" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1ac00df48b29eea123d8778e8e9c963c16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::hasDFOutSet</definition>
        <argsstring>(LocID loc) const =0</argsstring>
        <name>hasDFOutSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a16995ae975870c7c842259a86389fc54">hasDFOutSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="159" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a329824d15a4b5d2f8a1371fc98c4ab76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::hasDFOutSet</definition>
        <argsstring>(LocID loc, const Key &amp;var) const =0</argsstring>
        <name>hasDFOutSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a7920b327d1662b48f32d6b4a2c085d8e">hasDFOutSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access points-to set from data-flow IN/OUT set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="164" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a6aa28007d88862428fa605c8e7f306d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::hasDFInSet</definition>
        <argsstring>(LocID loc, const Key &amp;var) const =0</argsstring>
        <name>hasDFInSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a3c603150d9b115bd3ea72dbd21fc47e0">hasDFInSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="165" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1ad8b7b7c86f8f524cd11f96b6d4c013f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const Data &amp;</type>
        <definition>virtual const Data&amp; SVF::DFPTData&lt; Key, Datum, Data &gt;::getDFInPtsSet</definition>
        <argsstring>(LocID loc, const Key &amp;var)=0</argsstring>
        <name>getDFInPtsSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a013a9eb81d5e7b7a776248a9668e3d9d">getDFInPtsSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="166" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a4d29f3c33f477bd273031b09d1b6cf50" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const Data &amp;</type>
        <definition>virtual const Data&amp; SVF::DFPTData&lt; Key, Datum, Data &gt;::getDFOutPtsSet</definition>
        <argsstring>(LocID loc, const Key &amp;var)=0</argsstring>
        <name>getDFOutPtsSet</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a333876ce361848881e7ead4f78c0189b">getDFOutPtsSet</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="167" column="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a4c2a88efa302a5857e78fa32c4271c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateDFInFromIn</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateDFInFromIn</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a11faecf2d217edd3d6c1aac03788e9e7">updateDFInFromIn</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a65c7e3eb77a92e9a0f2b5f72ca80d9d6">updateDFInFromIn</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update points-to for IN/OUT set IN[loc:var] represents the points-to of variable var in the IN set of location loc. union(ptsDst, ptsSrc) represents ptsDst = ptsDst U ptsSrc.</para>
<para>Union (IN[dstLoc:dstVar], IN[srcLoc:srcVar]). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="175" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1acdecfed9eff1772af0c398e160809173" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateAllDFInFromIn</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateAllDFInFromIn</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a0db60bc13df08f906e55ec8830954e28">updateAllDFInFromIn</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1aeb225273938a2da7766306785bbe744d">updateAllDFInFromIn</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Union (IN[dstLoc::dstVar], IN[srcLoc:srcVar]. There is no flag check, unlike the above. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="177" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a716c949a43140845c498778675d57f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateDFInFromOut</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateDFInFromOut</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a0663e86966f0581364f91a14333a906f">updateDFInFromOut</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1afa0e2e4df28e2db338c9d354fd15234f">updateDFInFromOut</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Union (IN[dstLoc:dstVar], OUT[srcLoc:srcVar]). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="179" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a84217d424bd24a9cde806e8428cd68a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateAllDFInFromOut</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateAllDFInFromOut</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a1d9ef43bd762ea251a73bdf64d98a260">updateAllDFInFromOut</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a212e96bb81bfdb24d4c871b0535f68dd">updateAllDFInFromOut</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Union (IN[dstLoc::dstVar], OUT[srcLoc:srcVar]. There is no flag check, unlike the above. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="181" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a4e4e548b1bb1c31f5bc5487817dfe8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateDFOutFromIn</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateDFOutFromIn</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a6fcafe4e1a1e4dc356f0e49b783bb1c2">updateDFOutFromIn</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a5e745c95b9a5ac2d5367e3c037bf48dc">updateDFOutFromIn</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Union (OUT[dstLoc:dstVar], IN[srcLoc:srcVar]). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="184" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a616c798289eb8af5eb529f5a56c2557b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateAllDFOutFromIn</definition>
        <argsstring>(LocID loc, const Key &amp;singleton, bool strongUpdates)=0</argsstring>
        <name>updateAllDFOutFromIn</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a780b6307f9994997243f8a7261815c1d">updateAllDFOutFromIn</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a7fc76812496101c36283d8aaff3164bc">updateAllDFOutFromIn</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>singleton</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strongUpdates</declname>
        </param>
        <briefdescription>
<para>For each variable var in IN at loc, do updateDFOutFromIn(loc, var, loc, var). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="186" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a0cf720b50e17f3aba2171a558fc54032" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SVF::DFPTData&lt; Key, Datum, Data &gt;::clearAllDFOutUpdatedVar</definition>
        <argsstring>(LocID)=0</argsstring>
        <name>clearAllDFOutUpdatedVar</name>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a3d121bedfb4ac3af01ef60656e7f9de6">clearAllDFOutUpdatedVar</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a2ed188e0896403687b8374c40568f666">clearAllDFOutUpdatedVar</reimplementedby>
        <param>
          <type>LocID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="188" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a0e326cbff78740fd641a2964eb7a143f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateTLVPts</definition>
        <argsstring>(LocID srcLoc, const Key &amp;srcVar, const Key &amp;dstVar)=0</argsstring>
        <name>updateTLVPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a7e5431ec33bbcb509260e1f6cc8b20df">updateTLVPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a7fc7beea0a67842a6bd744497c4f522a">updateTLVPts</reimplementedby>
        <param>
          <type>LocID</type>
          <declname>srcLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Update points-to set of top-level pointers with IN[srcLoc:srcVar]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="191" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a5a79c5b7007859640876a1bef5011c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SVF::DFPTData&lt; Key, Datum, Data &gt;::updateATVPts</definition>
        <argsstring>(const Key &amp;srcVar, LocID dstLoc, const Key &amp;dstVar)=0</argsstring>
        <name>updateATVPts</name>
        <reimplementedby refid="class_s_v_f_1_1_mutable_d_f_p_t_data_1a39db820c23fc8bda511457056e81766a">updateATVPts</reimplementedby>
        <reimplementedby refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data_1a2f6fe4f0c82c373e73bd33af4632af37">updateATVPts</reimplementedby>
        <param>
          <type>const Key &amp;</type>
          <declname>srcVar</declname>
        </param>
        <param>
          <type>LocID</type>
          <declname>dstLoc</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>dstVar</declname>
        </param>
        <briefdescription>
<para>Update address-taken variables OUT[dstLoc:dstVar] with points-to of top-level pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="193" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a2499a9d3e2b1c0cbfe3ac21c49e1a576" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::DFPTData&lt; Key, Datum, Data &gt;::classof</definition>
        <argsstring>(const DFPTData&lt; Key, Datum, Data &gt; *)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_d_f_p_t_data" kindref="compound">DFPTData</ref>&lt; Key, Datum, Data &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Methods to support type inquiry through isa, cast, and dyn_cast: </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="198" column="24" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a8b93cfc14b18c52b4a69e42b9d189427" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool SVF::DFPTData&lt; Key, Datum, Data &gt;::classof</definition>
        <argsstring>(const PTData&lt; Key, Datum, Data &gt; *ptd)</argsstring>
        <name>classof</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTData</ref>&lt; Key, Datum, Data &gt; *</type>
          <declname>ptd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="203" column="24" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="203" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_d_f_p_t_data_1ae5b9157688c1962918613649a69940e4" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data" kindref="compound">PTData</ref>&lt; Key, Datum, Data &gt;</type>
        <definition>typedef PTData&lt;Key, Datum, Data&gt; SVF::DFPTData&lt; Key, Datum, Data &gt;::BasePTData</definition>
        <argsstring></argsstring>
        <name>BasePTData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="146" column="20" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_d_f_p_t_data_1af505f28eca8219bf28754d40c6eadc7c" prot="public" static="no">
        <type><ref refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" kindref="member">BasePTData::PTDataTy</ref></type>
        <definition>typedef BasePTData::PTDataTy SVF::DFPTData&lt; Key, Datum, Data &gt;::PTDataTy</definition>
        <argsstring></argsstring>
        <name>PTDataTy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="147" column="43" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_d_f_p_t_data_1aa0ac08a5ac3a06e96c2576da761536b3" prot="public" static="no">
        <type>NodeID</type>
        <definition>typedef NodeID SVF::DFPTData&lt; Key, Datum, Data &gt;::LocID</definition>
        <argsstring></argsstring>
        <name>LocID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="149" column="20" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a1c9b437febcc05a8ef5ddb20e98b21cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DFPTData&lt; Key, Datum, Data &gt;::DFPTData</definition>
        <argsstring>(bool reversePT=true, PTDataTy ty=BasePTData::DataFlow)</argsstring>
        <name>DFPTData</name>
        <param>
          <type>bool</type>
          <declname>reversePT</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848" kindref="member">PTDataTy</ref></type>
          <declname>ty</declname>
          <defval>BasePTData::DataFlow</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="152" column="5" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_f_p_t_data_1a3565bc58d2cc6cab3374544ef869f3c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::DFPTData&lt; Key, Datum, Data &gt;::~DFPTData</definition>
        <argsstring>()</argsstring>
        <name>~DFPTData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MemoryModel/AbstractPointsToDS.h" line="154" column="13" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="154" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Data-flow points-to data structure for flow-sensitive analysis as defined by Hardekopf and Lin (CGO 11). Points-to information is maintained at each program point (statement). For address-taken variables, every program point has two sets: IN and OUT points-to sets. For top-level variables, points-to sets are maintained flow-insensitively via getPts(var). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::DFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_d_f_p_t_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SVF::MutableDFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_mutable_d_f_p_t_data"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SVF::IncMutableDFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_inc_mutable_d_f_p_t_data"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_p_t_data"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SVF::DFPTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_d_f_p_t_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::PTData&lt; Key, Datum, Data &gt;</label>
        <link refid="class_s_v_f_1_1_p_t_data"/>
      </node>
    </collaborationgraph>
    <location file="include/MemoryModel/AbstractPointsToDS.h" line="143" column="1" bodyfile="include/MemoryModel/AbstractPointsToDS.h" bodystart="144" bodyend="210"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_p_t_data_1a1365146d19ee927f870a7384c0d1db6b" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>addPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a48ea0972c2495007d758a0674fd958a0" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>Base</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1ae5b9157688c1962918613649a69940e4" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>BasePTData</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a2499a9d3e2b1c0cbfe3ac21c49e1a576" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a8b93cfc14b18c52b4a69e42b9d189427" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>classof</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a3cdec1f0be962716508d3922dce058d5" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>clear</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a0cf720b50e17f3aba2171a558fc54032" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>clearAllDFOutUpdatedVar</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a4a27923265487dac1eede5a57cc0c9a5" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>clearFullPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a2ee28cb51800a57a7646d72f1b92e6ac" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>clearPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a9fd234f8ac4f0615ef1bc2f9c02e00ab" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>DataFlow</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a1c9b437febcc05a8ef5ddb20e98b21cb" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>DFPTData</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a12db671c6effedfcd48f3a390a3cea39" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>Diff</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1affb0e613229679f926c52c37b3c141ea" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>dumpPTData</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1ad8b7b7c86f8f524cd11f96b6d4c013f8" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>getDFInPtsSet</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a4d29f3c33f477bd273031b09d1b6cf50" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>getDFOutPtsSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a22b25cb7e65dd9989dbb4c1819d68dee" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>getPTDTY</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a86a93186b51b6ce9dccffecad8381281" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>getPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a5ac0805846fb6bac6c58c0fefb106c5f" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>getRevPts</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a12e2de05a6ece6e9e486c37b3083e534" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>hasDFInSet</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a6aa28007d88862428fa605c8e7f306d2" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>hasDFInSet</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1ac00df48b29eea123d8778e8e9c963c16" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>hasDFOutSet</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a329824d15a4b5d2f8a1371fc98c4ab76" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>hasDFOutSet</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a85136c4ad93cefd1d2371cc92aa2423d" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>IncMutDataFlow</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1ae53ed7301014b43bf1d215208a702a8b" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>KeySet</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1aa0ac08a5ac3a06e96c2576da761536b3" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>LocID</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848ad89e3219f31ba0f1424c1a219565b7b0" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>MutBase</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a13666448dbecfb781405aff71a674d4e" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>MutDataFlow</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a31e94f61c6e2166b4c205fe03a4e912d" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>MutDiff</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a97fea46c57fe00f026da2cd3f510e785" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>MutVersioned</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a4481e26740c77bd69239552badf85614" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>PTData</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1af505f28eca8219bf28754d40c6eadc7c" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>PTDataTy</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a11120561456b00e1a6210e5105e8f718" prot="protected" virt="non-virtual"><scope>SVF::DFPTData</scope><name>ptdTy</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1aea15e71384244f3ad556e9924a1d0d21" prot="protected" virt="non-virtual"><scope>SVF::DFPTData</scope><name>rev</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a482eda0b2ea6a8e1326ee1a0c25c1fdc" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1ab378c0f2171f6de9b8aa076b43f88e89" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>unionPts</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1acdecfed9eff1772af0c398e160809173" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateAllDFInFromIn</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a84217d424bd24a9cde806e8428cd68a2" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateAllDFInFromOut</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a616c798289eb8af5eb529f5a56c2557b" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateAllDFOutFromIn</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a5a79c5b7007859640876a1bef5011c66" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateATVPts</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a4c2a88efa302a5857e78fa32c4271c08" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateDFInFromIn</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a716c949a43140845c498778675d57f2b" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateDFInFromOut</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a4e4e548b1bb1c31f5bc5487817dfe8f8" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateDFOutFromIn</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a0e326cbff78740fd641a2964eb7a143f" prot="public" virt="pure-virtual"><scope>SVF::DFPTData</scope><name>updateTLVPts</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a74ce29609c51f2be34a0b5b7650a9848a4fcfbbd2f9f50444a49c4cc4065b0aeb" prot="public" virt="non-virtual"><scope>SVF::DFPTData</scope><name>Versioned</name></member>
      <member refid="class_s_v_f_1_1_d_f_p_t_data_1a3565bc58d2cc6cab3374544ef869f3c3" prot="public" virt="virtual"><scope>SVF::DFPTData</scope><name>~DFPTData</name></member>
      <member refid="class_s_v_f_1_1_p_t_data_1a982153a8d2300d18549a7a6c4235c52d" prot="public" virt="virtual"><scope>SVF::DFPTData</scope><name>~PTData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
