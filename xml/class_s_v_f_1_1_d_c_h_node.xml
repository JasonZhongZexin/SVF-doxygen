<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_d_c_h_node" kind="class" language="C++" prot="public">
    <compoundname>SVF::DCHNode</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_generic_node" prot="public" virt="non-virtual">SVF::GenericNode&lt; DCHNode, DCHEdge &gt;</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3" prot="public" static="no" strong="no">
        <type></type>
        <name>CLASSATTR</name>
        <enumvalue id="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a06075ea779ab7777fd25e0e45c462a73" prot="public">
          <name>PURE_ABSTRACT</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a1d2b2d38bfc09259f63933e9ab23aecc" prot="public">
          <name>MULTI_INHERITANCE</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a38e9932af7d38e26c84fb0edbd083afc" prot="public">
          <name>TEMPLATE</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3ad5c99cf0681af30e8ed4cc59cc2371cb" prot="public">
          <name>SCALAR</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="66" column="5" bodyfile="include/SVF-FE/DCHG.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_d_c_h_node_1aebd4fb544e8a97164901ab602e0fe7fc" prot="public" static="no">
        <type>std::vector&lt; const Function * &gt;</type>
        <definition>typedef std::vector&lt;const Function*&gt; SVF::DCHNode::FuncVector</definition>
        <argsstring></argsstring>
        <name>FuncVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="74" column="25" bodyfile="include/SVF-FE/DCHG.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1a05b5b4539273ac5d21d8cbcfa712a439" prot="private" static="no" mutable="no">
        <type>const DIType *</type>
        <definition>const DIType* SVF::DCHNode::diType</definition>
        <argsstring></argsstring>
        <name>diType</name>
        <briefdescription>
<para>Type of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="193" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1abafa483be12690549fbcccaf4c3fa511" prot="private" static="no" mutable="no">
        <type>Set&lt; const DIDerivedType * &gt;</type>
        <definition>Set&lt;const DIDerivedType *&gt; SVF::DCHNode::typedefs</definition>
        <argsstring></argsstring>
        <name>typedefs</name>
        <briefdescription>
<para>Typedefs which map to this type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="195" column="9" bodyfile="include/SVF-FE/DCHG.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1a620ac2c6a9095510be5999431ff54b6d" prot="private" static="no" mutable="no">
        <type>const GlobalValue *</type>
        <definition>const GlobalValue* SVF::DCHNode::vtable</definition>
        <argsstring></argsstring>
        <name>vtable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="196" column="23" bodyfile="include/SVF-FE/DCHG.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1a8a7b412262af7a90c9ef583b6a8c10fc" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SVF::DCHNode::typeName</definition>
        <argsstring></argsstring>
        <name>typeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="197" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1a0b2c21429fd28c50965737a0baa2e90b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t SVF::DCHNode::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="198" column="12" bodyfile="include/SVF-FE/DCHG.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1a56659a23b59051eba77c9a532f4489a1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; const Function * &gt;</type>
        <definition>std::vector&lt;const Function *&gt; SVF::DCHNode::primaryVTable</definition>
        <argsstring></argsstring>
        <name>primaryVTable</name>
        <briefdescription>
<para>The virtual functions which this class actually defines/overrides. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="200" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_d_c_h_node_1af479bf99a759b5dd68619e24f00bfa10" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; const Function * &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;const Function*&gt; &gt; SVF::DCHNode::vfnVectors</definition>
        <argsstring></argsstring>
        <name>vfnVectors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If a vtable is split into more than one vfn vector for multiple inheritance, 0 would be the primary base + this classes virtual functions, 1 would be the second parent, 2 would be third parent, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="204" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a3e81cc40aa1c37999cead00f1af85a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DCHNode::DCHNode</definition>
        <argsstring>(const DIType *diType, NodeID i=0, GNodeK k=0)</argsstring>
        <name>DCHNode</name>
        <param>
          <type>const DIType *</type>
          <declname>diType</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>i</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c" kindref="member">GNodeK</ref></type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="76" column="5" bodyfile="include/SVF-FE/DCHG.h" bodystart="76" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1ab2d407888f4cf9fd5d9ae0b16ef2af49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::DCHNode::~DCHNode</definition>
        <argsstring>()</argsstring>
        <name>~DCHNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="94" column="5" bodyfile="include/SVF-FE/DCHG.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1aaf4036d892bdae02a01d31bfe3db2153" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DIType *</type>
        <definition>const DIType* SVF::DCHNode::getType</definition>
        <argsstring>(void) const</argsstring>
        <name>getType</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="96" column="18" bodyfile="include/SVF-FE/DCHG.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a089af6085dec833b58133a9e834dab54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SVF::DCHNode::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="101" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a4e08c543fa2ae557ff835b1a0f3c53a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setFlag</definition>
        <argsstring>(CLASSATTR mask)</argsstring>
        <name>setFlag</name>
        <param>
          <type>CLASSATTR</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="108" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a743bc5df582114c45d1907d62a42a39c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHNode::hasFlag</definition>
        <argsstring>(CLASSATTR mask) const</argsstring>
        <name>hasFlag</name>
        <param>
          <type>CLASSATTR</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="112" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1afa271fdb9c1aa3589f41655813a2de8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setPureAbstract</definition>
        <argsstring>()</argsstring>
        <name>setPureAbstract</name>
        <briefdescription>
<para>Attribute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="120" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a798e80f0cc5951789474abc3a0999166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setMultiInheritance</definition>
        <argsstring>()</argsstring>
        <name>setMultiInheritance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="124" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a3947007a7b8074f06064e34de9d980fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setTemplate</definition>
        <argsstring>()</argsstring>
        <name>setTemplate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="128" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a917265fa44ed08b66a6bd722f318bfa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setScalar</definition>
        <argsstring>()</argsstring>
        <name>setScalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="132" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1aed5e8397d43b602b79425acdae5e01f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHNode::isPureAbstract</definition>
        <argsstring>() const</argsstring>
        <name>isPureAbstract</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="136" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a42026e30e790bce5be03da3e45353c8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHNode::isMultiInheritance</definition>
        <argsstring>() const</argsstring>
        <name>isMultiInheritance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="140" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1ada436c7cb9108898c520952a87ebd01d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHNode::isTemplate</definition>
        <argsstring>() const</argsstring>
        <name>isTemplate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="144" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a50cf99ff5cc910512c1ce3987c7395ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SVF::DCHNode::isScalar</definition>
        <argsstring>() const</argsstring>
        <name>isScalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="148" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a9d1016e3da3462664198b1125dfc8f6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::addTypedef</definition>
        <argsstring>(const DIDerivedType *diTypedef)</argsstring>
        <name>addTypedef</name>
        <param>
          <type>const DIDerivedType *</type>
          <declname>diTypedef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="154" column="10" bodyfile="include/SVF-FE/DCHG.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1ac77edc44c3c5acc185c27c018837d066" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Set&lt; const DIDerivedType * &gt; &amp;</type>
        <definition>const Set&lt;const DIDerivedType *&gt;&amp; SVF::DCHNode::getTypedefs</definition>
        <argsstring>(void) const</argsstring>
        <name>getTypedefs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="159" column="15" bodyfile="include/SVF-FE/DCHG.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1ab8a339276172b8aa0fc915e5bde0b3db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SVF::DCHNode::setVTable</definition>
        <argsstring>(const GlobalValue *vtbl)</argsstring>
        <name>setVTable</name>
        <param>
          <type>const GlobalValue *</type>
          <declname>vtbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="164" column="10" bodyfile="include/SVF-FE/DCHG.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a1a75ca91148992166d42d245d6c51988" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const GlobalValue *</type>
        <definition>const GlobalValue* SVF::DCHNode::getVTable</definition>
        <argsstring>() const</argsstring>
        <name>getVTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="169" column="23" bodyfile="include/SVF-FE/DCHG.h" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a0669b995c4fe72f206154f5cf6889fe8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::vector&lt; const Function * &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::vector&lt;const Function *&gt; &gt;&amp; SVF::DCHNode::getVfnVectors</definition>
        <argsstring>(void) const</argsstring>
        <name>getVfnVectors</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the vector of virtual function vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="175" column="23" bodyfile="include/SVF-FE/DCHG.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_d_c_h_node_1a11ad6b4fc518f6307727f6b76f7f6f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; const Function * &gt; &amp;</type>
        <definition>std::vector&lt;const Function *&gt;&amp; SVF::DCHNode::getVfnVector</definition>
        <argsstring>(unsigned n)</argsstring>
        <name>getVfnVector</name>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return the nth virtual function vector in the vtable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SVF-FE/DCHG.h" line="181" column="17" bodyfile="include/SVF-FE/DCHG.h" bodystart="181" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SVF::GenericNode&lt; DCHNode, DCHEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="1">
        <label>SVF::DCHNode</label>
        <link refid="class_s_v_f_1_1_d_c_h_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SVF::GenericNode&lt; DCHNode, DCHEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_node"/>
      </node>
      <node id="1">
        <label>SVF::DCHNode</label>
        <link refid="class_s_v_f_1_1_d_c_h_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/SVF-FE/DCHG.h" line="63" column="1" bodyfile="include/SVF-FE/DCHG.h" bodystart="64" bodyend="205"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_generic_node_1a93d217b0c9fd8008a2989ca2b4f3fbfb" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>addIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ae74283fbc788665296a69e56f334557b" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>addOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a9d1016e3da3462664198b1125dfc8f6e" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>addTypedef</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>CLASSATTR</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ab6dc1ae41ae23b383f8add474caa7429" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>const_iterator</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a3e81cc40aa1c37999cead00f1af85a6e" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>DCHNode</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a4ab1f2e5db301e4a37215905a22e6476" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directInEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ab331402aed245c33bad841df2bc21f7b" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directInEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a19599627ba095b5452373284deab7f6c" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directInEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa7be9ff204bf85bc3bf2fa4e078fcab2" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directInEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa0e258d3a92dae367f2809a6f16c80db" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directOutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1acfae7a2809931cbd62b6f47c4813510d" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directOutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a5950d69d4ba6c2122dd06b93911e4992" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directOutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7f914b128f7839483efc9ad56834e7c2" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>directOutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a05b5b4539273ac5d21d8cbcfa712a439" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>diType</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a458c626543431b4314f5f4f532eb51de" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>EdgeType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a0b2c21429fd28c50965737a0baa2e90b" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>flags</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1aebd4fb544e8a97164901ab602e0fe7fc" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>FuncVector</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a03c6da4a73c47f84f5c5b47252bc339a" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>GEdgeSetTy</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1acdca5baae3e9e4208a60322fec9c9d3f" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>GenericNode</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ac3e55ef37aefb411ea4c87b1aa3b1895" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getId</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1afc8b5f86d7795b6a0dfc0687d942d79b" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getInEdges</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a089af6085dec833b58133a9e834dab54" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getName</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a391e996d695b114530120723da1d003e" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getNodeKind</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a2d9cd758d6f8c5189d9b90b74f43e009" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getOutEdges</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1aaf4036d892bdae02a01d31bfe3db2153" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getType</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1ac77edc44c3c5acc185c27c018837d066" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getTypedefs</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a11ad6b4fc518f6307727f6b76f7f6f53" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getVfnVector</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a0669b995c4fe72f206154f5cf6889fe8" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getVfnVectors</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a1a75ca91148992166d42d245d6c51988" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>getVTable</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a363b90ab02cce2ebc3ede8e5b7cc141c" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>GNodeK</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a743bc5df582114c45d1907d62a42a39c" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>hasFlag</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a06a7373b11143e709784de784fa476fe" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>hasIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1add6b6b3bd45a9460335c5db9eda821b8" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>hasIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a0931220d7a38e03f206cbdc6465d32ad" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>hasOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa0c40cb708b39300b3cb7354194e4993" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>hasOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ae5b113921530eee6afe58a65d8e5b3a7" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>InEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7c0ff80b1c0ae8b76fc620f21495ca39" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>InEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1afe6a7b286d9af4992f41b59612fd2900" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>InEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a0118fbeb2b314dcdcb53c56a2a13ab07" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>InEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a42026e30e790bce5be03da3e45353c8d" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>isMultiInheritance</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1aed5e8397d43b602b79425acdae5e01f5" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>isPureAbstract</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a50cf99ff5cc910512c1ce3987c7395ef" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>isScalar</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1ada436c7cb9108898c520952a87ebd01d" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>isTemplate</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a2f5471985dfe62bc9ded830a693ab153" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>iterator</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a1d2b2d38bfc09259f63933e9ab23aecc" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>MULTI_INHERITANCE</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ad63e862eb1d1369bd69318fe698e4a22" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>NodeType</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1aa4f103330118c8976bf95e4bf53416eb" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>OutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a50219c203fb5a8a44fe22428699f26e7" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>OutEdgeBegin</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a19a3366fd8a58290d0c740c46c3dcb3d" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>OutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1ace88b6c7561f61f747ff08f61e2c18bc" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>OutEdgeEnd</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a56659a23b59051eba77c9a532f4489a1" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>primaryVTable</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a06075ea779ab7777fd25e0e45c462a73" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>PURE_ABSTRACT</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a56dff05dc2b3c5664d3b8fc1c6c927d5" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>removeIncomingEdge</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a7c6192cb176bda3fad1819711302e468" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>removeOutgoingEdge</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3ad5c99cf0681af30e8ed4cc59cc2371cb" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>SCALAR</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a4e08c543fa2ae557ff835b1a0f3c53a4" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setFlag</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a798e80f0cc5951789474abc3a0999166" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setMultiInheritance</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1afa271fdb9c1aa3589f41655813a2de8e" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setPureAbstract</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a917265fa44ed08b66a6bd722f318bfa4" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setScalar</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a3947007a7b8074f06064e34de9d980fe" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setTemplate</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1ab8a339276172b8aa0fc915e5bde0b3db" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>setVTable</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a029988e54846db9aca2584e1c10283e3a38e9932af7d38e26c84fb0edbd083afc" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>TEMPLATE</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1abafa483be12690549fbcccaf4c3fa511" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>typedefs</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a8a7b412262af7a90c9ef583b6a8c10fc" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>typeName</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1af479bf99a759b5dd68619e24f00bfa10" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>vfnVectors</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1a620ac2c6a9095510be5999431ff54b6d" prot="private" virt="non-virtual"><scope>SVF::DCHNode</scope><name>vtable</name></member>
      <member refid="class_s_v_f_1_1_d_c_h_node_1ab2d407888f4cf9fd5d9ae0b16ef2af49" prot="public" virt="non-virtual"><scope>SVF::DCHNode</scope><name>~DCHNode</name></member>
      <member refid="class_s_v_f_1_1_generic_node_1a48a8d05b81b5c8099c3f3d1f2c4983a9" prot="public" virt="virtual"><scope>SVF::DCHNode</scope><name>~GenericNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
