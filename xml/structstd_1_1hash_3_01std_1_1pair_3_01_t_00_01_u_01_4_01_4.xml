<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>std::hash&lt; std::pair&lt; T, U &gt; &gt;</compoundname>
    <includes refid="_s_v_f_basic_types_8h" local="no">SVFBasicTypes.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename U</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4_1aa82fa843cdbec1286d2a3d6226b115a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t std::hash&lt; std::pair&lt; T, U &gt; &gt;::szudzik</definition>
        <argsstring>(size_t a, size_t b)</argsstring>
        <name>szudzik</name>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="219" column="19" bodyfile="include/Util/SVFBasicTypes.h" bodystart="219" bodyend="222"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4_1ada9d5834fdc6016b81b3e9f5293537c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t std::hash&lt; std::pair&lt; T, U &gt; &gt;::operator()</definition>
        <argsstring>(const std::pair&lt; T, U &gt; &amp;p) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Util/SVFBasicTypes.h" line="224" column="12" bodyfile="include/Util/SVFBasicTypes.h" bodystart="224" bodyend="228"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specialise hash for pairs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/Util/SVFBasicTypes.h" line="217" column="14" bodyfile="include/Util/SVFBasicTypes.h" bodystart="217" bodyend="229"/>
    <listofallmembers>
      <member refid="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4_1ada9d5834fdc6016b81b3e9f5293537c9" prot="public" virt="non-virtual"><scope>std::hash&lt; std::pair&lt; T, U &gt; &gt;</scope><name>operator()</name></member>
      <member refid="structstd_1_1hash_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4_1aa82fa843cdbec1286d2a3d6226b115a0" prot="public" virt="non-virtual"><scope>std::hash&lt; std::pair&lt; T, U &gt; &gt;</scope><name>szudzik</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
