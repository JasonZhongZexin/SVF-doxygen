<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="epd_8h" kind="file" language="C++">
    <compoundname>epd.h</compoundname>
    <includedby refid="cudd_8h" local="yes">include/CUDD/cudd.h</includedby>
    <includedby refid="epd_8c" local="yes">lib/CUDD/epd.c</includedby>
    <invincdepgraph>
      <node id="29">
        <label>include/SABER/LeakChecker.h</label>
        <link refid="_leak_checker_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/WPA/TypeAnalysis.h</label>
        <link refid="_type_analysis_8h_source"/>
      </node>
      <node id="47">
        <label>include/MSSA/MSSAMuChi.h</label>
        <link refid="_m_s_s_a_mu_chi_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/MemoryModel/ConditionalPT.h</label>
        <link refid="_conditional_p_t_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>include/Util/CFLSolver.h</label>
        <link refid="_c_f_l_solver_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/MemoryModel/PointerAnalysis.h</label>
        <link refid="_pointer_analysis_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/SABER/ProgSlice.h</label>
        <link refid="_prog_slice_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/Graphs/VFGNode.h</label>
        <link refid="_v_f_g_node_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/CUDD/cudd.h</label>
        <link refid="cudd_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/MTA/MHP.h</label>
        <link refid="_m_h_p_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/Graphs/SVFGNode.h</label>
        <link refid="_s_v_f_g_node_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/Util/PathCondAllocator.h</label>
        <link refid="_path_cond_allocator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/MTA/TCT.h</label>
        <link refid="_t_c_t_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/SABER/SrcSnkDDA.h</label>
        <link refid="_src_snk_d_d_a_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/Util/Conditions.h</label>
        <link refid="_conditions_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/Graphs/ThreadCallGraph.h</label>
        <link refid="_thread_call_graph_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/WPA/FlowSensitiveTBHC.h</label>
        <link refid="_flow_sensitive_t_b_h_c_8h_source"/>
      </node>
      <node id="49">
        <label>include/WPA/WPAPass.h</label>
        <link refid="_w_p_a_pass_8h_source"/>
      </node>
      <node id="3">
        <label>include/CUDD/cuddInt.h</label>
        <link refid="cudd_int_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/WPA/FlowSensitive.h</label>
        <link refid="_flow_sensitive_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>include/Graphs/SVFGStat.h</label>
        <link refid="_s_v_f_g_stat_8h_source"/>
      </node>
      <node id="38">
        <label>include/WPA/Steensgaard.h</label>
        <link refid="_steensgaard_8h_source"/>
      </node>
      <node id="26">
        <label>include/DDA/DDAVFSolver.h</label>
        <link refid="_d_d_a_v_f_solver_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/MSSA/SVFGBuilder.h</label>
        <link refid="_s_v_f_g_builder_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/DDA/DDAPass.h</label>
        <link refid="_d_d_a_pass_8h_source"/>
      </node>
      <node id="16">
        <label>include/MTA/FSMPTA.h</label>
        <link refid="_f_s_m_p_t_a_8h_source"/>
      </node>
      <node id="15">
        <label>include/MTA/LockAnalysis.h</label>
        <link refid="_lock_analysis_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/Util/TypeBasedHeapCloning.h</label>
        <link refid="_type_based_heap_cloning_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/MTA/MTAResultValidator.h</label>
        <link refid="_m_t_a_result_validator_8h_source"/>
      </node>
      <node id="42">
        <label>include/Graphs/VFG.h</label>
        <link refid="_v_f_g_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/Graphs/SVFG.h</label>
        <link refid="_s_v_f_g_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/DDA/DDAClient.h</label>
        <link refid="_d_d_a_client_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/MSSA/MemSSA.h</label>
        <link refid="_mem_s_s_a_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/CUDD/epd.h</label>
        <link refid="epd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/SVF-FE/CallGraphBuilder.h</label>
        <link refid="_call_graph_builder_8h_source"/>
      </node>
      <node id="43">
        <label>include/MSSA/MemRegion.h</label>
        <link refid="_mem_region_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>include/SABER/DoubleFreeChecker.h</label>
        <link refid="_double_free_checker_8h_source"/>
      </node>
      <node id="18">
        <label>include/MTA/MTAAnnotator.h</label>
        <link refid="_m_t_a_annotator_8h_source"/>
      </node>
      <node id="27">
        <label>include/SABER/SaberSVFGBuilder.h</label>
        <link refid="_saber_s_v_f_g_builder_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/MemoryModel/PointerAnalysisImpl.h</label>
        <link refid="_pointer_analysis_impl_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/DDA/FlowDDA.h</label>
        <link refid="_flow_d_d_a_8h_source"/>
      </node>
      <node id="19">
        <label>include/MTA/PCG.h</label>
        <link refid="_p_c_g_8h_source"/>
      </node>
      <node id="44">
        <label>include/MSSA/MemPartition.h</label>
        <link refid="_mem_partition_8h_source"/>
      </node>
      <node id="31">
        <label>include/SABER/FileChecker.h</label>
        <link refid="_file_checker_8h_source"/>
      </node>
      <node id="35">
        <label>include/WPA/WPAStat.h</label>
        <link refid="_w_p_a_stat_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/Graphs/SVFGOPT.h</label>
        <link refid="_s_v_f_g_o_p_t_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/WPA/Andersen.h</label>
        <link refid="_andersen_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/Util/DPItem.h</label>
        <link refid="_d_p_item_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/WPA/VersionedFlowSensitive.h</label>
        <link refid="_versioned_flow_sensitive_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/DDA/ContextDDA.h</label>
        <link refid="_context_d_d_a_8h_source"/>
      </node>
      <node id="37">
        <label>include/WPA/AndersenSFR.h</label>
        <link refid="_andersen_s_f_r_8h_source"/>
      </node>
      <node id="46">
        <label>include/Graphs/SVFGEdge.h</label>
        <link refid="_s_v_f_g_edge_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_ieee_double_struct" prot="public">IeeeDoubleStruct</innerclass>
    <innerclass refid="struct_ieee_nan_struct" prot="public">IeeeNanStruct</innerclass>
    <innerclass refid="union_ep_type_union" prot="public">EpTypeUnion</innerclass>
    <innerclass refid="struct_ep_double_struct" prot="public">EpDoubleStruct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="epd_8h_1a184502e2efa5cbddc97489cfea90fb7a" prot="public" static="no">
        <name>EPD_MAX_BIN</name>
        <initializer>1023</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CHeaderFile*****************************************************************</para>
<para>FileName [<ref refid="epd_8h_source" kindref="compound">epd.h</ref>]</para>
<para>PackageName [epd]</para>
<para>Synopsis [The University of Colorado extended double precision package.]</para>
<para>Description [arithmetic functions with extended double precision.]</para>
<para>SeeAlso []</para>
<para>Author [In-Ho Moon]</para>
<para>Copyright [Copyright (c) 1995-2004, Regents of the University of Colorado</para>
<para>All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
<para>Neither the name of the University of Colorado nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.]</para>
<para>Revision [<simplesect kind="rcs"><title>Id</title><para><ref refid="epd_8h_source" kindref="compound">epd.h</ref>,v 1.9 2004/08/13 18:20:30 fabio Exp </para>
</simplesect>
] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="62" column="9" bodyfile="include/CUDD/epd.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="epd_8h_1ac2be5dbaa3bc4e62d2f20cdff8c4eb49" prot="public" static="no">
        <name>EPD_MAX_DEC</name>
        <initializer>308</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="63" column="9" bodyfile="include/CUDD/epd.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="epd_8h_1a8a8990c0e7182b161432c2ca5fd73235" prot="public" static="no">
        <name>EPD_EXP_INF</name>
        <initializer>0x7ff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="64" column="9" bodyfile="include/CUDD/epd.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="epd_8h_1a6da609fee802d939cf57b73a8c2656b5" prot="public" static="no">
        <type>struct <ref refid="struct_ep_double_struct" kindref="compound">EpDoubleStruct</ref></type>
        <definition>typedef struct EpDoubleStruct EpDouble</definition>
        <argsstring></argsstring>
        <name>EpDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="1" column="0" bodyfile="include/CUDD/epd.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="epd_8h_1a393f1276121f029397eef86ec7d4fac5" prot="public" static="no">
        <type>struct <ref refid="struct_ieee_double_struct" kindref="compound">IeeeDoubleStruct</ref></type>
        <definition>typedef struct IeeeDoubleStruct IeeeDouble</definition>
        <argsstring></argsstring>
        <name>IeeeDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="1" column="0" bodyfile="include/CUDD/epd.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="epd_8h_1a6bcc381f10c8368cabcd2bb6ccde5985" prot="public" static="no">
        <type>struct <ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNanStruct</ref></type>
        <definition>typedef struct IeeeNanStruct IeeeNan</definition>
        <argsstring></argsstring>
        <name>IeeeNan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="1" column="0" bodyfile="include/CUDD/epd.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="epd_8h_1a618ccbef690a6439abf31cd8b30330e9" prot="public" static="no">
        <type>union <ref refid="union_ep_type_union" kindref="compound">EpTypeUnion</ref></type>
        <definition>typedef union EpTypeUnion EpType</definition>
        <argsstring></argsstring>
        <name>EpType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="1" column="0" bodyfile="include/CUDD/epd.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="epd_8h_1a660d7b3c89a57b16874fbf0c1fc59254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
        <definition>EpDouble* EpdAlloc</definition>
        <argsstring>(void)</argsstring>
        <name>EpdAlloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AutomaticStart</para>
<para>CFile***********************************************************************</para>
<para>FileName [epd.c]</para>
<para>PackageName [epd]</para>
<para>Synopsis [Arithmetic functions with extended double precision.]</para>
<para>Description []</para>
<para>SeeAlso []</para>
<para>Author [In-Ho Moon]</para>
<para>Copyright [Copyright (c) 1995-2004, Regents of the University of Colorado</para>
<para>All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
<para>Neither the name of the University of Colorado nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.]</para>
<para>Revision [<simplesect kind="rcs"><title>Id</title><para>epd.c,v 1.10 2004/08/13 18:20:30 fabio Exp </para>
</simplesect>
] Function********************************************************************</para>
<para>Synopsis [Allocates an EpDouble struct.]</para>
<para>Description [Allocates an EpDouble struct.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="156" column="17" bodyfile="lib/CUDD/epd.c" bodystart="71" bodyend="77" declfile="include/CUDD/epd.h" declline="156" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1af31ba1701e1d71a72d9ac4e5db5bcdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdCmp</definition>
        <argsstring>(const char *key1, const char *key2)</argsstring>
        <name>EpdCmp</name>
        <param>
          <type>const char *</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Compares two EpDouble struct.]</para>
<para>Description [Compares two EpDouble struct.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="157" column="12" bodyfile="lib/CUDD/epd.c" bodystart="92" bodyend="101" declfile="include/CUDD/epd.h" declline="157" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1abcdbf814341ce56484daf43d4e037376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdFree</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdFree</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Frees an EpDouble struct.]</para>
<para>Description [Frees an EpDouble struct.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="158" column="13" bodyfile="lib/CUDD/epd.c" bodystart="116" bodyend="119" declfile="include/CUDD/epd.h" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a89bdbabaca8bf6e31d55620b83a484da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdGetString</definition>
        <argsstring>(EpDouble *epd, char *str)</argsstring>
        <name>EpdGetString</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Converts an arbitrary precision double value to a string.]</para>
<para>Description [Converts an arbitrary precision double value to a string.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="159" column="13" bodyfile="lib/CUDD/epd.c" bodystart="134" bodyend="169" declfile="include/CUDD/epd.h" declline="159" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ad2740ef110f1edc78e12a068c89505cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdConvert</definition>
        <argsstring>(double value, EpDouble *epd)</argsstring>
        <name>EpdConvert</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Converts double to EpDouble struct.]</para>
<para>Description [Converts double to EpDouble struct.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="160" column="13" bodyfile="lib/CUDD/epd.c" bodystart="184" bodyend="189" declfile="include/CUDD/epd.h" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ae65723654e1ae7f24ddb41a494c07346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMultiply</definition>
        <argsstring>(EpDouble *epd1, double value)</argsstring>
        <name>EpdMultiply</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Multiplies two arbitrary precision double values.]</para>
<para>Description [Multiplies two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="161" column="13" bodyfile="lib/CUDD/epd.c" bodystart="204" bodyend="230" declfile="include/CUDD/epd.h" declline="161" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ab7b3e5d3b5c73b185a6a26f98b18d103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMultiply2</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2)</argsstring>
        <name>EpdMultiply2</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Multiplies two arbitrary precision double values.]</para>
<para>Description [Multiplies two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="162" column="13" bodyfile="lib/CUDD/epd.c" bodystart="245" bodyend="269" declfile="include/CUDD/epd.h" declline="162" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1af8ad67eb03852ca8363bd6193fbb7697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMultiply2Decimal</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2)</argsstring>
        <name>EpdMultiply2Decimal</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Multiplies two arbitrary precision double values.]</para>
<para>Description [Multiplies two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="163" column="13" bodyfile="lib/CUDD/epd.c" bodystart="284" bodyend="305" declfile="include/CUDD/epd.h" declline="163" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a5cf176ea9bc3122b55f307d903e08bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMultiply3</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2, EpDouble *epd3)</argsstring>
        <name>EpdMultiply3</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Multiplies two arbitrary precision double values.]</para>
<para>Description [Multiplies two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="164" column="13" bodyfile="lib/CUDD/epd.c" bodystart="320" bodyend="339" declfile="include/CUDD/epd.h" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1aa989d84c8140369fe1a2518fd44baad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMultiply3Decimal</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2, EpDouble *epd3)</argsstring>
        <name>EpdMultiply3Decimal</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Multiplies two arbitrary precision double values.]</para>
<para>Description [Multiplies two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="165" column="13" bodyfile="lib/CUDD/epd.c" bodystart="354" bodyend="370" declfile="include/CUDD/epd.h" declline="165" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1aee583f9ea75ef4ac2fc107b8f4714821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdDivide</definition>
        <argsstring>(EpDouble *epd1, double value)</argsstring>
        <name>EpdDivide</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Divides two arbitrary precision double values.]</para>
<para>Description [Divides two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="166" column="13" bodyfile="lib/CUDD/epd.c" bodystart="385" bodyend="423" declfile="include/CUDD/epd.h" declline="166" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a2b71d81b16763333a3dbf932608d9589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdDivide2</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2)</argsstring>
        <name>EpdDivide2</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Divides two arbitrary precision double values.]</para>
<para>Description [Divides two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="167" column="13" bodyfile="lib/CUDD/epd.c" bodystart="438" bodyend="474" declfile="include/CUDD/epd.h" declline="167" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a31854435263f7ca777276d2a03ae8a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdDivide3</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2, EpDouble *epd3)</argsstring>
        <name>EpdDivide3</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Divides two arbitrary precision double values.]</para>
<para>Description [Divides two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="168" column="13" bodyfile="lib/CUDD/epd.c" bodystart="489" bodyend="520" declfile="include/CUDD/epd.h" declline="168" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ae37517a51ce2c26d07bae697ad839424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdAdd</definition>
        <argsstring>(EpDouble *epd1, double value)</argsstring>
        <name>EpdAdd</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Adds two arbitrary precision double values.]</para>
<para>Description [Adds two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="169" column="13" bodyfile="lib/CUDD/epd.c" bodystart="535" bodyend="582" declfile="include/CUDD/epd.h" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a048e8648730bc90e0d89d79f211d5246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdAdd2</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2)</argsstring>
        <name>EpdAdd2</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Adds two arbitrary precision double values.]</para>
<para>Description [Adds two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="170" column="13" bodyfile="lib/CUDD/epd.c" bodystart="597" bodyend="644" declfile="include/CUDD/epd.h" declline="170" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1afa1ea5db2ee414c65f06709aaad4c676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdAdd3</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2, EpDouble *epd3)</argsstring>
        <name>EpdAdd3</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Adds two arbitrary precision double values.]</para>
<para>Description [Adds two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="171" column="13" bodyfile="lib/CUDD/epd.c" bodystart="659" bodyend="710" declfile="include/CUDD/epd.h" declline="171" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a712ec01071d09b0601a2104e3f069fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdSubtract</definition>
        <argsstring>(EpDouble *epd1, double value)</argsstring>
        <name>EpdSubtract</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Subtracts two arbitrary precision double values.]</para>
<para>Description [Subtracts two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="172" column="13" bodyfile="lib/CUDD/epd.c" bodystart="725" bodyend="772" declfile="include/CUDD/epd.h" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a7606666900d4f42bbcd1efda57b82fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdSubtract2</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2)</argsstring>
        <name>EpdSubtract2</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Subtracts two arbitrary precision double values.]</para>
<para>Description [Subtracts two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="173" column="13" bodyfile="lib/CUDD/epd.c" bodystart="787" bodyend="834" declfile="include/CUDD/epd.h" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a766747cec957171a7386fec2faf697cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdSubtract3</definition>
        <argsstring>(EpDouble *epd1, EpDouble *epd2, EpDouble *epd3)</argsstring>
        <name>EpdSubtract3</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd1</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd2</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Subtracts two arbitrary precision double values.]</para>
<para>Description [Subtracts two arbitrary precision double values.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="174" column="13" bodyfile="lib/CUDD/epd.c" bodystart="849" bodyend="901" declfile="include/CUDD/epd.h" declline="174" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ab698b565b8fe370d23a71a92f1cbd460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdPow2</definition>
        <argsstring>(int n, EpDouble *epd)</argsstring>
        <name>EpdPow2</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes arbitrary precision pow of base 2.]</para>
<para>Description [Computes arbitrary precision pow of base 2.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="175" column="13" bodyfile="lib/CUDD/epd.c" bodystart="916" bodyend="930" declfile="include/CUDD/epd.h" declline="175" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1aa69188dd624691e44c14889eba0cd9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdPow2Decimal</definition>
        <argsstring>(int n, EpDouble *epd)</argsstring>
        <name>EpdPow2Decimal</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Computes arbitrary precision pow of base 2.]</para>
<para>Description [Computes arbitrary precision pow of base 2.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="176" column="13" bodyfile="lib/CUDD/epd.c" bodystart="945" bodyend="961" declfile="include/CUDD/epd.h" declline="176" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ad588094bd12baaedfab1fbad84d7420c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdNormalize</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdNormalize</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Normalize an arbitrary precision double value.]</para>
<para>Description [Normalize an arbitrary precision double value.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="177" column="13" bodyfile="lib/CUDD/epd.c" bodystart="976" bodyend="991" declfile="include/CUDD/epd.h" declline="177" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a45a9a9a3701d4af7b895140082afd3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdNormalizeDecimal</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdNormalizeDecimal</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Normalize an arbitrary precision double value.]</para>
<para>Description [Normalize an arbitrary precision double value.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="178" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1006" bodyend="1018" declfile="include/CUDD/epd.h" declline="178" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a68035b2dfb78cbe313063cf282dc37ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdGetValueAndDecimalExponent</definition>
        <argsstring>(EpDouble *epd, double *value, int *exponent)</argsstring>
        <name>EpdGetValueAndDecimalExponent</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns value and decimal exponent of EpDouble.]</para>
<para>Description [Returns value and decimal exponent of EpDouble.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="179" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1033" bodyend="1053" declfile="include/CUDD/epd.h" declline="179" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1afd4116b28acd1c3104d2a42695aabbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdGetExponent</definition>
        <argsstring>(double value)</argsstring>
        <name>EpdGetExponent</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the exponent value of a double.]</para>
<para>Description [Returns the exponent value of a double.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="180" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1067" bodyend="1075" declfile="include/CUDD/epd.h" declline="180" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a0a74be42e849347477d9d77a7e3161ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdGetExponentDecimal</definition>
        <argsstring>(double value)</argsstring>
        <name>EpdGetExponentDecimal</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Returns the decimal exponent value of a double.]</para>
<para>Description [Returns the decimal exponent value of a double.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="181" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1090" bodyend="1099" declfile="include/CUDD/epd.h" declline="181" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ad7f335f4d08864f0998ddc0bf9144201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMakeInf</definition>
        <argsstring>(EpDouble *epd, int sign)</argsstring>
        <name>EpdMakeInf</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Makes EpDouble Inf.]</para>
<para>Description [Makes EpDouble Inf.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="182" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1114" bodyend="1121" declfile="include/CUDD/epd.h" declline="182" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ab56af3479962e2623017beaae0bc9e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMakeZero</definition>
        <argsstring>(EpDouble *epd, int sign)</argsstring>
        <name>EpdMakeZero</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Makes EpDouble Zero.]</para>
<para>Description [Makes EpDouble Zero.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="183" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1136" bodyend="1143" declfile="include/CUDD/epd.h" declline="183" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ab4a88d4bcd2b94aed8fb71d15b9cc5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdMakeNan</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdMakeNan</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Makes EpDouble NaN.]</para>
<para>Description [Makes EpDouble NaN.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="184" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1158" bodyend="1166" declfile="include/CUDD/epd.h" declline="184" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1ac3ef00334ae73b507ea891da35f2f946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EpdCopy</definition>
        <argsstring>(EpDouble *from, EpDouble *to)</argsstring>
        <name>EpdCopy</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Copies a EpDouble struct.]</para>
<para>Description [Copies a EpDouble struct.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="185" column="13" bodyfile="lib/CUDD/epd.c" bodystart="1181" bodyend="1185" declfile="include/CUDD/epd.h" declline="185" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a6b0e5f24e209e0312af28f27471faef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdIsInf</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdIsInf</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is Inf.]</para>
<para>Description [Checks whether the value is Inf.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="186" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1200" bodyend="1203" declfile="include/CUDD/epd.h" declline="186" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a06dc4a54a779ce88a43dcddf301bebd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdIsZero</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdIsZero</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is Zero.]</para>
<para>Description [Checks whether the value is Zero.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="187" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1218" bodyend="1224" declfile="include/CUDD/epd.h" declline="187" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a3536c078e406935aad14411b65d8e67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdIsNan</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdIsNan</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is NaN.]</para>
<para>Description [Checks whether the value is NaN.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="188" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1239" bodyend="1242" declfile="include/CUDD/epd.h" declline="188" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a70a359e29b615bcdfc1662fe2245992d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EpdIsNanOrInf</definition>
        <argsstring>(EpDouble *epd)</argsstring>
        <name>EpdIsNanOrInf</name>
        <param>
          <type><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref> *</type>
          <declname>epd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is NaN or Inf.]</para>
<para>Description [Checks whether the value is NaN or Inf.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="189" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1257" bodyend="1260" declfile="include/CUDD/epd.h" declline="189" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1aeda4ed6e719d13f84d757c9709f02ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IsInfDouble</definition>
        <argsstring>(double value)</argsstring>
        <name>IsInfDouble</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is Inf.]</para>
<para>Description [Checks whether the value is Inf.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="190" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1275" bodyend="1289" declfile="include/CUDD/epd.h" declline="190" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1a1208453615d2a105e5d8d55b2c4f3c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IsNanDouble</definition>
        <argsstring>(double value)</argsstring>
        <name>IsNanDouble</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is NaN.]</para>
<para>Description [Checks whether the value is NaN.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="191" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1304" bodyend="1317" declfile="include/CUDD/epd.h" declline="191" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="epd_8h_1aaf0d5247a708131ca7664c74e43d87c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IsNanOrInfDouble</definition>
        <argsstring>(double value)</argsstring>
        <name>IsNanOrInfDouble</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function********************************************************************</para>
<para>Synopsis [Checks whether the value is NaN or Inf.]</para>
<para>Description [Checks whether the value is NaN or Inf.]</para>
<para>SideEffects []</para>
<para>SeeAlso [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CUDD/epd.h" line="192" column="12" bodyfile="lib/CUDD/epd.c" bodystart="1332" bodyend="1344" declfile="include/CUDD/epd.h" declline="192" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_EPD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_EPD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constant<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPD_MAX_BIN<sp/>1023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPD_MAX_DEC<sp/>308</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPD_EXP_INF<sp/>0x7ff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Structure<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>EPD_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_double_struct" kindref="compound">IeeeDoubleStruct</ref><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>BIG_ENDIAN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign:<sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent:<sp/>11;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa0:<sp/>20;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa1:<sp/>32;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="struct_ieee_double_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_double_struct" kindref="compound">IeeeDoubleStruct</ref><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LITTLE_ENDIAN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa1:<sp/>32;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa0:<sp/>20;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent:<sp/>11;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign:<sp/>1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>EPD_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNanStruct</ref><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>BIG_ENDIAN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign:<sp/>1;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent:<sp/>11;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quiet_bit:<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa0:<sp/>19;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa1:<sp/>32;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_ieee_nan_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNanStruct</ref><sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>LITTLE_ENDIAN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa1:<sp/>32;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mantissa0:<sp/>19;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quiet_bit:<sp/>1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent:<sp/>11;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign:<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="union_ep_type_union" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_ep_type_union" kindref="compound">EpTypeUnion</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_double_struct" kindref="compound">IeeeDoubleStruct</ref><sp/><sp/><sp/>bits;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNanStruct</ref><sp/><sp/><sp/><sp/><sp/><sp/>nan;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="struct_ep_double_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ep_double_struct" kindref="compound">EpDoubleStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_ep_type_union" kindref="compound">EpTypeUnion</ref><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ep_double_struct" kindref="compound">EpDoubleStruct</ref><sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_double_struct" kindref="compound">IeeeDoubleStruct</ref><sp/><ref refid="struct_ieee_double_struct" kindref="compound">IeeeDouble</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNanStruct</ref><sp/><ref refid="struct_ieee_nan_struct" kindref="compound">IeeeNan</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_ep_type_union" kindref="compound">EpTypeUnion</ref><sp/><ref refid="union_ep_type_union" kindref="compound">EpType</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*EpdAlloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdCmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key2);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdFree(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdGetString(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdConvert(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMultiply(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMultiply2(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMultiply2Decimal(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMultiply3(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd3);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMultiply3Decimal(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd3);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdDivide(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdDivide2(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdDivide3(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd3);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdAdd(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdAdd2(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdAdd3(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd3);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdSubtract(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdSubtract2(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdSubtract3(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd1,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd2,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd3);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdPow2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdPow2Decimal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdNormalize(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdNormalizeDecimal(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdGetValueAndDecimalExponent(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*exponent);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdGetExponent(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdGetExponentDecimal(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMakeInf(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMakeZero(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdMakeNan(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EpdCopy(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*from,<sp/><ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*to);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdIsInf(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdIsZero(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdIsNan(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EpdIsNanOrInf(<ref refid="struct_ep_double_struct" kindref="compound">EpDouble</ref><sp/>*epd);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsInfDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsNanDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsNanOrInfDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_EPD<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/CUDD/epd.h"/>
  </compounddef>
</doxygen>
