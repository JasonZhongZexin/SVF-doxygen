.TH "md__r_e_a_d_m_e" 3 "Sun Feb 14 2021" "SVF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__r_e_a_d_m_e \- News 

.IP "\(bu" 2
\fB\fCVSFS\fP published in our \fCCGO paper\fP is now available in \fBSVF\fP \fP
.IP "\(bu" 2
\fB\fCTypeClone\fP published in our \fCECOOP paper\fP is now available in \fBSVF\fP \fP
.IP "\(bu" 2
\fB\fBSVF\fP now uses a single script for its build\&. Just type \fC\fCsource \&./build\&.sh\fP\fP in your terminal, that's it!\fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports LLVM-10\&.0\&.0! \fP
.IP "\(bu" 2
\fBWe thank \fCbsauce\fP for writing a user manual of \fBSVF\fP (\fClink1\fP and \fClink2\fP) in Chinese \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports LLVM-9\&.0\&.0 (Thank \fCByoungyoung Lee\fP for his help!)\&. \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports a set of \fCfield-sensitive pointer analyses\fP\&. \fP
.IP "\(bu" 2
\fB\fCUse SVF as an external lib\fP for your own project (Contributed by \fCHongxu Chen\fP)\&. \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports LLVM-7\&.0\&.0\&. \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports Docker\&. \fCTry SVF in Docker\fP! \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports \fCLLVM-6\&.0\&.0\fP (Contributed by \fCJack Anthony\fP)\&. \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports \fCLLVM-4\&.0\&.0\fP (Contributed by Jared Carlson\&. Thank \fCJared\fP and \fCWill\fP for their in-depth \fCdiscussions\fP about updating SVF!) \fP
.IP "\(bu" 2
\fB\fBSVF\fP now supports analysis for C++ programs\&.\fP 
.br

.PP
.SH "Documentation"
.PP
If you want to build the documentation yourself go into doc and invoke doxygen: 
.PP
.nf
cd doc && doxygen doxygen\&.config

.fi
.PP
.SS "We are looking for self-motivated PhD students and we welcome industry collaboration/sponsorship to improve SVF (Please contact yulei\&.sui@uts\&.edu\&.au if you are interested)"

.br
 
.br
 
.br
 \fBSVF\fP is a source code analysis tool that enables interprocedural dependence analysis for LLVM-based languages\&. \fBSVF\fP is able to perform pointer alias analysis, memory SSA form construction, value-flow tracking for program variables and memory error checking\&. 
.br
 
.br
.PP
About \fBSVF\fP   Setup Guide   User Guide   Developer Guide                 Introducing \fBSVF\fP -- \fCwhat it does\fP and \fChow we design it\fP   A step by step \fCsetup guide\fP to build \fBSVF\fP   Command-line options to \fCrun SVF\fP, get \fCanalysis outputs\fP, and test \fBSVF\fP with \fCan example\fP or \fCPTABen\fP   Detailed \fCtechnical documentation\fP and how to \fCwrite your own analyses\fP in \fBSVF\fP or \fCuse SVF as a lib\fP for your tool   
.PP

.br
 
.br
 
.PP
We release \fBSVF\fP source code in the hope of benefiting others\&. You are kindly asked to acknowledge usage of the tool by citing some of our publications listed http://svf-tools.github.io/SVF, especially the following two: 
.PP
.PP
.nf
@inproceedings{sui2016svf,
  title={SVF: interprocedural static value-flow analysis in LLVM},
  author={Sui, Yulei and Xue, Jingling},
  booktitle={Proceedings of the 25th international conference on compiler construction},
  pages={265--266},
  year={2016},
  organization={ACM}
}
.fi
.PP
.PP
.PP
.nf
@article{sui2014detecting,
  title={Detecting memory leaks statically with full-sparse value-flow analysis},
  author={Sui, Yulei and Ye, Ding and Xue, Jingling},
  journal={IEEE Transactions on Software Engineering},
  volume={40},
  number={2},
  pages={107--122},
  year={2014},
  publisher={IEEE}
}
.fi
.PP
 
