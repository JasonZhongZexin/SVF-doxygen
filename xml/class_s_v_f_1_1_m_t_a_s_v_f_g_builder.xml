<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder" kind="class" language="C++" prot="public">
    <compoundname>SVF::MTASVFGBuilder</compoundname>
    <basecompoundref refid="class_s_v_f_1_1_s_v_f_g_builder" prot="public" virt="non-virtual">SVF::SVFGBuilder</basecompoundref>
    <includes refid="_f_s_m_p_t_a_8h" local="no">FSMPTA.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a6a56d37d832ebe1d98ea32120b58bc1e" prot="public" static="no">
        <type>PointerAnalysis::CallSiteSet</type>
        <definition>typedef PointerAnalysis::CallSiteSet SVF::MTASVFGBuilder::CallSiteSet</definition>
        <argsstring></argsstring>
        <name>CallSiteSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="29" column="42" bodyfile="include/MTA/FSMPTA.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5bbc071046b2a81bd23ba084d30230e5" prot="public" static="no">
        <type>PointerAnalysis::CallEdgeMap</type>
        <definition>typedef PointerAnalysis::CallEdgeMap SVF::MTASVFGBuilder::CallEdgeMap</definition>
        <argsstring></argsstring>
        <name>CallEdgeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="30" column="42" bodyfile="include/MTA/FSMPTA.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a287359e6d0a4613e1a149a7ec11522b7" prot="public" static="no">
        <type>PointerAnalysis::FunctionSet</type>
        <definition>typedef PointerAnalysis::FunctionSet SVF::MTASVFGBuilder::FunctionSet</definition>
        <argsstring></argsstring>
        <name>FunctionSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="31" column="42" bodyfile="include/MTA/FSMPTA.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a467e7b445394acb735b1b24ce39e966a" prot="public" static="no">
        <type>Set&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> * &gt;</type>
        <definition>typedef Set&lt;const SVFGNode*&gt; SVF::MTASVFGBuilder::SVFGNodeSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="32" column="17" bodyfile="include/MTA/FSMPTA.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2d0e5077ce9ae6148845db607f086312" prot="public" static="no">
        <type>std::vector&lt; const <ref refid="class_s_v_f_1_1_v_f_g_node" kindref="compound">SVFGNode</ref> * &gt;</type>
        <definition>typedef std::vector&lt;const SVFGNode*&gt; SVF::MTASVFGBuilder::SVFGNodeVec</definition>
        <argsstring></argsstring>
        <name>SVFGNodeVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="33" column="25" bodyfile="include/MTA/FSMPTA.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a17da7e5da237c23873e17250d9746939" prot="public" static="no">
        <type>NodeBS</type>
        <definition>typedef NodeBS SVF::MTASVFGBuilder::SVFGNodeIDSet</definition>
        <argsstring></argsstring>
        <name>SVFGNodeIDSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="34" column="20" bodyfile="include/MTA/FSMPTA.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1acff9054fd525a5358532dd2e812171ce" prot="public" static="no">
        <type>Set&lt; const Instruction * &gt;</type>
        <definition>typedef Set&lt;const Instruction*&gt; SVF::MTASVFGBuilder::InstSet</definition>
        <argsstring></argsstring>
        <name>InstSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="35" column="17" bodyfile="include/MTA/FSMPTA.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aed3e0bf64c3ccb6bfd24e89cc6f89ed9" prot="public" static="no">
        <type>std::pair&lt; NodeID, NodeID &gt;</type>
        <definition>typedef std::pair&lt;NodeID,NodeID&gt; SVF::MTASVFGBuilder::NodeIDPair</definition>
        <argsstring></argsstring>
        <name>NodeIDPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="36" column="23" bodyfile="include/MTA/FSMPTA.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad0690ae934ea7a5e408cbd1aae15afc8" prot="public" static="no">
        <type>std::pair&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *, LockAnalysis::LockSpan &gt;</type>
        <definition>typedef std::pair&lt;const StmtSVFGNode*, LockAnalysis::LockSpan&gt; SVF::MTASVFGBuilder::SVFGNodeLockSpanPair</definition>
        <argsstring></argsstring>
        <name>SVFGNodeLockSpanPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="38" column="23" bodyfile="include/MTA/FSMPTA.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1abaf2fa1e72c4bc530862e65422fe1ea7" prot="public" static="no">
        <type>Map&lt; SVFGNodeLockSpanPair, bool &gt;</type>
        <definition>typedef Map&lt;SVFGNodeLockSpanPair, bool&gt; SVF::MTASVFGBuilder::PairToBoolMap</definition>
        <argsstring></argsstring>
        <name>PairToBoolMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="39" column="17" bodyfile="include/MTA/FSMPTA.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a019a4597074fdad6e51d936ed4ead0d9" prot="public" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t MTASVFGBuilder::numOfNewSVFGEdges</definition>
        <argsstring></argsstring>
        <name>numOfNewSVFGEdges</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of newly added <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="49" column="18" bodyfile="include/MTA/FSMPTA.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a0319d1d2e78c79f9943f2e2f65da26ed" prot="public" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t MTASVFGBuilder::numOfRemovedSVFGEdges</definition>
        <argsstring></argsstring>
        <name>numOfRemovedSVFGEdges</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="50" column="18" bodyfile="include/MTA/FSMPTA.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a07c3f5fa2e0092dac28521cf901a26cf" prot="public" static="yes" mutable="no">
        <type>u32_t</type>
        <definition>u32_t MTASVFGBuilder::numOfRemovedPTS</definition>
        <argsstring></argsstring>
        <name>numOfRemovedPTS</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="51" column="18" bodyfile="include/MTA/FSMPTA.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a772436f5edc7b4bed3a3e8f0e55ac5ce" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::MTASVFGBuilder::stnodeSet</definition>
        <argsstring></argsstring>
        <name>stnodeSet</name>
        <briefdescription>
<para>all stores/loads SVFGNodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="95" column="17" bodyfile="include/MTA/FSMPTA.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a6dfa9807255258f324557d188adea9b2" prot="private" static="no" mutable="no">
        <type>SVFGNodeSet</type>
        <definition>SVFGNodeSet SVF::MTASVFGBuilder::ldnodeSet</definition>
        <argsstring></argsstring>
        <name>ldnodeSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="96" column="17" bodyfile="include/MTA/FSMPTA.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a73024bf30aa3ec79e5953a7ea1f8feb7" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> *</type>
        <definition>MHP* SVF::MTASVFGBuilder::mhp</definition>
        <argsstring></argsstring>
        <name>mhp</name>
        <briefdescription>
<para><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="99" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a00bf5aaf3095bb271f2cbd3c35749ce2" prot="private" static="no" mutable="no">
        <type><ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref> *</type>
        <definition>LockAnalysis* SVF::MTASVFGBuilder::lockana</definition>
        <argsstring></argsstring>
        <name>lockana</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="100" column="18" bodyfile="include/MTA/FSMPTA.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a13ac51421add3cb242ad823e18938c95" prot="private" static="no" mutable="no">
        <type>Set&lt; NodeIDPair &gt;</type>
        <definition>Set&lt;NodeIDPair&gt; SVF::MTASVFGBuilder::recordedges</definition>
        <argsstring></argsstring>
        <name>recordedges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="102" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1c0de33bba2f05f14140d872c345ab38" prot="private" static="no" mutable="no">
        <type>Map&lt; NodeIDPair, PointsTo &gt;</type>
        <definition>Map&lt;NodeIDPair, PointsTo&gt; SVF::MTASVFGBuilder::edge2pts</definition>
        <argsstring></argsstring>
        <name>edge2pts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="103" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a26f850fc0fe434f1972c151d7c3ad9fd" prot="private" static="no" mutable="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *, SVFGNodeIDSet &gt;</type>
        <definition>Map&lt;const StmtSVFGNode*, SVFGNodeIDSet&gt; SVF::MTASVFGBuilder::prevset</definition>
        <argsstring></argsstring>
        <name>prevset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="106" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac909a7aa7de6cda8d2a89a9c7d2f4262" prot="private" static="no" mutable="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *, SVFGNodeIDSet &gt;</type>
        <definition>Map&lt;const StmtSVFGNode*, SVFGNodeIDSet&gt; SVF::MTASVFGBuilder::succset</definition>
        <argsstring></argsstring>
        <name>succset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="107" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac92452c257052706b1cf1737b266eec1" prot="private" static="no" mutable="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *, bool &gt;</type>
        <definition>Map&lt;const StmtSVFGNode*, bool&gt; SVF::MTASVFGBuilder::headmap</definition>
        <argsstring></argsstring>
        <name>headmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="109" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad55a5f1e1f6d8e99fc0be5b85bbf8599" prot="private" static="no" mutable="no">
        <type>Map&lt; const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *, bool &gt;</type>
        <definition>Map&lt;const StmtSVFGNode*, bool&gt; SVF::MTASVFGBuilder::tailmap</definition>
        <argsstring></argsstring>
        <name>tailmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="110" column="9" bodyfile="include/MTA/FSMPTA.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1af65f6553c6a7184401e249d777cd520e" prot="private" static="no" mutable="no">
        <type>PairToBoolMap</type>
        <definition>PairToBoolMap SVF::MTASVFGBuilder::pairheadmap</definition>
        <argsstring></argsstring>
        <name>pairheadmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="112" column="19" bodyfile="include/MTA/FSMPTA.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aa444ad49952922e1b862b75c4949de78" prot="private" static="no" mutable="no">
        <type>PairToBoolMap</type>
        <definition>PairToBoolMap SVF::MTASVFGBuilder::pairtailmap</definition>
        <argsstring></argsstring>
        <name>pairtailmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="113" column="19" bodyfile="include/MTA/FSMPTA.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a80353cd2e4f7f7f006071b59c2cb3b9b" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NOEDGE</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NOEDGE</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="116" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2be0c1f7cc8872a6f27431b33811cbea" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NONSPARSE</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NONSPARSE</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="117" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a80ce025ef719088c7aea9f2459a781d5" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_ALLOPT</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_ALLOPT</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="118" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a21b3ee74434730fc792624d2eae2b168" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NOMHP</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NOMHP</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="119" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a9b81d7b2c238d443acadc748c6bd018d" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NOALIAS</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NOALIAS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="120" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a82634524fba304c012980421b35ed8bd" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NOLOCK</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NOLOCK</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="121" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1adac31c16b9e84d3bee24ce09a82c467b" prot="private" static="yes" mutable="no">
        <type>const u32_t</type>
        <definition>const u32_t SVF::MTASVFGBuilder::ADDEDGE_NORP</definition>
        <argsstring></argsstring>
        <name>ADDEDGE_NORP</name>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="122" column="24" bodyfile="include/MTA/FSMPTA.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ae0cbe965ddbc511fb10e87fe8ae3912f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SVF::MTASVFGBuilder::MTASVFGBuilder</definition>
        <argsstring>(MHP *m, LockAnalysis *la)</argsstring>
        <name>MTASVFGBuilder</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_lock_analysis" kindref="compound">LockAnalysis</ref> *</type>
          <declname>la</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="41" column="5" bodyfile="include/MTA/FSMPTA.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5397f8f0a77e4b81509d2be36a4d1af0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SVF::MTASVFGBuilder::~MTASVFGBuilder</definition>
        <argsstring>()</argsstring>
        <name>~MTASVFGBuilder</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="46" column="13" bodyfile="include/MTA/FSMPTA.h" bodystart="46" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a3b75cd10a314c920669cd0d4790e1a16" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::buildSVFG</definition>
        <argsstring>()</argsstring>
        <name>buildSVFG</name>
        <reimplements refid="class_s_v_f_1_1_s_v_f_g_builder_1ae2d84f7527de200a2f269dc1c056a305">buildSVFG</reimplements>
        <briefdescription>
<para>Re-write create <ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="55" column="18" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="30" bodyend="42"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a55da7f1a8921727f84232e5905d6135f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::recordEdge</definition>
        <argsstring>(NodeID id1, NodeID id2, PointsTo pts)</argsstring>
        <name>recordEdge</name>
        <param>
          <type>NodeID</type>
          <declname>id1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>id2</declname>
        </param>
        <param>
          <type>PointsTo</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
<para>Record edges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="59" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="71" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2effeeac276a64d612fe6af08ec25b74" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::recordAddingEdge</definition>
        <argsstring>(NodeID id1, NodeID id2, PointsTo pts)</argsstring>
        <name>recordAddingEdge</name>
        <param>
          <type>NodeID</type>
          <declname>id1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>id2</declname>
        </param>
        <param>
          <type>PointsTo</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="60" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a97179139a6395a7062d3200c23d4b69d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::recordRemovingEdge</definition>
        <argsstring>(NodeID id1, NodeID id2, PointsTo pts)</argsstring>
        <name>recordRemovingEdge</name>
        <param>
          <type>NodeID</type>
          <declname>id1</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>id2</declname>
        </param>
        <param>
          <type>PointsTo</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="61" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a0ed91beb4d3442c0a78ea81bde8d41a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::performAddingMHPEdges</definition>
        <argsstring>()</argsstring>
        <name>performAddingMHPEdges</name>
        <briefdescription>
<para>perform adding/removing <ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> Edges in value flow graph </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="63" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a26b6750de23395a89767288b2eabb1ef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::performRemovingMHPEdges</definition>
        <argsstring>()</argsstring>
        <name>performRemovingMHPEdges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="64" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="128" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2e654f80c3680cd434fd04932a309a2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_s_v_f_1_1_v_f_g_edge" kindref="compound">SVFGEdge</ref> *</type>
        <definition>SVFGEdge * MTASVFGBuilder::addTDEdges</definition>
        <argsstring>(NodeID srcId, NodeID dstId, PointsTo &amp;pts)</argsstring>
        <name>addTDEdges</name>
        <param>
          <type>NodeID</type>
          <declname>srcId</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>dstId</declname>
        </param>
        <param>
          <type>PointsTo &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="65" column="14" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="108" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1010ef4fc52e312f2b22867a63a5810d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::connectMHPEdges</definition>
        <argsstring>(PointerAnalysis *pta)</argsstring>
        <name>connectMHPEdges</name>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
<para>Connect <ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref> indirect value-flow edges for two nodes that may-happen-in-parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>todo: we ignore rule 2 and 3. but so far I haven&apos;t added intra-thread value flow affected by fork and inter-thread value flow affected by join</para>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="67" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="688" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a82b52f8e70f51353cbd7476a509ff523" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreLoadNonSparse</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreLoadNonSparse</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="69" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="447" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a91ff57e51b0650963b4b5541fa0f7056" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreStoreNonSparse</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreStoreNonSparse</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="70" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="457" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a24921d1b1d79d7ef0b358be8d7a9e2c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreLoad</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreLoad</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref></para>
<para>Alias</para>
<para>Lock todo: we only consider all cxtstmt of one instruction in one lock span, otherwise we think this instruction is not locked This constrait is too strong. All cxt lock under different cxt cannot be identified.</para>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="72" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="466" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a29a14309cfa1d7c4454fb1237704e487" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreStore</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreStore</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_s_v_f_1_1_m_h_p" kindref="compound">MHP</ref></para>
<para>Alias</para>
<para>Lock</para>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="73" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="500" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aa861922932233ab547b63c87551b8fd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreLoadWithLockPrecisely</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreLoadWithLockPrecisely</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="75" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="529" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1802d8ed854bef817afa748d2bbcea05" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::handleStoreStoreWithLockPrecisely</definition>
        <argsstring>(const StmtSVFGNode *n1, const StmtSVFGNode *n2, PointerAnalysis *pta)</argsstring>
        <name>handleStoreStoreWithLockPrecisely</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type><ref refid="class_s_v_f_1_1_pointer_analysis" kindref="compound">PointerAnalysis</ref> *</type>
          <declname>pta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="76" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="570" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ae028fe894e3c6e7fd0ad6feeaa64320e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::mergeSpan</definition>
        <argsstring>(NodeBS comlocks, InstSet &amp;res)</argsstring>
        <name>mergeSpan</name>
        <param>
          <type>NodeBS</type>
          <declname>comlocks</declname>
        </param>
        <param>
          <type>InstSet &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="78" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="629" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5532751632ece036b3d6741908573b36" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::readPrecision</definition>
        <argsstring>()</argsstring>
        <name>readPrecision</name>
        <briefdescription>
<para>For o, n2-o-&gt;n1, n1 and n2 are write. Foreach n3:n1-&gt;n3, n2-&gt;n3; then remove n2-&gt;n1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="79" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="640" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a7b034f9f8f01823ecfb7f6c17e47b502" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SVFGNodeIDSet</type>
        <definition>MTASVFGBuilder::SVFGNodeIDSet MTASVFGBuilder::getPrevNodes</definition>
        <argsstring>(const StmtSVFGNode *n)</argsstring>
        <name>getPrevNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="81" column="19" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="326" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a7033805052c8fae5cd0104fdd9e345c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SVFGNodeIDSet</type>
        <definition>MTASVFGBuilder::SVFGNodeIDSet MTASVFGBuilder::getSuccNodes</definition>
        <argsstring>(const StmtSVFGNode *n)</argsstring>
        <name>getSuccNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="82" column="19" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="364" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a8164ae39b494115142767abc29cebd53" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SVFGNodeIDSet</type>
        <definition>MTASVFGBuilder::SVFGNodeIDSet MTASVFGBuilder::getSuccNodes</definition>
        <argsstring>(const StmtSVFGNode *n, NodeID o)</argsstring>
        <name>getSuccNodes</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>NodeID</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="83" column="19" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="402" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5c32c2f5038aab15ec2da50c7c99b405" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isHeadofSpan</definition>
        <argsstring>(const StmtSVFGNode *n, LockAnalysis::LockSpan lspan)</argsstring>
        <name>isHeadofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>LockAnalysis::LockSpan</type>
          <declname>lspan</declname>
        </param>
        <briefdescription>
<para>whether is a first write in the lock span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="85" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="184" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac8339229ade604f4205b111bfc99f23f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isTailofSpan</definition>
        <argsstring>(const StmtSVFGNode *n, LockAnalysis::LockSpan lspan)</argsstring>
        <name>isTailofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>LockAnalysis::LockSpan</type>
          <declname>lspan</declname>
        </param>
        <briefdescription>
<para>whether is a last write in the lock span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="86" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="267" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad0c3ea19875191721cd466fe85b91a8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isHeadofSpan</definition>
        <argsstring>(const StmtSVFGNode *n, InstSet mergespan)</argsstring>
        <name>isHeadofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>InstSet</type>
          <declname>mergespan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="87" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="208" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1af8ea2da28e9818d4f9e4e9528997f023" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isTailofSpan</definition>
        <argsstring>(const StmtSVFGNode *n, InstSet mergespan)</argsstring>
        <name>isTailofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>InstSet</type>
          <declname>mergespan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="88" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="249" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a4d36dc553bc87508b78add9b52ce9c2a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isHeadofSpan</definition>
        <argsstring>(const StmtSVFGNode *n)</argsstring>
        <name>isHeadofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether for all lockspans that n belongs to, n is the first write. strong constraints but scalable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="89" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="226" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a9c8681767551575a18ee141f7336db05" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MTASVFGBuilder::isTailofSpan</definition>
        <argsstring>(const StmtSVFGNode *n)</argsstring>
        <name>isTailofSpan</name>
        <param>
          <type>const <ref refid="class_s_v_f_1_1_stmt_v_f_g_node" kindref="compound">StmtSVFGNode</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether for all lockspans that n belongs to, n is the last write. strong constraints but scalable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="90" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="297" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a46d39980440040fc0ca50b3df7eead1a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MTASVFGBuilder::collectLoadStoreSVFGNodes</definition>
        <argsstring>()</argsstring>
        <name>collectLoadStoreSVFGNodes</name>
        <briefdescription>
<para>Collect all loads/stores SVFGNodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MTA/FSMPTA.h" line="92" column="10" bodyfile="lib/MTA/FSMPTA.cpp" bodystart="47" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_s_v_f_1_1_s_v_f_g" kindref="compound">SVFG</ref> builder for DDA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SVF::MTASVFGBuilder</label>
        <link refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SVF::SVFGBuilder</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="22">
        <label>SVF::MRGenerator</label>
        <link refid="class_s_v_f_1_1_m_r_generator"/>
      </node>
      <node id="1">
        <label>SVF::MTASVFGBuilder</label>
        <link refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>GenericICFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="7">
        <label>GenericCallGraphTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="8">
        <label>SVF::PAG</label>
        <link refid="class_s_v_f_1_1_p_a_g"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>SVF::SCCDetection&lt; GraphType &gt;</label>
        <link refid="class_s_v_f_1_1_s_c_c_detection"/>
      </node>
      <node id="11">
        <label>SVF::PTAStat</label>
        <link refid="class_s_v_f_1_1_p_t_a_stat"/>
      </node>
      <node id="17">
        <label>SVF::CommonCHGraph</label>
        <link refid="class_s_v_f_1_1_common_c_h_graph"/>
      </node>
      <node id="19">
        <label>SVF::MemSSA</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a"/>
        <childnode refid="20" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>mrGen</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SVF::SVFG</label>
        <link refid="class_s_v_f_1_1_s_v_f_g"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>pta</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mssa</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>SVF::ICFG</label>
        <link refid="class_s_v_f_1_1_i_c_f_g"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>SVF::MemSSAStat</label>
        <link refid="class_s_v_f_1_1_mem_s_s_a_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>SVF::GenericGraph&lt; PAGNode, PAGEdge &gt;</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="14">
        <label>SVF::SVFModule</label>
        <link refid="class_s_v_f_1_1_s_v_f_module"/>
      </node>
      <node id="10">
        <label>SVF::SVFGStat</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_stat"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>SVF::TypeSystem</label>
        <link refid="class_s_v_f_1_1_type_system"/>
      </node>
      <node id="2">
        <label>SVF::SVFGBuilder</label>
        <link refid="class_s_v_f_1_1_s_v_f_g_builder"/>
        <childnode refid="3" relation="usage">
          <edgelabel>globalSvfg</edgelabel>
          <edgelabel>svfg</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>SVF::VFG</label>
        <link refid="class_s_v_f_1_1_v_f_g"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>callgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>SVF::BVDataPTAImpl</label>
        <link refid="class_s_v_f_1_1_b_v_data_p_t_a_impl"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>SVF::PTACallGraph</label>
        <link refid="class_s_v_f_1_1_p_t_a_call_graph"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>GenericVFGTy</label>
        <link refid="class_s_v_f_1_1_generic_graph"/>
      </node>
      <node id="12">
        <label>SVF::PointerAnalysis</label>
        <link refid="class_s_v_f_1_1_pointer_analysis"/>
        <childnode refid="13" relation="usage">
          <edgelabel>callGraphSCC</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>svfMod</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>icfg</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ptaCallGraph</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>chgraph</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pag</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>typeSystem</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MTA/FSMPTA.h" line="25" column="1" bodyfile="include/MTA/FSMPTA.h" bodystart="26" bodyend="125"/>
    <listofallmembers>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a80ce025ef719088c7aea9f2459a781d5" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_ALLOPT</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a9b81d7b2c238d443acadc748c6bd018d" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NOALIAS</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a80353cd2e4f7f7f006071b59c2cb3b9b" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NOEDGE</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a82634524fba304c012980421b35ed8bd" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NOLOCK</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a21b3ee74434730fc792624d2eae2b168" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NOMHP</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2be0c1f7cc8872a6f27431b33811cbea" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NONSPARSE</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1adac31c16b9e84d3bee24ce09a82c467b" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ADDEDGE_NORP</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2e654f80c3680cd434fd04932a309a2d" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>addTDEdges</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a47591192260ddc3ff0717430f127cc95" prot="protected" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>build</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a54a713e3989597b11cee70864d0197bd" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildFullSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a7a43ae081645eb74fa48c136548f0809" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildFullSVFGWithoutOPT</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a49cee21be46d6a3f65eec638714038ed" prot="public" virt="virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildMSSA</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1ab7353191edd06568e2598177d253c1d9" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildPTROnlySVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a3b162da8dfb123cada7a13ce0c154a46" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildPTROnlySVFGWithoutOPT</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a3b75cd10a314c920669cd0d4790e1a16" prot="protected" virt="virtual"><scope>SVF::MTASVFGBuilder</scope><name>buildSVFG</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5bbc071046b2a81bd23ba084d30230e5" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>CallEdgeMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a6a56d37d832ebe1d98ea32120b58bc1e" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>CallSiteSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a46d39980440040fc0ca50b3df7eead1a" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>collectLoadStoreSVFGNodes</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1010ef4fc52e312f2b22867a63a5810d" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>connectMHPEdges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1c0de33bba2f05f14140d872c345ab38" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>edge2pts</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a287359e6d0a4613e1a149a7ec11522b7" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>FunctionSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a7b034f9f8f01823ecfb7f6c17e47b502" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>getPrevNodes</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a7033805052c8fae5cd0104fdd9e345c0" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>getSuccNodes</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a8164ae39b494115142767abc29cebd53" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>getSuccNodes</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1ad70dc4134a6290223b4168bde146b6d5" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>getSVFG</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a31b754a303116f33d679dfcd886c4bed" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>globalSvfg</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a24921d1b1d79d7ef0b358be8d7a9e2c4" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreLoad</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a82b52f8e70f51353cbd7476a509ff523" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreLoadNonSparse</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aa861922932233ab547b63c87551b8fd3" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreLoadWithLockPrecisely</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a29a14309cfa1d7c4454fb1237704e487" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreStore</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a91ff57e51b0650963b4b5541fa0f7056" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreStoreNonSparse</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a1802d8ed854bef817afa748d2bbcea05" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>handleStoreStoreWithLockPrecisely</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac92452c257052706b1cf1737b266eec1" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>headmap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1acff9054fd525a5358532dd2e812171ce" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>InstSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5c32c2f5038aab15ec2da50c7c99b405" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isHeadofSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad0c3ea19875191721cd466fe85b91a8c" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isHeadofSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a4d36dc553bc87508b78add9b52ce9c2a" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isHeadofSpan</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a9e8da6a516ed6598c66d81a0891fbb6e" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isSpuriousVFEdgeAtIndCallSite</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac8339229ade604f4205b111bfc99f23f" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isTailofSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1af8ea2da28e9818d4f9e4e9528997f023" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isTailofSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a9c8681767551575a18ee141f7336db05" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>isTailofSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a6dfa9807255258f324557d188adea9b2" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>ldnodeSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a00bf5aaf3095bb271f2cbd3c35749ce2" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>lockana</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a3f8fc56d5190ea59d06906b359640dae" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>markValidVFEdge</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ae028fe894e3c6e7fd0ad6feeaa64320e" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>mergeSpan</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a73024bf30aa3ec79e5953a7ea1f8feb7" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>mhp</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ae0cbe965ddbc511fb10e87fe8ae3912f" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>MTASVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aed3e0bf64c3ccb6bfd24e89cc6f89ed9" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>NodeIDPair</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a019a4597074fdad6e51d936ed4ead0d9" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>numOfNewSVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a07c3f5fa2e0092dac28521cf901a26cf" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>numOfRemovedPTS</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a0319d1d2e78c79f9943f2e2f65da26ed" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>numOfRemovedSVFGEdges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1af65f6553c6a7184401e249d777cd520e" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>pairheadmap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1aa444ad49952922e1b862b75c4949de78" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>pairtailmap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1abaf2fa1e72c4bc530862e65422fe1ea7" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>PairToBoolMap</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a0ed91beb4d3442c0a78ea81bde8d41a3" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>performAddingMHPEdges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a26b6750de23395a89767288b2eabb1ef" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>performRemovingMHPEdges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a26f850fc0fe434f1972c151d7c3ad9fd" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>prevset</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5532751632ece036b3d6741908573b36" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>readPrecision</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2effeeac276a64d612fe6af08ec25b74" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>recordAddingEdge</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a55da7f1a8921727f84232e5905d6135f" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>recordEdge</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a13ac51421add3cb242ad823e18938c95" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>recordedges</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a97179139a6395a7062d3200c23d4b69d" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>recordRemovingEdge</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a6e08e6a99f7e743abf35e603e35e54f5" prot="protected" virt="virtual"><scope>SVF::MTASVFGBuilder</scope><name>releaseMemory</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a9767f95253f02901da757076e3010b37" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>releaseSVFG</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a772436f5edc7b4bed3a3e8f0e55ac5ce" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>stnodeSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ac909a7aa7de6cda8d2a89a9c7d2f4262" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>succset</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a26bc3b9c07472e454bc567cd8746caef" prot="protected" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>svfg</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a003c6d9e13e5f73e0648d97400f1854e" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a640158fff237cb5afabdf1c5946550e0" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGEdgeSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a17da7e5da237c23873e17250d9746939" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGNodeIDSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad0690ae934ea7a5e408cbd1aae15afc8" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGNodeLockSpanPair</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a467e7b445394acb735b1b24ce39e966a" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGNodeSet</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a2d0e5077ce9ae6148845db607f086312" prot="public" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGNodeVec</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1a70de38086437635d2e44d2a0c9fdded9" prot="protected" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>SVFGWithIndCall</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1ad55a5f1e1f6d8e99fc0be5b85bbf8599" prot="private" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>tailmap</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1aa9b432dd72f1a39be142c4e2c2d51247" prot="protected" virt="non-virtual"><scope>SVF::MTASVFGBuilder</scope><name>vfEdgesAtIndCallSite</name></member>
      <member refid="class_s_v_f_1_1_m_t_a_s_v_f_g_builder_1a5397f8f0a77e4b81509d2be36a4d1af0" prot="public" virt="virtual"><scope>SVF::MTASVFGBuilder</scope><name>~MTASVFGBuilder</name></member>
      <member refid="class_s_v_f_1_1_s_v_f_g_builder_1af45232cbcffcaa4c7e05dab96553068f" prot="public" virt="virtual"><scope>SVF::MTASVFGBuilder</scope><name>~SVFGBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
